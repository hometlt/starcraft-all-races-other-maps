//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [2v1] Chain of Ascension
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "LibCOOC"
include "LibCOMI"
include "LibCOUI"
include "LibCOMU"
include "LibA8FDA37D"
include "Lib01833E95"
include "Lib860A1A1F"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libCOOC_InitLib();
    libCOMI_InitLib();
    libCOUI_InitLib();
    libCOMU_InitLib();
    libA8FDA37D_InitLib();
    lib01833E95_InitLib();
    lib860A1A1F_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_14_DARKMIRROR = 14;
const int gv_pLAYER_11_ANTAGONIST = 11;
const fixed gv__3P_AIChoiceCost = 500.0;
const int gv__3P_Heroes_MaxActive = 5;
const int gv__3P_KillDialogMaxItems = 4;
const int gv__3P_SlaynKillBonusAmount = 50;
const int gv__3P_JinaraKillBonusAmount = 100;
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_USER = 2;
const int gv_pLAYER_03_EnemyP01 = 3;
const int gv_pLAYER_04_EnemyP02 = 4;
const int gv_pLAYER_05_EnemyP01_TugOfWarPath = 5;
const int gv_pLAYER_06_EnemyP02_TugOfWarPath = 6;
const int gv_pLAYER_08_JINARA = 8;
const int gv_pLAYER_09_AMONS_CHAMPION = 9;
const int gv_pLAYER_10_ELEMENTAL = 10;
const int gv_tugOfWar_WaypointMax = 22;
const fixed gv_c_SkipIfNotPlayedIn = 2.0;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs__3P_UnitRecord {
    string lv_unitType;
    point lv_unitPosition;
    fixed lv_unitFacing;
    int lv_unitOwner;
};

struct gs__3P_Mutators {
    string[31][2] lv_upgrade;
    fixed[31][2] lv_cost;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge__3P_VictoryType_BaseDestroyed = 0;
const int ge__3P_VictoryType_JinaraKilled = 1;
const int ge_TugOfWarState_Paused = 0;
const int ge_TugOfWarState_Forward = 1;
const int ge_TugOfWarState_Hold = 2;
const int ge_TugOfWarState_Reverse = 3;
const int ge_TugOfWarState_ReverseSuper = 4;
const int ge_TugOfWarState_EventControlled = 5;
const int ge_HybridAttack_Attack01 = 0;
const int ge_HybridAttack_Attack02 = 1;
const int ge_HybridAttack_Attack03 = 2;
const int ge_HybridAttack_Attack04 = 3;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
string gv__3P_ActiveRace;
gs__3P_UnitRecord[501] gv__3P_ProtossRecord;
gs__3P_UnitRecord[501] gv__3P_ZergRecord;
gs__3P_UnitRecord[501] gv__3P_TerranRecord;
int gv__3P_TotalMined;
int gv__3P_TotalAddedFrom;
fixed gv_tugOfWar_Speed_3P_Mod;
playergroup gv__3P_AntagonistPG;
playergroup gv__3P_CommandersPG;
int gv__3P_AIChoiceDialog;
int gv__3P_AIChoiceOKButton;
int gv__3P_AIChoiceCancelButton;
int gv__3P_AIChoiceListBox;
string[21] gv__3P_AIChoicePersonalities;
unit gv__3P_AmonCasterUnit;
gs__3P_Mutators gv__3P_Mutators;
int[2] gv__3P_MutatorAvailable;
int gv__3P_MutatorsActive;
fixed gv__3P_MutatorsActiveValue;
unit gv__3P_MainShard;
unitgroup gv__3P_Shards;
unitgroup gv__3P_ShardFragments;
unitgroup gv__3P_VoidEnergyReservoirs;
int gv__3P_IncomeRateDialogItem;
unitgroup gv__3P_LastCreatedHeroes;
int gv__3P_Heroes_Dialog;
int[11] gv__3P_Heroes_CheckBox;
int[10] gv__3P_Heroes_Label;
int gv__3P_Heroes_NumberOfCheckedItems;
int[10] gv__3P_Heroes_PurchaseOrder;
int gv__3P_Heroes_NumberOfPurchasedHeroes;
bool[10] gv__3P_Heroes_Active;
bool[10] gv__3P_Heroes_Purchased;
unitgroup gv__3P_LastBaseUG;
fixed gv__3P_LastBaseTotalHealth;
int gv__3P_TutorialCommanders;
int gv__3P_TutorialAntagonist;
bool gv__3P_TutorialExperiencedPlayer;
fixed gv__3P_BankSupplyKilledInitialValue;
fixed gv__3P_KillStreak;
timer gv__3P_KillTimer;
int[6] gv__3P_KillDialogItem;
int gv__3P_KillDialog;
int gv__3P_QuitButton;
int gv__3P_StartTimerDialog;
bool gv__3P_Started;
unit gv_jinara;
unit gv_amonsChampion;
unit gv_tugOfWarEscortTargetUnit;
unitgroup gv_tugOfWarEscortTargetUnitGroup;
unit gv_tugOfWarBubbleUnit;
unit gv_p02_SuperWarpGate;
unit gv_p03_SuperWarpGate;
unit gv_p04_SuperWarpGate;
unit gv_p05_SuperWarpGate;
unit gv_p06_SuperWarpGate;
string gv_mapMusicTrack;
playergroup gv_enemyPlayerGroup;
bool gv_gameHasBegun;
int gv_optionsDialog;
int gv_optionsDialogTitle;
int[4] gv_optionsDialogLabels;
int[4] gv_optionsDialogMenus;
int gv_optionsDialogAccept;
bank gv_savedBank;
int gv_options_Wave;
int gv_options_Boss;
int gv_options_Enforcer1;
int gv_options_Enforcer2;
int gv_tugOfWar_State;
int gv_tugOfWar_ForwardWaypoint;
int gv_tugOfWar_ReverseWaypoint;
int gv_tugOfWar_Waypoint_FarthestForward;
int gv_tugOfWar_Ping;
bool gv_tugOfWar_Presence_P1;
bool gv_tugOfWar_Presence_P2;
bool gv_tugOfWar_Presence_EnemyAI;
bool gv_tugOfWar_Presence_SuperPushers;
fixed gv_tugOfWar_Presence_Check_Humans;
fixed gv_tugOfWar_Presence_Check_EnemyAI;
bool gv_finalHybridWaveDefeated;
timer gv_announcerLineCooldown;
fixed gv_c_AnnouncerLineCooldown_Amount;
timer gv_losingGroundTimer01;
timer gv_losingGroundTimer02;
int gv_tugOfWarLosingGround01Count;
int gv_tugOfWarLosingGround02Count;
timer gv_reminderToSupportTimer;
unitgroup gv_hybridSuperPushers;
bool gv_hybridSuperPusherState_Current;
bool gv_hybridSuperPusherState_Previous;
fixed gv_hybridReverseSpeedModifier;
unit gv_hybridSuperPusherFX;
fixed gv_elementalMaxDisableCooldown;
unit gv_slaynElemental01;
unit gv_slaynElemental02a;
unit gv_slaynElemental02b;
timer gv_attackWaveTime;
fixed gv_c_EscortWavePreTime;
playergroup gv_escortWavePlayers;
fixed gv_c_AttackWavePreTime;
playergroup gv_attackWavePlayers;
bool gv_attackWave_Player01First;
int gv_hybridPusherPlayer;
string gv_hybridPusher_Boss;
string gv_hybridPusher_Enforcer01;
string gv_hybridPusher_Enforcer02;
fixed[5] gv_hybridPushTimeFailure;
fixed[5] gv_hybridPush_DelayAttacks;
fixed gv_hybridReverseSpeed;
timer[5] gv_hybridPushTriggerTemporal;
region[5] gv_hybridPushTriggerSpacial;
string gv_tugOfWarPointName;
int gv_bestForwardPushTime;
fixed gv_totalDistanceJinaraPushedBack;
int gv__3P_ObjectiveKillUnits;
int gv__3P_ObjectiveDefendVoidShard;
fixed gv__3P_SuppliesKilled;
fixed gv__3P_MineralsKilled;
fixed gv__3P_VespeneKilled;
fixed gv__3P_SuppliesMadeKilled;
bool gv__3P_ObjectiveKillUnitsActive;
int gv__3P_ObjectiveKillJinara;
int gv_objectiveKillAmonsChampion;
int gv_objectiveJinaraMustSurvive;
int gv_objectiveKillSlaynElementals;
int gv_objectiveDefendSlaynElemental;
int gv_objectiveElementalsKilledCount;
int gv_objectiveElementalsMax;
bool gv_objectiveElementalWriteOutComplete01;
int gv_objectiveKillSlaynElementals02;
int gv_objectiveDefendSlaynElemental02;
bool gv_objectiveElementalWriteOutComplete02;

void InitGlobals () {
    int init_i;

    gv__3P_ActiveRace = "Terr";
    gv_tugOfWar_Speed_3P_Mod = 0.3;
    gv__3P_AntagonistPG = PlayerGroupEmpty();
    gv__3P_CommandersPG = PlayerGroupEmpty();
    gv__3P_AIChoiceDialog = c_invalidDialogId;
    gv__3P_AIChoiceOKButton = c_invalidDialogControlId;
    gv__3P_AIChoiceCancelButton = c_invalidDialogControlId;
    gv__3P_AIChoiceListBox = c_invalidDialogControlId;
    gv__3P_MainShard = UnitFromId(2070725825);
    gv__3P_Shards = UnitGroupEmpty();
    gv__3P_ShardFragments = UnitGroupEmpty();
    gv__3P_VoidEnergyReservoirs = UnitGroupEmpty();
    gv__3P_IncomeRateDialogItem = c_invalidDialogControlId;
    gv__3P_LastCreatedHeroes = UnitGroupEmpty();
    gv__3P_Heroes_Dialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv__3P_Heroes_CheckBox[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv__3P_Heroes_Label[init_i] = c_invalidDialogControlId;
    }
    gv__3P_LastBaseUG = UnitGroupEmpty();
    gv__3P_TutorialCommanders = c_invalidDialogId;
    gv__3P_TutorialAntagonist = c_invalidDialogControlId;
    gv__3P_KillTimer = TimerCreate();
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv__3P_KillDialogItem[init_i] = c_invalidDialogControlId;
    }
    gv__3P_KillDialog = c_invalidDialogId;
    gv__3P_QuitButton = c_invalidDialogControlId;
    gv__3P_StartTimerDialog = c_invalidDialogId;
    gv_jinara = UnitFromId(240);
    gv_amonsChampion = UnitFromId(1198);
    gv_tugOfWarEscortTargetUnit = UnitFromId(949);
    gv_tugOfWarEscortTargetUnitGroup = UnitGroupEmpty();
    gv_tugOfWarBubbleUnit = UnitFromId(1236);
    gv_p02_SuperWarpGate = UnitFromId(856);
    gv_p03_SuperWarpGate = UnitFromId(855);
    gv_p04_SuperWarpGate = UnitFromId(58);
    gv_p05_SuperWarpGate = UnitFromId(1240);
    gv_p06_SuperWarpGate = UnitFromId(312);
    gv_enemyPlayerGroup = PlayerGroupEmpty();
    gv_optionsDialog = c_invalidDialogId;
    gv_optionsDialogTitle = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_optionsDialogLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_optionsDialogMenus[init_i] = c_invalidDialogControlId;
    }
    gv_optionsDialogAccept = c_invalidDialogControlId;
    gv_options_Wave = 1;
    gv_options_Boss = 1;
    gv_options_Enforcer1 = 1;
    gv_options_Enforcer2 = 1;
    gv_tugOfWar_State = ge_TugOfWarState_Paused;
    gv_tugOfWar_Ping = c_invalidPingId;
    gv_announcerLineCooldown = TimerCreate();
    gv_c_AnnouncerLineCooldown_Amount = 90.0;
    gv_losingGroundTimer01 = TimerCreate();
    gv_losingGroundTimer02 = TimerCreate();
    gv_reminderToSupportTimer = TimerCreate();
    gv_hybridSuperPushers = UnitGroupEmpty();
    gv_hybridSuperPusherState_Current = true;
    gv_hybridSuperPusherState_Previous = true;
    gv_attackWaveTime = TimerCreate();
    gv_escortWavePlayers = PlayerGroupEmpty();
    gv_c_AttackWavePreTime = 240.0;
    gv_attackWavePlayers = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_hybridPushTriggerTemporal[init_i] = TimerCreate();
    }
    gv_tugOfWarPointName = "PathWaypoint";
    gv__3P_ObjectiveKillUnits = c_invalidObjectiveId;
    gv__3P_ObjectiveDefendVoidShard = c_invalidObjectiveId;
    gv__3P_ObjectiveKillJinara = c_invalidObjectiveId;
    gv_objectiveKillAmonsChampion = c_invalidObjectiveId;
    gv_objectiveJinaraMustSurvive = c_invalidObjectiveId;
    gv_objectiveKillSlaynElementals = c_invalidObjectiveId;
    gv_objectiveDefendSlaynElemental = c_invalidObjectiveId;
    gv_objectiveElementalsMax = 2;
    gv_objectiveKillSlaynElementals02 = c_invalidObjectiveId;
    gv_objectiveDefendSlaynElemental02 = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf__3P_SaveTotalMined (fixed lp_time, int lp_number);
void gf__3P_SendMissionTransmission (string lp_transmissionType, bool lp_waitUntilDone, int lp_sourcePlayer);
bool gf__3P_HybridPlaying ();
void gf__3P_DisableLongRangeAbilities (unit lp_pUnit);
void gf__3P_SetLocalDefender (unit lp_pUnit);
void gf__3P_SetTargetDefender (unit lp_pUnit, point lp_pPoint);
void gf__3P_DropPodWarpInUnitGroup (unitgroup lp_dropPodUnits, point lp_dropLocation);
bool gf__3P_MacroStructure (unit lp_pUnit);
void gf__3P_DisableMacroAbilitiesINIT ();
void gf__3P_DisableMacroAbilities (unit lp_pUnit);
bool gf__3P_AIOwner (unit lp_pUnit);
void gf_CU_PrestigeBriefReveal ();
void gf__3P_AIChoiceDisplay (int lp_player);
void gf__3P_AIChoiceCreate ();
void gf__3P_AIChoiceInitFromData ();
void gf__3P_AIChoiceClose (int lp_player);
void gf__3P_CustomAISet (int lp_player, int lp_aIEnemy, string lp_personalityUserData);
string gf__3P_AIChoiceSelectedPersonality (int lp_player);
void gf__3P_GlobalCasterCreateUnit (int lp_player);
void gf__3P_GPSetUnit (unit lp_casterUnit, int lp_player);
void gf__3P_GPInitAmon (int lp_player);
void gf__3P_UnitCreationManualFix (unit lp_pUnit);
void gf__3P_ApplyJustDieFix (unit lp_createdUnit);
void gf__3P_ApplyBarrierFix (unit lp_damagedUnit, unit lp_damagingUnit);
void gf__3P_ApplyPhotonOverloadFix (unit lp_damagedUnit, unit lp_damagingUnit);
void gf__3P_CreateVoidEnergyReservoir (fixed lp_pTime, int lp_pMinDistance, int lp_pMaxDistance);
void gf__3P_HeroActivate (int lp_pHero);
void gf__3P_CreateHeroes (point lp_pPoint, int lp_pPlayer);
void gf__3P_SetupAttackWave (unitgroup lp_pWaveGroup);
void gf__3P_WaveCreationFix (unitgroup lp_pWaveGroup);
void gf__3P_HybridBodyguardsSetup (unitgroup lp_waveGroup);
void gf__3P_HybridPushersSetUp (unitgroup lp_waveGroup);
void gf__3P_DialogCounting (int lp_pFrom, int lp_pTo, fixed lp_pTime, int lp_pDialogLabel, text lp_pTextBefore, text lp_pTextAfter, playergroup lp_pPlayers);
void gf__3P_AmonVictoryFanfare (int lp_victoryType);
void gf__3P_AmonMissionEndFanfare ();
void gf__3P_EarlyStart ();
void gf_RunTriggeratMissionTime (fixed lp_time, trigger lp_trigger);
string gf_FormatIntegerIntoMultiDigitString (int lp_integer, int lp_digits);
unitgroup gf_GetSupportingUnitsNearJinara (int lp_player, int lp_count);
unitgroup gf_GetPushingUnitsNearAmonsChampion (int lp_count);
fixed gf_TugOfWarGetSpeed (int lp_state);
void gf_HybridSuperPusherFXLogic (unit lp_superPusher);
bool gf_HybridcanSuperPush (unit lp_hybrid);
void gf_SlaynElementalKilled (unit lp_killedElemental);
void gf_RunSlaynElementalAI (unit lp_cHOSEN_UNIT, region lp_cHOSEN_REGION, int lp_wAYPOINT_MAX);
fixed gf_AttackWaveMissionTime ();
void gf_EscortWaveatTime (fixed lp_time, trigger lp_aIEscortWave);
void gf_EscortWaveSetup (int lp_player, region lp_regionToWarpIn);
region gf_GetEscortWarpInRegion ();
void gf_EscortWaveSend (int lp_waveTechLevel, int lp_waveResourceAmount, region lp_dropInArea);
void gf_AttackWaveatTime (fixed lp_time, trigger lp_aIAttackWave);
point gf_AttackWaveDestination (int lp_player);
void gf_SetSingleAttackWavePath (region lp_spawnLocation);
void gf_SetDoubleAttackWavePath (int lp_attackingPlayer, region lp_spawnLocation);
region gf_GetAttackWarpInRegion (region lp_desiredSpawn);
void gf_SendSingleTargetDoubleWave (int lp_waveTechLevel, int lp_waveResourceAmount, region lp_dropInLocation);
point gf_GetPathWaypoint (int lp_pathIndex);
unitgroup gf_CreateHybridPusherGroup (int lp_attackWave, point lp_spawnLocation);
void gf_AssignGuardLocations (unit lp_guardedUnit, unitgroup lp_guards, fixed lp_baseDistance, fixed lp_angularSpacing, fixed lp_guardsPerRow);
void gf_PingHybridSuperPushers (unitgroup lp_attackWave);
void gf_DelayAttackandEscortWaves (fixed lp_delayTime);
void gf_PushersInfluencePings (unitgroup lp_channelingUnits);
fixed gf_DistanceToFailurefromPoint (point lp_testLocation);
void gf_CreateWarpInEffect (unit lp_unit);
void gf_AIDiamondback (int lp_owner, unit lp_diamondback, unitgroup lp_nearbyUnits);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt__3P_RaceSwitch;
trigger gt__3P_DebugStart;
trigger gt__3P_TotalVoidEnergyMined;
trigger gt__3P_Prunemanual;
trigger gt_CTRLAMove;
trigger gt_CTRLBMissionEndFanfare;
trigger gt_CTRLC;
trigger gt_CTRLDCreateSomeunits;
trigger gt_CTRLECustomWave;
trigger gt_CTRLFWave7;
trigger gt_CTRLGControl;
trigger gt_CTRLH;
trigger gt_CTRLIResources;
trigger gt_CTRLJJinaraDefeatedPlus;
trigger gt_CTRLKPingLoc;
trigger gt_CTRLLAttack;
trigger gt_CTRLM;
trigger gt__3P_TransmissionSend;
trigger gt__3P_UnitCreated;
trigger gt__3P_RevealPrestigestoAmon;
trigger gt__3P_Show;
trigger gt__3P_AIChoiceOK;
trigger gt__3P_AIChoiceCancel;
trigger gt__3P_Duplicate;
trigger gt__3P_Empower;
trigger gt__3P_Gorgon;
trigger gt__3P_Barrier;
trigger gt__3P_Targeting;
trigger gt__3P_BarrierCreated;
trigger gt__3P_MutatorPricesFill;
trigger gt__3P_MutatorPurchased;
trigger gt__3P_MutatorPriceStarted;
trigger gt__3P_MutatorPriceCancelled;
trigger gt__3P_UnitChangesOwner;
trigger gt__3P_UnitCreationFix;
trigger gt__3P_UnitDamageFix;
trigger gt__3P_JustDieSearchFix;
trigger gt__3P_InitializeLongRangeFix;
trigger gt__3P_InitializeBlackFogFix;
trigger gt__3P_InitializeMissileBarrageFix;
trigger gt__3P_MissileBarrage;
trigger gt__3P_DarkMirrorFix;
trigger gt__3P_NecronomiconFixA;
trigger gt__3P_NectonomiconFixB;
trigger gt__3P_Properlysetalliances;
trigger gt__3P_TemporaryOwnershipandLeash;
trigger gt__3P_GlobalLeashCheck;
trigger gt__3P_AmonTempUnitsAttacked;
trigger gt__3P_UpgradeParity;
trigger gt__3P_StructureReposition;
trigger gt__3P_DisableAIcontrol;
trigger gt__3P_WorkerPreventRegion;
trigger gt__3P_ResourcesfromShardsDuplicateCharge;
trigger gt__3P_AmonVoidEnergyGain;
trigger gt__3P_SetUpEcoUI;
trigger gt__3P_ShardFragmentCreated;
trigger gt__3P_ShardFragmentDies;
trigger gt__3P_SalvageVoidShardFragmentCD;
trigger gt__3P_CreateIncomeRateDialog;
trigger gt__3P_HeroPurchased;
trigger gt__3P_KaraxFix;
trigger gt__3P_Heroes_Create;
trigger gt__3P_Heroes_Open;
trigger gt__3P_Heroes_Update;
trigger gt__3P_Heroes_Close;
trigger gt__3P_Heroes_UpdateChooseActiveHeroesTooltip;
trigger gt__3P_LastBaseInit;
trigger gt__3P_HybridPushersEarly;
trigger gt__3P_GlobalSuicide;
trigger gt__3P_TutorialInit;
trigger gt__3P_TutorialTutorialCommandersCreate;
trigger gt__3P_Tutorial;
trigger gt__3P_TutorialCreatesaShard;
trigger gt__3P_TutorialKeepSelectingMainShard;
trigger gt__3P_TutorialAttackWaveSpawned;
trigger gt__3P_TutorialAIChoice;
trigger gt__3P_TutorialTutorialClose;
trigger gt__3P_TutorialHeroPresent;
trigger gt__3P_TutorialWelcome;
trigger gt__3P_DifficultySetUp;
trigger gt__3P_Prunefordifficulties;
trigger gt__3P_SpeedSetUp;
trigger gt__3P_BankInitialize;
trigger gt__3P_SynchronizeBank;
trigger gt__3P_Jinaradefeatedsync;
trigger gt__3P_Showoff;
trigger gt__3P_KillNotificationsCreate;
trigger gt__3P_KillNotificationsUpdate;
trigger gt__3P_KillNotificationsFade;
trigger gt__3P_QuitButtonUsed;
trigger gt__3P_VoidShardDestroyed;
trigger gt__3P_PlayerLeaves;
trigger gt__3P_CreateStartTimerDialog;
trigger gt__3P_Quicken;
trigger gt__3P_StrengthenChampion;
trigger gt__3P_Start;
trigger gt__3P_RaceInit;
trigger gt__3P_Mapinit;
trigger gt__3P_BeforeIntro;
trigger gt__3P_AfterIntro;
trigger gt__3P_Revealrocksunitsinbetween;
trigger gt_TW_Main_Thread_Player01;
trigger gt_TW_Main_Thread_Player02;
trigger gt_TW_Main_Thread_Player11;
trigger gt_Init02Players;
trigger gt_Init03LoadingComplete;
trigger gt_Init04Technology;
trigger gt_Init05Units;
trigger gt_Init06MusicSound;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_SleepInactiveUnits;
trigger gt_Init01LoadData;
trigger gt_StartAI;
trigger gt_StartGameQ;
trigger gt_RunBonusObjective;
trigger gt_RevealFinalBaseQ;
trigger gt_TugOfWarInitialize;
trigger gt_TugOfWarController;
trigger gt_TugOfWarStateUpdate;
trigger gt_TugOfWarMoveBossTarget;
trigger gt_TugOfWarJinaraAmonsChampionAttackLogic;
trigger gt_TugOfWarFirstTimePlayerAtTugOfWarQ;
trigger gt_TugOfWarFirstTimeEnemyAtTugOfWarQ;
trigger gt_TugOfWarLosingGround01WarningQ;
trigger gt_TugOfWarLosingGround02WarningQ;
trigger gt_TugOfWarDefeatImminentWarningQ;
trigger gt_TugOfWarVictoryImminentQ;
trigger gt_ForcesDestroyedWatcher;
trigger gt_ForcesDestroyedPlayerTransmissionQ;
trigger gt_ForcesDestroyedEnemyTransmissionQ;
trigger gt_RemindertoSupportTransmissionQ;
trigger gt_TugOfWarHybridSuperPusher;
trigger gt_TugOfWarHybridSappingStrengthQ;
trigger gt_SlaynElemental01Create;
trigger gt_SlaynElemental02aCreate;
trigger gt_SlaynElemental02bCreate;
trigger gt_CritterDies;
trigger gt_SlaynElementalCocoonQ;
trigger gt_SlaynElementalEscapesQ;
trigger gt_SlaynElementalGoingtoEscapeQ;
trigger gt_SlaynElementalKilledFirstQ;
trigger gt_SlaynElementalKilledLastQ;
trigger gt_PickFirstAttackWaveTarget;
trigger gt_RunAIWaves;
trigger gt_EscortWaveTransmissionQ;
trigger gt_EscortWave01;
trigger gt_EscortWave02;
trigger gt_EscortWave03;
trigger gt_EscortWave04;
trigger gt_EscortWave05;
trigger gt_EscortWave06;
trigger gt_EscortWave07;
trigger gt_EscortWave08;
trigger gt_EscortWave09;
trigger gt_EscortWave10;
trigger gt_EscortWave11;
trigger gt_EscortWave12;
trigger gt_EscortWave13;
trigger gt_EscortWave14;
trigger gt_EscortWave15;
trigger gt_EscortWave16;
trigger gt_EscortWave17;
trigger gt_EscortWave18;
trigger gt_EscortWave19;
trigger gt_EscortWave20;
trigger gt_EscortWave21;
trigger gt_EscortWave22;
trigger gt_EscortWave23;
trigger gt_AttackWaveTransmissionQ;
trigger gt_AttackWave01SingleWave;
trigger gt_AttackWave02SingleWave;
trigger gt_AttackWave03SingleWave;
trigger gt_AttackWave04SingleWave;
trigger gt_AttackWave05DoubleWave;
trigger gt_AttackWave06DoubleWave;
trigger gt_AttackWave07DoubleWave;
trigger gt_SetupHybridPusherHybridTypes;
trigger gt_RunHybridPushers;
trigger gt_HybridPushers01;
trigger gt_HybridPushers02;
trigger gt_HybridPushers03;
trigger gt_HybridPushers04;
trigger gt_SetEffortValues;
trigger gt_AIGiveResources;
trigger gt_DefeatBaseDead;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryAmonsChampionDefeatedCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_VictoryFanfareQ;
trigger gt_DefeatFanfare;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_Defeat;
trigger gt__3P_VictoryQuit;
trigger gt_StatForwardPushTime;
trigger gt_StatPushBackDistance;
trigger gt_TipReadyQ;
trigger gt__3P_ObjectiveKillUnitsCreate;
trigger gt__3P_ObjectiveKillUnitsUpdate;
trigger gt__3P_ObjectiveKillJinaraCreate;
trigger gt_ObjectiveKillAmonsChampionCreate;
trigger gt_ObjectiveKillAmonsChampionComplete;
trigger gt_ObjectiveKillAmonsChampionFailed;
trigger gt_ObjectiveJinaraMustSurviveCreate;
trigger gt_ObjectiveJinaraMustSurviveComplete;
trigger gt_ObjectiveJinaraMustSurviveFailed;
trigger gt_ObjectiveKillSlaynElementalsCreate;
trigger gt_ObjectiveKillSlaynElementalsComplete;
trigger gt_ObjectiveKillSlaynElementalsFailed;
trigger gt_ObjectiveKillSlaynElementalsCreate02;
trigger gt_ObjectiveKillSlaynElementalsComplete02;
trigger gt_ObjectiveKillSlaynElementalsFailed02;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf__3P_SaveTotalMined_Trigger = null;
fixed auto_gf__3P_SaveTotalMined_lp_time;
int auto_gf__3P_SaveTotalMined_lp_number;

void gf__3P_SaveTotalMined (fixed lp_time, int lp_number) {
    auto_gf__3P_SaveTotalMined_lp_time = lp_time;
    auto_gf__3P_SaveTotalMined_lp_number = lp_number;

    if (auto_gf__3P_SaveTotalMined_Trigger == null) {
        auto_gf__3P_SaveTotalMined_Trigger = TriggerCreate("auto_gf__3P_SaveTotalMined_TriggerFunc");
    }

    TriggerExecute(auto_gf__3P_SaveTotalMined_Trigger, false, false);
}

bool auto_gf__3P_SaveTotalMined_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_time = auto_gf__3P_SaveTotalMined_lp_time;
    int lp_number = auto_gf__3P_SaveTotalMined_lp_number;

    // Automatic Variable Declarations
    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.5, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        gv__3P_TotalMined = gv__3P_TotalMined;
    }

    return true;
}

void gf__3P_SendMissionTransmission (string lp_transmissionType, bool lp_waitUntilDone, int lp_sourcePlayer) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_TransmissionCurrentType = lp_transmissionType;
    libCOMI_gv_cM_TransmissionSource = lp_sourcePlayer;
    TriggerExecute(gt__3P_TransmissionSend, true, lp_waitUntilDone);
}

bool gf__3P_HybridPlaying () {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerStatus(gv_pLAYER_11_ANTAGONIST) == c_playerStatusActive) || (GameIsOnline() == false))) {
        return true;
    }
    else {
        return false;
    }
}

void gf__3P_DisableLongRangeAbilities (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libNtve_gf_PlayerIsEnemy(UnitGetOwner(lp_pUnit), 1, libNtve_ge_PlayerRelation_Enemy) == false) || (UnitGetOwner(lp_pUnit) == lib860A1A1F_gv_mM_PX_PlayerX))) {
        return ;
    }

    if (((UnitGetType(lp_pUnit) == "Battlecruiser") || (UnitGetType(lp_pUnit) == "Hercules") || (UnitGetType(lp_pUnit) == "ScienceVessel") || (UnitGetType(lp_pUnit) == "HHRaven") || (UnitGetType(lp_pUnit) == "HHVikingFighter") || (UnitGetType(lp_pUnit) == "HHWraith") || (UnitGetType(lp_pUnit) == "HHBattlecruiser") || (UnitGetType(lp_pUnit) == "SwarmHost") || (UnitGetType(lp_pUnit) == "SwarmHostBurrowed") || (UnitGetType(lp_pUnit) == "SwarmHostSplitB") || (UnitGetType(lp_pUnit) == "SwarmHostSplitBBurrowed") || (UnitGetType(lp_pUnit) == "HyperionVoidCoop") || (UnitGetType(lp_pUnit) == "SOAMothershipv4") || (UnitGetType(lp_pUnit) == "StukovInfestedSiegeTank") || (UnitGetType(lp_pUnit) == "StukovInfestedSiegeTankUprooted") || (UnitGetType(lp_pUnit) == "DehakaGlevig") || (UnitGetType(lp_pUnit) == "DehakaCoop") || (UnitGetType(lp_pUnit) == "DehakaNydusDestroyer") || (UnitGetType(lp_pUnit) == "DehakaNydusDestroyerTimedNoFood") || (UnitGetType(lp_pUnit) == "Brutalisk") || (UnitGetType(lp_pUnit) == "Loki") || (UnitGetType(lp_pUnit) == "BattlecruiserMengsk") || (UnitGetType(lp_pUnit) == "ZagaraVoidCoop") || (UnitGetType(lp_pUnit) == "Queen") || (UnitGetType(lp_pUnit) == "QueenBurrowed") || (UnitGetType(lp_pUnit) == "ZagaraVoidCoopBurrowed") || (UnitGetType(lp_pUnit) == "GaryStetmann") || (UnitGetType(lp_pUnit) == "SuperGaryStetmann"))) {
        UnitAbilityEnable(lp_pUnit, "AbathurDeepTunnel", false);
        UnitAbilityEnable(lp_pUnit, "CommanderPrestigeSwannHerculesScienceVesselTacticalJump", false);
        UnitAbilityEnable(lp_pUnit, "CommanderPrestigeZagaraZagaraDeepTunnel", false);
        UnitAbilityEnable(lp_pUnit, "StukovInfestedSiegeTankDeepTunnel", false);
        UnitAbilityEnable(lp_pUnit, "YagdraTunnel", false);
        UnitAbilityEnable(lp_pUnit, "ZaGaraDeepTunnel", false);
        UnitAbilityEnable(lp_pUnit, "DeepTunnel", false);
        UnitAbilityEnable(lp_pUnit, "DehakaDeepTunnel", false);
        UnitAbilityEnable(lp_pUnit, "GlevigDeepTunnel", false);
        UnitAbilityEnable(lp_pUnit, "GreaterNydusDestroyerDeepTunnel", false);
        UnitAbilityEnable(lp_pUnit, "Hyperjump", false);
        UnitAbilityEnable(lp_pUnit, "FleetwideJump", false);
        UnitAbilityEnable(lp_pUnit, "HHHyperjump", false);
        UnitAbilityEnable(lp_pUnit, "HyperjumpNoVision", false);
        UnitAbilityEnable(lp_pUnit, "HHBattlecruiserHyperjump", false);
        UnitAbilityEnable(lp_pUnit, "BrutaliskDeepTunnel", false);
        UnitAbilityEnable(lp_pUnit, "LokiUndock", false);
        UnitAbilityEnable(lp_pUnit, "GaryStetmannRecall", false);
        UnitAbilityEnable(lp_pUnit, "SuperGaryStetmannRecall", false);
        UnitAbilityEnable(lp_pUnit, "ZaGaraDeepTunnel", false);
        UnitAbilityEnable(lp_pUnit, "ZeratulTeleport", false);
        UnitAbilityEnable(lp_pUnit, "CommanderPrestigeZeratulVoidSeeker", false);
        UnitAbilityEnable(lp_pUnit, "AlarakMothershipMassRecall", false);
        UnitAbilityEnable(lp_pUnit, "CommanderPrestigeZagaraZagaraDeepTunnel", false);
        UnitAbilityEnable(lp_pUnit, "BattlecruiserMengskHyperjump", false);
        UnitAbilityEnable(lp_pUnit, "BattlecruiserMengskHyperjumpTwoCharges", false);
    }

}

void gf__3P_SetLocalDefender (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitHasBehavior2(lp_pUnit, "AWTimedLife") == true) || (UnitHasBehavior2(lp_pUnit, "SupportUnit") == true) || (UnitHasBehavior2(lp_pUnit, "LocalDefender") == true) || (UnitHasBehavior2(lp_pUnit, "LocalDefenderReturning") == true) || (UnitGetType(lp_pUnit) == "DigesterCreepSprayTargetUnit") || (UnitGetType(lp_pUnit) == "DigesterCreepSprayUnit"))) {
    }
    else if (((UnitGetType(lp_pUnit) == "QueenCoop") || (UnitTypeTestFlag(UnitGetType(lp_pUnit), c_unitFlagWorker) == true))) {
        UnitBehaviorAddPlayer(lp_pUnit, "SupportUnit", gv_pLAYER_11_ANTAGONIST, 1);
    }
    else if ((UnitGetType(lp_pUnit) != "VoidEnergyReservoir") && (UnitGetType(lp_pUnit) != "RipFieldGenerator2") && (UnitGetType(lp_pUnit) != "NuclearMine") && (UnitGetType(lp_pUnit) != "BeamCaster") && (gf__3P_MacroStructure(lp_pUnit) == false)) {
        UnitBehaviorAddPlayer(lp_pUnit, "LocalDefender", gv_pLAYER_11_ANTAGONIST, 1);
        UnitSetCustomValue(lp_pUnit, 50, PointGetX(UnitGetPosition(lp_pUnit)));
        UnitSetCustomValue(lp_pUnit, 51, PointGetY(UnitGetPosition(lp_pUnit)));
    }
    else if ((gf__3P_MacroStructure(lp_pUnit) == true)) {
        UnitBehaviorAddPlayer(lp_pUnit, "ControllerBehForStructs", gv_pLAYER_11_ANTAGONIST, 1);
    }
}

void gf__3P_SetTargetDefender (unit lp_pUnit, point lp_pPoint) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitHasBehavior2(lp_pUnit, "AWTimedLife") == true) || (UnitHasBehavior2(lp_pUnit, "SupportUnit") == true) || (UnitHasBehavior2(lp_pUnit, "LocalDefender") == true) || (UnitHasBehavior2(lp_pUnit, "LocalDefenderReturning") == true) || (UnitGetType(lp_pUnit) == "DigesterCreepSprayTargetUnit") || (UnitGetType(lp_pUnit) == "DigesterCreepSprayUnit"))) {
    }
    else if (((UnitGetType(lp_pUnit) == "QueenCoop") || (UnitTypeTestFlag(UnitGetType(lp_pUnit), c_unitFlagWorker) == true))) {
        UnitBehaviorAddPlayer(lp_pUnit, "SupportUnit", gv_pLAYER_11_ANTAGONIST, 1);
    }
    else if ((UnitGetType(lp_pUnit) != "VoidEnergyReservoir") && (UnitGetType(lp_pUnit) != "RipFieldGenerator2") && (UnitGetType(lp_pUnit) != "NuclearMine") && (UnitGetType(lp_pUnit) != "BeamCaster") && (gf__3P_MacroStructure(lp_pUnit) == false)) {
        UnitBehaviorAddPlayer(lp_pUnit, "LocalDefender", gv_pLAYER_11_ANTAGONIST, 1);
        UnitSetCustomValue(lp_pUnit, 50, PointGetX(lp_pPoint));
        UnitSetCustomValue(lp_pUnit, 51, PointGetY(lp_pPoint));
    }
    else if ((gf__3P_MacroStructure(lp_pUnit) == true)) {
        UnitBehaviorAddPlayer(lp_pUnit, "ControllerBehForStructs", gv_pLAYER_11_ANTAGONIST, 1);
    }
    UnitIssueOrder(lp_pUnit, OrderTargetingPoint(AbilityCommand("move", 0), lp_pPoint), c_orderQueueReplace);
    UnitIssueOrder(lp_pUnit, OrderTargetingPoint(AbilityCommand("attack", 0), lp_pPoint), c_orderQueueReplace);
}

void gf__3P_DropPodWarpInUnitGroup (unitgroup lp_dropPodUnits, point lp_dropLocation) {
    // Variable Declarations
    unitgroup lv_dropGroupZerg;
    unitgroup lv_dropGroupProtoss;
    unitgroup lv_dropGroupTerran;
    unit lv_dropUnit;
    playergroup lv_attackingPlayers;
    int lv_attackPlayerIter;
    bool lv_dropComplete;
    int lv_impatienceCounter;

    // Automatic Variable Declarations
    unitgroup auto3E34BF6E_g;
    int auto3E34BF6E_u;
    string auto620916C8_val;
    playergroup autoA878984E_g;
    playergroup auto5754462C_g;
    unitgroup autoAA8EFA93_g;
    int autoAA8EFA93_u;

    // Variable Initialization
    lv_dropGroupZerg = UnitGroupEmpty();
    lv_dropGroupProtoss = UnitGroupEmpty();
    lv_dropGroupTerran = UnitGroupEmpty();
    lv_attackingPlayers = PlayerGroupEmpty();

    // Implementation
    auto3E34BF6E_g = lp_dropPodUnits;
    auto3E34BF6E_u = UnitGroupCount(auto3E34BF6E_g, c_unitCountAll);
    for (;; auto3E34BF6E_u -= 1) {
        lv_dropUnit = UnitGroupUnitFromEnd(auto3E34BF6E_g, auto3E34BF6E_u);
        if (lv_dropUnit == null) { break; }
        PlayerGroupAdd(lv_attackingPlayers, UnitGetOwner(lv_dropUnit));
    }
    auto620916C8_val = gv__3P_ActiveRace;
    if (auto620916C8_val == "Terr") {
        UnitGroupAddUnitGroup(lv_dropGroupTerran, lp_dropPodUnits);
    }
    else if (auto620916C8_val == "Zerg") {
        UnitGroupAddUnitGroup(lv_dropGroupZerg, lp_dropPodUnits);
    }
    else if (auto620916C8_val == "Prot") {
        UnitGroupAddUnitGroup(lv_dropGroupProtoss, lp_dropPodUnits);
    }
    else {
        UnitGroupAddUnitGroup(lv_dropGroupTerran, lp_dropPodUnits);
    }
    if ((UnitGroupCount(lv_dropGroupTerran, c_unitCountAlive) > 0)) {
        autoA878984E_g = lv_attackingPlayers;
        lv_attackPlayerIter = -1;
        while (true) {
            lv_attackPlayerIter = PlayerGroupNextPlayer(autoA878984E_g, lv_attackPlayerIter);
            if (lv_attackPlayerIter < 0) { break; }
            libCOMI_gf_CM_CoopAI_AttackForce_DropTerran(lv_attackPlayerIter, UnitGroupFilterPlayer(lv_dropGroupTerran, lv_attackPlayerIter, 0), lp_dropLocation);
        }
    }

    if ((UnitGroupCount(lv_dropGroupProtoss, c_unitCountAlive) > 0)) {
        libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss(lv_dropGroupProtoss, lp_dropLocation);
    }

    if ((UnitGroupCount(lv_dropGroupZerg, c_unitCountAlive) > 0)) {
        auto5754462C_g = lv_attackingPlayers;
        lv_attackPlayerIter = -1;
        while (true) {
            lv_attackPlayerIter = PlayerGroupNextPlayer(auto5754462C_g, lv_attackPlayerIter);
            if (lv_attackPlayerIter < 0) { break; }
            libCOMI_gf_CM_CoopAI_AttackForce_DropZerg(lv_attackPlayerIter, UnitGroupFilterPlayer(lv_dropGroupZerg, lv_attackPlayerIter, 0), lp_dropLocation);
        }
    }

    while (true) {
        lv_dropComplete = true;
        autoAA8EFA93_g = lp_dropPodUnits;
        autoAA8EFA93_u = UnitGroupCount(autoAA8EFA93_g, c_unitCountAll);
        for (;; autoAA8EFA93_u -= 1) {
            lv_dropUnit = UnitGroupUnitFromEnd(autoAA8EFA93_g, autoAA8EFA93_u);
            if (lv_dropUnit == null) { break; }
            if ((((UnitGroupHasUnit(lv_dropGroupProtoss, lv_dropUnit) == true) && (lv_impatienceCounter <= 30) && (UnitAbilityCheck(lv_dropUnit, "move", true) == false)) || (((UnitGroupHasUnit(lv_dropGroupTerran, lv_dropUnit) == true) || (UnitGroupHasUnit(lv_dropGroupZerg, lv_dropUnit) == true)) && (libNtve_gf_UnitIsPaused(lv_dropUnit) == true)))) {
                lv_dropComplete = false;
                break;
            }

        }
        if ((lv_dropComplete == true)) {
            return ;
        }

        Wait(0.25, c_timeGame);
        lv_impatienceCounter = (lv_impatienceCounter + 1);
    }
}

bool gf__3P_MacroStructure (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitTypeTestAttribute(UnitGetType(lp_pUnit), c_unitAttributeStructure) == true) && (UnitGetType(lp_pUnit) != "Bunker") && (UnitGetType(lp_pUnit) != "MissileTurret") && (UnitGetType(lp_pUnit) != "PlanetaryFortress") && (UnitGetType(lp_pUnit) != "CommandCenter") && (UnitGetType(lp_pUnit) != "SpineCrawler") && (UnitGetType(lp_pUnit) != "SporeCrawler") && (UnitGetType(lp_pUnit) != "ShieldBattery") && (UnitGetType(lp_pUnit) != "PhotonCannon") && (UnitGetType(lp_pUnit) != "KhaydarinMonolith") && (UnitGetType(lp_pUnit) != "Pylon") && (UnitGetType(lp_pUnit) != "BileLauncherZagara") && (UnitGetType(lp_pUnit) != "KorhalSporeCannon") && (UnitGetType(lp_pUnit) != "SunkenColony") && (UnitGetType(lp_pUnit) != "NydusCanalCreeper") && (UnitGetType(lp_pUnit) != "AutoTurret") && (UnitGetType(lp_pUnit) != "OracleStasisTrap") && (UnitGetType(lp_pUnit) != "SpiderMine") && (UnitGetType(lp_pUnit) != "SpiderMineBurrowed") && (UnitGetType(lp_pUnit) != "CoopCasterAmon")) {
        return true;
    }
    else {
        return false;
    }
}

void gf__3P_DisableMacroAbilitiesINIT () {
    // Variable Declarations
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    unitgroup auto7E8DBE61_g;
    int auto7E8DBE61_u;
    unit auto7E8DBE61_var;

    // Variable Initialization
    lv_vUG = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_vUG, UnitGroup(null, gv_pLAYER_03_EnemyP01, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_vUG, UnitGroup(null, gv_pLAYER_04_EnemyP02, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_vUG, UnitGroup(null, gv_pLAYER_05_EnemyP01_TugOfWarPath, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_vUG, UnitGroup(null, gv_pLAYER_06_EnemyP02_TugOfWarPath, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto7E8DBE61_g = lv_vUG;
    auto7E8DBE61_u = UnitGroupCount(auto7E8DBE61_g, c_unitCountAll);
    for (;; auto7E8DBE61_u -= 1) {
        auto7E8DBE61_var = UnitGroupUnitFromEnd(auto7E8DBE61_g, auto7E8DBE61_u);
        if (auto7E8DBE61_var == null) { break; }
        gf__3P_DisableMacroAbilities(auto7E8DBE61_var);
    }
}

void gf__3P_DisableMacroAbilities (unit lp_pUnit) {
    // Variable Declarations
    string lv_vAB;

    // Automatic Variable Declarations
    unit autoD5B0BBFE_unit;
    int autoD5B0BBFE_i;

    // Variable Initialization

    // Implementation
    if ((gf__3P_AIOwner(lp_pUnit) == false)) {
        return ;
    }

    if (((UnitGetType(lp_pUnit) == "CommandCenter") || (UnitGetType(lp_pUnit) == "OrbitalCommand") || (UnitGetType(lp_pUnit) == "Nexus") || (UnitGetType(lp_pUnit) == "PlanetaryFortress"))) {
        UnitAbilityShow(lp_pUnit, "CommandCenterLiftOff", false);
        UnitAbilityShow(lp_pUnit, "NexusTrainMothership", false);
        UnitAbilityShow(lp_pUnit, "NexusTrainMothershipCore", false);
        UnitAbilityShow(lp_pUnit, "TimeWarp", false);
        UnitAbilityShow(lp_pUnit, "VespeneDroneCast", false);
        UnitAbilityShow(lp_pUnit, "CalldownMULE", false);
        UnitAbilityShow(lp_pUnit, "ScannerSweep", false);
        UnitAbilityShow(lp_pUnit, "SupplyDrop", false);
        UnitAbilityShow(lp_pUnit, "OrbitalCommandSupplyDepotDrop", false);
        UnitAbilityShow(lp_pUnit, "OrbitalLiftOff", false);
        UnitAbilityShow(lp_pUnit, "NexusBuild", false);
        return ;
    }

    if ((gf__3P_MacroStructure(lp_pUnit) == true)) {
        autoD5B0BBFE_unit = lp_pUnit;
        autoD5B0BBFE_i = 1;
        for ( ; autoD5B0BBFE_i <= UnitAbilityCount(autoD5B0BBFE_unit) ; autoD5B0BBFE_i += 1 ) {
            lv_vAB = UnitAbilityGet(autoD5B0BBFE_unit, autoD5B0BBFE_i);
            UnitAbilityShow(lp_pUnit, lv_vAB, false);
        }
    }

    if (((UnitGetType(lp_pUnit) == "Bunker") || (UnitGetType(lp_pUnit) == "MissileTurret"))) {
        UnitAbilityShow(lp_pUnit, "SalvageShared", false);
    }

}

bool gf__3P_AIOwner (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetOwner(lp_pUnit) != 3) && (UnitGetOwner(lp_pUnit) != 4) && (UnitGetOwner(lp_pUnit) != 5) && (UnitGetOwner(lp_pUnit) != 6)) {
        return false;
    }
    else {
        return true;
    }
}

trigger auto_gf_CU_PrestigeBriefReveal_Trigger = null;

void gf_CU_PrestigeBriefReveal () {
    if (auto_gf_CU_PrestigeBriefReveal_Trigger == null) {
        auto_gf_CU_PrestigeBriefReveal_Trigger = TriggerCreate("auto_gf_CU_PrestigeBriefReveal_TriggerFunc");
    }

    TriggerExecute(auto_gf_CU_PrestigeBriefReveal_Trigger, false, false);
}

bool auto_gf_CU_PrestigeBriefReveal_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerPrestige;
    int lv_playerAllyPrestige;
    text lv_playerTooltip;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerPrestige = libCOOC_gf_CC_PlayerActivePrestigeIndex(1);
    lv_playerAllyPrestige = libCOOC_gf_CC_PlayerActivePrestigeIndex(2);

    // Implementation
    if ((libCOUI_gv_cU_PlayerPrestigeBrief == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/PlayerPrestigeBrief");
        libCOUI_gv_cU_PlayerPrestigeBrief = DialogControlLastCreated();
        DialogControlHookup(libCOUI_gv_cU_PlayerPrestigeBrief, c_triggerControlTypeImage, "CommanderIcon");
        libCOUI_gv_cU_PlayerPrestigeBriefImage = DialogControlLastCreated();
    }

    if ((libCOUI_gv_cU_PlayerAllyPrestigeBrief == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/AllyPrestigeBrief");
        libCOUI_gv_cU_PlayerAllyPrestigeBrief = DialogControlLastCreated();
        DialogControlHookup(libCOUI_gv_cU_PlayerAllyPrestigeBrief, c_triggerControlTypeImage, "CommanderIcon");
        libCOUI_gv_cU_PlayerAllyPrestigeBriefImage = DialogControlLastCreated();
    }

    if ((lv_playerPrestige != 0)) {
        lv_playerTooltip = libCOUI_gf_CU_PrestigeBriefFormatTooltip(1);
        libNtve_gf_SetDialogItemTooltip(libCOUI_gv_cU_PlayerPrestigeBrief, lv_playerTooltip, PlayerGroupSingle(gv_pLAYER_11_ANTAGONIST));
        libNtve_gf_SetDialogItemImage(libCOUI_gv_cU_PlayerPrestigeBriefImage, UserDataGetImagePath("PlayerCommanders", libCOOC_gf_ActiveCommanderForPlayer(1), "PrestigeIcon", 1), PlayerGroupSingle(gv_pLAYER_11_ANTAGONIST));
        DialogControlSetVisible(libCOUI_gv_cU_PlayerPrestigeBrief, gv__3P_AntagonistPG, true);
    }

    if ((lv_playerAllyPrestige != 0)) {
        lv_playerTooltip = libCOUI_gf_CU_PrestigeBriefFormatTooltip(2);
        libNtve_gf_SetDialogItemTooltip(libCOUI_gv_cU_PlayerAllyPrestigeBrief, lv_playerTooltip, PlayerGroupSingle(gv_pLAYER_11_ANTAGONIST));
        libNtve_gf_SetDialogItemImage(libCOUI_gv_cU_PlayerAllyPrestigeBriefImage, UserDataGetImagePath("PlayerCommanders", libCOOC_gf_ActiveCommanderForPlayer(2), "PrestigeIcon", 1), PlayerGroupSingle(gv_pLAYER_11_ANTAGONIST));
        DialogControlSetVisible(libCOUI_gv_cU_PlayerAllyPrestigeBrief, gv__3P_AntagonistPG, true);
    }

    return true;
}

void gf__3P_AIChoiceDisplay (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    gf__3P_AIChoiceCreate();
    gf__3P_AIChoiceInitFromData();
    DialogSetVisible(gv__3P_AIChoiceDialog, PlayerGroupSingle(lp_player), true);
}

void gf__3P_AIChoiceCreate () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv__3P_AIChoiceDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 350, c_anchorTop, 0, 150, true);
    gv__3P_AIChoiceDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 450, 301, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_challenge_frame_innerborder.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 40);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreate(gv__3P_AIChoiceDialog, c_triggerControlTypeListBox);
    gv__3P_AIChoiceListBox = DialogControlLastCreated();
    DialogControlSetSize(gv__3P_AIChoiceListBox, PlayerGroupAll(), 450, 300);
    DialogControlSetPosition(gv__3P_AIChoiceListBox, PlayerGroupAll(), c_anchorTop, 0, 40);
    TextExpressionSetToken("Param/Expression/9F7BA7A4", "A", FixedToText(gv__3P_AIChoiceCost, 0));
    libNtve_gf_CreateDialogItemButton(gv__3P_AIChoiceDialog, 220, 45, c_anchorBottomLeft, 75, 20, StringToText(""), TextExpressionAssemble("Param/Expression/9F7BA7A4"), "");
    gv__3P_AIChoiceOKButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv__3P_AIChoiceDialog, 100, 45, c_anchorBottomRight, 75, 20, StringToText(""), StringExternal("Param/Value/316A289B"), "");
    gv__3P_AIChoiceCancelButton = DialogControlLastCreated();
}

void gf__3P_AIChoiceInitFromData () {
    // Variable Declarations
    string lv_indexPersonality;
    string lv_aIRace;
    int lv_personalityIndex;

    // Automatic Variable Declarations
    int auto8CF63FB5_ai;
    int auto8CF63FB5_ae;

    // Variable Initialization

    // Implementation
    DialogControlRemoveAllItems(gv__3P_AIChoiceListBox, PlayerGroupAll());
    auto8CF63FB5_ai = 1;
    auto8CF63FB5_ae = UserDataInstanceCount("CoopAICommanders")+1;
    while (auto8CF63FB5_ai < auto8CF63FB5_ae) {
        lv_indexPersonality = UserDataInstance("CoopAICommanders", auto8CF63FB5_ai);
        auto8CF63FB5_ai = auto8CF63FB5_ai+1;
        if ((libCOOC_gf_CC_AIPersonalityRace(lv_indexPersonality) == gv__3P_ActiveRace) && (UserDataGetInt("CoopAICommanders", lv_indexPersonality, "RandomMapInitAllowed", 1) == 1)) {
            lv_personalityIndex += 1;
            DialogControlAddItem(gv__3P_AIChoiceListBox, PlayerGroupAll(), UserDataGetText("CoopAICommanders", lv_indexPersonality, "Name", 1));
            gv__3P_AIChoicePersonalities[lv_personalityIndex] = lv_indexPersonality;
            if ((lv_indexPersonality == libCOMI_gv_cM_CoopAIPlayer_CommanderShared)) {
                DialogControlSelectItem(gv__3P_AIChoiceListBox, PlayerGroupAll(), lv_personalityIndex);
            }

        }

    }
}

void gf__3P_AIChoiceClose (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(gv__3P_AIChoiceDialog, PlayerGroupSingle(lp_player), false);
}

void gf__3P_CustomAISet (int lp_player, int lp_aIEnemy, string lp_personalityUserData) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CM_CoopAIPersonalitySet(lp_personalityUserData);
    libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = lp_personalityUserData;
    libCOUI_gf_CU_EnemyBriefInit(libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player]);
}

string gf__3P_AIChoiceSelectedPersonality (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((DialogControlGetSelectedItem(gv__3P_AIChoiceListBox, lp_player) != 0)) {
        return gv__3P_AIChoicePersonalities[DialogControlGetSelectedItem(gv__3P_AIChoiceListBox, lp_player)];
    }
    else {
        return gv__3P_AIChoicePersonalities[0];
    }
}

void gf__3P_GlobalCasterCreateUnit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CoopCasterAmon", c_unitCreateIgnorePlacement, lp_player, Point(0.0, 0.0));
    libCOMI_gv_cM_GlobalCasterUnit[lp_player] = UnitLastCreated();
    libCOMI_gv_cM_GlobalCasterUnitGroup[lp_player] = libNtve_gf_ConvertUnitToUnitGroup(libCOMI_gv_cM_GlobalCasterUnit[lp_player]);
    gv__3P_AmonCasterUnit = UnitLastCreated();
    UnitSetState(libCOMI_gv_cM_GlobalCasterUnit[lp_player], c_unitStateSelectable, false);
    gf__3P_GPSetUnit(UnitLastCreated(), lp_player);
    libCOMI_gf_CM_SoACasterUnitSet(UnitLastCreated(), lp_player);
}

void gf__3P_GPSetUnit (unit lp_casterUnit, int lp_player) {
    // Automatic Variable Declarations
    unitgroup auto67A715ED_g;
    int auto67A715ED_u;
    unit auto67A715ED_var;

    // Implementation
    gf__3P_GPInitAmon(lp_player);
    libCOUI_gv_cU_GPUnit[lp_player] = lp_casterUnit;
    auto67A715ED_g = libCOUI_gv_cU_GPCasterGroup[lp_player];
    auto67A715ED_u = UnitGroupCount(auto67A715ED_g, c_unitCountAll);
    for (;; auto67A715ED_u -= 1) {
        auto67A715ED_var = UnitGroupUnitFromEnd(auto67A715ED_g, auto67A715ED_u);
        if (auto67A715ED_var == null) { break; }
        UnitGroupRemove(libCOUI_gv_cU_GPCasterGroup[lp_player], auto67A715ED_var);
    }
    UnitGroupAdd(libCOUI_gv_cU_GPCasterGroup[lp_player], lp_casterUnit);
    libNtve_gf_SetDialogItemUnitGroup(libCOUI_gv_cU_GPCmdPanel[lp_player], libCOUI_gv_cU_GPCasterGroup[lp_player], PlayerGroupSingle(lp_player));
    if ((TechTreeUpgradeCount(lp_player, "FenixCommander", c_techCountCompleteOnly) == 1)) {
        libNtve_gf_SetDialogItemUnit(libCOUI_gv_cU_GPCmdPanelUnitStatus[lp_player], libCOUI_gv_cU_GPUnit[lp_player], PlayerGroupSingle(lp_player));
    }

    if ((PlayerRace(lp_player) == "Prot")) {
        libCOUI_gf_CU_GPSoAUpdateVitals(lp_player);
    }

}

void gf__3P_GPInitAmon (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto6F85F0A4_ae = 4;
    const int auto6F85F0A4_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(libCOUI_gv_cU_GPPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate");
    libCOUI_gv_cU_GPPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOUI_gv_cU_GPPanel[lp_player], c_triggerControlTypeCutscene, "TerranCommandCutscene");
    libCOUI_gv_cU_GPCutscene[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOUI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "ButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_GlobalCastingTemplates/TerranGlobalCommandPanelTemplate");
    libCOUI_gv_cU_GPCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (auto6F85F0A4_ai >= 0 && lv_buttonIndex <= auto6F85F0A4_ae) || (auto6F85F0A4_ai < 0 && lv_buttonIndex >= auto6F85F0A4_ae) ) ; lv_buttonIndex += auto6F85F0A4_ai ) {
        DialogControlHookup(libCOUI_gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCOUI_gv_cU_GPCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCOUI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "AbilityArrow0" + IntToString(lv_buttonIndex));
        libCOUI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(libCOUI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, libCOUI_gv_cU_GPCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlSetVisible(libCOUI_gv_cU_GPPanel[lp_player], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemCutscene(libCOUI_gv_cU_GPCutscene[lp_player], "Cutscenes\\UI_TerranCastingPanel.SC2Cutscene", PlayerGroupAll());
    libCOUI_gv_cU_GPCutsceneFilter[lp_player] = "FourButtons";
    CutscenePlay(CutsceneGetTriggerControl(libCOUI_gv_cU_GPCutscene[lp_player]));
}

void gf__3P_UnitCreationManualFix (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    gf__3P_ApplyJustDieFix(lp_pUnit);
    libCOMU_gf_CT_ApplyUnitSpeed(lp_pUnit);
}

void gf__3P_ApplyJustDieFix (unit lp_createdUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetOwner(lp_createdUnit) == gv_pLAYER_11_ANTAGONIST)) {
        if (((libCOMU_gf_MutatorIsEnabled("JustDie") == false) || (UnitGetOwner(lp_createdUnit) == c_playerAny))) {
            return ;
        }

        UnitBehaviorAdd(lp_createdUnit, "MutatorMasterController", lp_createdUnit, 1);
    }

}

void gf__3P_ApplyBarrierFix (unit lp_damagedUnit, unit lp_damagingUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetOwner(lp_damagedUnit) == gv_pLAYER_11_ANTAGONIST)) {
        if (((libCOMU_gv_cT_MutatorEnabledQuickList[(libCOMU_ge_CT_MutatorQuickList_CT_QuickBarrier)] == false) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(lp_damagingUnit)), UnitGetOwner(lp_damagedUnit)) == false) || (UnitFilterMatch(lp_damagedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral), 0)) == false) || (UnitGroupHasUnit(libCOMU_gv_cT_BarrierRecipients, lp_damagedUnit) == true) || (UnitTypeTestFlag(UnitGetType(lp_damagedUnit), c_unitFlagDestructible) == true) || (UnitGetType(lp_damagedUnit) == "TempleShakuras02"))) {
            return ;
        }
        else {
            UnitBehaviorAdd(lp_damagedUnit, "MutatorBarrier", lp_damagedUnit, 1);
            UnitGroupAdd(libCOMU_gv_cT_BarrierRecipients, lp_damagedUnit);
        }
    }

}

void gf__3P_ApplyPhotonOverloadFix (unit lp_damagedUnit, unit lp_damagingUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetOwner(lp_damagedUnit) == gv_pLAYER_11_ANTAGONIST)) {
        if (((libCOMU_gv_cT_MutatorEnabledQuickList[(libCOMU_ge_CT_MutatorQuickList_CT_QuickPhotonOverload)] == false) || (lp_damagingUnit == null) || (UnitIsValid(lp_damagingUnit) == false) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(lp_damagingUnit)), UnitGetOwner(lp_damagedUnit)) == false) || (UnitFilterMatch(lp_damagedUnit, 1, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (UnitTypeTestFlag(UnitGetType(lp_damagedUnit), c_unitFlagDestructible) == true) || (UnitGetType(lp_damagedUnit) == "TempleShakuras02") || (UnitHasBehavior2(lp_damagedUnit, "MutatorPhotonOvercharge") == true))) {
            return ;
        }

        UnitBehaviorAdd(lp_damagedUnit, "MutatorPhotonOvercharge", lp_damagedUnit, 1);
    }

}

trigger auto_gf__3P_CreateVoidEnergyReservoir_Trigger = null;
fixed auto_gf__3P_CreateVoidEnergyReservoir_lp_pTime;
int auto_gf__3P_CreateVoidEnergyReservoir_lp_pMinDistance;
int auto_gf__3P_CreateVoidEnergyReservoir_lp_pMaxDistance;

void gf__3P_CreateVoidEnergyReservoir (fixed lp_pTime, int lp_pMinDistance, int lp_pMaxDistance) {
    auto_gf__3P_CreateVoidEnergyReservoir_lp_pTime = lp_pTime;
    auto_gf__3P_CreateVoidEnergyReservoir_lp_pMinDistance = lp_pMinDistance;
    auto_gf__3P_CreateVoidEnergyReservoir_lp_pMaxDistance = lp_pMaxDistance;

    if (auto_gf__3P_CreateVoidEnergyReservoir_Trigger == null) {
        auto_gf__3P_CreateVoidEnergyReservoir_Trigger = TriggerCreate("auto_gf__3P_CreateVoidEnergyReservoir_TriggerFunc");
    }

    TriggerExecute(auto_gf__3P_CreateVoidEnergyReservoir_Trigger, false, false);
}

bool auto_gf__3P_CreateVoidEnergyReservoir_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_pTime = auto_gf__3P_CreateVoidEnergyReservoir_lp_pTime;
    int lp_pMinDistance = auto_gf__3P_CreateVoidEnergyReservoir_lp_pMinDistance;
    int lp_pMaxDistance = auto_gf__3P_CreateVoidEnergyReservoir_lp_pMaxDistance;

    // Variable Declarations
    int lv_vInt;
    point lv_vPoint;
    int lv_vMaxDistance;
    int lv_vBetweenReservoirs;
    int lv_vBetweenStructures;

    // Automatic Variable Declarations
    const int auto0E64DB86_ae = 8000;
    const int auto0E64DB86_ai = 1;

    // Variable Initialization
    lv_vBetweenReservoirs = 40;
    lv_vBetweenStructures = 3;

    // Implementation
    if ((gf__3P_HybridPlaying() == false)) {
        return true;
    }

    lv_vMaxDistance = lp_pMaxDistance;
    while (!((lp_pTime <= GameGetMissionTime()))) {
        Wait(1.0, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        lv_vInt = 1;
        for ( ; ( (auto0E64DB86_ai >= 0 && lv_vInt <= auto0E64DB86_ae) || (auto0E64DB86_ai < 0 && lv_vInt >= auto0E64DB86_ae) ) ; lv_vInt += auto0E64DB86_ai ) {
            lv_vPoint = RegionRandomPoint(RegionEntireMap());
            if (((DistanceBetweenPoints(lv_vPoint, UnitGetPosition(gv__3P_MainShard)) >= lp_pMinDistance) && (DistanceBetweenPoints(lv_vPoint, UnitGetPosition(gv__3P_MainShard)) <= lv_vMaxDistance)) && (DistanceBetweenPoints(lv_vPoint, PlayerStartLocation(1)) >= 60.0) && (DistanceBetweenPoints(lv_vPoint, PlayerStartLocation(2)) >= 60.0) && (DistanceBetweenPoints(lv_vPoint, PointFromId(862)) >= 60.0) && (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_11_ANTAGONIST, c_unitAllianceAny, RegionCircle(lv_vPoint, lv_vBetweenStructures), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1) && (UnitGroupCount(UnitGroup("VoidEnergyReservoir", c_playerAny, RegionCircle(lv_vPoint, lv_vBetweenReservoirs), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1) && (PointPathingIsConnected(lv_vPoint, UnitGetPosition(gv__3P_MainShard)) == true)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidEnergyReservoir", 0, gv_pLAYER_05_EnemyP01_TugOfWarPath, lv_vPoint);
                MinimapPing(gv__3P_AntagonistPG, lv_vPoint, 1.0, Color(100.00, 0.00, 0.00));
                UnitGroupAdd(gv__3P_VoidEnergyReservoirs, UnitLastCreated());
                if ((UnitLastCreated() == null)) {
                    continue;
                }
                else {
                    return true;
                }
            }
            else {
                if ((lv_vInt == 2000)) {
                    lv_vMaxDistance *= 2;
                }

                if ((lv_vInt == 4000)) {
                    lv_vBetweenReservoirs /= 2;
                }

                if ((lv_vInt == 6000)) {
                    lv_vBetweenStructures = 2;
                    lv_vBetweenReservoirs /= 2;
                    lv_vMaxDistance *= 4;
                }

                if ((lv_vInt == 8000)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C4A6FFDB"));
                }

            }
        }
    }

    return true;
}

void gf__3P_HeroActivate (int lp_pHero) {
    // Automatic Variable Declarations
    // Implementation
    UnitAbilityEnable(gv__3P_MainShard, "ChooseActiveHeroes", true);
    gv__3P_Heroes_NumberOfPurchasedHeroes += 1;
    gv__3P_Heroes_Purchased[lp_pHero] = true;
    gv__3P_Heroes_PurchaseOrder[gv__3P_Heroes_NumberOfPurchasedHeroes] = lp_pHero;
    libNtve_gf_SetDialogItemColor(gv__3P_Heroes_Label[lp_pHero], Color(100,100,100), gv__3P_AntagonistPG);
    DialogControlSetVisible(gv__3P_Heroes_CheckBox[lp_pHero], gv__3P_AntagonistPG, true);
    if ((gv__3P_Heroes_NumberOfPurchasedHeroes > gv__3P_Heroes_MaxActive)) {
        gv__3P_Heroes_Active[gv__3P_Heroes_PurchaseOrder[(gv__3P_Heroes_NumberOfPurchasedHeroes - gv__3P_Heroes_MaxActive)]] = false;
        libNtve_gf_SetDialogItemChecked(gv__3P_Heroes_CheckBox[gv__3P_Heroes_PurchaseOrder[(gv__3P_Heroes_NumberOfPurchasedHeroes - gv__3P_Heroes_MaxActive)]], false, gv__3P_AntagonistPG);
        libNtve_gf_UIErrorMessage(gv__3P_AntagonistPG, StringExternal("Param/Value/F071C591"), SoundLink("WidowMine_ArmedBeep", -1));
    }

    gv__3P_Heroes_Active[lp_pHero] = true;
    libNtve_gf_SetDialogItemChecked(gv__3P_Heroes_CheckBox[lp_pHero], true, gv__3P_AntagonistPG);
}

void gf__3P_CreateHeroes (point lp_pPoint, int lp_pPlayer) {
    // Variable Declarations
    string[10] lv_vUnitType;

    // Automatic Variable Declarations
    const int autoBD1F51F1_ae = 9;
    int autoBD1F51F1_var;

    // Variable Initialization

    // Implementation
    UnitGroupClear(gv__3P_LastCreatedHeroes);
    lv_vUnitType[1] = "MutatorAmonRaynor";
    lv_vUnitType[2] = "MutatorAmonTychus";
    lv_vUnitType[3] = "MutatorAmonNova";
    lv_vUnitType[4] = "MutatorAmonDehaka";
    lv_vUnitType[5] = "MutatorAmonZagara";
    lv_vUnitType[6] = "MutatorAmonKerrigan";
    lv_vUnitType[7] = "MutatorAmonZeratul";
    lv_vUnitType[8] = "MutatorAmonKarax";
    lv_vUnitType[9] = "MutatorAmonArtanis";
    autoBD1F51F1_var = 1;
    for ( ; autoBD1F51F1_var <= autoBD1F51F1_ae; autoBD1F51F1_var += 1 ) {
        if ((gv__3P_Heroes_Active[autoBD1F51F1_var] == true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_vUnitType[autoBD1F51F1_var], 0, lp_pPlayer, lp_pPoint);
            UnitGroupAdd(gv__3P_LastCreatedHeroes, UnitLastCreated());
            UnitGroupAdd(libCOMU_gv_cT_SpawnedUnits, UnitLastCreated());
            AISetUnitScriptControlled(UnitLastCreated(), false);
            if ((lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_DarkMirror)] == true)) {
                UnitSetTeamColorIndex(UnitLastCreated(), 7);
            }

        }

    }
}

void gf__3P_SetupAttackWave (unitgroup lp_pWaveGroup) {
    // Automatic Variable Declarations
    unitgroup auto42A500A6_g;
    int auto42A500A6_u;
    unit auto42A500A6_var;
    unitgroup autoFF761CD2_g;
    int autoFF761CD2_u;
    unit autoFF761CD2_var;

    // Implementation
    UnitControlGroupAddUnits(gv_pLAYER_11_ANTAGONIST, 1, lp_pWaveGroup);
    MinimapPing(PlayerGroupSingle(gv_pLAYER_11_ANTAGONIST), UnitGroupCenterOfGroup(lp_pWaveGroup), 2.0, Color(0.00, 100.00, 0.00));
    auto42A500A6_g = lp_pWaveGroup;
    auto42A500A6_u = UnitGroupCount(auto42A500A6_g, c_unitCountAll);
    for (;; auto42A500A6_u -= 1) {
        auto42A500A6_var = UnitGroupUnitFromEnd(auto42A500A6_g, auto42A500A6_u);
        if (auto42A500A6_var == null) { break; }
        if ((lib860A1A1F_gv_mM_MutatorEnabledQuickList[(lib860A1A1F_ge_MM_CustomMutators_DarkMirror)] == false)) {
            UnitSetTeamColorIndex(auto42A500A6_var, 1);
        }
        else {
            UnitSetTeamColorIndex(auto42A500A6_var, 7);
        }
    }
    gf__3P_DropPodWarpInUnitGroup(lp_pWaveGroup, UnitGroupCenterOfGroup(lp_pWaveGroup));
    autoFF761CD2_g = lp_pWaveGroup;
    autoFF761CD2_u = UnitGroupCount(autoFF761CD2_g, c_unitCountAll);
    for (;; autoFF761CD2_u -= 1) {
        autoFF761CD2_var = UnitGroupUnitFromEnd(autoFF761CD2_g, autoFF761CD2_u);
        if (autoFF761CD2_var == null) { break; }
        if ((gf__3P_HybridPlaying() == true)) {
            UnitBehaviorAddPlayer(autoFF761CD2_var, "AWTimedLife", gv_pLAYER_03_EnemyP01, 1);
            UnitBehaviorAddPlayer(autoFF761CD2_var, "NoScrapDrop", gv_pLAYER_11_ANTAGONIST, 1);
        }

    }
    gf__3P_WaveCreationFix(lp_pWaveGroup);
    TriggerExecute(gt__3P_TutorialAttackWaveSpawned, true, false);
}

trigger auto_gf__3P_WaveCreationFix_Trigger = null;
unitgroup auto_gf__3P_WaveCreationFix_lp_pWaveGroup;

void gf__3P_WaveCreationFix (unitgroup lp_pWaveGroup) {
    auto_gf__3P_WaveCreationFix_lp_pWaveGroup = lp_pWaveGroup;

    if (auto_gf__3P_WaveCreationFix_Trigger == null) {
        auto_gf__3P_WaveCreationFix_Trigger = TriggerCreate("auto_gf__3P_WaveCreationFix_TriggerFunc");
    }

    TriggerExecute(auto_gf__3P_WaveCreationFix_Trigger, false, false);
}

bool auto_gf__3P_WaveCreationFix_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_pWaveGroup = auto_gf__3P_WaveCreationFix_lp_pWaveGroup;

    // Automatic Variable Declarations
    unitgroup auto5584E68C_g;
    int auto5584E68C_u;
    unit auto5584E68C_var;

    // Implementation
    Wait(2.0, c_timeGame);
    auto5584E68C_g = lp_pWaveGroup;
    auto5584E68C_u = UnitGroupCount(auto5584E68C_g, c_unitCountAll);
    for (;; auto5584E68C_u -= 1) {
        auto5584E68C_var = UnitGroupUnitFromEnd(auto5584E68C_g, auto5584E68C_u);
        if (auto5584E68C_var == null) { break; }
        gf__3P_UnitCreationManualFix(auto5584E68C_var);
    }
    return true;
}

void gf__3P_HybridBodyguardsSetup (unitgroup lp_waveGroup) {
    // Automatic Variable Declarations
    unitgroup auto65FE12D6_g;
    int auto65FE12D6_u;
    unit auto65FE12D6_var;

    // Implementation
    libNtve_gf_RescueUnit2(lp_waveGroup, gv_pLAYER_03_EnemyP01, false);
    MinimapPing(PlayerGroupSingle(gv_pLAYER_11_ANTAGONIST), UnitGroupCenterOfGroup(lp_waveGroup), 2.0, Color(0.00, 100.00, 0.00));
    UnitControlGroupAddUnits(gv_pLAYER_11_ANTAGONIST, 2, lp_waveGroup);
    auto65FE12D6_g = lp_waveGroup;
    auto65FE12D6_u = UnitGroupCount(auto65FE12D6_g, c_unitCountAll);
    for (;; auto65FE12D6_u -= 1) {
        auto65FE12D6_var = UnitGroupUnitFromEnd(auto65FE12D6_g, auto65FE12D6_u);
        if (auto65FE12D6_var == null) { break; }
        gf__3P_SetLocalDefender(auto65FE12D6_var);
        UnitSetCustomValue(auto65FE12D6_var, 56, 56.0);
        UnitSetTeamColorIndex(auto65FE12D6_var, 13);
        UnitBehaviorAddPlayer(auto65FE12D6_var, "NoScrapDrop", gv_pLAYER_11_ANTAGONIST, 1);
        gf__3P_UnitCreationManualFix(auto65FE12D6_var);
        if ((UnitGetType(auto65FE12D6_var) == "HighTemplar")) {
            UnitAbilityEnable(auto65FE12D6_var, "ArchonWarp", false);
        }

    }
}

void gf__3P_HybridPushersSetUp (unitgroup lp_waveGroup) {
    // Automatic Variable Declarations
    unitgroup auto9E58731D_g;
    int auto9E58731D_u;
    unit auto9E58731D_var;

    // Implementation
    MinimapPing(PlayerGroupSingle(gv_pLAYER_11_ANTAGONIST), UnitGroupCenterOfGroup(lp_waveGroup), 2.0, Color(0.00, 100.00, 0.00));
    libNtve_gf_RescueUnit2(lp_waveGroup, gv_pLAYER_03_EnemyP01, true);
    auto9E58731D_g = lp_waveGroup;
    auto9E58731D_u = UnitGroupCount(auto9E58731D_g, c_unitCountAll);
    for (;; auto9E58731D_u -= 1) {
        auto9E58731D_var = UnitGroupUnitFromEnd(auto9E58731D_g, auto9E58731D_u);
        if (auto9E58731D_var == null) { break; }
        gf__3P_SetLocalDefender(auto9E58731D_var);
        UnitSetCustomValue(auto9E58731D_var, 54, 54.0);
        UnitSetTeamColorIndex(auto9E58731D_var, 13);
        UnitBehaviorAddPlayer(auto9E58731D_var, "NoScrapDrop", gv_pLAYER_11_ANTAGONIST, 1);
        gf__3P_UnitCreationManualFix(auto9E58731D_var);
    }
    UnitControlGroupAddUnits(gv_pLAYER_11_ANTAGONIST, 2, lp_waveGroup);
}

void gf__3P_DialogCounting (int lp_pFrom, int lp_pTo, fixed lp_pTime, int lp_pDialogLabel, text lp_pTextBefore, text lp_pTextAfter, playergroup lp_pPlayers) {
    // Variable Declarations
    const fixed lv_vTimeInterval = 0.125;
    int lv_vDiff;
    int lv_vCurrent;
    int lv_vSteps;
    int lv_vChange;

    // Automatic Variable Declarations
    int auto8AD38D2E_n;
    int auto8AD38D2E_i;

    // Variable Initialization
    lv_vDiff = AbsI((lp_pFrom - lp_pTo));
    lv_vCurrent = lp_pFrom;
    lv_vSteps = FixedToInt((lp_pTime / lv_vTimeInterval));
    lv_vChange = (lv_vDiff / lv_vSteps);

    // Implementation
    if ((lp_pTo == lp_pFrom)) {
        return ;
    }

    if ((lp_pTo < lp_pFrom)) {
        lv_vChange *= -1;
    }

    SoundPlayForPlayer(SoundLink("UI_BNet_ProgressionCounter_Loop1", -1), c_maxPlayers, lp_pPlayers, 100.0, 0.0);
    auto8AD38D2E_n = lv_vSteps;
    for (auto8AD38D2E_i = 1; auto8AD38D2E_i <= auto8AD38D2E_n; auto8AD38D2E_i += 1) {
        Wait(lv_vTimeInterval, c_timeGame);
        lv_vCurrent += lv_vChange;
        TextExpressionSetToken("Param/Expression/785E112B", "A", lp_pTextBefore);
        TextExpressionSetToken("Param/Expression/785E112B", "B", IntToText(lv_vCurrent));
        TextExpressionSetToken("Param/Expression/785E112B", "C", lp_pTextAfter);
        libNtve_gf_SetDialogItemText(lp_pDialogLabel, TextExpressionAssemble("Param/Expression/785E112B"), PlayerGroupAll());
    }
    SoundStop(SoundLastPlayed(), false);
    TextExpressionSetToken("Param/Expression/1711D342", "A", lp_pTextBefore);
    TextExpressionSetToken("Param/Expression/1711D342", "B", IntToText(lp_pTo));
    TextExpressionSetToken("Param/Expression/1711D342", "C", lp_pTextAfter);
    libNtve_gf_SetDialogItemText(lp_pDialogLabel, TextExpressionAssemble("Param/Expression/1711D342"), PlayerGroupAll());
}

trigger auto_gf__3P_AmonVictoryFanfare_Trigger = null;
int auto_gf__3P_AmonVictoryFanfare_lp_victoryType;

void gf__3P_AmonVictoryFanfare (int lp_victoryType) {
    auto_gf__3P_AmonVictoryFanfare_lp_victoryType = lp_victoryType;

    if (auto_gf__3P_AmonVictoryFanfare_Trigger == null) {
        auto_gf__3P_AmonVictoryFanfare_Trigger = TriggerCreate("auto_gf__3P_AmonVictoryFanfare_TriggerFunc");
    }

    TriggerExecute(auto_gf__3P_AmonVictoryFanfare_Trigger, false, false);
}

bool auto_gf__3P_AmonVictoryFanfare_TriggerFunc (bool testConds, bool runActions) {
    int lp_victoryType = auto_gf__3P_AmonVictoryFanfare_lp_victoryType;

    int init_i;

    // Variable Declarations
    sound lv_vSound;
    int[4] lv_vDialogItem;
    int lv_vSuppliesKilled;
    int lv_vBonus;
    int lv_vTopOffset;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_vDialogItem[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    if ((gv__3P_ObjectiveKillUnitsActive == true)) {
        gv__3P_ObjectiveKillUnitsActive = false;
    }
    else {
        return true;
    }
    if ((ObjectiveGetState(gv__3P_ObjectiveDefendVoidShard) == c_objectiveStateFailed)) {
        return true;
    }

    if ((lp_victoryType == ge__3P_VictoryType_JinaraKilled)) {
        CameraPan(gv_pLAYER_11_ANTAGONIST, PointFromId(861), 2.0, -1, 10.0, false);
        TransmissionSendForPlayerSelect(gv__3P_AntagonistPG, TransmissionSourceFromUnitType("HybridBehemoth", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/2D0463E5"), StringExternal("Param/Value/3104D6A0"), 6.0, c_transmissionDurationSet, false, c_maxPlayers, false);
    }
    else if ((UnitGroupCount(UnitGroup(null, 1, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        CameraPan(gv_pLAYER_11_ANTAGONIST, PlayerStartLocation(2), 2.0, -1, 10.0, false);
        TransmissionSendForPlayerSelect(gv__3P_AntagonistPG, TransmissionSourceFromUnitType("HybridBehemoth", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/B71AF0B5"), StringExternal("Param/Value/F6054C93"), 6.0, c_transmissionDurationSet, false, c_maxPlayers, false);
    }
    else if (true) {
        CameraPan(gv_pLAYER_11_ANTAGONIST, PlayerStartLocation(1), 2.0, -1, 10.0, false);
        TransmissionSendForPlayerSelect(gv__3P_AntagonistPG, TransmissionSourceFromUnitType("HybridBehemoth", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/6FB70EE5"), StringExternal("Param/Value/28B54174"), 6.0, c_transmissionDurationSet, false, c_maxPlayers, false);
    }
    SoundPlayForPlayer(SoundLink("Amon_Vox_LoopCustom", -1), c_maxPlayers, gv__3P_AntagonistPG, 150.0, 0.0);
    lv_vSound = SoundLastPlayed();
    TriggerExecute(gt__3P_Jinaradefeatedsync, true, false);
    libCOUI_gf_CU_GPShowHide(false, gv_pLAYER_11_ANTAGONIST, c_transitionDurationImmediate);
    libNtve_gf_CinematicMode(true, gv__3P_AntagonistPG, c_transitionDurationDefault);
    DialogControlSetVisible(gv__3P_IncomeRateDialogItem, gv__3P_AntagonistPG, false);
    UnitClearSelection(gv_pLAYER_11_ANTAGONIST);
    SoundPlayForPlayer(SoundLink("ZKorhal03MusicCutscene02_MissionVictory", -1), c_maxPlayers, gv__3P_AntagonistPG, 100.0, 0.0);
    Wait(0.5, c_timeGame);
    DialogCreate(600, 600, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 200, c_anchorTop, 0, 0, StringExternal("Param/Value/D066C3FD"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_VictorySplash", PlayerGroupAll());
    lv_vDialogItem[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 400, c_anchorTop, 0, -35, StringExternal("Param/Value/E864E560"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_VictorySplashSmall", PlayerGroupAll());
    lv_vDialogItem[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 400, c_anchorTop, 0, 0, StringExternal("Param/Value/55C35C04"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_VictoryInfo", PlayerGroupAll());
    lv_vDialogItem[3] = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), gv__3P_AntagonistPG, true);
    DialogSetVisible(DialogLastCreated(), gv__3P_CommandersPG, false);
    Wait(1.0, c_timeGame);
    lv_vSuppliesKilled = FixedToInt(gv__3P_SuppliesKilled);
    if ((lv_vSuppliesKilled < 40)) {
        gf__3P_DialogCounting(0, lv_vSuppliesKilled, MaxF((lv_vSuppliesKilled * 0.125), 0.125), DialogControlLastCreated(), StringExternal("Param/Value/0C119F7A"), StringExternal("Param/Value/1B6D8354"), gv__3P_AntagonistPG);
    }
    else {
        gf__3P_DialogCounting(0, lv_vSuppliesKilled, 5.0, DialogControlLastCreated(), StringExternal("Param/Value/09F2F34F"), StringExternal("Param/Value/F06731A6"), gv__3P_AntagonistPG);
    }
    SoundStop(lv_vSound, true);
    Wait(1.0, c_timeGame);
    if (((ObjectiveGetState(gv__3P_ObjectiveKillJinara) == c_objectiveStateCompleted) || (ObjectiveGetState(gv_objectiveJinaraMustSurvive) != c_objectiveStateCompleted) || (ObjectiveGetState(gv_objectiveKillSlaynElementals) != c_objectiveStateCompleted) || (ObjectiveGetState(gv_objectiveKillSlaynElementals02) != c_objectiveStateCompleted))) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 430, 1, c_anchorTop, -3, 220, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(100.0, 13.3, 13.3), c_triggerBlendModeNormal);
    }

    if (((ObjectiveGetState(gv__3P_ObjectiveKillJinara) == c_objectiveStateCompleted) || (ObjectiveGetState(gv_objectiveJinaraMustSurvive) != c_objectiveStateCompleted))) {
        lv_vTopOffset = (40 + lv_vBonus*25);
        SoundPlayForPlayer(SoundLink("UI_WarChest_ToastWhooshIn", -1), c_maxPlayers, gv__3P_AntagonistPG, 100.0, 0.0);
        TextExpressionSetToken("Param/Expression/4D4BCA3D", "A", IntToText(gv__3P_JinaraKillBonusAmount));
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 400, c_anchorTop, 0, lv_vTopOffset, TextExpressionAssemble("Param/Expression/4D4BCA3D"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_VictoryBonusInfo", PlayerGroupAll());
        Wait(0.5, c_timeGame);
        gf__3P_DialogCounting(lv_vSuppliesKilled, (lv_vSuppliesKilled + gv__3P_JinaraKillBonusAmount), 3.0, lv_vDialogItem[3], StringExternal("Param/Value/2629D076"), StringExternal("Param/Value/1588A1CE"), gv__3P_AntagonistPG);
        lv_vSuppliesKilled += gv__3P_JinaraKillBonusAmount;
        lv_vBonus += 1;
    }

    if (((ObjectiveGetState(gv_objectiveKillSlaynElementals) != c_objectiveStateCompleted) || (ObjectiveGetState(gv_objectiveKillSlaynElementals02) != c_objectiveStateCompleted))) {
        lv_vTopOffset = (40 + lv_vBonus*25);
        SoundPlayForPlayer(SoundLink("UI_WarChest_ToastWhooshIn2", -1), c_maxPlayers, gv__3P_AntagonistPG, 100.0, 0.0);
        TextExpressionSetToken("Param/Expression/F1B25F11", "A", IntToText(gv__3P_SlaynKillBonusAmount));
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 400, c_anchorTop, 0, lv_vTopOffset, TextExpressionAssemble("Param/Expression/F1B25F11"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_VictoryBonusInfo", PlayerGroupAll());
        Wait(0.5, c_timeGame);
        gf__3P_DialogCounting(lv_vSuppliesKilled, (lv_vSuppliesKilled + gv__3P_SlaynKillBonusAmount), 3.0, lv_vDialogItem[3], StringExternal("Param/Value/4200494A"), StringExternal("Param/Value/027EDAD9"), gv__3P_AntagonistPG);
        lv_vSuppliesKilled += gv__3P_SlaynKillBonusAmount;
        lv_vBonus += 1;
    }

    Wait(0.5, c_timeGame);
    if (((ObjectiveGetState(gv_objectiveKillSlaynElementals) != c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveKillSlaynElementals02) != c_objectiveStateCompleted))) {
        lv_vTopOffset = (40 + lv_vBonus*25);
        SoundPlayForPlayer(SoundLink("UI_WarChest_ToastWhooshIn", -1), c_maxPlayers, gv__3P_AntagonistPG, 100.0, 0.0);
        TextExpressionSetToken("Param/Expression/241178F8", "A", IntToText(gv__3P_SlaynKillBonusAmount));
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 400, c_anchorTop, 0, lv_vTopOffset, TextExpressionAssemble("Param/Expression/241178F8"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_VictoryBonusInfo", PlayerGroupAll());
        Wait(0.5, c_timeGame);
        gf__3P_DialogCounting(lv_vSuppliesKilled, (lv_vSuppliesKilled + gv__3P_SlaynKillBonusAmount), 3.0, lv_vDialogItem[3], StringExternal("Param/Value/5C884EE9"), StringExternal("Param/Value/AC6FAD1E"), gv__3P_AntagonistPG);
        lv_vSuppliesKilled += gv__3P_SlaynKillBonusAmount;
        lv_vBonus += 1;
    }

    Wait(1.0, c_timeGame);
    DialogCreate(150, 150, c_anchorBottom, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), gv__3P_AntagonistPG, true);
    DialogSetVisible(DialogLastCreated(), gv__3P_CommandersPG, false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTop, 0, 20, StringExternal("Param/Value/FB33352D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_VictorySplashSmall", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorTop, 0, 20, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv__3P_QuitButton = DialogControlLastCreated();
    UISetCursorVisible(gv__3P_AntagonistPG, true);
    TriggerEnable(gt__3P_QuitButtonUsed, true);
    return true;
}

trigger auto_gf__3P_AmonMissionEndFanfare_Trigger = null;

void gf__3P_AmonMissionEndFanfare () {
    if (auto_gf__3P_AmonMissionEndFanfare_Trigger == null) {
        auto_gf__3P_AmonMissionEndFanfare_Trigger = TriggerCreate("auto_gf__3P_AmonMissionEndFanfare_TriggerFunc");
    }

    TriggerExecute(auto_gf__3P_AmonMissionEndFanfare_Trigger, false, false);
}

bool auto_gf__3P_AmonMissionEndFanfare_TriggerFunc (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    sound lv_vSound;
    int[7] lv_vDialogItem;
    int lv_vSuppliesKilled;
    int lv_vBonus;
    int lv_vTopOffset;

    // Automatic Variable Declarations
    const int autoEC80601C_ae = 7;
    int autoEC80601C_var;
    const int autoB357B7C6_ae = 7;
    int autoB357B7C6_var;
    const int autoA4CA22D8_ae = 5;
    int autoA4CA22D8_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_vDialogItem[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    if ((gv__3P_ObjectiveKillUnitsActive == true)) {
        gv__3P_ObjectiveKillUnitsActive = false;
    }
    else {
        return true;
    }
    if ((ObjectiveGetState(gv__3P_ObjectiveKillJinara) == c_objectiveStateCompleted)) {
        return true;
    }

    libCOUI_gf_CU_GPShowHide(false, gv_pLAYER_11_ANTAGONIST, c_transitionDurationImmediate);
    CameraPan(gv_pLAYER_11_ANTAGONIST, PointFromId(881), 2.0, -1, 10.0, false);
    CameraSetValue(gv_pLAYER_11_ANTAGONIST, c_cameraValueDistance, (CameraGetDistance(gv_pLAYER_11_ANTAGONIST)+10), 2.0, -1, 10.0);
    CameraLockInput(gv_pLAYER_11_ANTAGONIST, true);
    UnitGroupSelect(UnitGroupSelected(gv_pLAYER_11_ANTAGONIST), gv_pLAYER_11_ANTAGONIST, false);
    UISetCursorVisible(gv__3P_AntagonistPG, false);
    libNtve_gf_HideGameUI(false, gv__3P_AntagonistPG);
    UISetFrameVisible(gv__3P_AntagonistPG, c_syncFrameTypeAlertPanel, false);
    UISetFrameVisible(gv__3P_AntagonistPG, c_syncFrameTypeTextTag, false);
    UIClearMessages(gv__3P_AntagonistPG, c_messageAreaAll);
    libNtve_gf_ShowHidePlacementModels(false);
    UIFlyerHelperOverride(gv__3P_AntagonistPG, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
    DialogControlSetVisible(gv__3P_IncomeRateDialogItem, PlayerGroupAll(), false);
    UISetMode(gv__3P_AntagonistPG, c_uiModeLetterboxed, c_transitionDurationDefault);
    SoundPlayForPlayer(SoundLink("ZKorhal03MusicCutscene02_MissionVictory", -1), c_maxPlayers, gv__3P_AntagonistPG, 100.0, 0.0);
    autoEC80601C_var = 3;
    for ( ; autoEC80601C_var <= autoEC80601C_ae; autoEC80601C_var += 1 ) {
        PlayerSetAlliance(autoEC80601C_var, c_allianceIdControl, gv_pLAYER_11_ANTAGONIST, false);
    }
    Wait(0.5, c_timeGame);
    DialogCreate(600, 600, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 700, 200, c_anchorTop, 0, 10, StringExternal("Param/Value/40EA0497"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_MissionEndSplash", PlayerGroupAll());
    lv_vDialogItem[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 700, 200, c_anchorTop, 4, 80, StringExternal("Param/Value/83526C22"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_MissionEndSplashB", PlayerGroupAll());
    lv_vDialogItem[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 400, c_anchorTop, 0, 30, StringExternal("Param/Value/4AEF50B7"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_VictoryInfo", PlayerGroupAll());
    lv_vDialogItem[3] = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), gv__3P_AntagonistPG, true);
    DialogSetVisible(DialogLastCreated(), gv__3P_CommandersPG, false);
    Wait(1.0, c_timeGame);
    lv_vSuppliesKilled = FixedToInt(gv__3P_SuppliesKilled);
    SoundPlayForPlayer(SoundLink("Amon_Vox_LoopCustom", -1), c_maxPlayers, gv__3P_AntagonistPG, 150.0, 0.0);
    lv_vSound = SoundLastPlayed();
    if (((((gv__3P_VespeneKilled * 2.0) + gv__3P_MineralsKilled) >= 50000.0) || (((gv__3P_SuppliesMadeKilled * 4.0) + gv__3P_SuppliesKilled) >= 1000.0))) {
        if (((((gv__3P_VespeneKilled * 2.0) + gv__3P_MineralsKilled) >= 25000.0) || (((gv__3P_SuppliesMadeKilled * 4.0) + gv__3P_SuppliesKilled) >= 500.0))) {
            TransmissionSendForPlayerSelect(gv__3P_AntagonistPG, TransmissionSourceFromUnitType("HybridBehemoth", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/4F2A86E6"), StringExternal("Param/Value/DCCFDF60"), 6.0, c_transmissionDurationSet, false, c_maxPlayers, false);
        }
        else {
            TransmissionSendForPlayerSelect(gv__3P_AntagonistPG, TransmissionSourceFromUnitType("HybridBehemoth", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/62EF8140"), StringExternal("Param/Value/F6C8680B"), 6.0, c_transmissionDurationSet, false, c_maxPlayers, false);
        }
    }
    else {
        TransmissionSendForPlayerSelect(gv__3P_AntagonistPG, TransmissionSourceFromUnitType("HybridBehemoth", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/7F8D3D93"), StringExternal("Param/Value/EED26B7F"), 6.0, c_transmissionDurationSet, false, c_maxPlayers, false);
    }
    if ((lv_vSuppliesKilled < 40)) {
        gf__3P_DialogCounting(0, lv_vSuppliesKilled, MaxF((lv_vSuppliesKilled * 0.125), 0.125), DialogControlLastCreated(), StringExternal("Param/Value/A11F070C"), StringExternal("Param/Value/1CAE1ADC"), gv__3P_AntagonistPG);
    }
    else {
        gf__3P_DialogCounting(0, lv_vSuppliesKilled, 5.0, DialogControlLastCreated(), StringExternal("Param/Value/2D699693"), StringExternal("Param/Value/7187C350"), gv__3P_AntagonistPG);
    }
    SoundStop(lv_vSound, true);
    Wait(1.0, c_timeGame);
    if (((ObjectiveGetState(gv__3P_ObjectiveKillJinara) == c_objectiveStateCompleted) || (ObjectiveGetState(gv_objectiveKillSlaynElementals) == c_objectiveStateFailed) || (ObjectiveGetState(gv_objectiveKillSlaynElementals02) == c_objectiveStateFailed))) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 430, 1, c_anchorTop, -3, 250, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(100.0, 13.3, 13.3), c_triggerBlendModeNormal);
    }

    if ((ObjectiveGetState(gv__3P_ObjectiveKillJinara) == c_objectiveStateCompleted)) {
        lv_vTopOffset = (70 + lv_vBonus*25);
        SoundPlayForPlayer(SoundLink("UI_WarChest_ToastWhooshIn", -1), c_maxPlayers, gv__3P_AntagonistPG, 100.0, 0.0);
        TextExpressionSetToken("Param/Expression/528FB926", "A", IntToText(gv__3P_JinaraKillBonusAmount));
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 400, c_anchorTop, 0, lv_vTopOffset, TextExpressionAssemble("Param/Expression/528FB926"), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_vDialogItem[6] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_VictoryBonusInfo", PlayerGroupAll());
        Wait(0.5, c_timeGame);
        gf__3P_DialogCounting(lv_vSuppliesKilled, (lv_vSuppliesKilled + gv__3P_JinaraKillBonusAmount), 3.0, lv_vDialogItem[3], StringExternal("Param/Value/3EE15E1F"), StringExternal("Param/Value/35325413"), gv__3P_AntagonistPG);
        lv_vSuppliesKilled += gv__3P_JinaraKillBonusAmount;
        lv_vBonus += 1;
    }

    if ((ObjectiveGetState(gv_objectiveKillSlaynElementals) == c_objectiveStateFailed)) {
        lv_vTopOffset = (70 + lv_vBonus*25);
        SoundPlayForPlayer(SoundLink("UI_WarChest_ToastWhooshIn", -1), c_maxPlayers, gv__3P_AntagonistPG, 100.0, 0.0);
        TextExpressionSetToken("Param/Expression/B217B3AB", "A", IntToText(gv__3P_SlaynKillBonusAmount));
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 400, c_anchorTop, 0, lv_vTopOffset, TextExpressionAssemble("Param/Expression/B217B3AB"), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_vDialogItem[4] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_VictoryBonusInfo", PlayerGroupAll());
        Wait(0.5, c_timeGame);
        gf__3P_DialogCounting(lv_vSuppliesKilled, (lv_vSuppliesKilled + gv__3P_SlaynKillBonusAmount), 3.0, lv_vDialogItem[3], StringExternal("Param/Value/DC66CE9D"), StringExternal("Param/Value/F2EA0C37"), gv__3P_AntagonistPG);
        lv_vSuppliesKilled += gv__3P_SlaynKillBonusAmount;
        lv_vBonus += 1;
    }

    Wait(0.5, c_timeGame);
    if ((ObjectiveGetState(gv_objectiveKillSlaynElementals02) == c_objectiveStateFailed)) {
        lv_vTopOffset = (70 + lv_vBonus*25);
        SoundPlayForPlayer(SoundLink("UI_WarChest_ToastWhooshIn", -1), c_maxPlayers, gv__3P_AntagonistPG, 100.0, 0.0);
        TextExpressionSetToken("Param/Expression/58A6CD15", "A", IntToText(gv__3P_SlaynKillBonusAmount));
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 400, c_anchorTop, 0, lv_vTopOffset, TextExpressionAssemble("Param/Expression/58A6CD15"), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_vDialogItem[5] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_VictoryBonusInfo", PlayerGroupAll());
        Wait(0.5, c_timeGame);
        gf__3P_DialogCounting(lv_vSuppliesKilled, (lv_vSuppliesKilled + gv__3P_SlaynKillBonusAmount), 3.0, lv_vDialogItem[3], StringExternal("Param/Value/2C7ED6E2"), StringExternal("Param/Value/DFEA5F01"), gv__3P_AntagonistPG);
        lv_vSuppliesKilled += gv__3P_SlaynKillBonusAmount;
        lv_vBonus += 1;
    }

    Wait(1.0, c_timeGame);
    DialogCreate(150, 100, c_anchorBottomLeft, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), gv__3P_AntagonistPG, true);
    DialogSetVisible(DialogLastCreated(), gv__3P_CommandersPG, false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTop, 0, 20, StringExternal("Param/Value/398C5987"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_VictorySplashSmall", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorTop, 0, 20, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv__3P_QuitButton = DialogControlLastCreated();
    UISetCursorVisible(gv__3P_AntagonistPG, true);
    CameraLockInput(gv_pLAYER_11_ANTAGONIST, false);
    TriggerEnable(gt__3P_QuitButtonUsed, true);
    autoB357B7C6_var = 3;
    for ( ; autoB357B7C6_var <= autoB357B7C6_ae; autoB357B7C6_var += 1 ) {
        PlayerSetAlliance(autoB357B7C6_var, c_allianceIdControl, gv_pLAYER_11_ANTAGONIST, true);
    }
    Wait(10.0, c_timeGame);
    autoA4CA22D8_var = 1;
    for ( ; autoA4CA22D8_var <= autoA4CA22D8_ae; autoA4CA22D8_var += 1 ) {
        DialogControlFadeTransparency(lv_vDialogItem[autoA4CA22D8_var], PlayerGroupAll(), 2.0, 100.0);
    }
    return true;
}

void gf__3P_EarlyStart () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv__3P_Started == false)) {
        gv__3P_Started = true;
        libCOUI_gf_CU_CommanderFinalizeStates(1);
        libCOUI_gf_CU_CommanderFinalizeStates(2);
        TriggerSendEvent(libCOUI_gv_cUC_CommChoiceEventClosed);
    }

}

trigger auto_gf_RunTriggeratMissionTime_Trigger = null;
fixed auto_gf_RunTriggeratMissionTime_lp_time;
trigger auto_gf_RunTriggeratMissionTime_lp_trigger;

void gf_RunTriggeratMissionTime (fixed lp_time, trigger lp_trigger) {
    auto_gf_RunTriggeratMissionTime_lp_time = lp_time;
    auto_gf_RunTriggeratMissionTime_lp_trigger = lp_trigger;

    if (auto_gf_RunTriggeratMissionTime_Trigger == null) {
        auto_gf_RunTriggeratMissionTime_Trigger = TriggerCreate("auto_gf_RunTriggeratMissionTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunTriggeratMissionTime_Trigger, false, false);
}

bool auto_gf_RunTriggeratMissionTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_time = auto_gf_RunTriggeratMissionTime_lp_time;
    trigger lp_trigger = auto_gf_RunTriggeratMissionTime_lp_trigger;

    // Automatic Variable Declarations
    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_trigger, true, false);
    }

    return true;
}

string gf_FormatIntegerIntoMultiDigitString (int lp_integer, int lp_digits) {
    // Variable Declarations
    int lv_i;
    string lv_intString;

    // Automatic Variable Declarations
    int autoE7A604C4_ae;
    const int autoE7A604C4_ai = 1;

    // Variable Initialization
    lv_intString = IntToString(lp_integer);

    // Implementation
    autoE7A604C4_ae = lp_digits;
    lv_i = StringLength(lv_intString);
    for ( ; ( (autoE7A604C4_ai >= 0 && lv_i <= autoE7A604C4_ae) || (autoE7A604C4_ai < 0 && lv_i >= autoE7A604C4_ae) ) ; lv_i += autoE7A604C4_ai ) {
        lv_intString = ("0" + lv_intString);
    }
    return lv_intString;
}

unitgroup gf_GetSupportingUnitsNearJinara (int lp_player, int lp_count) {
    // Variable Declarations
    unit lv_pushingIter;
    unitgroup lv_returnGroup;
    region lv_areaToCheckForBehavior;

    // Automatic Variable Declarations
    unitgroup auto5E3BA678_g;
    int auto5E3BA678_u;

    // Variable Initialization
    lv_returnGroup = UnitGroupEmpty();

    // Implementation
    lv_areaToCheckForBehavior = RegionCircle(UnitGetPosition(gv_tugOfWarBubbleUnit), (gv_tugOfWar_Presence_Check_Humans + 2.0));
    auto5E3BA678_g = UnitGroup(null, lp_player, lv_areaToCheckForBehavior, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5E3BA678_u = UnitGroupCount(auto5E3BA678_g, c_unitCountAll);
    for (;; auto5E3BA678_u -= 1) {
        lv_pushingIter = UnitGroupUnitFromEnd(auto5E3BA678_g, auto5E3BA678_u);
        if (lv_pushingIter == null) { break; }
        if ((UnitHasBehavior2(lv_pushingIter, "PitAlarakShieldRegen") == true)) {
            UnitGroupAdd(lv_returnGroup, lv_pushingIter);
            if ((lp_count != 0) && (UnitGroupCount(lv_returnGroup, c_unitCountAlive) >= lp_count)) {
                break;
            }

        }

    }
    return lv_returnGroup;
}

unitgroup gf_GetPushingUnitsNearAmonsChampion (int lp_count) {
    // Variable Declarations
    unit lv_pushingIter;
    int lv_enemyPlayerIter;
    unitgroup lv_returnGroup;

    // Automatic Variable Declarations
    playergroup auto4A3675F7_g;
    unitgroup auto06659D9D_g;
    int auto06659D9D_u;

    // Variable Initialization
    lv_returnGroup = UnitGroupEmpty();

    // Implementation
    auto4A3675F7_g = gv_enemyPlayerGroup;
    lv_enemyPlayerIter = -1;
    while (true) {
        lv_enemyPlayerIter = PlayerGroupNextPlayer(auto4A3675F7_g, lv_enemyPlayerIter);
        if (lv_enemyPlayerIter < 0) { break; }
        auto06659D9D_g = UnitGroup(null, lv_enemyPlayerIter, RegionCircle(UnitGetPosition(gv_tugOfWarBubbleUnit), (gv_tugOfWar_Presence_Check_EnemyAI * 1.25)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto06659D9D_u = UnitGroupCount(auto06659D9D_g, c_unitCountAll);
        for (;; auto06659D9D_u -= 1) {
            lv_pushingIter = UnitGroupUnitFromEnd(auto06659D9D_g, auto06659D9D_u);
            if (lv_pushingIter == null) { break; }
            if (((UnitFilterMatch(lv_pushingIter, lv_enemyPlayerIter, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == true) || (UnitGetType(lv_pushingIter) == "VoidShardAC")) && (UnitGetType(lv_pushingIter) != "CreepTumor") && (UnitGetType(lv_pushingIter) != "CreepTumorBurrowed") && (UnitGetType(lv_pushingIter) != "CreepTumorUsed") && (UnitGetType(lv_pushingIter) != "VoidEnergyReservoir") && (UnitGetType(lv_pushingIter) != "BarrierWall") && (UnitGetType(lv_pushingIter) != "Observer") && (UnitGetType(lv_pushingIter) != "ObserverSiegeMode") && (UnitGetType(lv_pushingIter) != "NuclearMine") && (UnitGetType(lv_pushingIter) != "MutatorStormCloud") && (UnitGetType(lv_pushingIter) != "MutatorTornado") && (UnitGetType(lv_pushingIter) != "MutatorPurifierBeam") && (UnitGetType(lv_pushingIter) != "MutatorSpiderMineBurrowed") && (UnitTypeTestFlag(UnitGetType(lv_pushingIter), c_unitFlagWorker) == false)) {
                UnitGroupAdd(lv_returnGroup, lv_pushingIter);
                if ((UnitGroupCount(lv_returnGroup, c_unitCountAlive) >= lp_count)) {
                    break;
                }

            }

        }
    }
    return lv_returnGroup;
}

fixed gf_TugOfWarGetSpeed (int lp_state) {
    // Variable Declarations
    fixed lv_speedReturn;
    fixed lv_speedBaseForward;
    fixed lv_speedBaseReverse;

    // Automatic Variable Declarations
    int auto6A182D28_val;

    // Variable Initialization

    // Implementation
    if ((GameGetMissionTime() >= (20.0 * 60.0))) {
        lv_speedBaseForward = 1.0;
        lv_speedBaseReverse = 0.5;
    }
    else if ((GameGetMissionTime() >= (16.0 * 60.0))) {
        lv_speedBaseForward = 0.9;
        lv_speedBaseReverse = 0.45;
    }
    else if ((GameGetMissionTime() >= (12.0 * 60.0))) {
        lv_speedBaseForward = 0.75;
        lv_speedBaseReverse = 0.375;
    }
    else if ((GameGetMissionTime() >= (8.0 * 60.0))) {
        lv_speedBaseForward = 0.6;
        lv_speedBaseReverse = 0.3;
    }
    else if ((GameGetMissionTime() >= (4.0 * 60.0))) {
        lv_speedBaseForward = 0.5;
        lv_speedBaseReverse = 0.25;
    }
    else if (true) {
        lv_speedBaseForward = 0.35;
        lv_speedBaseReverse = 0.175;
    }
    auto6A182D28_val = lp_state;
    if (auto6A182D28_val == ge_TugOfWarState_Forward) {
        if ((gv_finalHybridWaveDefeated == false)) {
            lv_speedReturn = lv_speedBaseForward;
        }
        else {
            lv_speedReturn = 1.5;
        }
    }
    else if (auto6A182D28_val == ge_TugOfWarState_Reverse) {
        lv_speedReturn = lv_speedBaseReverse;
        lv_speedReturn *= gv_tugOfWar_Speed_3P_Mod;
    }
    else if (auto6A182D28_val == ge_TugOfWarState_ReverseSuper) {
        lv_speedReturn = gv_hybridReverseSpeed;
        lv_speedReturn *= gv_tugOfWar_Speed_3P_Mod;
    }
    else {
        lv_speedReturn = lv_speedBaseReverse;
        lv_speedReturn *= gv_tugOfWar_Speed_3P_Mod;
    }
    return lv_speedReturn;
}

trigger auto_gf_HybridSuperPusherFXLogic_Trigger = null;
unit auto_gf_HybridSuperPusherFXLogic_lp_superPusher;

void gf_HybridSuperPusherFXLogic (unit lp_superPusher) {
    auto_gf_HybridSuperPusherFXLogic_lp_superPusher = lp_superPusher;

    if (auto_gf_HybridSuperPusherFXLogic_Trigger == null) {
        auto_gf_HybridSuperPusherFXLogic_Trigger = TriggerCreate("auto_gf_HybridSuperPusherFXLogic_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridSuperPusherFXLogic_Trigger, false, false);
}

bool auto_gf_HybridSuperPusherFXLogic_TriggerFunc (bool testConds, bool runActions) {
    unit lp_superPusher = auto_gf_HybridSuperPusherFXLogic_lp_superPusher;

    // Automatic Variable Declarations
    // Implementation
    UnitSetScale(lp_superPusher, 125.0, 125.0, 100.0);
    ActorSend(libNtve_gf_MainActorofUnit(lp_superPusher), libNtve_gf_SetTintColor(Color(100.00, 0.00, 0.00), 3.0, 0.0));
    while ((UnitIsAlive(lp_superPusher) == true)) {
        UnitSetPosition(lp_superPusher, UnitGetPosition(gv_tugOfWarBubbleUnit), true);
        Wait(0.1, c_timeReal);
    }
    return true;
}

bool gf_HybridcanSuperPush (unit lp_hybrid) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitAbilityCheck(lp_hybrid, "move", true) == true)) {
        return true;
    }
    else {
        return false;
    }
}

void gf_SlaynElementalKilled (unit lp_killedElemental) {
    // Variable Declarations
    unit lv_slaynElementalCoreUnit;
    trigger lv_objectiveComplete;

    // Automatic Variable Declarations
    unit autoCF1C8249_val;
    trigger auto7AEC04E4_val;

    // Variable Initialization

    // Implementation
    autoCF1C8249_val = lp_killedElemental;
    if (autoCF1C8249_val == gv_slaynElemental01) {
        lv_objectiveComplete = gt_ObjectiveKillSlaynElementalsComplete;
    }
    else if (autoCF1C8249_val == gv_slaynElemental02a) {
        lv_objectiveComplete = gt_ObjectiveKillSlaynElementalsComplete02;
    }
    else if (autoCF1C8249_val == gv_slaynElemental02b) {
        lv_objectiveComplete = gt_ObjectiveKillSlaynElementalsComplete02;
    }
    else {
        return ;
    }
    gv_objectiveElementalsKilledCount += 1;
    Wait(2.0, c_timeReal);
    TriggerExecute(lv_objectiveComplete, true, false);
    auto7AEC04E4_val = lv_objectiveComplete;
    if (auto7AEC04E4_val == gt_ObjectiveKillSlaynElementalsComplete) {
        TriggerExecute(gt_SlaynElementalKilledFirstQ, true, false);
    }
    else if (auto7AEC04E4_val == gt_ObjectiveKillSlaynElementalsComplete02) {
        TriggerExecute(gt_SlaynElementalKilledLastQ, true, false);
    }
    else {
    }
}

trigger auto_gf_RunSlaynElementalAI_Trigger = null;
unit auto_gf_RunSlaynElementalAI_lp_cHOSEN_UNIT;
region auto_gf_RunSlaynElementalAI_lp_cHOSEN_REGION;
int auto_gf_RunSlaynElementalAI_lp_wAYPOINT_MAX;

void gf_RunSlaynElementalAI (unit lp_cHOSEN_UNIT, region lp_cHOSEN_REGION, int lp_wAYPOINT_MAX) {
    auto_gf_RunSlaynElementalAI_lp_cHOSEN_UNIT = lp_cHOSEN_UNIT;
    auto_gf_RunSlaynElementalAI_lp_cHOSEN_REGION = lp_cHOSEN_REGION;
    auto_gf_RunSlaynElementalAI_lp_wAYPOINT_MAX = lp_wAYPOINT_MAX;

    if (auto_gf_RunSlaynElementalAI_Trigger == null) {
        auto_gf_RunSlaynElementalAI_Trigger = TriggerCreate("auto_gf_RunSlaynElementalAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunSlaynElementalAI_Trigger, false, false);
}

bool auto_gf_RunSlaynElementalAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_cHOSEN_UNIT = auto_gf_RunSlaynElementalAI_lp_cHOSEN_UNIT;
    region lp_cHOSEN_REGION = auto_gf_RunSlaynElementalAI_lp_cHOSEN_REGION;
    int lp_wAYPOINT_MAX = auto_gf_RunSlaynElementalAI_lp_wAYPOINT_MAX;

    // Variable Declarations
    string lv_pathWaypointString;
    int lv_pathWaypointIndex;
    int lv_faceSuckedUnits;
    unitgroup lv_faceSuckerCandidates;
    unitgroup lv_validTargets;
    timer lv_bonusObjectiveDuration;
    string lv_bonusObjective;
    timer lv_disableAbilityTimer;
    unit lv_disableTarget;
    order lv_elementalOrder;
    order lv_elementalOrder_Debug;
    int lv_elementalOrderIter;
    bool lv_orderAlreadyQueued;
    fixed lv_timeInCombat;
    fixed lv_c_AI_THINK_TIME;
    point lv_disableAoETargetLocation;
    int lv_disableAoEMinHits;
    int lv_disableAoEMinScore;

    // Automatic Variable Declarations
    unit auto01FBA150_val;
    unitgroup auto1AEC9506_g;
    int auto1AEC9506_u;
    unit auto1AEC9506_var;
    unit auto1DE1CC80_val;

    // Variable Initialization
    lv_pathWaypointString = "";
    lv_pathWaypointIndex = 1;
    lv_faceSuckerCandidates = UnitGroupEmpty();
    lv_validTargets = UnitGroupEmpty();
    lv_bonusObjectiveDuration = TimerCreate();
    lv_disableAbilityTimer = TimerCreate();
    lv_c_AI_THINK_TIME = 0.33;

    // Implementation
    auto01FBA150_val = lp_cHOSEN_UNIT;
    if (auto01FBA150_val == gv_slaynElemental01) {
        lv_pathWaypointString = "Zoanthisk01_Path_0";
        lv_bonusObjective = "AC_SlaynHamsterBall_Bonus01";
    }
    else if (auto01FBA150_val == gv_slaynElemental02a) {
        lv_pathWaypointString = "Zoanthisk02a_Path_0";
        lv_bonusObjective = "AC_SlaynHamsterBall_Bonus02";
    }
    else if (auto01FBA150_val == gv_slaynElemental02b) {
        lv_pathWaypointString = "Zoanthisk02b_Path_0";
        lv_bonusObjective = "AC_SlaynHamsterBall_Bonus02";
    }
    else {
        return true;
    }
    if (((lp_cHOSEN_UNIT == gv_slaynElemental02a) || (lp_cHOSEN_UNIT == gv_slaynElemental02b))) {
        UnitSetPropertyFixed(lp_cHOSEN_UNIT, c_unitPropLifeMax, (UnitGetPropertyFixed(lp_cHOSEN_UNIT, c_unitPropLife, c_unitPropCurrent) * 1.75));
        UnitSetPropertyFixed(lp_cHOSEN_UNIT, c_unitPropLifePercent, 100.0);
        gv_elementalMaxDisableCooldown -= 5.0;
    }

    UnitAbilityEnable(lp_cHOSEN_UNIT, "attack", false);
    TimerStart(lv_bonusObjectiveDuration, (6.0 * 60.0), false, c_timeAI);
    TimerStart(lv_disableAbilityTimer, gv_elementalMaxDisableCooldown, false, c_timeAI);
    UnitBehaviorAddPlayer(lp_cHOSEN_UNIT, "PublicTimedLife", UnitGetOwner(lp_cHOSEN_UNIT), 1);
    UnitBehaviorSetDuration(lp_cHOSEN_UNIT, "PublicTimedLife", TimerGetRemaining(lv_bonusObjectiveDuration));
    UnitBehaviorSetDurationRemaining(lp_cHOSEN_UNIT, "PublicTimedLife", TimerGetRemaining(lv_bonusObjectiveDuration));
    lv_disableAoEMinHits = 8;
    Wait(3.0, c_timeAI);
    UnitIssueOrder(lp_cHOSEN_UNIT, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName((lv_pathWaypointString + IntToString(1)))), c_orderQueueReplace);
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_cHOSEN_UNIT) == true)) {
        if ((((gv_objectiveElementalWriteOutComplete01 == true) && (lv_bonusObjective == "AC_SlaynHamsterBall_Bonus01")) || ((gv_objectiveElementalWriteOutComplete02 == true) && (lv_bonusObjective == "AC_SlaynHamsterBall_Bonus02")))) {
            if ((TimerGetRemaining(lv_bonusObjectiveDuration) > 0.0)) {
                TextExpressionSetToken("Param/Expression/7E0CAB13", "DepartTimer", libCOOC_gf_FormatTimeCampaign(FixedToInt(TimerGetRemaining(lv_bonusObjectiveDuration))));
                libCOMI_gf_SetMissionObjectiveCustomText(lv_bonusObjective, TextExpressionAssemble("Param/Expression/7E0CAB13"));
            }

        }

        if ((TimerGetRemaining(lv_bonusObjectiveDuration) > 0.0)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_cHOSEN_UNIT), PointFromName((lv_pathWaypointString + IntToString(lv_pathWaypointIndex)))) <= 1)) {
                if (lv_pathWaypointIndex >= lp_wAYPOINT_MAX) {
                    lv_pathWaypointIndex = 1;
                }
                else {
                    lv_pathWaypointIndex = lv_pathWaypointIndex + 1;
                }
                UnitIssueOrder(lp_cHOSEN_UNIT, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName((lv_pathWaypointString + IntToString(lv_pathWaypointIndex)))), c_orderQueueAddToEnd);
            }

            if ((UnitOrderCount(lp_cHOSEN_UNIT) == 0)) {
                UnitIssueOrder(lp_cHOSEN_UNIT, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName((lv_pathWaypointString + IntToString(lv_pathWaypointIndex)))), c_orderQueueAddToEnd);
            }

            if ((TimerGetRemaining(lv_bonusObjectiveDuration) <= (TimerGetDuration(lv_bonusObjectiveDuration) * 0.33))) {
                TriggerExecute(gt_SlaynElementalGoingtoEscapeQ, true, false);
            }

        }

        if ((TimerGetRemaining(lv_disableAbilityTimer) <= 0.0)) {
            lv_faceSuckedUnits = 0;
            lv_faceSuckerCandidates = UnitGroupEmpty();
            lv_validTargets = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_cHOSEN_UNIT), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            UnitGroupAddUnitGroup(lv_validTargets, UnitGroup(null, gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(lp_cHOSEN_UNIT), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            UnitGroupAddUnitGroup(lv_validTargets, UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_cHOSEN_UNIT), 15.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            UnitGroupAddUnitGroup(lv_validTargets, UnitGroup(null, gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(lp_cHOSEN_UNIT), 15.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            UnitGroupRemoveUnitGroup(lv_validTargets, UnitGroupFilter(null, c_playerAny, lv_validTargets, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            auto1AEC9506_g = lv_validTargets;
            auto1AEC9506_u = UnitGroupCount(auto1AEC9506_g, c_unitCountAll);
            for (;; auto1AEC9506_u -= 1) {
                auto1AEC9506_var = UnitGroupUnitFromEnd(auto1AEC9506_g, auto1AEC9506_u);
                if (auto1AEC9506_var == null) { break; }
                if ((UnitHasBehavior2(auto1AEC9506_var, "SlaynElementalGrabAOEStun") == true)) {
                    lv_faceSuckedUnits += 1;
                    TriggerExecute(gt_SlaynElementalCocoonQ, true, false);
                }
                else {
                    UnitGroupAdd(lv_faceSuckerCandidates, auto1AEC9506_var);
                }
            }
            if ((UnitGroupCount(lv_faceSuckerCandidates, c_unitCountAlive) >= lv_disableAoEMinHits)) {
                lv_disableAoETargetLocation = null;
                lv_disableAoETargetLocation = AIBestTargetPoint(lv_faceSuckerCandidates, lv_disableAoEMinHits, 10, 3.5, 3.0, UnitGetPosition(lp_cHOSEN_UNIT), 10.0, c_unitAttributeNone);
                if ((lv_disableAoETargetLocation != null)) {
                    UnitIssueOrder(lp_cHOSEN_UNIT, OrderTargetingPoint(AbilityCommand("SlaynElementalGrabAOE", 0), lv_disableAoETargetLocation), c_orderQueueAddToFront);
                    TimerStart(lv_disableAbilityTimer, gv_elementalMaxDisableCooldown, false, c_timeAI);
                }

            }
            else {
                if ((lv_timeInCombat > 3.0)) {
                    lv_disableTarget = AILastAttacker(lp_cHOSEN_UNIT);
                    if ((UnitIsAlive(lv_disableTarget) == true)) {
                        if ((libNtve_gf_UnitInRegion(lv_disableTarget, RegionCircle(UnitGetPosition(lp_cHOSEN_UNIT), 20.0)) == true)) {
                            TimerStart(lv_disableAbilityTimer, MaxF((gv_elementalMaxDisableCooldown - 8.0), 3.0), false, c_timeAI);
                            UnitIssueOrder(lp_cHOSEN_UNIT, OrderTargetingPoint(AbilityCommand("SlaynElementalGrabAOE", 0), UnitGetPosition(lv_disableTarget)), c_orderQueueAddToFront);
                        }
                        else {
                            lv_disableTarget = UnitGroupRandomUnit(UnitGroupAlliance(UnitGetOwner(lp_cHOSEN_UNIT), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_cHOSEN_UNIT), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                            if ((UnitIsAlive(lv_disableTarget) == true)) {
                                TimerStart(lv_disableAbilityTimer, MaxF((gv_elementalMaxDisableCooldown - 8.0), 3.0), false, c_timeAI);
                                UnitIssueOrder(lp_cHOSEN_UNIT, OrderTargetingPoint(AbilityCommand("SlaynElementalGrabAOE", 0), UnitGetPosition(lv_disableTarget)), c_orderQueueAddToFront);
                            }

                        }
                    }

                }

            }
        }

        if (((AIGetTime() - AILastAttack(lp_cHOSEN_UNIT)) <= 7.0)) {
            lv_timeInCombat += lv_c_AI_THINK_TIME;
            TimerPause(lv_bonusObjectiveDuration, true);
        }
        else {
            lv_timeInCombat = 0.0;
            TimerPause(lv_bonusObjectiveDuration, false);
        }
        UnitBehaviorSetDurationRemaining(lp_cHOSEN_UNIT, "PublicTimedLife", TimerGetRemaining(lv_bonusObjectiveDuration));
        Wait(lv_c_AI_THINK_TIME, c_timeAI);
    }
    PingDestroy(libHots_gf_PingStoredForUnit(lp_cHOSEN_UNIT, 1));
    libCOMI_gf_SetMissionObjectiveCustomText(lv_bonusObjective, StringToText(""));
    if ((TimerGetRemaining(lv_bonusObjectiveDuration) > 0.0)) {
        gf_SlaynElementalKilled(lp_cHOSEN_UNIT);
    }
    else {
        TriggerExecute(gt_SlaynElementalEscapesQ, true, false);
        auto1DE1CC80_val = lp_cHOSEN_UNIT;
        if (auto1DE1CC80_val == gv_slaynElemental01) {
            TriggerExecute(gt_ObjectiveKillSlaynElementalsFailed, true, false);
        }
        else if (auto1DE1CC80_val == gv_slaynElemental02a) {
            TriggerExecute(gt_ObjectiveKillSlaynElementalsFailed02, true, false);
        }
        else if (auto1DE1CC80_val == gv_slaynElemental02b) {
            TriggerExecute(gt_ObjectiveKillSlaynElementalsFailed02, true, false);
        }
        else {
        }
    }
    return true;
}

fixed gf_AttackWaveMissionTime () {
    // Automatic Variable Declarations
    // Implementation
    return TimerGetElapsed(gv_attackWaveTime);
}

trigger auto_gf_EscortWaveatTime_Trigger = null;
fixed auto_gf_EscortWaveatTime_lp_time;
trigger auto_gf_EscortWaveatTime_lp_aIEscortWave;

void gf_EscortWaveatTime (fixed lp_time, trigger lp_aIEscortWave) {
    auto_gf_EscortWaveatTime_lp_time = lp_time;
    auto_gf_EscortWaveatTime_lp_aIEscortWave = lp_aIEscortWave;

    if (auto_gf_EscortWaveatTime_Trigger == null) {
        auto_gf_EscortWaveatTime_Trigger = TriggerCreate("auto_gf_EscortWaveatTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_EscortWaveatTime_Trigger, false, false);
}

bool auto_gf_EscortWaveatTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_time = auto_gf_EscortWaveatTime_lp_time;
    trigger lp_aIEscortWave = auto_gf_EscortWaveatTime_lp_aIEscortWave;

    // Automatic Variable Declarations
    // Implementation
    while (!(((lp_time - gv_c_EscortWavePreTime) <= gf_AttackWaveMissionTime()))) {
        Wait(0.25, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_aIEscortWave, true, false);
    }

    return true;
}

void gf_EscortWaveSetup (int lp_player, region lp_regionToWarpIn) {
    // Automatic Variable Declarations
    // Implementation
    AIAttackWaveSetTargetEscortNL(lp_player, libNtve_gf_ConvertUnitToUnitGroup(gv_tugOfWarEscortTargetUnit), 0);
    AIAttackWaveSetGatherPoint(lp_player, RegionGetCenter(lp_regionToWarpIn));
    if ((lp_regionToWarpIn == RegionFromId(30))) {
        AIAttackWaveAddWaypoint(lp_player, PointFromId(900), false);
    }

    if (((lp_regionToWarpIn == RegionFromId(31)) || (lp_regionToWarpIn == RegionFromId(30)))) {
        AIAttackWaveAddWaypoint(lp_player, PointFromId(2545), false);
    }

}

region gf_GetEscortWarpInRegion () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_tugOfWar_Waypoint_FarthestForward <= 9)) {
        return RegionFromId(31);
    }
    else if ((gv_tugOfWar_Waypoint_FarthestForward <= 18)) {
        return RegionFromId(30);
    }
    return RegionFromId(25);
}

void gf_EscortWaveSend (int lp_waveTechLevel, int lp_waveResourceAmount, region lp_dropInArea) {
    // Variable Declarations
    int lv_escortPlayerIter;
    point lv_spawnLocation;

    // Automatic Variable Declarations
    region auto245895C1_val;
    playergroup auto0D00FB44_g;

    // Variable Initialization

    // Implementation
    if ((libCOMI_gf_GameIsOver() == true)) {
        return ;
    }

    auto245895C1_val = lp_dropInArea;
    if (auto245895C1_val == RegionFromId(31)) {
        lv_spawnLocation = PointFromId(2538);
    }
    else if (auto245895C1_val == RegionFromId(30)) {
        lv_spawnLocation = PointFromId(2543);
    }
    else {
        lv_spawnLocation = PointFromId(2544);
    }
    auto0D00FB44_g = gv_escortWavePlayers;
    lv_escortPlayerIter = -1;
    while (true) {
        lv_escortPlayerIter = PlayerGroupNextPlayer(auto0D00FB44_g, lv_escortPlayerIter);
        if (lv_escortPlayerIter < 0) { break; }
        libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(lv_escortPlayerIter, lv_spawnLocation);
        gf_EscortWaveSetup(lv_escortPlayerIter, lp_dropInArea);
    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_escortWavePlayers, 1), PlayerGroupPlayer(gv_escortWavePlayers, 2), lp_waveResourceAmount, lp_waveTechLevel, lv_spawnLocation, true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
}

trigger auto_gf_AttackWaveatTime_Trigger = null;
fixed auto_gf_AttackWaveatTime_lp_time;
trigger auto_gf_AttackWaveatTime_lp_aIAttackWave;

void gf_AttackWaveatTime (fixed lp_time, trigger lp_aIAttackWave) {
    auto_gf_AttackWaveatTime_lp_time = lp_time;
    auto_gf_AttackWaveatTime_lp_aIAttackWave = lp_aIAttackWave;

    if (auto_gf_AttackWaveatTime_Trigger == null) {
        auto_gf_AttackWaveatTime_Trigger = TriggerCreate("auto_gf_AttackWaveatTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_AttackWaveatTime_Trigger, false, false);
}

bool auto_gf_AttackWaveatTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_time = auto_gf_AttackWaveatTime_lp_time;
    trigger lp_aIAttackWave = auto_gf_AttackWaveatTime_lp_aIAttackWave;

    // Automatic Variable Declarations
    // Implementation
    while (!(((lp_time - gv_c_AttackWavePreTime) <= gf_AttackWaveMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_aIAttackWave, true, false);
    }

    return true;
}

point gf_AttackWaveDestination (int lp_player) {
    // Automatic Variable Declarations
    int auto4E0650BA_val;

    // Implementation
    auto4E0650BA_val = lp_player;
    if (auto4E0650BA_val == gv_pLAYER_03_EnemyP01) {
        return PlayerStartLocation(gv_pLAYER_01_USER);
    }
    else if (auto4E0650BA_val == gv_pLAYER_04_EnemyP02) {
        return PlayerStartLocation(gv_pLAYER_02_USER);
    }
    else if (auto4E0650BA_val == gv_pLAYER_05_EnemyP01_TugOfWarPath) {
        return PlayerStartLocation(gv_pLAYER_01_USER);
    }
    else if (auto4E0650BA_val == gv_pLAYER_06_EnemyP02_TugOfWarPath) {
        return PlayerStartLocation(gv_pLAYER_02_USER);
    }
    else {
        return null;
    }
}

void gf_SetSingleAttackWavePath (region lp_spawnLocation) {
    // Automatic Variable Declarations
    region auto9E90962A_val;

    // Implementation
    auto9E90962A_val = lp_spawnLocation;
    if (auto9E90962A_val == RegionFromId(31)) {
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(901), false);
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(902), false);
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(903), false);
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(904), false);
    }
    else if (auto9E90962A_val == RegionFromId(30)) {
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(905), false);
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(906), false);
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(907), false);
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(912), false);
    }
    else {
    }
}

void gf_SetDoubleAttackWavePath (int lp_attackingPlayer, region lp_spawnLocation) {
    // Automatic Variable Declarations
    region autoBE0592D6_val;
    int autoBF05CF52_val;

    // Implementation
    autoBE0592D6_val = lp_spawnLocation;
    if (autoBE0592D6_val == RegionFromId(31)) {
        AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(901), false);
        AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(902), false);
        AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(903), false);
        AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(904), false);
    }
    else if (autoBE0592D6_val == RegionFromId(30)) {
        AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(905), false);
        AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(906), false);
        AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(907), false);
        AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(912), false);
    }
    else {
        autoBF05CF52_val = lp_attackingPlayer;
        if (autoBF05CF52_val == gv_pLAYER_03_EnemyP01) {
            AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(901), false);
            AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(902), false);
            AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(903), false);
            AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(904), false);
        }
        else if (autoBF05CF52_val == gv_pLAYER_04_EnemyP02) {
            AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(905), false);
            AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(906), false);
            AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(907), false);
            AIAttackWaveAddWaypoint(lp_attackingPlayer, PointFromId(912), false);
        }
        else {
        }
    }
}

region gf_GetAttackWarpInRegion (region lp_desiredSpawn) {
    // Variable Declarations
    unitfilter lv_allowSpawnFilter;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_allowSpawnFilter = UnitFilter(0, 0, 0, 0);

    // Implementation
    lv_allowSpawnFilter = UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    if ((lp_desiredSpawn == RegionFromId(25))) {
        return RegionFromId(25);
    }
    else if (((UnitGroupCount(UnitGroup(null, gv_pLAYER_03_EnemyP01, lp_desiredSpawn, lv_allowSpawnFilter, 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_04_EnemyP02, lp_desiredSpawn, lv_allowSpawnFilter, 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_05_EnemyP01_TugOfWarPath, lp_desiredSpawn, lv_allowSpawnFilter, 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_06_EnemyP02_TugOfWarPath, lp_desiredSpawn, lv_allowSpawnFilter, 1), c_unitCountAlive) > 0))) {
        return lp_desiredSpawn;
    }
    return RegionFromId(25);
}

void gf_SendSingleTargetDoubleWave (int lp_waveTechLevel, int lp_waveResourceAmount, region lp_dropInLocation) {
    // Variable Declarations
    int lv_vAttackWavePlayerIter;
    point lv_vAttackWaveSpawnLocation;
    unitgroup lv_vAttackWave;

    // Automatic Variable Declarations
    region autoD7D14329_val;
    playergroup auto483809C1_g;

    // Variable Initialization
    lv_vAttackWave = UnitGroupEmpty();

    // Implementation
    autoD7D14329_val = lp_dropInLocation;
    if (autoD7D14329_val == RegionFromId(31)) {
        lv_vAttackWaveSpawnLocation = PointFromId(61);
    }
    else if (autoD7D14329_val == RegionFromId(30)) {
        lv_vAttackWaveSpawnLocation = PointFromId(64);
    }
    else {
        lv_vAttackWaveSpawnLocation = PointFromId(65);
    }
    auto483809C1_g = gv_attackWavePlayers;
    lv_vAttackWavePlayerIter = -1;
    while (true) {
        lv_vAttackWavePlayerIter = PlayerGroupNextPlayer(auto483809C1_g, lv_vAttackWavePlayerIter);
        if (lv_vAttackWavePlayerIter < 0) { break; }
        AIAttackWaveSetTargetPoint(lv_vAttackWavePlayerIter, gf_AttackWaveDestination(lv_vAttackWavePlayerIter));
    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_attackWavePlayers, 1), PlayerGroupPlayer(gv_attackWavePlayers, 2), lp_waveResourceAmount, lp_waveTechLevel, lv_vAttackWaveSpawnLocation, false);
    UnitGroupAddUnitGroup(lv_vAttackWave, libCOMI_gf_LastCreatedCoopAttackForce());
    gf_SetSingleAttackWavePath(lp_dropInLocation);
    gf__3P_CreateHeroes(lv_vAttackWaveSpawnLocation, gv_pLAYER_03_EnemyP01);
    UnitGroupAddUnitGroup(lv_vAttackWave, gv__3P_LastCreatedHeroes);
    gf__3P_SetupAttackWave(lv_vAttackWave);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_vAttackWave, 0, true);
}

point gf_GetPathWaypoint (int lp_pathIndex) {
    // Automatic Variable Declarations
    // Implementation
    return PointFromName((gv_tugOfWarPointName + gf_FormatIntegerIntoMultiDigitString(lp_pathIndex, 1)));
}

unitgroup gf_CreateHybridPusherGroup (int lp_attackWave, point lp_spawnLocation) {
    // Variable Declarations
    unitgroup lv_returnGroup;

    // Automatic Variable Declarations
    int auto91FA9855_val;
    int autoC9FFA05F_n;
    int autoC9FFA05F_i;
    int auto6132B8DA_n;
    int auto6132B8DA_i;
    int auto50C060AF_n;
    int auto50C060AF_i;
    int autoC371450E_n;
    int autoC371450E_i;

    // Variable Initialization
    lv_returnGroup = UnitGroupEmpty();

    // Implementation
    auto91FA9855_val = lp_attackWave;
    if (auto91FA9855_val == ge_HybridAttack_Attack01) {
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 1, 1, 0, 0), gv_hybridPusher_Boss, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
        UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 2, 2, 0, 0), gv_hybridPusher_Enforcer01, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
        UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
    }
    else if (auto91FA9855_val == ge_HybridAttack_Attack02) {
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 2, 0, 0), gv_hybridPusher_Enforcer01, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
        UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 0, 0), gv_hybridPusher_Enforcer02, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
        UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 1, 1, 0, 0), gv_hybridPusher_Boss, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
        UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
    }
    else if (auto91FA9855_val == ge_HybridAttack_Attack03) {
        autoC9FFA05F_n = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 4, 5, 0, 0);
        for (autoC9FFA05F_i = 1; autoC9FFA05F_i <= autoC9FFA05F_n; autoC9FFA05F_i += 1) {
            if ((RandomInt(0, 2) != 0)) {
                UnitCreate(1, gv_hybridPusher_Enforcer01, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
                UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
            }
            else {
                UnitCreate(1, gv_hybridPusher_Enforcer02, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
                UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
            }
        }
        auto6132B8DA_n = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 2, 0, 0);
        for (auto6132B8DA_i = 1; auto6132B8DA_i <= auto6132B8DA_n; auto6132B8DA_i += 1) {
            UnitCreate(1, gv_hybridPusher_Boss, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
            UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
        }
    }
    else if (auto91FA9855_val == ge_HybridAttack_Attack04) {
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 2, 0, 0), gv_hybridPusher_Enforcer01, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
        UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 0, 0), gv_hybridPusher_Enforcer02, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
        UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
        auto50C060AF_n = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 3, 4, 0, 0);
        for (auto50C060AF_i = 1; auto50C060AF_i <= auto50C060AF_n; auto50C060AF_i += 1) {
            if ((RandomInt(0, 2) != 0)) {
                UnitCreate(1, gv_hybridPusher_Enforcer01, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
                UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
            }
            else {
                UnitCreate(1, gv_hybridPusher_Enforcer02, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
                UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
            }
        }
        autoC371450E_n = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 3, 0, 0);
        for (autoC371450E_i = 1; autoC371450E_i <= autoC371450E_n; autoC371450E_i += 1) {
            UnitCreate(1, gv_hybridPusher_Boss, 0, gv_hybridPusherPlayer, lp_spawnLocation, AngleBetweenPoints(lp_spawnLocation, UnitGetPosition(gv_amonsChampion)));
            UnitGroupAddUnitGroup(lv_returnGroup, UnitLastCreatedGroup());
        }
    }
    else {
    }
    UnitGroupAddUnitGroup(gv_hybridSuperPushers, lv_returnGroup);
    return lv_returnGroup;
}

void gf_AssignGuardLocations (unit lp_guardedUnit, unitgroup lp_guards, fixed lp_baseDistance, fixed lp_angularSpacing, fixed lp_guardsPerRow) {
    // Variable Declarations
    int lv_bodyGuardIter;
    fixed lv_bodyguardPos_Distance;
    fixed lv_bodyguardPos_AngleOffset;

    // Automatic Variable Declarations
    int auto0A0E1EA3_ae;
    const int auto0A0E1EA3_ai = 1;

    // Variable Initialization

    // Implementation
    auto0A0E1EA3_ae = UnitGroupCount(lp_guards, c_unitCountAlive);
    lv_bodyGuardIter = 1;
    for ( ; ( (auto0A0E1EA3_ai >= 0 && lv_bodyGuardIter <= auto0A0E1EA3_ae) || (auto0A0E1EA3_ai < 0 && lv_bodyGuardIter >= auto0A0E1EA3_ae) ) ; lv_bodyGuardIter += auto0A0E1EA3_ai ) {
        lv_bodyguardPos_Distance = (lp_baseDistance + Ceiling((lv_bodyGuardIter / lp_guardsPerRow)));
        lv_bodyguardPos_AngleOffset = (Ceiling(ModF(lv_bodyGuardIter, lp_guardsPerRow)) * lp_angularSpacing * ((ModF(lv_bodyGuardIter, 2.0) * 2.0) - 1.0));
        AIAttackWaveAddEscortUnit(UnitGetOwner(UnitGroupUnit(lp_guards, lv_bodyGuardIter)), UnitGroupUnit(lp_guards, lv_bodyGuardIter), lp_guardedUnit, lv_bodyguardPos_Distance, lv_bodyguardPos_AngleOffset);
    }
}

trigger auto_gf_PingHybridSuperPushers_Trigger = null;
unitgroup auto_gf_PingHybridSuperPushers_lp_attackWave;

void gf_PingHybridSuperPushers (unitgroup lp_attackWave) {
    auto_gf_PingHybridSuperPushers_lp_attackWave = lp_attackWave;

    if (auto_gf_PingHybridSuperPushers_Trigger == null) {
        auto_gf_PingHybridSuperPushers_Trigger = TriggerCreate("auto_gf_PingHybridSuperPushers_TriggerFunc");
    }

    TriggerExecute(auto_gf_PingHybridSuperPushers_Trigger, false, false);
}

bool auto_gf_PingHybridSuperPushers_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_attackWave = auto_gf_PingHybridSuperPushers_lp_attackWave;

    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), UnitGroupCenterOfGroup(lp_attackWave), 270.0, "PingBoss", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 1.25);
    while ((libCOMI_gf_GameIsOver() != true) && (UnitGroupCount(lp_attackWave, c_unitCountAlive) > 0)) {
        PingSetPosition(PingLastCreated(), UnitGroupCenterOfGroup(lp_attackWave));
        Wait(0.25, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

trigger auto_gf_DelayAttackandEscortWaves_Trigger = null;
fixed auto_gf_DelayAttackandEscortWaves_lp_delayTime;

void gf_DelayAttackandEscortWaves (fixed lp_delayTime) {
    auto_gf_DelayAttackandEscortWaves_lp_delayTime = lp_delayTime;

    if (auto_gf_DelayAttackandEscortWaves_Trigger == null) {
        auto_gf_DelayAttackandEscortWaves_Trigger = TriggerCreate("auto_gf_DelayAttackandEscortWaves_TriggerFunc");
    }

    TriggerExecute(auto_gf_DelayAttackandEscortWaves_Trigger, false, false);
}

bool auto_gf_DelayAttackandEscortWaves_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_delayTime = auto_gf_DelayAttackandEscortWaves_lp_delayTime;

    // Automatic Variable Declarations
    // Implementation
    gv_c_AttackWavePreTime = (gv_c_AttackWavePreTime - 60.0);
    gv_c_EscortWavePreTime = (gv_c_EscortWavePreTime - 60.0);
    return true;
}

trigger auto_gf_PushersInfluencePings_Trigger = null;
unitgroup auto_gf_PushersInfluencePings_lp_channelingUnits;

void gf_PushersInfluencePings (unitgroup lp_channelingUnits) {
    auto_gf_PushersInfluencePings_lp_channelingUnits = lp_channelingUnits;

    if (auto_gf_PushersInfluencePings_Trigger == null) {
        auto_gf_PushersInfluencePings_Trigger = TriggerCreate("auto_gf_PushersInfluencePings_TriggerFunc");
    }

    TriggerExecute(auto_gf_PushersInfluencePings_Trigger, false, false);
}

bool auto_gf_PushersInfluencePings_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_channelingUnits = auto_gf_PushersInfluencePings_lp_channelingUnits;

    int init_i;

    // Variable Declarations
    const int lv_c_ChannelPings_MaxCount = 30;
    int[lv_c_ChannelPings_MaxCount + 1] lv_channelPings;
    fixed[lv_c_ChannelPings_MaxCount + 1] lv_channelPingsLife;
    int lv_channelPingIter;
    fixed lv_pingLength;
    fixed lv_radiusOfDuelPing;
    fixed lv_pingLineDistance;
    int lv_numberOfPings;
    fixed lv_pingScale;
    int lv_offPing;
    fixed lv_pingScaleMin;
    fixed lv_pingScaleMax;
    fixed lv_pingRefreshRate;

    // Automatic Variable Declarations
    int auto226C8F2B_ae;
    const int auto226C8F2B_ai = 1;
    const int auto7CC33C12_ae = lv_c_ChannelPings_MaxCount;
    const int auto7CC33C12_ai = 1;
    const int auto3FBC66E5_ae = lv_c_ChannelPings_MaxCount;
    const int auto3FBC66E5_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= lv_c_ChannelPings_MaxCount; init_i += 1) {
        lv_channelPings[init_i] = c_invalidPingId;
    }

    // Implementation
    lv_pingRefreshRate = 0.33;
    lv_pingScaleMin = 0.2;
    lv_pingScaleMax = 0.5;
    lv_pingLength = 8.0;
    lv_radiusOfDuelPing = 13.0;
    while ((libCOMI_gf_GameIsOver() == false) && (libNtve_gf_UnitGroupIsDead(lp_channelingUnits) == false) && (UnitIsAlive(gv_jinara) == true)) {
        lv_pingLineDistance = DistanceBetweenPoints(UnitGroupCenterOfGroup(lp_channelingUnits), UnitGetPosition(gv_jinara));
        lv_pingLineDistance -= lv_radiusOfDuelPing;
        if ((lv_pingLineDistance > 0.0)) {
            lv_numberOfPings = FixedToInt((lv_pingLineDistance / lv_pingLength));
            lv_numberOfPings = MinI(lv_numberOfPings, lv_c_ChannelPings_MaxCount);
        }

        if (((lv_pingLineDistance < 0.0) || (lv_numberOfPings < 2))) {
            Wait(0.1, c_timeGame);
            continue;
        }

        auto226C8F2B_ae = lv_numberOfPings;
        lv_channelPingIter = 2;
        for ( ; ( (auto226C8F2B_ai >= 0 && lv_channelPingIter <= auto226C8F2B_ae) || (auto226C8F2B_ai < 0 && lv_channelPingIter >= auto226C8F2B_ae) ) ; lv_channelPingIter += auto226C8F2B_ai ) {
            if ((libCOMI_gf_GameIsOver() == false) && (libNtve_gf_UnitGroupIsDead(lp_channelingUnits) == false) && (UnitIsAlive(gv_jinara) == true)) {
                if ((lv_channelPings[lv_channelPingIter] == c_invalidPingId)) {
                    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), libNtve_gf_PointOffsetTowardsPoint(UnitGroupCenterOfGroup(lp_channelingUnits), (lv_channelPingIter * lv_pingLength), UnitGetPosition(gv_jinara)), AngleBetweenPoints(UnitGroupCenterOfGroup(lp_channelingUnits), UnitGetPosition(gv_jinara)), "PingTriangle", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
                    PingSetScale(PingLastCreated(), 0.0);
                    lv_channelPings[lv_channelPingIter] = PingLastCreated();
                }
                else {
                    lv_pingScale = (lv_pingScaleMin + (lv_pingScaleMax - lv_pingScaleMin) * (MaxF(lv_numberOfPings, 1.0) - lv_channelPingIter) / MaxF(lv_numberOfPings, 1.0));
                    PingSetScale(lv_channelPings[lv_channelPingIter], lv_pingScale);
                    PingSetPosition(lv_channelPings[lv_channelPingIter], libNtve_gf_PointOffsetTowardsPoint(UnitGroupCenterOfGroup(lp_channelingUnits), (lv_channelPingIter * lv_pingLength), UnitGetPosition(gv_jinara)));
                    PingSetRotation(lv_channelPings[lv_channelPingIter], AngleBetweenPoints(UnitGroupCenterOfGroup(lp_channelingUnits), UnitGetPosition(gv_jinara)));
                }
                Wait(lv_pingRefreshRate, c_timeGame);
            }

        }
        lv_channelPingIter = (lv_numberOfPings + 1);
        for ( ; ( (auto7CC33C12_ai >= 0 && lv_channelPingIter <= auto7CC33C12_ae) || (auto7CC33C12_ai < 0 && lv_channelPingIter >= auto7CC33C12_ae) ) ; lv_channelPingIter += auto7CC33C12_ai ) {
            PingDestroy(lv_channelPings[lv_channelPingIter]);
            lv_channelPings[lv_channelPingIter] = c_invalidPingId;
        }
    }
    lv_channelPingIter = 0;
    for ( ; ( (auto3FBC66E5_ai >= 0 && lv_channelPingIter <= auto3FBC66E5_ae) || (auto3FBC66E5_ai < 0 && lv_channelPingIter >= auto3FBC66E5_ae) ) ; lv_channelPingIter += auto3FBC66E5_ai ) {
        PingDestroy(lv_channelPings[lv_channelPingIter]);
    }
    return true;
}

fixed gf_DistanceToFailurefromPoint (point lp_testLocation) {
    // Variable Declarations
    int lv_pathIter;
    int lv_closestWaypoint;
    fixed lv_returnDistance;

    // Automatic Variable Declarations
    const int autoFC406671_ae = gv_tugOfWar_WaypointMax;
    const int autoFC406671_ai = 1;
    int autoCE93BADB_ae;
    const int autoCE93BADB_ai = 1;

    // Variable Initialization

    // Implementation
    lv_pathIter = 0;
    for ( ; ( (autoFC406671_ai >= 0 && lv_pathIter <= autoFC406671_ae) || (autoFC406671_ai < 0 && lv_pathIter >= autoFC406671_ae) ) ; lv_pathIter += autoFC406671_ai ) {
        if ((DistanceBetweenPoints(gf_GetPathWaypoint(0), gf_GetPathWaypoint(lv_pathIter)) >= DistanceBetweenPoints(gf_GetPathWaypoint(0), lp_testLocation))) {
            lv_closestWaypoint = (lv_pathIter - 1);
            break;
        }

    }
    autoCE93BADB_ae = lv_closestWaypoint;
    lv_pathIter = 1;
    for ( ; ( (autoCE93BADB_ai >= 0 && lv_pathIter <= autoCE93BADB_ae) || (autoCE93BADB_ai < 0 && lv_pathIter >= autoCE93BADB_ae) ) ; lv_pathIter += autoCE93BADB_ai ) {
        lv_returnDistance += DistanceBetweenPoints(gf_GetPathWaypoint((lv_pathIter - 1)), gf_GetPathWaypoint(lv_pathIter));
    }
    lv_returnDistance += DistanceBetweenPoints(gf_GetPathWaypoint(lv_closestWaypoint), lp_testLocation);
    return lv_returnDistance;
}

trigger auto_gf_CreateWarpInEffect_Trigger = null;
unit auto_gf_CreateWarpInEffect_lp_unit;

void gf_CreateWarpInEffect (unit lp_unit) {
    auto_gf_CreateWarpInEffect_lp_unit = lp_unit;

    if (auto_gf_CreateWarpInEffect_Trigger == null) {
        auto_gf_CreateWarpInEffect_Trigger = TriggerCreate("auto_gf_CreateWarpInEffect_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateWarpInEffect_Trigger, false, false);
}

bool auto_gf_CreateWarpInEffect_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_CreateWarpInEffect_lp_unit;

    // Variable Declarations
    actor lv_model;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitAbilityEnable(lp_unit, "move", false);
    UnitAbilityEnable(lp_unit, "attack", false);
    if (((UnitGetType(lp_unit) == "HybridDestroyer") || (UnitGetType(lp_unit) == "HybridDominatorVoid") || (UnitGetType(lp_unit) == "HybridReaver") || (UnitGetType(lp_unit) == "HybridBehemoth") || (UnitGetType(lp_unit) == "HybridNemesis"))) {
        libNtve_gf_AttachModelToUnit(lp_unit, "HybridWarpInEffect", "Ref_Center");
    }
    else {
        libNtve_gf_AttachModelToUnit(lp_unit, "ProtossGenericWarpInOut", "Ref_Center");
    }
    lv_model = libNtve_gf_ActorLastCreated();
    Wait(5.0, c_timeAI);
    libNtve_gf_KillModel(lv_model);
    UnitAbilityEnable(lp_unit, "move", true);
    UnitAbilityEnable(lp_unit, "attack", true);
    return true;
}

void gf_AIDiamondback (int lp_owner, unit lp_diamondback, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    point lv_moveTo;
    point lv_moveToA;
    point lv_moveToB;
    unitgroup lv_enemies;

    // Automatic Variable Declarations
    int auto31BB7E95_val;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();

    // Implementation
    lv_enemies = UnitGroupFilterRegion(UnitGroupFilterPlane(lp_nearbyUnits, c_planeGround, 0), RegionCircle(UnitGetPosition(lp_diamondback), 6.2), 0);
    if ((UnitGroupCount(lv_enemies, c_unitCountAlive) >= 1)) {
        lv_moveTo = PointWithOffsetPolar(UnitGetPosition(lp_diamondback), 5.0, AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lp_diamondback)));
        if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveTo) >= 1000)) {
            lv_moveToA = PointWithOffsetPolar(UnitGetPosition(lp_diamondback), 5.0, (AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lp_diamondback)) + 45.0));
            lv_moveToB = PointWithOffsetPolar(UnitGetPosition(lp_diamondback), 5.0, (AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lp_diamondback)) - 45.0));
            if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToA) < 1000) && (PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToB) < 1000)) {
                auto31BB7E95_val = RandomInt(1, 2);
                if (auto31BB7E95_val == 1) {
                    lv_moveTo = lv_moveToA;
                }
                else if (auto31BB7E95_val == 2) {
                    lv_moveTo = lv_moveToB;
                }
                else {
                }
            }
            else {
                if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToA) < 1000)) {
                    lv_moveTo = lv_moveToA;
                }
                else {
                    if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToB) < 1000)) {
                        lv_moveTo = lv_moveToB;
                    }
                    else {
                        lv_moveTo = null;
                    }
                }
            }
        }

        if ((lv_moveTo != null)) {
            UnitIssueOrder(lp_diamondback, OrderTargetingPoint(AbilityCommand("move", 0), lv_moveTo), c_orderQueueReplace);
        }

        Wait(1.5, c_timeAI);
        AISetUnitScriptControlled(lp_diamondback, false);
    }

}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Race Switch
//--------------------------------------------------------------------------------------------------
bool gt__3P_RaceSwitch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    int lv_b;
    int lv_c;
    string lv_vRace;

    // Automatic Variable Declarations
    string autoC4194EF8_val;
    const int auto3906E234_ae = 6;
    int auto3906E234_var;
    unitgroup auto293A8526_g;
    int auto293A8526_u;
    unit auto293A8526_var;
    string auto6F0D6EC5_val;
    const int auto73262FC0_ae = 500;
    int auto73262FC0_var;
    const int autoAF35E292_ae = 6;
    int autoAF35E292_var;
    unitgroup auto13892AB1_g;
    int auto13892AB1_u;
    unit auto13892AB1_var;
    const int autoF499699A_ae = 500;
    int autoF499699A_var;
    const int autoB5258425_ae = 6;
    int autoB5258425_var;
    unitgroup autoEF48388C_g;
    int autoEF48388C_u;
    unit autoEF48388C_var;
    const int autoC9E994D9_ae = 500;
    int autoC9E994D9_var;
    const int autoFF65B87D_ae = 6;
    int autoFF65B87D_var;
    unitgroup autoFADA6EB5_g;
    int autoFADA6EB5_u;
    unit autoFADA6EB5_var;
    const int auto5DA29357_ae = 6;
    int auto5DA29357_var;
    unitgroup auto89480338_g;
    int auto89480338_u;
    unit auto89480338_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC4194EF8_val = StringWord(EventChatMessage(false), 2);
    if (autoC4194EF8_val == "terran") {
        lv_vRace = "Terr";
    }
    else if (autoC4194EF8_val == "zerg") {
        lv_vRace = "Zerg";
    }
    else if (autoC4194EF8_val == "protoss") {
        lv_vRace = "Prot";
    }
    else {
        return true;
    }
    if ((gv__3P_ActiveRace == lv_vRace)) {
        return true;
    }
    else {
        gv__3P_ActiveRace = lv_vRace;
    }
    auto3906E234_var = 3;
    for ( ; auto3906E234_var <= auto3906E234_ae; auto3906E234_var += 1 ) {
        auto293A8526_g = UnitGroup(null, auto3906E234_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto293A8526_u = UnitGroupCount(auto293A8526_g, c_unitCountAll);
        for (;; auto293A8526_u -= 1) {
            auto293A8526_var = UnitGroupUnitFromEnd(auto293A8526_g, auto293A8526_u);
            if (auto293A8526_var == null) { break; }
            UnitRemove(auto293A8526_var);
        }
    }
    CreepModify(PointFromId(875), 200.0, false, false);
    auto6F0D6EC5_val = lv_vRace;
    if (auto6F0D6EC5_val == "Terr") {
        auto73262FC0_var = 1;
        for ( ; auto73262FC0_var <= auto73262FC0_ae; auto73262FC0_var += 1 ) {
            if ((gv__3P_TerranRecord[auto73262FC0_var].lv_unitType != null)) {
                UnitCreate(1, gv__3P_TerranRecord[auto73262FC0_var].lv_unitType, 0, gv__3P_TerranRecord[auto73262FC0_var].lv_unitOwner, gv__3P_TerranRecord[auto73262FC0_var].lv_unitPosition, gv__3P_TerranRecord[auto73262FC0_var].lv_unitFacing);
                gf__3P_SetLocalDefender(UnitLastCreated());
            }
            else {
                break;
            }
        }
        libCOMI_gf_StartCoopAIwithSpecificPersonality(3, 1, "TerranBuildBioMechStar");
        libCOMI_gf_StartCoopAIwithSpecificPersonality(4, 1, "TerranBuildBioMechStar");
        libCOMI_gf_StartCoopAIwithSpecificPersonality(5, 1, "TerranBuildBioMechStar");
        libCOMI_gf_StartCoopAIwithSpecificPersonality(6, 1, "TerranBuildBioMechStar");
        autoAF35E292_var = 3;
        for ( ; autoAF35E292_var <= autoAF35E292_ae; autoAF35E292_var += 1 ) {
            auto13892AB1_g = UnitGroup(null, autoAF35E292_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto13892AB1_u = UnitGroupCount(auto13892AB1_g, c_unitCountAll);
            for (;; auto13892AB1_u -= 1) {
                auto13892AB1_var = UnitGroupUnitFromEnd(auto13892AB1_g, auto13892AB1_u);
                if (auto13892AB1_var == null) { break; }
                if ((libCOMI_gf_GetUnitRace(auto13892AB1_var) != gv__3P_ActiveRace)) {
                    UnitRemove(auto13892AB1_var);
                }

            }
        }
    }
    else if (auto6F0D6EC5_val == "Zerg") {
        autoF499699A_var = 1;
        for ( ; autoF499699A_var <= autoF499699A_ae; autoF499699A_var += 1 ) {
            if ((gv__3P_ZergRecord[autoF499699A_var].lv_unitType != null)) {
                UnitCreate(1, gv__3P_ZergRecord[autoF499699A_var].lv_unitType, 0, gv__3P_ZergRecord[autoF499699A_var].lv_unitOwner, gv__3P_ZergRecord[autoF499699A_var].lv_unitPosition, gv__3P_ZergRecord[autoF499699A_var].lv_unitFacing);
                gf__3P_SetLocalDefender(UnitLastCreated());
            }
            else {
                break;
            }
        }
        libCOMI_gf_StartCoopAIwithSpecificPersonality(3, 1, "ZergBuildSwarmy");
        libCOMI_gf_StartCoopAIwithSpecificPersonality(4, 1, "ZergBuildSwarmy");
        libCOMI_gf_StartCoopAIwithSpecificPersonality(5, 1, "ZergBuildSwarmy");
        libCOMI_gf_StartCoopAIwithSpecificPersonality(6, 1, "ZergBuildSwarmy");
        autoB5258425_var = 3;
        for ( ; autoB5258425_var <= autoB5258425_ae; autoB5258425_var += 1 ) {
            autoEF48388C_g = UnitGroup(null, autoB5258425_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoEF48388C_u = UnitGroupCount(autoEF48388C_g, c_unitCountAll);
            for (;; autoEF48388C_u -= 1) {
                autoEF48388C_var = UnitGroupUnitFromEnd(autoEF48388C_g, autoEF48388C_u);
                if (autoEF48388C_var == null) { break; }
                if ((libCOMI_gf_GetUnitRace(autoEF48388C_var) != gv__3P_ActiveRace)) {
                    UnitRemove(autoEF48388C_var);
                }

            }
        }
    }
    else if (auto6F0D6EC5_val == "Prot") {
        autoC9E994D9_var = 1;
        for ( ; autoC9E994D9_var <= autoC9E994D9_ae; autoC9E994D9_var += 1 ) {
            if ((gv__3P_ProtossRecord[autoC9E994D9_var].lv_unitType != null)) {
                UnitCreate(1, gv__3P_ProtossRecord[autoC9E994D9_var].lv_unitType, 0, gv__3P_ProtossRecord[autoC9E994D9_var].lv_unitOwner, gv__3P_ProtossRecord[autoC9E994D9_var].lv_unitPosition, gv__3P_ProtossRecord[autoC9E994D9_var].lv_unitFacing);
                gf__3P_SetLocalDefender(UnitLastCreated());
            }
            else {
                break;
            }
        }
        libCOMI_gf_StartCoopAIwithSpecificPersonality(3, 1, "ProtossBuildSkytossTempest");
        libCOMI_gf_StartCoopAIwithSpecificPersonality(4, 1, "ProtossBuildSkytossTempest");
        libCOMI_gf_StartCoopAIwithSpecificPersonality(5, 1, "ProtossBuildSkytossTempest");
        libCOMI_gf_StartCoopAIwithSpecificPersonality(6, 1, "ProtossBuildSkytossTempest");
        autoFF65B87D_var = 3;
        for ( ; autoFF65B87D_var <= autoFF65B87D_ae; autoFF65B87D_var += 1 ) {
            autoFADA6EB5_g = UnitGroup(null, autoFF65B87D_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoFADA6EB5_u = UnitGroupCount(autoFADA6EB5_g, c_unitCountAll);
            for (;; autoFADA6EB5_u -= 1) {
                autoFADA6EB5_var = UnitGroupUnitFromEnd(autoFADA6EB5_g, autoFADA6EB5_u);
                if (autoFADA6EB5_var == null) { break; }
                if ((libCOMI_gf_GetUnitRace(autoFADA6EB5_var) != gv__3P_ActiveRace)) {
                    UnitRemove(autoFADA6EB5_var);
                }

            }
        }
    }
    else {
    }
    if ((lv_vRace == "Zerg")) {
        auto5DA29357_var = 3;
        for ( ; auto5DA29357_var <= auto5DA29357_ae; auto5DA29357_var += 1 ) {
            auto89480338_g = UnitGroup(null, auto5DA29357_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto89480338_u = UnitGroupCount(auto89480338_g, c_unitCountAll);
            for (;; auto89480338_u -= 1) {
                auto89480338_var = UnitGroupUnitFromEnd(auto89480338_g, auto89480338_u);
                if (auto89480338_var == null) { break; }
                CreepModify(UnitGetPosition(auto89480338_var), 6.0, true, false);
            }
        }
    }

    TriggerExecute(gt__3P_Prunefordifficulties, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_RaceSwitch_Init () {
    gt__3P_RaceSwitch = TriggerCreate("gt__3P_RaceSwitch_Func");
    TriggerAddEventChatMessage(gt__3P_RaceSwitch, c_playerAny, "-rc", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_DebugStart
//--------------------------------------------------------------------------------------------------
bool gt__3P_DebugStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_DebugStart_Init () {
    gt__3P_DebugStart = TriggerCreate("gt__3P_DebugStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Total Void Energy Mined
//--------------------------------------------------------------------------------------------------
bool gt__3P_TotalVoidEnergyMined_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((AIGetTime() >= 300.0)) {
        UIDisplayMessage(gv__3P_AntagonistPG, c_messageAreaChat, ((StringExternal("Param/Value/DA475EE9") + IntToText(gv__3P_TotalMined)) + (StringExternal("Param/Value/F5F929E2") + IntToText(gv__3P_TotalAddedFrom))));
    }

    if ((AIGetTime() >= 600.0)) {
        UIDisplayMessage(gv__3P_AntagonistPG, c_messageAreaChat, ((StringExternal("Param/Value/F48DCC9D") + IntToText(gv__3P_TotalMined)) + (StringExternal("Param/Value/04615B5E") + IntToText(gv__3P_TotalAddedFrom))));
    }

    if ((AIGetTime() >= 900.0)) {
        UIDisplayMessage(gv__3P_AntagonistPG, c_messageAreaChat, ((StringExternal("Param/Value/81900EAE") + IntToText(gv__3P_TotalMined)) + (StringExternal("Param/Value/9060A6AB") + IntToText(gv__3P_TotalAddedFrom))));
    }

    if ((AIGetTime() >= 1200.0)) {
        UIDisplayMessage(gv__3P_AntagonistPG, c_messageAreaChat, ((StringExternal("Param/Value/605884A5") + IntToText(gv__3P_TotalMined)) + (StringExternal("Param/Value/5634BB5E") + IntToText(gv__3P_TotalAddedFrom))));
    }

    if ((AIGetTime() >= 1500.0)) {
        UIDisplayMessage(gv__3P_AntagonistPG, c_messageAreaChat, ((StringExternal("Param/Value/F656FBC4") + IntToText(gv__3P_TotalMined)) + (StringExternal("Param/Value/87F817E4") + IntToText(gv__3P_TotalAddedFrom))));
    }

    UIDisplayMessage(gv__3P_AntagonistPG, c_messageAreaChat, ((StringExternal("Param/Value/5416D596") + IntToText(gv__3P_TotalMined)) + (StringExternal("Param/Value/684486B3") + IntToText(gv__3P_TotalAddedFrom))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_TotalVoidEnergyMined_Init () {
    gt__3P_TotalVoidEnergyMined = TriggerCreate("gt__3P_TotalVoidEnergyMined_Func");
    TriggerAddEventChatMessage(gt__3P_TotalVoidEnergyMined, c_playerAny, "-mined", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Prune manual
//--------------------------------------------------------------------------------------------------
bool gt__3P_Prunemanual_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vValue;
    unit lv_vUnit;
    unitgroup lv_vGroup;
    fixed lv_vCost;
    fixed lv_vPercent;

    // Automatic Variable Declarations
    const int auto7FAA258E_ae = 6;
    int auto7FAA258E_var;
    unitgroup auto6574D2AF_g;
    int auto6574D2AF_u;
    unit auto6574D2AF_var;

    // Variable Initialization
    lv_vValue = 20000.0;
    lv_vGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringToFixed(StringWord(EventChatMessage(false), 2)) > 0.0)) {
        lv_vPercent = StringToFixed(StringWord(EventChatMessage(false), 2));
    }

    auto7FAA258E_var = 3;
    for ( ; auto7FAA258E_var <= auto7FAA258E_ae; auto7FAA258E_var += 1 ) {
        UnitGroupAddUnitGroup(lv_vGroup, UnitGroup(null, auto7FAA258E_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_vGroup, UnitGroup("Bunker", auto7FAA258E_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_vGroup, UnitGroup("MissileTurret", auto7FAA258E_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_vGroup, UnitGroup("SpineCrawler", auto7FAA258E_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_vGroup, UnitGroup("SporeCrawler", auto7FAA258E_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_vGroup, UnitGroup("PhotonCannon", auto7FAA258E_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_vGroup, UnitGroup("ShieldBattery", auto7FAA258E_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    auto6574D2AF_g = lv_vGroup;
    auto6574D2AF_u = UnitGroupCount(auto6574D2AF_g, c_unitCountAll);
    for (;; auto6574D2AF_u -= 1) {
        auto6574D2AF_var = UnitGroupUnitFromEnd(auto6574D2AF_g, auto6574D2AF_u);
        if (auto6574D2AF_var == null) { break; }
        lv_vCost += UnitTypeGetCost(UnitGetType(auto6574D2AF_var), c_unitCostSumMineralsVespene);
    }
    lv_vValue = (lv_vCost * lv_vPercent);
    while (true) {
        lv_vUnit = UnitGroupRandomUnit(lv_vGroup, c_unitCountAlive);
        if (((lv_vUnit == null) || (lv_vValue <= 0.0))) {
            break;
        }

        lv_vValue -= UnitTypeGetCost(UnitGetType(lv_vUnit), c_unitCostSumMineralsVespene);
        UnitRemove(lv_vUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_Prunemanual_Init () {
    gt__3P_Prunemanual = TriggerCreate("gt__3P_Prunemanual_Func");
    TriggerAddEventChatMessage(gt__3P_Prunemanual, c_playerAny, "-prune", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTRL+A - Move
//--------------------------------------------------------------------------------------------------
bool gt_CTRLAMove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUnit = UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive);

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("CTRL+A"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, libNtve_gf_ConvertBooleanToText(libNtve_gf_PlayerIsEnemy(1, 2, libNtve_ge_PlayerRelation_Enemy)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTRLAMove_Init () {
    gt_CTRLAMove = TriggerCreate("gt_CTRLAMove_Func");
    TriggerAddEventKeyPressed(gt_CTRLAMove, c_playerAny, c_keyA, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTRL+B - Mission End Fanfare
//--------------------------------------------------------------------------------------------------
bool gt_CTRLBMissionEndFanfare_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUnit = UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive);

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("CTRL+B"));
    gf__3P_AmonMissionEndFanfare();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTRLBMissionEndFanfare_Init () {
    gt_CTRLBMissionEndFanfare = TriggerCreate("gt_CTRLBMissionEndFanfare_Func");
    TriggerAddEventKeyPressed(gt_CTRLBMissionEndFanfare, c_playerAny, c_keyB, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTRL+C
//--------------------------------------------------------------------------------------------------
bool gt_CTRLC_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUnit = UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive);

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("CTRL+C"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTRLC_Init () {
    gt_CTRLC = TriggerCreate("gt_CTRLC_Func");
    TriggerAddEventKeyPressed(gt_CTRLC, c_playerAny, c_keyC, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTRL+D - Create Some units
//--------------------------------------------------------------------------------------------------
bool gt_CTRLDCreateSomeunits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUnit = UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive);

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("CTRL+D"));
    libNtve_gf_CreateUnitsWithDefaultFacing(250, "Marine", 0, 1, CameraGetTarget(EventPlayer()));
    libNtve_gf_CreateUnitsWithDefaultFacing(250, "Marauder", 0, 2, CameraGetTarget(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTRLDCreateSomeunits_Init () {
    gt_CTRLDCreateSomeunits = TriggerCreate("gt_CTRLDCreateSomeunits_Func");
    TriggerAddEventKeyPressed(gt_CTRLDCreateSomeunits, c_playerAny, c_keyD, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTRL+E - Custom Wave
//--------------------------------------------------------------------------------------------------
bool gt_CTRLECustomWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vAttackWavePlayerIter;
    unit lv_vUnit;

    // Automatic Variable Declarations
    playergroup autoB77860BE_g;

    // Variable Initialization
    lv_vUnit = UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive);

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("CTRL+E"));
    autoB77860BE_g = gv_attackWavePlayers;
    lv_vAttackWavePlayerIter = -1;
    while (true) {
        lv_vAttackWavePlayerIter = PlayerGroupNextPlayer(autoB77860BE_g, lv_vAttackWavePlayerIter);
        if (lv_vAttackWavePlayerIter < 0) { break; }
        AIAttackWaveSetTargetPoint(lv_vAttackWavePlayerIter, gf_AttackWaveDestination(lv_vAttackWavePlayerIter));
    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_attackWavePlayers, 1), PlayerGroupPlayer(gv_attackWavePlayers, 2), libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__3Mid, CameraGetTarget(gv_pLAYER_11_ANTAGONIST), false);
    gf__3P_SetupAttackWave(libCOMI_gf_LastCreatedCoopAttackForce());
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTRLECustomWave_Init () {
    gt_CTRLECustomWave = TriggerCreate("gt_CTRLECustomWave_Func");
    TriggerAddEventKeyPressed(gt_CTRLECustomWave, c_playerAny, c_keyE, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTRL+F - Wave 7
//--------------------------------------------------------------------------------------------------
bool gt_CTRLFWave7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUnit = UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive);

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("CTRL+F"));
    TriggerExecute(gt_AttackWave07DoubleWave, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTRLFWave7_Init () {
    gt_CTRLFWave7 = TriggerCreate("gt_CTRLFWave7_Func");
    TriggerAddEventKeyPressed(gt_CTRLFWave7, c_playerAny, c_keyF, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTRL+G - Control
//--------------------------------------------------------------------------------------------------
bool gt_CTRLGControl_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vUnit;

    // Automatic Variable Declarations
    playergroup auto94D4D5F7_g;
    int auto94D4D5F7_var;

    // Variable Initialization
    lv_vUnit = UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive);

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("CTRL+G"));
    auto94D4D5F7_g = PlayerGroupAll();
    auto94D4D5F7_var = -1;
    while (true) {
        auto94D4D5F7_var = PlayerGroupNextPlayer(auto94D4D5F7_g, auto94D4D5F7_var);
        if (auto94D4D5F7_var < 0) { break; }
        PlayerSetAlliance(auto94D4D5F7_var, c_allianceIdControl, EventPlayer(), true);
        PlayerSetAlliance(auto94D4D5F7_var, c_allianceIdSpend, EventPlayer(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTRLGControl_Init () {
    gt_CTRLGControl = TriggerCreate("gt_CTRLGControl_Func");
    TriggerAddEventKeyPressed(gt_CTRLGControl, c_playerAny, c_keyG, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTRL+H
//--------------------------------------------------------------------------------------------------
bool gt_CTRLH_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUnit = UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive);

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("CTRL+H"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTRLH_Init () {
    gt_CTRLH = TriggerCreate("gt_CTRLH_Func");
    TriggerAddEventKeyPressed(gt_CTRLH, c_playerAny, c_keyH, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTRL+I - Resources
//--------------------------------------------------------------------------------------------------
bool gt_CTRLIResources_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUnit = UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive);

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/0ADC4B0A"));
    PlayerModifyPropertyInt(gv_pLAYER_11_ANTAGONIST, c_playerPropCustom, c_playerPropOperAdd, 100000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTRLIResources_Init () {
    gt_CTRLIResources = TriggerCreate("gt_CTRLIResources_Func");
    TriggerAddEventKeyPressed(gt_CTRLIResources, c_playerAny, c_keyI, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTRL+J - JinaraDefeatedPlus
//--------------------------------------------------------------------------------------------------
bool gt_CTRLJJinaraDefeatedPlus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUnit = UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive);

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C6583984"));
    TriggerExecute(gt__3P_Jinaradefeatedsync, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTRLJJinaraDefeatedPlus_Init () {
    gt_CTRLJJinaraDefeatedPlus = TriggerCreate("gt_CTRLJJinaraDefeatedPlus_Func");
    TriggerAddEventKeyPressed(gt_CTRLJJinaraDefeatedPlus, c_playerAny, c_keyJ, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTRL+K - Ping Loc
//--------------------------------------------------------------------------------------------------
bool gt_CTRLKPingLoc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vUnit;

    // Automatic Variable Declarations
    unitgroup auto9D64B2D0_g;
    int auto9D64B2D0_u;
    unit auto9D64B2D0_var;

    // Variable Initialization
    lv_vUnit = UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive);

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/2C297E17"));
    auto9D64B2D0_g = UnitGroupSelected(EventPlayer());
    auto9D64B2D0_u = UnitGroupCount(auto9D64B2D0_g, c_unitCountAll);
    for (;; auto9D64B2D0_u -= 1) {
        auto9D64B2D0_var = UnitGroupUnitFromEnd(auto9D64B2D0_g, auto9D64B2D0_u);
        if (auto9D64B2D0_var == null) { break; }
        TextExpressionSetToken("Param/Expression/92E0F42E", "A", UnitGetName(auto9D64B2D0_var));
        TextExpressionSetToken("Param/Expression/92E0F42E", "B", FixedToText(UnitGetCustomValue(auto9D64B2D0_var, 55), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/92E0F42E", "C", FixedToText(UnitGetCustomValue(auto9D64B2D0_var, 50), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/92E0F42E", "D", FixedToText(UnitGetCustomValue(auto9D64B2D0_var, 51), c_fixedPrecisionAny));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/92E0F42E"));
        MinimapPing(PlayerGroupAll(), Point(UnitGetCustomValue(auto9D64B2D0_var, 50), UnitGetCustomValue(auto9D64B2D0_var, 51)), 2.0, Color(100.00, 0.00, 0.00));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTRLKPingLoc_Init () {
    gt_CTRLKPingLoc = TriggerCreate("gt_CTRLKPingLoc_Func");
    TriggerAddEventKeyPressed(gt_CTRLKPingLoc, c_playerAny, c_keyK, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTRL+L - Attack
//--------------------------------------------------------------------------------------------------
bool gt_CTRLLAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUnit = UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive);

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/466B3917"));
    UnitGroupIssueOrder(UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), CameraGetTarget(EventPlayer())), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup(null, 2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), CameraGetTarget(EventPlayer())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTRLLAttack_Init () {
    gt_CTRLLAttack = TriggerCreate("gt_CTRLLAttack_Func");
    TriggerAddEventKeyPressed(gt_CTRLLAttack, c_playerAny, c_keyL, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTRL+M
//--------------------------------------------------------------------------------------------------
bool gt_CTRLM_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUnit = UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive);

    // Conditions
    if (testConds) {
        if (!((libA8FDA37D_gf_UT_DevCommandsActive(libA8FDA37D_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/02EEA499"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, libNtve_gf_ConvertBooleanToText(PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), 15)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTRLM_Init () {
    gt_CTRLM = TriggerCreate("gt_CTRLM_Func");
    TriggerAddEventKeyPressed(gt_CTRLM, c_playerAny, c_keyM, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_TransmissionSend
//--------------------------------------------------------------------------------------------------
bool gt__3P_TransmissionSend_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UserDataSetInt("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "PlayingNow", 1, 1);
    if ((libCOMI_gv_cM_TransmissionSource != -1) && (PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), libCOMI_gv_cM_TransmissionSource) == true)) {
        if (((libCOMI_gv_cM_TransmissionCurrentType == "AttackWave") || (libCOMI_gv_cM_TransmissionCurrentType == "CloakedUnitsSpotted"))) {
            ConversationDataSetListenerGender("acAttackWave", libCOOC_gf_CC_CommanderGender(libCOOC_gf_ActiveCommanderForPlayer(libCOOC_gf_CC_PlayerAlly(libCOMI_gv_cM_TransmissionSource))));
        }

        UserDataSetInt("PlayerCommanders", libCOOC_gf_ActiveCommanderForPlayer(libCOMI_gv_cM_TransmissionSource), "SendingTransmission", 1, 1);
    }
    else {
        if (((libCOMI_gv_cM_TransmissionCurrentType == "AttackWave") || (libCOMI_gv_cM_TransmissionCurrentType == "CloakedUnitsSpotted"))) {
            ConversationDataSetListenerGender("acAttackWave", c_genderDefault);
        }

    }
    libCOMI_gf_CM_TransmissionUpdateConvoPlayers(UserDataGetGameLink("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "Conversation", 1));
    ConversationDataRun(UserDataGetGameLink("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "Conversation", 1), gv__3P_CommandersPG, c_conversationSkipNone, true);
    while (!((libCOMI_gf_CM_PlayerHasTransmission(1) == false) && (libCOMI_gf_CM_PlayerHasTransmission(2) == false))) {
        Wait(0.0625, c_timeGame);
    }
    if ((RandomInt(1, 100) <= UserDataGetInt("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "ResponseChance", 1))) {
        ConversationDataRun("acResponses", gv__3P_CommandersPG, c_conversationSkipNone, true);
        while (!((libCOMI_gf_CM_PlayerHasTransmission(1) == false) && (libCOMI_gf_CM_PlayerHasTransmission(2) == false))) {
            Wait(0.0625, c_timeGame);
        }
    }

    UserDataSetInt("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "PlayingNow", 1, 0);
    libCOMI_gv_cM_TransmissionCurrentType = null;
    if ((libCOMI_gv_cM_TransmissionSource != -1) && (PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), libCOMI_gv_cM_TransmissionSource) == true)) {
        UserDataSetInt("PlayerCommanders", libCOOC_gf_ActiveCommanderForPlayer(libCOMI_gv_cM_TransmissionSource), "SendingTransmission", 1, 0);
    }

    libCOMI_gv_cM_TransmissionCount += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_TransmissionSend_Init () {
    gt__3P_TransmissionSend = TriggerCreate("gt__3P_TransmissionSend_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_UnitCreated
//--------------------------------------------------------------------------------------------------
bool gt__3P_UnitCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(EventUnitCreatedUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "AWTimedLife") == true)) {
        UnitSetTeamColorIndex(EventUnitCreatedUnit(), 1);
        UnitControlGroupAddUnit(gv_pLAYER_11_ANTAGONIST, 1, EventUnitCreatedUnit());
        UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "AWTimedLife", gv_pLAYER_11_ANTAGONIST, 1);
        UnitBehaviorSetDurationRemaining(EventUnitCreatedUnit(), "AWTimedLife", UnitBehaviorDuration(EventUnit(), "AWTimedLife"));
    }
    else if ((EventUnitCreatedAbil() == "3PShardTrain")) {
        if (((UnitRallyPointTargetPoint(gv__3P_MainShard, 1, 1) == null) || (RegionContainsPoint(RegionFromId(26), UnitRallyPointTargetPoint(gv__3P_MainShard, 1, 1)) == true))) {
            libNtve_gf_UnitCreateFacingPoint(1, UnitGetType(EventUnitCreatedUnit()), 0, 5, UnitGetPosition(EventUnitCreatedUnit()), UnitGetPosition(gv__3P_MainShard));
        }
        else {
            libNtve_gf_UnitCreateFacingPoint(1, UnitGetType(EventUnitCreatedUnit()), 0, 5, UnitGetPosition(EventUnitCreatedUnit()), UnitRallyPointTargetPoint(gv__3P_MainShard, 1, 1));
        }
        UnitSetOwner(UnitLastCreated(), 5, false);
        UnitCreateEffectUnit(gv__3P_MainShard, "VoidRiftTrainSet", UnitLastCreated());
        UnitSetTeamColorIndex(UnitLastCreated(), 0);
        UnitGroupAdd(libCOMU_gv_cT_SpawnedUnits, UnitLastCreated());
        if (((UnitRallyPointTargetPoint(gv__3P_MainShard, 1, 1) == null) || (RegionContainsPoint(RegionFromId(26), UnitRallyPointTargetPoint(gv__3P_MainShard, 1, 1)) == true))) {
            gf__3P_SetTargetDefender(UnitLastCreated(), UnitGetPosition(gv__3P_MainShard));
        }
        else {
            gf__3P_SetTargetDefender(UnitLastCreated(), UnitRallyPointTargetPoint(gv__3P_MainShard, 1, 1));
        }
        gf__3P_DisableLongRangeAbilities(UnitLastCreated());
        UnitAbilityEnable(UnitLastCreated(), "ArchonWarp", false);
        UnitBehaviorAddPlayer(UnitLastCreated(), "NoBiomassDrop", gv_pLAYER_11_ANTAGONIST, 1);
        UnitRemove(EventUnitCreatedUnit());
    }
    else if (((UnitGetType(EventUnitCreatedUnit()) == "QueenCoop") || (UnitTypeTestFlag(UnitGetType(EventUnitCreatedUnit()), c_unitFlagWorker) == true) || (UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeStructure) == true))) {
        gf__3P_SetLocalDefender(EventUnitCreatedUnit());
    }
    else if ((UnitHasBehavior2(EventUnit(), "LocalDefender") == true) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false) && (UnitGetType(EventUnitCreatedUnit()) != "Interceptor") && (UnitGetType(EventUnitCreatedUnit()) != "BroodlingEscort") && (UnitFilterMatch(EventUnitCreatedUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true)) {
        UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "SupportUnit", gv_pLAYER_11_ANTAGONIST, 1);
    }
    else if ((UnitGetType(EventUnitCreatedUnit()) == "MutatorPurifierBeam")) {
        UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "PermanentlyUncommandable", gv_pLAYER_11_ANTAGONIST, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_UnitCreated_Init () {
    gt__3P_UnitCreated = TriggerCreate("gt__3P_UnitCreated_Func");
    TriggerAddEventUnitCreated(gt__3P_UnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_RevealPrestigestoAmon
//--------------------------------------------------------------------------------------------------
bool gt__3P_RevealPrestigestoAmon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUnitDamageSourcePlayer() == 1) || (EventUnitDamageSourcePlayer() == 2)))) {
            return false;
        }

        if (!((EventPlayer() > 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CU_PrestigeBriefReveal();
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_RevealPrestigestoAmon_Init () {
    gt__3P_RevealPrestigestoAmon = TriggerCreate("gt__3P_RevealPrestigestoAmon_Func");
    TriggerAddEventUnitDamaged(gt__3P_RevealPrestigestoAmon, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Show
//--------------------------------------------------------------------------------------------------
bool gt__3P_Show_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf__3P_AIChoiceDisplay(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_Show_Init () {
    gt__3P_Show = TriggerCreate("gt__3P_Show_Func");
    TriggerAddEventUnitAbility(gt__3P_Show, UnitRefFromVariable("gv__3P_MainShard"), AbilityCommand("AIChoice", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_AIChoiceOK
//--------------------------------------------------------------------------------------------------
bool gt__3P_AIChoiceOK_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv__3P_AIChoiceOKButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyFixed(gv_pLAYER_11_ANTAGONIST, c_playerPropCustom) >= gv__3P_AIChoiceCost)) {
        PlayerModifyPropertyFixed(gv_pLAYER_11_ANTAGONIST, c_playerPropCustom, c_playerPropOperSubtract, gv__3P_AIChoiceCost);
        gf__3P_AIChoiceClose(EventPlayer());
        gf__3P_CustomAISet(3, 1, gf__3P_AIChoiceSelectedPersonality(EventPlayer()));
        gf__3P_CustomAISet(4, 2, gf__3P_AIChoiceSelectedPersonality(EventPlayer()));
        gf__3P_CustomAISet(5, 1, gf__3P_AIChoiceSelectedPersonality(EventPlayer()));
        gf__3P_CustomAISet(6, 2, gf__3P_AIChoiceSelectedPersonality(EventPlayer()));
        UIDisplayMessage(gv__3P_AntagonistPG, c_messageAreaSubtitle, StringExternal("Param/Value/DC6045C8"));
    }
    else {
        gf__3P_AIChoiceClose(EventPlayer());
        UIDisplayMessage(gv__3P_AntagonistPG, c_messageAreaSubtitle, StringExternal("Param/Value/DB79689A"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_AIChoiceOK_Init () {
    gt__3P_AIChoiceOK = TriggerCreate("gt__3P_AIChoiceOK_Func");
    TriggerAddEventDialogControl(gt__3P_AIChoiceOK, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_AIChoiceCancel
//--------------------------------------------------------------------------------------------------
bool gt__3P_AIChoiceCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv__3P_AIChoiceCancelButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf__3P_AIChoiceClose(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_AIChoiceCancel_Init () {
    gt__3P_AIChoiceCancel = TriggerCreate("gt__3P_AIChoiceCancel_Func");
    TriggerAddEventDialogControl(gt__3P_AIChoiceCancel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Duplicate
//--------------------------------------------------------------------------------------------------
bool gt__3P_Duplicate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vCost;
    int lv_vCostINT;
    fixed lv_vCoefficient;
    string lv_vBeh;
    wave lv_vWave;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vCoefficient = 13.0;
    lv_vWave = AIUnitGetWave(EventUnitTargetUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetOwner(EventUnitTargetUnit()) == libCOMI_gv_mM_PlayerX) || (UnitHasBehavior2(EventUnitTargetUnit(), "PXOwnership") == true))) {
        libNtve_gf_UIErrorMessage(gv__3P_AntagonistPG, StringExternal("Param/Value/8C238F32"), SoundLink("UI_GenericError", -1));
        return true;
    }

    if (((UnitHasBehavior2(EventUnitTargetUnit(), "AWTimedLife") == false) && (libNtve_gf_UnitInRegion(EventUnitTargetUnit(), RegionFromId(26)) == true))) {
        libNtve_gf_UIErrorMessage(gv__3P_AntagonistPG, StringExternal("Param/Value/75B56B58"), SoundLink("UI_GenericError", -1));
        return true;
    }

    if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnitTargetUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterBuried) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) >= 1)) {
        libNtve_gf_UIErrorMessage(gv__3P_AntagonistPG, StringExternal("Param/Value/0653EC9A"), SoundLink("UI_GenericError", -1));
        return true;
    }

    lv_vCost = UnitTypeGetCost(UnitGetType(EventUnitTargetUnit()), c_unitCostMinerals);
    lv_vCost += (UnitTypeGetCost(UnitGetType(EventUnitTargetUnit()), c_unitCostVespene) * 1.5);
    lv_vCost *= 0.8;
    if ((UnitHasBehavior2(EventUnitTargetUnit(), "AWTimedLife") == true)) {
        lv_vCost *= 1.5;
    }

    if (((UnitGetType(EventUnitTargetUnit()) == "Liberator") || (UnitGetType(EventUnitTargetUnit()) == "LiberatorAG") || (UnitGetType(EventUnitTargetUnit()) == "SiegeTankSieged") || (UnitGetType(EventUnitTargetUnit()) == "SiegeTank"))) {
        lv_vCost *= 1.5;
    }

    if (((UnitGetType(EventUnitTargetUnit()) == "QueenClassic") || (UnitGetType(EventUnitTargetUnit()) == "HighTemplar") || (UnitGetType(EventUnitTargetUnit()) == "WidowMine") || (UnitGetType(EventUnitTargetUnit()) == "WidowMineBurrowed"))) {
        lv_vCost *= 2.0;
    }

    if (((UnitGetType(EventUnitTargetUnit()) == "SpiderMine") || (UnitGetType(EventUnitTargetUnit()) == "Vulture") || (UnitGetType(EventUnitTargetUnit()) == "SpiderMineBurrowed"))) {
        lv_vCost *= 4.0;
    }

    lv_vCostINT = TruncI((lv_vCost / lv_vCoefficient));
    if ((lv_vCostINT >= 1)) {
    }
    else {
        lv_vCostINT = 1;
    }
    if ((UnitAbilityChargeInfo(gv__3P_AmonCasterUnit, AbilityCommand("Duplicate", 0), c_unitAbilChargeCountLeft) < lv_vCostINT)) {
        libNtve_gf_UIErrorMessage(gv__3P_AntagonistPG, StringExternal("Param/Value/96307D6A"), SoundLink("UI_GenericError", -1));
        TextExpressionSetToken("Param/Expression/FE82D5C2", "A", IntToText(lv_vCostINT));
        TextTagCreate(TextExpressionAssemble("Param/Expression/FE82D5C2"), 30, UnitGetPosition(EventUnitTargetUnit()), 3.0, true, false, PlayerGroupAll());
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.0);
        return true;
    }

    UnitAbilityAddChargeUsed(gv__3P_AmonCasterUnit, "Duplicate", "Abil/Duplicate", lv_vCostINT);
    UnitCreate(1, UnitGetType(EventUnitTargetUnit()), 0, UnitGetOwner(EventUnitTargetUnit()), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnitTargetUnit()), 3.0)), UnitGetFacing(EventUnitTargetUnit()));
    UnitGroupAdd(libCOMU_gv_cT_SpawnedUnits, UnitLastCreated());
    UnitBehaviorAddPlayer(UnitLastCreated(), "VoidShade", gv_pLAYER_11_ANTAGONIST, 1);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, c_unitPropCurrent));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropEnergy, c_unitPropCurrent));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropShields, c_unitPropCurrent));
    if (((UnitHasBehavior2(EventUnitTargetUnit(), "AWTimedLife") == true) || (UnitHasBehavior2(EventUnitTargetUnit(), "SupportUnit") == true))) {
        UnitIssueOrder(UnitLastCreated(), UnitOrder(EventUnitTargetUnit(), 0), c_orderQueueReplace);
    }

    SoundPlayOnUnitForPlayer(SoundLink("DuplicateSound", -1), c_maxPlayers, PlayerGroupAll(), UnitLastCreated(), 0.0, 100.0, 0.0);
    gf__3P_DisableLongRangeAbilities(UnitLastCreated());
    if ((UnitGetType(UnitLastCreated()) == "HighTemplar")) {
        UnitAbilityEnable(UnitLastCreated(), "ArchonWarp", false);
    }

    if ((AIUnitGetWave(EventUnitTargetUnit()) != null)) {
        lib860A1A1F_gf_MM_AddToAttackWave_Check(UnitLastCreated(), AIWaveGetUnits(lv_vWave));
        UnitBehaviorAddPlayer(UnitLastCreated(), "AWTimedLife", gv_pLAYER_11_ANTAGONIST, 1);
    }

    if ((UnitHasBehavior2(EventUnitTargetUnit(), "AWTimedLife") == true)) {
        UnitSetTeamColorIndex(UnitLastCreated(), 1);
        UnitControlGroupAddUnit(gv_pLAYER_11_ANTAGONIST, 1, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "AWTimedLife", gv_pLAYER_11_ANTAGONIST, 1);
        UnitBehaviorSetDurationRemaining(UnitLastCreated(), "AWTimedLife", UnitBehaviorDuration(EventUnitTargetUnit(), "AWTimedLife"));
    }
    else if ((UnitHasBehavior2(EventUnitTargetUnit(), "LocalDefender") == true)) {
        gf__3P_SetLocalDefender(UnitLastCreated());
    }
    else if ((UnitGetCustomValue(EventUnitTargetUnit(), 56) == 56.0)) {
        UnitSetCustomValue(UnitLastCreated(), 56, 56.0);
        UnitSetTeamColorIndex(UnitLastCreated(), 13);
    }
    TextExpressionSetToken("Param/Expression/9E901D97", "A", IntToText(lv_vCostINT));
    TextTagCreate(TextExpressionAssemble("Param/Expression/9E901D97"), 30, UnitGetPosition(EventUnitTargetUnit()), 3.0, true, false, PlayerGroupAll());
    TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
    TextTagShow(TextTagLastCreated(), gv__3P_AntagonistPG, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_Duplicate_Init () {
    gt__3P_Duplicate = TriggerCreate("gt__3P_Duplicate_Func");
    TriggerAddEventUnitAbility(gt__3P_Duplicate, null, AbilityCommand("Duplicate", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Empower
//--------------------------------------------------------------------------------------------------
bool gt__3P_Empower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnitTargetUnit(), "Create AscendantSacrificeImpactModel");
    SoundPlayOnUnitForPlayer(SoundLink("EmpowerSound", -1), c_maxPlayers, PlayerGroupAll(), EventUnitTargetUnit(), 0.0, 100.0, 0.0);
    if (((libCOMI_gf_GetUnitRace(EventUnitTargetUnit()) == "Terr") || ((libCOMI_gf_GetUnitRace(EventUnitTargetUnit()) == "Zerg") && (UnitTypeTestAttribute(UnitGetType(EventUnitTargetUnit()), c_unitAttributeStructure) == true)))) {
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(EventUnitTargetUnit()), "ShieldArmorName", UnitGetOwner(EventUnitTargetUnit()), "shieldname/name");
    }

    Wait(2.0, c_timeGame);
    SoundStop(SoundLastPlayed(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_Empower_Init () {
    gt__3P_Empower = TriggerCreate("gt__3P_Empower_Func");
    TriggerAddEventUnitAbility(gt__3P_Empower, null, AbilityCommand("Empower", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Gorgon
//--------------------------------------------------------------------------------------------------
bool gt__3P_Gorgon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_vOrigin;
    unit lv_vRiftUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vOrigin = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionFromId(26), lv_vOrigin) == true)) {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), StringExternal("Param/Value/0774434F"), SoundLink("UI_GenericError", -1));
        UnitAbilityReset(gv__3P_AmonCasterUnit, AbilityCommand("SummonGehenna", 0), c_spendLocationAll);
        UISetTargetingOrder(gv__3P_AntagonistPG, libCOMI_gv_cM_SoACasterGroup[gv_pLAYER_11_ANTAGONIST], OrderTargetingUnit(AbilityCommand("SummonGehenna", 0), gv__3P_AmonCasterUnit), true);
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "GorgonVoidRift", c_unitCreateIgnorePlacement, gv_pLAYER_03_EnemyP01, PointWithOffsetPolar(lv_vOrigin, 4.0, libNtve_gf_RandomAngle()), PointFromId(860));
    lv_vRiftUnit = UnitLastCreated();
    SoundPlayForPlayer(SoundLink("Gehenna_Warning_Siren", -1), c_maxPlayers, PlayerGroupAll(), 500.0, 0.0);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "GehennaCruiser", 0, gv_pLAYER_03_EnemyP01, lv_vOrigin, PointFromId(860));
    UnitCreateEffectUnit(lv_vRiftUnit, "VoidRiftTrainBigSet", UnitLastCreated());
    Wait(9.0, c_timeGame);
    SoundStop(SoundLastPlayed(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_Gorgon_Init () {
    gt__3P_Gorgon = TriggerCreate("gt__3P_Gorgon_Func");
    TriggerAddEventPlayerEffectUsed(gt__3P_Gorgon, gv_pLAYER_11_ANTAGONIST, "GorgonTarget");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Barrier
//--------------------------------------------------------------------------------------------------
bool gt__3P_Barrier_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_vOrigin;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventUnitCreatedUnit(), gv_pLAYER_03_EnemyP01, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_Barrier_Init () {
    gt__3P_Barrier = TriggerCreate("gt__3P_Barrier_Func");
    TriggerAddEventUnitCreated(gt__3P_Barrier, null, "CreateBarrier", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Targeting
//--------------------------------------------------------------------------------------------------
bool gt__3P_Targeting_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto000114E0_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto000114E0_val = EventPlayerEffectUsed();
    if (auto000114E0_val == "StrengthenAB") {
        UISetTargetingOrder(gv__3P_AntagonistPG, libCOMI_gv_cM_SoACasterGroup[gv_pLAYER_11_ANTAGONIST], OrderTargetingUnit(AbilityCommand("Empower", 0), gv__3P_AmonCasterUnit), true);
    }
    else if (auto000114E0_val == "DuplicateDummy") {
        UISetTargetingOrder(gv__3P_AntagonistPG, libCOMI_gv_cM_SoACasterGroup[gv_pLAYER_11_ANTAGONIST], OrderTargetingUnit(AbilityCommand("Duplicate", 0), gv__3P_AmonCasterUnit), true);
    }
    else if (auto000114E0_val == "CreateBarrierWallCU") {
        UISetTargetingOrder(gv__3P_AntagonistPG, libCOMI_gv_cM_SoACasterGroup[gv_pLAYER_11_ANTAGONIST], OrderTargetingPoint(AbilityCommand("CreateBarrier", 0), UnitGetPosition(gv__3P_AmonCasterUnit)), true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_Targeting_Init () {
    gt__3P_Targeting = TriggerCreate("gt__3P_Targeting_Func");
    TriggerAddEventPlayerEffectUsed(gt__3P_Targeting, c_playerAny, "CreateBarrierWallCU");
    TriggerAddEventPlayerEffectUsed(gt__3P_Targeting, c_playerAny, "DuplicateDummy");
    TriggerAddEventPlayerEffectUsed(gt__3P_Targeting, c_playerAny, "StrengthenAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_BarrierCreated
//--------------------------------------------------------------------------------------------------
bool gt__3P_BarrierCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vBaseHeight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vBaseHeight = UnitGetHeight(EventUnitCreatedUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "SetOpacity 0.200000");
    UnitSetHeight(EventUnitCreatedUnit(), (lv_vBaseHeight + 3), 0.0);
    Wait(0.0, c_timeGame);
    UnitSetHeight(EventUnitCreatedUnit(), lv_vBaseHeight, 0.2);
    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "SetOpacity 1.000000 0.400000");
    Wait(0.2, c_timeGame);
    SoundPlayOnUnitForPlayer(SoundLink("BarrierSound", -1), c_maxPlayers, PlayerGroupAll(), EventUnitCreatedUnit(), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_BarrierCreated_Init () {
    gt__3P_BarrierCreated = TriggerCreate("gt__3P_BarrierCreated_Func");
    TriggerAddEventUnitCreated(gt__3P_BarrierCreated, null, "CreateBarrier", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Mutator Prices Fill
//--------------------------------------------------------------------------------------------------
bool gt__3P_MutatorPricesFill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_j;

    // Automatic Variable Declarations
    int auto834C7421_ae;
    int auto834C7421_var;
    int auto485A32FF_ae;
    int auto485A32FF_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUnitAllow(gv_pLAYER_11_ANTAGONIST, "HydraliskStetmann", false);
    TechTreeUnitAllow(gv_pLAYER_11_ANTAGONIST, "CorruptorStetmann", false);
    TechTreeUnitAllow(gv_pLAYER_11_ANTAGONIST, "ZerglingStetmann", false);
    TechTreeUnitAllow(gv_pLAYER_11_ANTAGONIST, "UltraliskStetmann", false);
    TechTreeUnitAllow(gv_pLAYER_11_ANTAGONIST, "InfestorStetmann", false);
    gv__3P_Mutators.lv_upgrade[lv_j][0] = "HardenedWill";
    gv__3P_Mutators.lv_cost[lv_j][0] = 3000.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][0] = "JustDie";
    gv__3P_Mutators.lv_cost[lv_j][0] = 6000.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][0] = "EminentDomain";
    gv__3P_Mutators.lv_cost[lv_j][0] = 1000.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][0] = "MutuallyAssuredDestruction";
    gv__3P_Mutators.lv_cost[lv_j][0] = 4500.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][0] = "PhotonOverload";
    gv__3P_Mutators.lv_cost[lv_j][0] = 1000.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][0] = "Transmutation";
    gv__3P_Mutators.lv_cost[lv_j][0] = 3500.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][0] = "WalkingInfested";
    gv__3P_Mutators.lv_cost[lv_j][0] = 1500.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][0] = "Inspiration";
    gv__3P_Mutators.lv_cost[lv_j][0] = 2000.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][0] = "Avenger";
    gv__3P_Mutators.lv_cost[lv_j][0] = 4500.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][0] = "LongRange";
    gv__3P_Mutators.lv_cost[lv_j][0] = 2000.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][0] = "AlienIncubation";
    gv__3P_Mutators.lv_cost[lv_j][0] = 2000.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][0] = "Barrier";
    gv__3P_Mutators.lv_cost[lv_j][0] = 1500.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][0] = "LifeLeech";
    gv__3P_Mutators.lv_cost[lv_j][0] = 1000.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][0] = "MomentofSilence";
    gv__3P_Mutators.lv_cost[lv_j][0] = 3000.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][0] = "SelfDestruction";
    gv__3P_Mutators.lv_cost[lv_j][0] = 2500.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][0] = "Speedfreaks";
    gv__3P_Mutators.lv_cost[lv_j][0] = 3000.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][0] = "WeMoveUnseen";
    gv__3P_Mutators.lv_cost[lv_j][0] = 2000.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][0] = "Darkness";
    gv__3P_Mutators.lv_cost[lv_j][0] = 3000.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][0] = "MissileCommand";
    gv__3P_Mutators.lv_cost[lv_j][0] = 5000.0;
    lv_j += 1;
    gv__3P_MutatorAvailable[0] = lv_j;
    lv_j = 0;
    gv__3P_Mutators.lv_upgrade[lv_j][1] = "Bloodlust";
    gv__3P_Mutators.lv_cost[lv_j][1] = 3000.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][1] = "DarkMirror";
    gv__3P_Mutators.lv_cost[lv_j][1] = 3500.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][1] = "Endurance";
    gv__3P_Mutators.lv_cost[lv_j][1] = 1000.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][1] = "GreatWall";
    gv__3P_Mutators.lv_cost[lv_j][1] = 3000.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][1] = "Matryoshka";
    gv__3P_Mutators.lv_cost[lv_j][1] = 3500.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][1] = "InfestationStation";
    gv__3P_Mutators.lv_cost[lv_j][1] = 3000.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][1] = "LevelPlayingField";
    gv__3P_Mutators.lv_cost[lv_j][1] = 250.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][1] = "SupremeCommander";
    gv__3P_Mutators.lv_cost[lv_j][1] = 500.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][1] = "Necronomicon";
    gv__3P_Mutators.lv_cost[lv_j][1] = 3000.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][1] = "NuclearMines";
    gv__3P_Mutators.lv_cost[lv_j][1] = 3000.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][1] = "RipFieldGenerators";
    gv__3P_Mutators.lv_cost[lv_j][1] = 2000.0;
    lv_j += 1;
    gv__3P_Mutators.lv_upgrade[lv_j][1] = "RepulsiveField";
    gv__3P_Mutators.lv_cost[lv_j][1] = 2500.0;
    gv__3P_MutatorAvailable[1] = lv_j;
    auto834C7421_ae = gv__3P_MutatorAvailable[0];
    auto834C7421_var = 0;
    for ( ; auto834C7421_var <= auto834C7421_ae; auto834C7421_var += 1 ) {
        CatalogFieldValueSet(c_gameCatalogAbil, "MutatorTrain", "InfoArray[" + IntToString(auto834C7421_var) + "].Resource[" + IntToString(3) + "]", gv_pLAYER_11_ANTAGONIST, FixedToString(gv__3P_Mutators.lv_cost[auto834C7421_var][0], 0));
    }
    auto485A32FF_ae = gv__3P_MutatorAvailable[1];
    auto485A32FF_var = 0;
    for ( ; auto485A32FF_var <= auto485A32FF_ae; auto485A32FF_var += 1 ) {
        CatalogFieldValueSet(c_gameCatalogAbil, "CustomMutatorTrain", "InfoArray[" + IntToString(auto485A32FF_var) + "].Resource[" + IntToString(3) + "]", gv_pLAYER_11_ANTAGONIST, FixedToString(gv__3P_Mutators.lv_cost[auto485A32FF_var][1], 0));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_MutatorPricesFill_Init () {
    gt__3P_MutatorPricesFill = TriggerCreate("gt__3P_MutatorPricesFill_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Mutator Purchased
//--------------------------------------------------------------------------------------------------
bool gt__3P_MutatorPurchased_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vMutator;
    unit lv_vUnit;

    // Automatic Variable Declarations
    string autoBDD877A9_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoBDD877A9_val = libNtve_gf_TriggeringProgressUpgrade();
    if (autoBDD877A9_val == "AlienIncubation") {
        lv_vMutator = "SpawnBroodlings";
    }
    else if (autoBDD877A9_val == "Inspiration") {
        lv_vMutator = "Inspiration";
    }
    else if (autoBDD877A9_val == "EminentDomain") {
        lv_vMutator = "StructureSteal";
    }
    else if (autoBDD877A9_val == "Barrier") {
        lv_vMutator = "Barrier";
        TriggerEnable(gt__3P_UnitDamageFix, true);
    }
    else if (autoBDD877A9_val == "Avenger") {
        lv_vMutator = "Avenger";
    }
    else if (autoBDD877A9_val == "HardenedWill") {
        lv_vMutator = "HardenedWill";
    }
    else if (autoBDD877A9_val == "JustDie") {
        lv_vMutator = "JustDie";
        TriggerEnable(gt__3P_UnitCreationFix, true);
    }
    else if (autoBDD877A9_val == "LongRange") {
        lv_vMutator = "LongRange";
    }
    else if (autoBDD877A9_val == "MutuallyAssuredDestruction") {
        lv_vMutator = "HybridNuke";
    }
    else if (autoBDD877A9_val == "PhotonOverload") {
        lv_vMutator = "PhotonOverload";
        TriggerEnable(gt__3P_UnitDamageFix, true);
    }
    else if (autoBDD877A9_val == "Transmutation") {
        lv_vMutator = "Evolve";
    }
    else if (autoBDD877A9_val == "WalkingInfested") {
        lv_vMutator = "WalkingInfested";
    }
    else if (autoBDD877A9_val == "WeMoveUnseen") {
        lv_vMutator = "AllEnemiesCloaked";
    }
    else if (autoBDD877A9_val == "SelfDestruction") {
        lv_vMutator = "DeathAOE";
    }
    else if (autoBDD877A9_val == "Speedfreaks") {
        lv_vMutator = "UnitSpeed";
        UserDataSetInt("Mutators", lv_vMutator, "State", 1, 1);
    }
    else if (autoBDD877A9_val == "LifeLeech") {
        lv_vMutator = "LifeLeech";
    }
    else if (autoBDD877A9_val == "MomentofSilence") {
        lv_vMutator = "MomentOfSilence";
    }
    else if (autoBDD877A9_val == "MomentofSilence") {
        lv_vMutator = "MomentOfSilence";
    }
    else if (autoBDD877A9_val == "Darkness") {
        lv_vMutator = "BlackFog";
    }
    else if (autoBDD877A9_val == "MissileCommand") {
        lv_vMutator = "MissileBarrage";
    }
    else if (autoBDD877A9_val == "Endurance") {
        lv_vMutator = "Endurance";
    }
    else if (autoBDD877A9_val == "LevelPlayingField") {
        lv_vMutator = "LevelPlayingField";
    }
    else if (autoBDD877A9_val == "GreatWall") {
        lv_vMutator = "GreatWall";
    }
    else if (autoBDD877A9_val == "InfestationStation") {
        lv_vMutator = "InfestationStation";
    }
    else if (autoBDD877A9_val == "Bloodlust") {
        lv_vMutator = "Bloodlust";
    }
    else if (autoBDD877A9_val == "SupremeCommander") {
        lv_vMutator = "SupremeCommander";
    }
    else if (autoBDD877A9_val == "Matryoshka") {
        lv_vMutator = "Matryoshka";
    }
    else if (autoBDD877A9_val == "DarkMirror") {
        lv_vMutator = "DarkMirror";
        TriggerExecute(gt__3P_DarkMirrorFix, true, false);
    }
    else if (autoBDD877A9_val == "Necronomicon") {
        lv_vMutator = "Necronomicon";
        TriggerExecute(gt__3P_NecronomiconFixA, true, false);
    }
    else if (autoBDD877A9_val == "NuclearMines") {
        lv_vMutator = "NuclearMines";
    }
    else if (autoBDD877A9_val == "RipFieldGenerators") {
        lv_vMutator = "RipFieldGenerators";
    }
    else if (autoBDD877A9_val == "RepulsiveField") {
        lv_vMutator = "RepulsiveField";
    }
    else {
    }
    if ((lv_vMutator != null)) {
        gv__3P_MutatorsActive += 1;
        if ((gv__3P_MutatorsActive == 10)) {
            TriggerEnable(TriggerGetCurrent(), false);
            UnitAbilityEnable(gv__3P_MainShard, "MutatorTrain", false);
        }

        TextExpressionSetToken("Param/Expression/F809CDDC", "A", libCOMU_gf_CT_MutatorName(lv_vMutator));
        libCOUI_gf_CU_MutatorListShowNotification(TextExpressionAssemble("Param/Expression/F809CDDC"));
        Wait(15.0, c_timeGame);
        libCOMU_gf_EnableDisableMutator(true, lv_vMutator);
        TriggerExecute(libCOMU_gf_CT_MutatorInitTrigger(lv_vMutator), true, false);
        TriggerExecute(gt__3P_JustDieSearchFix, true, false);
        if ((gv__3P_MutatorsActive > 5)) {
            libCOUI_gf_CU_MutatorListInitLarge();
        }
        else {
            libCOUI_gf_CU_MutatorListInitSmall();
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_MutatorPurchased_Init () {
    gt__3P_MutatorPurchased = TriggerCreate("gt__3P_MutatorPurchased_Func");
    TriggerAddEventUnitResearchProgress(gt__3P_MutatorPurchased, UnitRefFromVariable("gv__3P_MainShard"), c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Mutator Price Started
//--------------------------------------------------------------------------------------------------
bool gt__3P_MutatorPriceStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vMutatorCost;
    fixed lv_vCoef;

    // Automatic Variable Declarations
    int auto888127E4_ae;
    int auto888127E4_var;
    int auto89ACBB0A_ae;
    int auto89ACBB0A_var;
    int auto04FF6468_ae;
    int auto04FF6468_var;
    int autoEB98909E_ae;
    int autoEB98909E_var;

    // Variable Initialization
    lv_vCoef = 1.0;

    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "AlienIncubation") || (libNtve_gf_TriggeringProgressUpgrade() == "Avenger") || (libNtve_gf_TriggeringProgressUpgrade() == "Barrier") || (libNtve_gf_TriggeringProgressUpgrade() == "EminentDomain") || (libNtve_gf_TriggeringProgressUpgrade() == "HardenedWill") || (libNtve_gf_TriggeringProgressUpgrade() == "Inspiration") || (libNtve_gf_TriggeringProgressUpgrade() == "JustDie") || (libNtve_gf_TriggeringProgressUpgrade() == "LifeLeech") || (libNtve_gf_TriggeringProgressUpgrade() == "LongRange") || (libNtve_gf_TriggeringProgressUpgrade() == "MomentofSilence") || (libNtve_gf_TriggeringProgressUpgrade() == "MutuallyAssuredDestruction") || (libNtve_gf_TriggeringProgressUpgrade() == "PhotonOverload") || (libNtve_gf_TriggeringProgressUpgrade() == "SelfDestruction") || (libNtve_gf_TriggeringProgressUpgrade() == "Speedfreaks") || (libNtve_gf_TriggeringProgressUpgrade() == "Transmutation") || (libNtve_gf_TriggeringProgressUpgrade() == "WalkingInfested") || (libNtve_gf_TriggeringProgressUpgrade() == "WeMoveUnseen") || (libNtve_gf_TriggeringProgressUpgrade() == "Darkness") || (libNtve_gf_TriggeringProgressUpgrade() == "MissileCommand") || (libNtve_gf_TriggeringProgressUpgrade() == "Bloodlust") || (libNtve_gf_TriggeringProgressUpgrade() == "DarkMirror") || (libNtve_gf_TriggeringProgressUpgrade() == "Endurance") || (libNtve_gf_TriggeringProgressUpgrade() == "GreatWall") || (libNtve_gf_TriggeringProgressUpgrade() == "Matryoshka") || (libNtve_gf_TriggeringProgressUpgrade() == "InfestationStation") || (libNtve_gf_TriggeringProgressUpgrade() == "LevelPlayingField") || (libNtve_gf_TriggeringProgressUpgrade() == "SupremeCommander") || (libNtve_gf_TriggeringProgressUpgrade() == "Necronomicon") || (libNtve_gf_TriggeringProgressUpgrade() == "NuclearMines") || (libNtve_gf_TriggeringProgressUpgrade() == "RipFieldGenerators") || (libNtve_gf_TriggeringProgressUpgrade() == "RepulsiveField")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto888127E4_ae = gv__3P_MutatorAvailable[0];
    auto888127E4_var = 0;
    for ( ; auto888127E4_var <= auto888127E4_ae; auto888127E4_var += 1 ) {
        if ((libNtve_gf_TriggeringProgressUpgrade() == gv__3P_Mutators.lv_upgrade[auto888127E4_var][0])) {
            gv__3P_MutatorsActiveValue += gv__3P_Mutators.lv_cost[auto888127E4_var][0];
            break;
        }

    }
    auto89ACBB0A_ae = gv__3P_MutatorAvailable[1];
    auto89ACBB0A_var = 0;
    for ( ; auto89ACBB0A_var <= auto89ACBB0A_ae; auto89ACBB0A_var += 1 ) {
        if ((libNtve_gf_TriggeringProgressUpgrade() == gv__3P_Mutators.lv_upgrade[auto89ACBB0A_var][1])) {
            gv__3P_MutatorsActiveValue += gv__3P_Mutators.lv_cost[auto89ACBB0A_var][1];
            break;
        }

    }
    lv_vCoef += (gv__3P_MutatorsActiveValue / 6000.0);
    auto04FF6468_ae = gv__3P_MutatorAvailable[0];
    auto04FF6468_var = 0;
    for ( ; auto04FF6468_var <= auto04FF6468_ae; auto04FF6468_var += 1 ) {
        CatalogFieldValueSet(c_gameCatalogAbil, "MutatorTrain", "InfoArray[" + IntToString(auto04FF6468_var) + "].Resource[" + IntToString(3) + "]", gv_pLAYER_11_ANTAGONIST, FixedToString((gv__3P_Mutators.lv_cost[auto04FF6468_var][0] * lv_vCoef), 0));
    }
    autoEB98909E_ae = gv__3P_MutatorAvailable[1];
    autoEB98909E_var = 0;
    for ( ; autoEB98909E_var <= autoEB98909E_ae; autoEB98909E_var += 1 ) {
        CatalogFieldValueSet(c_gameCatalogAbil, "CustomMutatorTrain", "InfoArray[" + IntToString(autoEB98909E_var) + "].Resource[" + IntToString(3) + "]", gv_pLAYER_11_ANTAGONIST, FixedToString((gv__3P_Mutators.lv_cost[autoEB98909E_var][1] * lv_vCoef), 0));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_MutatorPriceStarted_Init () {
    gt__3P_MutatorPriceStarted = TriggerCreate("gt__3P_MutatorPriceStarted_Func");
    TriggerAddEventUnitResearchProgress(gt__3P_MutatorPriceStarted, UnitRefFromVariable("gv__3P_MainShard"), c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Mutator Price Cancelled
//--------------------------------------------------------------------------------------------------
bool gt__3P_MutatorPriceCancelled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vMutatorCost;
    fixed lv_vCoef;

    // Automatic Variable Declarations
    int auto0C59F5B2_ae;
    int auto0C59F5B2_var;
    int autoB791DDC9_ae;
    int autoB791DDC9_var;
    int auto7FC3CD2D_ae;
    int auto7FC3CD2D_var;
    int auto167C965F_ae;
    int auto167C965F_var;

    // Variable Initialization
    lv_vCoef = 1.0;

    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "AlienIncubation") || (libNtve_gf_TriggeringProgressUpgrade() == "Avenger") || (libNtve_gf_TriggeringProgressUpgrade() == "Barrier") || (libNtve_gf_TriggeringProgressUpgrade() == "EminentDomain") || (libNtve_gf_TriggeringProgressUpgrade() == "HardenedWill") || (libNtve_gf_TriggeringProgressUpgrade() == "Inspiration") || (libNtve_gf_TriggeringProgressUpgrade() == "JustDie") || (libNtve_gf_TriggeringProgressUpgrade() == "LifeLeech") || (libNtve_gf_TriggeringProgressUpgrade() == "LongRange") || (libNtve_gf_TriggeringProgressUpgrade() == "MomentofSilence") || (libNtve_gf_TriggeringProgressUpgrade() == "MutuallyAssuredDestruction") || (libNtve_gf_TriggeringProgressUpgrade() == "PhotonOverload") || (libNtve_gf_TriggeringProgressUpgrade() == "SelfDestruction") || (libNtve_gf_TriggeringProgressUpgrade() == "Speedfreaks") || (libNtve_gf_TriggeringProgressUpgrade() == "Transmutation") || (libNtve_gf_TriggeringProgressUpgrade() == "WalkingInfested") || (libNtve_gf_TriggeringProgressUpgrade() == "WeMoveUnseen") || (libNtve_gf_TriggeringProgressUpgrade() == "Darkness") || (libNtve_gf_TriggeringProgressUpgrade() == "MissileCommand") || (libNtve_gf_TriggeringProgressUpgrade() == "Bloodlust") || (libNtve_gf_TriggeringProgressUpgrade() == "DarkMirror") || (libNtve_gf_TriggeringProgressUpgrade() == "Endurance") || (libNtve_gf_TriggeringProgressUpgrade() == "GreatWall") || (libNtve_gf_TriggeringProgressUpgrade() == "Matryoshka") || (libNtve_gf_TriggeringProgressUpgrade() == "InfestationStation") || (libNtve_gf_TriggeringProgressUpgrade() == "LevelPlayingField") || (libNtve_gf_TriggeringProgressUpgrade() == "SupremeCommander") || (libNtve_gf_TriggeringProgressUpgrade() == "Necronomicon") || (libNtve_gf_TriggeringProgressUpgrade() == "NuclearMines") || (libNtve_gf_TriggeringProgressUpgrade() == "RipFieldGenerators") || (libNtve_gf_TriggeringProgressUpgrade() == "RepulsiveField")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0C59F5B2_ae = gv__3P_MutatorAvailable[0];
    auto0C59F5B2_var = 0;
    for ( ; auto0C59F5B2_var <= auto0C59F5B2_ae; auto0C59F5B2_var += 1 ) {
        if ((libNtve_gf_TriggeringProgressUpgrade() == gv__3P_Mutators.lv_upgrade[auto0C59F5B2_var][0])) {
            gv__3P_MutatorsActiveValue -= gv__3P_Mutators.lv_cost[auto0C59F5B2_var][0];
            break;
        }

    }
    autoB791DDC9_ae = gv__3P_MutatorAvailable[1];
    autoB791DDC9_var = 0;
    for ( ; autoB791DDC9_var <= autoB791DDC9_ae; autoB791DDC9_var += 1 ) {
        if ((libNtve_gf_TriggeringProgressUpgrade() == gv__3P_Mutators.lv_upgrade[autoB791DDC9_var][1])) {
            gv__3P_MutatorsActiveValue -= gv__3P_Mutators.lv_cost[autoB791DDC9_var][1];
            break;
        }

    }
    lv_vCoef += (gv__3P_MutatorsActiveValue / 4000.0);
    auto7FC3CD2D_ae = gv__3P_MutatorAvailable[0];
    auto7FC3CD2D_var = 0;
    for ( ; auto7FC3CD2D_var <= auto7FC3CD2D_ae; auto7FC3CD2D_var += 1 ) {
        CatalogFieldValueSet(c_gameCatalogAbil, "MutatorTrain", "InfoArray[" + IntToString(auto7FC3CD2D_var) + "].Resource[" + IntToString(3) + "]", gv_pLAYER_11_ANTAGONIST, FixedToString((gv__3P_Mutators.lv_cost[auto7FC3CD2D_var][0] * lv_vCoef), 0));
    }
    auto167C965F_ae = gv__3P_MutatorAvailable[1];
    auto167C965F_var = 0;
    for ( ; auto167C965F_var <= auto167C965F_ae; auto167C965F_var += 1 ) {
        CatalogFieldValueSet(c_gameCatalogAbil, "CustomMutatorTrain", "InfoArray[" + IntToString(auto167C965F_var) + "].Resource[" + IntToString(3) + "]", gv_pLAYER_11_ANTAGONIST, FixedToString((gv__3P_Mutators.lv_cost[auto167C965F_var][1] * lv_vCoef), 0));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_MutatorPriceCancelled_Init () {
    gt__3P_MutatorPriceCancelled = TriggerCreate("gt__3P_MutatorPriceCancelled_Func");
    TriggerAddEventUnitResearchProgress(gt__3P_MutatorPriceCancelled, UnitRefFromVariable("gv__3P_MainShard"), c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_UnitChangesOwner
//--------------------------------------------------------------------------------------------------
bool gt__3P_UnitChangesOwner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUnitOwnerNew() == 1) || (EventUnitOwnerNew() == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemovePlayer(EventUnit(), "AWTimedLife", 3, 1);
    UnitBehaviorRemovePlayer(EventUnit(), "AWTimedLife", 11, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_UnitChangesOwner_Init () {
    gt__3P_UnitChangesOwner = TriggerCreate("gt__3P_UnitChangesOwner_Func");
    TriggerAddEventUnitChangeOwner(gt__3P_UnitChangesOwner, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_UnitCreation Fix
//--------------------------------------------------------------------------------------------------
bool gt__3P_UnitCreationFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf__3P_ApplyJustDieFix(EventUnitCreatedUnit());
    gf__3P_DisableLongRangeAbilities(EventUnitCreatedUnit());
    gf__3P_DisableMacroAbilities(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_UnitCreationFix_Init () {
    gt__3P_UnitCreationFix = TriggerCreate("gt__3P_UnitCreationFix_Func");
    TriggerAddEventUnitCreated(gt__3P_UnitCreationFix, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_UnitDamage Fix
//--------------------------------------------------------------------------------------------------
bool gt__3P_UnitDamageFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf__3P_ApplyBarrierFix(EventUnit(), EventUnitDamageSourceUnit());
    gf__3P_ApplyPhotonOverloadFix(EventUnit(), EventUnitDamageSourceUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_UnitDamageFix_Init () {
    gt__3P_UnitDamageFix = TriggerCreate("gt__3P_UnitDamageFix_Func");
    TriggerEnable(gt__3P_UnitDamageFix, false);
    TriggerAddEventUnitDamaged(gt__3P_UnitDamageFix, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_JustDie Search Fix
//--------------------------------------------------------------------------------------------------
bool gt__3P_JustDieSearchFix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vUnit;

    // Automatic Variable Declarations
    unitgroup autoF7F17C6A_g;
    int autoF7F17C6A_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(gv_pLAYER_11_ANTAGONIST, "JustDie", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF7F17C6A_g = UnitGroup(null, gv_pLAYER_11_ANTAGONIST, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF7F17C6A_u = UnitGroupCount(autoF7F17C6A_g, c_unitCountAll);
    for (;; autoF7F17C6A_u -= 1) {
        lv_vUnit = UnitGroupUnitFromEnd(autoF7F17C6A_g, autoF7F17C6A_u);
        if (lv_vUnit == null) { break; }
        gf__3P_ApplyJustDieFix(lv_vUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_JustDieSearchFix_Init () {
    gt__3P_JustDieSearchFix = TriggerCreate("gt__3P_JustDieSearchFix_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_InitializeLongRange Fix
//--------------------------------------------------------------------------------------------------
bool gt__3P_InitializeLongRangeFix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;
    string lv_stringUnitID;
    fixed lv_sightRange;
    fixed lv_weaponRange;
    int lv_i;
    int lv_k;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto971A5067_g;
    int autoEC45282B_ae;
    const int autoEC45282B_ai = 1;
    playergroup autoE1C9A146_g;
    int auto58F301BF_ae;
    const int auto58F301BF_ai = 1;
    playergroup autoDB521754_g;

    // Variable Initialization
    lv_stringUnitID = "";

    // Actions
    if (!runActions) {
        return true;
    }

    auto971A5067_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto971A5067_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TechTreeUpgradeAddLevel(lv_indexPlayer, "MutatorLongRange", 1);
    }
    autoEC45282B_ae = CatalogEntryCount(c_gameCatalogUnit);
    lv_i = 1;
    for ( ; ( (autoEC45282B_ai >= 0 && lv_i <= autoEC45282B_ae) || (autoEC45282B_ai < 0 && lv_i >= autoEC45282B_ae) ) ; lv_i += autoEC45282B_ai ) {
        lv_stringUnitID = (CatalogEntryGet(c_gameCatalogUnit, lv_i));
        lv_sightRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, lv_stringUnitID, "Sight", 0)) + 3.0);
        if ((lv_sightRange > 32.0)) {
            lv_sightRange = 32.0;
        }

        autoE1C9A146_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoE1C9A146_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, lv_stringUnitID, "Sight", lv_indexPlayer, FixedToString(lv_sightRange, 2));
        }
    }
    auto58F301BF_ae = CatalogEntryCount(c_gameCatalogWeapon);
    lv_i = 1;
    for ( ; ( (auto58F301BF_ai >= 0 && lv_i <= auto58F301BF_ae) || (auto58F301BF_ai < 0 && lv_i >= auto58F301BF_ae) ) ; lv_i += auto58F301BF_ai ) {
        if ((StringToInt(CatalogFieldValueGet(c_gameCatalogWeapon, CatalogEntryGet(c_gameCatalogWeapon, lv_i), "Options[" + IntToString(2) + "]", 0)) == 0) && (CatalogEntryIsValid(c_gameCatalogWeapon, CatalogEntryGet(c_gameCatalogWeapon, lv_i)) == true)) {
            autoDB521754_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
            lv_indexPlayer = -1;
            while (true) {
                lv_indexPlayer = PlayerGroupNextPlayer(autoDB521754_g, lv_indexPlayer);
                if (lv_indexPlayer < 0) { break; }
                lv_weaponRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, CatalogEntryGet(c_gameCatalogWeapon, lv_i), "Range", lv_indexPlayer)) + 3.0);
                if ((lv_weaponRange > 499.0)) {
                    lv_weaponRange = 500.0;
                }

                CatalogFieldValueSet(c_gameCatalogWeapon, CatalogEntryGet(c_gameCatalogWeapon, lv_i), "Range", lv_indexPlayer, FixedToString(lv_weaponRange, 2));
                CatalogFieldValueSet(c_gameCatalogWeapon, CatalogEntryGet(c_gameCatalogWeapon, lv_i), "MinScanRange", lv_indexPlayer, FixedToString((lv_weaponRange + 0.5), 2));
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_InitializeLongRangeFix_Init () {
    gt__3P_InitializeLongRangeFix = TriggerCreate("gt__3P_InitializeLongRangeFix_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_InitializeBlackFog Fix
//--------------------------------------------------------------------------------------------------
bool gt__3P_InitializeBlackFogFix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    int lv_humanPlayer;

    // Automatic Variable Declarations
    playergroup auto05ABD578_g;
    playergroup auto7731282D_g;
    playergroup auto1A271DAC_g;
    playergroup auto7C9AA7EE_g;
    playergroup auto422E8C2E_g;
    const int autoC12C22E1_n = 50;
    int autoC12C22E1_i;
    playergroup auto48226A35_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_VisionShareEnable(false);
    libCOMI_gf_CM_RevealersEnableDisable(false);
    VisSetFoWAlpha(gv_pLAYER_11_ANTAGONIST, 75.0);
    auto05ABD578_g = gv__3P_CommandersPG;
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto05ABD578_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        VisSetFoWAlpha(lv_indexPlayer, 100.0);
    }
    auto7731282D_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto7731282D_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerGroupHasPlayer(gv__3P_CommandersPG, lv_indexPlayer) == false)) {
            TechTreeUpgradeAddLevel(lv_indexPlayer, "NoSnapshots", 1);
        }

    }
    auto1A271DAC_g = gv__3P_CommandersPG;
    lv_humanPlayer = -1;
    while (true) {
        lv_humanPlayer = PlayerGroupNextPlayer(auto1A271DAC_g, lv_humanPlayer);
        if (lv_humanPlayer < 0) { break; }
        libCOMU_gv_cT_MutatorVisionPlayers[lv_humanPlayer] = PlayerGroupEmpty();
        auto7C9AA7EE_g = PlayerGroupAll();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto7C9AA7EE_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            if ((PlayerGroupHasPlayer(gv__3P_CommandersPG, lv_indexPlayer) == false) && (PlayerGetAlliance(lv_indexPlayer, c_allianceIdVision, lv_humanPlayer) == true)) {
                PlayerGroupAdd(libCOMU_gv_cT_MutatorVisionPlayers[lv_humanPlayer], lv_indexPlayer);
                PlayerSetAlliance(lv_indexPlayer, c_allianceIdVision, lv_humanPlayer, false);
            }

        }
    }
    auto422E8C2E_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto422E8C2E_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupAlly, gv_pLAYER_11_ANTAGONIST), lv_indexPlayer) == true)) {
            PlayerSetAlliance(lv_indexPlayer, c_allianceIdVision, gv_pLAYER_11_ANTAGONIST, true);
        }

    }
    for (autoC12C22E1_i = 1; autoC12C22E1_i <= autoC12C22E1_n; autoC12C22E1_i += 1) {
        auto48226A35_g = gv__3P_CommandersPG;
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto48226A35_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            VisExploreArea(lv_indexPlayer, RegionEntireMap(), false, false);
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_InitializeBlackFogFix_Init () {
    gt__3P_InitializeBlackFogFix = TriggerCreate("gt__3P_InitializeBlackFogFix_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_InitializeMissileBarrage Fix
//--------------------------------------------------------------------------------------------------
bool gt__3P_InitializeMissileBarrageFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__3P_MissileBarrage, true, false);
    libCOMU_gv_cT_MutatorEnabledQuickList[(libCOMU_ge_CT_MutatorQuickList_CT_QuickMissileMadness)] = true;
    libCOMU_gv_cT_MissileCleanupEnabled = true;
    libCOMU_gf_CT_ToggleTrigger(libCOMU_ge_CT_TriggerType_UnitCreation, true);
    libCOMU_gf_CT_ToggleTrigger(libCOMU_ge_CT_TriggerType_UnitDeath, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_InitializeMissileBarrageFix_Init () {
    gt__3P_InitializeMissileBarrageFix = TriggerCreate("gt__3P_InitializeMissileBarrageFix_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_MissileBarrage
//--------------------------------------------------------------------------------------------------
bool gt__3P_MissileBarrage_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unit[7][libCOOC_gv_cCC_MAXPLAYERS + 1] lv_missileLauncher;
    unitgroup lv_launchTargets;
    unit lv_chosenTarget;
    timer[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_barrageTimer;
    timer lv_nukeCD;
    int lv_indexLauncher;
    int lv_indexPlayer;
    point lv_launchLocation;
    int lv_launchAttempts;
    int lv_randomLaunchRoll;
    point lv_pDDTarget;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    playergroup auto42CC249C_g;
    playergroup autoF4FAC26B_g;
    const int auto2ACDC15C_ae = 6;
    const int auto2ACDC15C_ai = 1;
    unitgroup auto075ECA98_g;
    int auto075ECA98_u;
    const int auto6A054A91_ae = 100;
    const int auto6A054A91_ai = 1;
    int auto332F6DB7_val;

    // Variable Initialization
    lv_launchTargets = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        lv_barrageTimer[init_i] = TimerCreate();
    }
    lv_nukeCD = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    auto42CC249C_g = gv__3P_CommandersPG;
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto42CC249C_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TimerStart(lv_barrageTimer[lv_indexPlayer], 5.0, false, c_timeAI);
    }
    TimerStart(lv_nukeCD, libCOMI_gf_MinimumDifficultyValueCoopReal(0.0, 0.0, 900.0, 600.0, 0.0, 0.0), false, c_timeAI);
    while (true) {
        Wait(1.0, c_timeAI);
        autoF4FAC26B_g = gv__3P_CommandersPG;
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoF4FAC26B_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            lv_indexLauncher = 1;
            for ( ; ( (auto2ACDC15C_ai >= 0 && lv_indexLauncher <= auto2ACDC15C_ae) || (auto2ACDC15C_ai < 0 && lv_indexLauncher >= auto2ACDC15C_ae) ) ; lv_indexLauncher += auto2ACDC15C_ai ) {
                if (((lv_missileLauncher[lv_indexLauncher][lv_indexPlayer] == null) || (UnitIsAlive(lv_missileLauncher[lv_indexLauncher][lv_indexPlayer]) == false) || (UnitIsValid(lv_missileLauncher[lv_indexLauncher][lv_indexPlayer]) == false))) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, 3, Point(0.0, 0.0));
                    UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
                    lv_missileLauncher[lv_indexLauncher][lv_indexPlayer] = UnitLastCreated();
                    UnitSetHeight(lv_missileLauncher[lv_indexLauncher][lv_indexPlayer], 8.0, 0.0);
                }

            }
            if ((TimerGetRemaining(lv_barrageTimer[lv_indexPlayer]) <= 0.0)) {
                lv_launchTargets = UnitGroup(null, lv_indexPlayer, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto075ECA98_g = lv_launchTargets;
                auto075ECA98_u = UnitGroupCount(auto075ECA98_g, c_unitCountAll);
                for (;; auto075ECA98_u -= 1) {
                    lv_indexUnit = UnitGroupUnitFromEnd(auto075ECA98_g, auto075ECA98_u);
                    if (lv_indexUnit == null) { break; }
                    if ((UnitFilterMatch(lv_indexUnit, lv_indexPlayer, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0)) == false)) {
                        UnitGroupRemove(lv_launchTargets, lv_indexUnit);
                    }

                }
                if ((UnitGroupCount(lv_launchTargets, c_unitCountAlive) <= 0)) {
                    continue;
                }

                lv_chosenTarget = UnitGroupRandomUnit(lv_launchTargets, c_unitCountAlive);
                lv_launchAttempts = 1;
                for ( ; ( (auto6A054A91_ai >= 0 && lv_launchAttempts <= auto6A054A91_ae) || (auto6A054A91_ai < 0 && lv_launchAttempts >= auto6A054A91_ae) ) ; lv_launchAttempts += auto6A054A91_ai ) {
                    auto332F6DB7_val = RandomInt(1, 4);
                    if (auto332F6DB7_val == 1) {
                        lv_launchLocation = Point(RandomFixed(0.0, libNtve_gf_WidthOfRegion(RegionEntireMap())), libNtve_gf_HeightOfRegion(RegionEntireMap()));
                    }
                    else if (auto332F6DB7_val == 2) {
                        lv_launchLocation = Point(RandomFixed(0.0, libNtve_gf_WidthOfRegion(RegionEntireMap())), 0.0);
                    }
                    else if (auto332F6DB7_val == 3) {
                        lv_launchLocation = Point(0.0, RandomFixed(0.0, libNtve_gf_HeightOfRegion(RegionEntireMap())));
                    }
                    else if (auto332F6DB7_val == 4) {
                        lv_launchLocation = Point(libNtve_gf_WidthOfRegion(RegionEntireMap()), RandomFixed(0.0, libNtve_gf_HeightOfRegion(RegionEntireMap())));
                    }
                    else {
                    }
                    if ((DistanceBetweenPoints(lv_launchLocation, PlayerStartLocation(1)) > 50.0)) {
                        break;
                    }

                }
                if ((lv_launchAttempts >= 100)) {
                    continue;
                }

                UnitSetPosition(lv_missileLauncher[1][lv_indexPlayer], lv_launchLocation, false);
                lv_randomLaunchRoll = RandomInt(1, 100);
                if ((GameGetMissionTime() <= 300.0)) {
                    UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileStandardLaunch", lv_chosenTarget);
                    TimerStart(lv_barrageTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(PlayerDifficulty(lv_indexPlayer), 45.0, 30.0, 20.0, 15.0, 0.0, 0.0), false, c_timeAI);
                }
                else if ((GameGetMissionTime() <= 600.0)) {
                    if ((lv_randomLaunchRoll <= 90)) {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileStandardLaunch", lv_chosenTarget);
                    }
                    else {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileStandardLaunch", lv_chosenTarget);
                        UnitSetPosition(lv_missileLauncher[2][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 4.0, AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))), false);
                        lv_pDDTarget = libNtve_gf_PointWithZOffset(UnitGetPosition(lv_chosenTarget), 2.0);
                        UnitCreateEffectPoint(lv_missileLauncher[2][lv_indexPlayer], "MutatorMissilePointDefenseLaunch", lv_pDDTarget);
                    }
                    TimerStart(lv_barrageTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(PlayerDifficulty(lv_indexPlayer), 30.0, 20.0, 15.0, 5.0, 0.0, 0.0), false, c_timeAI);
                }
                else if ((GameGetMissionTime() <= 900.0)) {
                    if ((lv_randomLaunchRoll <= 20)) {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileSplitterLaunch", lv_chosenTarget);
                    }
                    else if ((lv_randomLaunchRoll <= 40)) {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileStandardLaunch", lv_chosenTarget);
                        UnitSetPosition(lv_missileLauncher[2][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 4.0, AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))), false);
                        lv_pDDTarget = libNtve_gf_PointWithZOffset(UnitGetPosition(lv_chosenTarget), 2.0);
                        UnitCreateEffectPoint(lv_missileLauncher[2][lv_indexPlayer], "MutatorMissilePointDefenseLaunch", lv_pDDTarget);
                    }
                    else if (true) {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileStandardLaunch", lv_chosenTarget);
                    }
                    TimerStart(lv_barrageTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(PlayerDifficulty(lv_indexPlayer), 30.0, 12.0, 4.0, 2.0, 0.0, 0.0), false, c_timeAI);
                }
                else if (true) {
                    if ((lv_randomLaunchRoll <= 10) && ((libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) == 4)) && (TimerGetRemaining(lv_nukeCD) <= 0.0)) {
                        SoundPlayForPlayer(SoundLink("Tychus04BriefingAlarm", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                        TimerStart(lv_nukeCD, libCOMI_gf_MinimumDifficultyValueCoopReal(0.0, 0.0, 120.0, 60.0, 0.0, 0.0), false, c_timeAI);
                        lv_pDDTarget = PointWithOffsetPolar(UnitGetPosition(lv_chosenTarget), 7.0, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))+30.0));
                        lv_pDDTarget = libNtve_gf_PointWithZOffset(lv_pDDTarget, 2.0);
                        UnitSetPosition(lv_missileLauncher[2][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 7.0, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))+30.0)), false);
                        UnitCreateEffectPoint(lv_missileLauncher[2][lv_indexPlayer], "MutatorMissilePointDefenseNukeEscortLaunch", lv_pDDTarget);
                        lv_pDDTarget = PointWithOffsetPolar(UnitGetPosition(lv_chosenTarget), 7.0, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))-30.0));
                        lv_pDDTarget = libNtve_gf_PointWithZOffset(lv_pDDTarget, 2.0);
                        UnitSetPosition(lv_missileLauncher[3][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 7.0, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))-30.0)), false);
                        UnitCreateEffectPoint(lv_missileLauncher[3][lv_indexPlayer], "MutatorMissilePointDefenseNukeEscortLaunch", lv_pDDTarget);
                        if ((libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) == 4)) {
                            lv_pDDTarget = PointWithOffsetPolar(UnitGetPosition(lv_chosenTarget), 7.0, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))+0.0));
                            lv_pDDTarget = libNtve_gf_PointWithZOffset(lv_pDDTarget, 2.0);
                            UnitSetPosition(lv_missileLauncher[4][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 7.0, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))+0.0)), false);
                            UnitCreateEffectPoint(lv_missileLauncher[4][lv_indexPlayer], "MutatorMissilePointDefenseNukeEscortLaunch", lv_pDDTarget);
                            lv_pDDTarget = PointWithOffsetPolar(UnitGetPosition(lv_chosenTarget), 4.5, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))-30.0));
                            lv_pDDTarget = libNtve_gf_PointWithZOffset(lv_pDDTarget, 2.0);
                            UnitSetPosition(lv_missileLauncher[5][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 4.5, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))-30.0)), false);
                            UnitCreateEffectPoint(lv_missileLauncher[5][lv_indexPlayer], "MutatorMissilePointDefenseNukeEscortLaunch", lv_pDDTarget);
                            lv_pDDTarget = PointWithOffsetPolar(UnitGetPosition(lv_chosenTarget), 4.5, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))+30.0));
                            lv_pDDTarget = libNtve_gf_PointWithZOffset(lv_pDDTarget, 2.0);
                            UnitSetPosition(lv_missileLauncher[6][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 4.5, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))+30.0)), false);
                            UnitCreateEffectPoint(lv_missileLauncher[6][lv_indexPlayer], "MutatorMissilePointDefenseNukeEscortLaunch", lv_pDDTarget);
                        }

                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileNukeLaunch", lv_chosenTarget);
                    }
                    else if ((lv_randomLaunchRoll <= 40)) {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileSplitterLaunch", lv_chosenTarget);
                    }
                    else if ((lv_randomLaunchRoll <= 60)) {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileStandardLaunch", lv_chosenTarget);
                        UnitSetPosition(lv_missileLauncher[2][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 4.0, AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))), false);
                        lv_pDDTarget = libNtve_gf_PointWithZOffset(UnitGetPosition(lv_chosenTarget), 2.0);
                        UnitCreateEffectPoint(lv_missileLauncher[2][lv_indexPlayer], "MutatorMissilePointDefenseLaunch", lv_pDDTarget);
                    }
                    else if (true) {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileStandardLaunch", lv_chosenTarget);
                    }
                    TimerStart(lv_barrageTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(PlayerDifficulty(lv_indexPlayer), 15.0, 6.0, 2.0, 1.0, 0.0, 0.0), false, c_timeAI);
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_MissileBarrage_Init () {
    gt__3P_MissileBarrage = TriggerCreate("gt__3P_MissileBarrage_Func");
    TriggerEnable(gt__3P_MissileBarrage, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_DarkMirror Fix
//--------------------------------------------------------------------------------------------------
bool gt__3P_DarkMirrorFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityEnable(gv__3P_MainShard, "AIChoice", false);
    Wait(5.0, c_timeGame);
    PlayerSetColorIndex(lib860A1A1F_gv_mM_PX_PlayerX, 7, true);
    Wait(30.0, c_timeGame);
    TriggerExecute(gt__3P_Properlysetalliances, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_DarkMirrorFix_Init () {
    gt__3P_DarkMirrorFix = TriggerCreate("gt__3P_DarkMirrorFix_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_NecronomiconFixA
//--------------------------------------------------------------------------------------------------
bool gt__3P_NecronomiconFixA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(30.0, c_timeGame);
    TriggerEnable(lib860A1A1F_gt_MM_NecronomiconAttackWaveDefend, false);
    TriggerEnable(gt__3P_NectonomiconFixB, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_NecronomiconFixA_Init () {
    gt__3P_NecronomiconFixA = TriggerCreate("gt__3P_NecronomiconFixA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_NectonomiconFixB
//--------------------------------------------------------------------------------------------------
bool gt__3P_NectonomiconFixB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), EventPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), EventUnitDamageSourcePlayer()) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((UnitGroupCount(lib860A1A1F_gv_mM_UndeadUG, c_unitCountAlive) >= 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(lib860A1A1F_gv_mM_UndeadUG, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
    UnitGroupIssueOrder(lib860A1A1F_gv_mM_UndeadUG, OrderTargetingPoint(AbilityCommand("attack", 0), PlayerStartLocation(RandomInt(1, 2))), c_orderQueueAddToEnd);
    UnitGroupClear(lib860A1A1F_gv_mM_UndeadUG);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_NectonomiconFixB_Init () {
    gt__3P_NectonomiconFixB = TriggerCreate("gt__3P_NectonomiconFixB_Func");
    TriggerEnable(gt__3P_NectonomiconFixB, false);
    TriggerAddEventUnitDamaged(gt__3P_NectonomiconFixB, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Properly set alliances
//--------------------------------------------------------------------------------------------------
bool gt__3P_Properlysetalliances_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_enemyPlayers;
    int lv_setPlayer;

    // Automatic Variable Declarations
    playergroup autoE7D04011_g;
    int autoE7D04011_var;
    const int auto0207B51E_ae = 7;
    int auto0207B51E_var;
    const int auto0C747A6C_ae = 6;
    int auto0C747A6C_var;
    playergroup autoF0E4E824_g;

    // Variable Initialization
    lv_enemyPlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(lv_enemyPlayers, gv_pLAYER_03_EnemyP01);
    PlayerGroupAdd(lv_enemyPlayers, gv_pLAYER_04_EnemyP02);
    PlayerGroupAdd(lv_enemyPlayers, gv_pLAYER_05_EnemyP01_TugOfWarPath);
    PlayerGroupAdd(lv_enemyPlayers, gv_pLAYER_06_EnemyP02_TugOfWarPath);
    PlayerGroupAdd(lv_enemyPlayers, gv_pLAYER_11_ANTAGONIST);
    autoE7D04011_g = lv_enemyPlayers;
    autoE7D04011_var = -1;
    while (true) {
        autoE7D04011_var = PlayerGroupNextPlayer(autoE7D04011_g, autoE7D04011_var);
        if (autoE7D04011_var < 0) { break; }
        libCOMI_gf_SetAllianceCoop(autoE7D04011_var, gv_pLAYER_09_AMONS_CHAMPION, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libCOMI_gf_SetAllianceCoop(autoE7D04011_var, gv_pLAYER_10_ELEMENTAL, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    }
    libCOMI_gf_SetPlayerGroupAlliance(lv_enemyPlayers, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libCOMI_gf_SetPlayerGroupAlliance(lv_enemyPlayers, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
    PlayerSetAlliance(gv_pLAYER_11_ANTAGONIST, c_allianceIdControl, gv_pLAYER_14_DARKMIRROR, false);
    libCOMI_gf_SetAllianceCoop(15, gv_pLAYER_11_ANTAGONIST, libNtve_ge_AllianceSetting_Neutral);
    auto0207B51E_var = 3;
    for ( ; auto0207B51E_var <= auto0207B51E_ae; auto0207B51E_var += 1 ) {
        libNtve_gf_SetUpgradeLevelForPlayer(auto0207B51E_var, "AmonForces", 1);
        libCOMI_gf_SetAllianceCoop(1, auto0207B51E_var, libNtve_ge_AllianceSetting_Enemy);
        libCOMI_gf_SetAllianceCoop(2, auto0207B51E_var, libNtve_ge_AllianceSetting_Enemy);
        libCOMI_gf_SetAllianceCoop(15, auto0207B51E_var, libNtve_ge_AllianceSetting_Neutral);
    }
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_11_ANTAGONIST, "AmonForces", 1);
    UIUnitColorStyleOverride(gv__3P_AntagonistPG, c_unitColorStyleNormal);
    UIUnitColorStyleOverride(gv__3P_CommandersPG, c_unitColorStyleNormal);
    PlayerSetColorIndex(gv_pLAYER_11_ANTAGONIST, 1, true);
    auto0C747A6C_var = 3;
    for ( ; auto0C747A6C_var <= auto0C747A6C_ae; auto0C747A6C_var += 1 ) {
        PlayerSetColorIndex(auto0C747A6C_var, 0, true);
    }
    autoF0E4E824_g = PlayerGroupAll();
    lv_setPlayer = -1;
    while (true) {
        lv_setPlayer = PlayerGroupNextPlayer(autoF0E4E824_g, lv_setPlayer);
        if (lv_setPlayer < 0) { break; }
        if ((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupAlly, gv_pLAYER_11_ANTAGONIST), lv_setPlayer) == true)) {
            PlayerSetAlliance(lv_setPlayer, c_allianceIdVision, gv_pLAYER_11_ANTAGONIST, true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_Properlysetalliances_Init () {
    gt__3P_Properlysetalliances = TriggerCreate("gt__3P_Properlysetalliances_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Temporary Ownership and Leash
//--------------------------------------------------------------------------------------------------
bool gt__3P_TemporaryOwnershipandLeash_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "LocalDefender") == true))) {
            return false;
        }

        if (!((UnitGetCustomValue(EventUnit(), 55) != 55.0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Overseer"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Observer"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "QueenCoop")) {
        AISetUnitScriptControlled(EventUnit(), true);
        return true;
    }

    if ((UnitGetCustomValue(EventUnit(), 55) == 55.0)) {
        UnitSelect(EventUnit(), gv_pLAYER_11_ANTAGONIST, false);
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "ControllerBehForStructs", gv_pLAYER_11_ANTAGONIST, 1);
    lv_owner = UnitGetOwner(EventUnit());
    if ((UnitGetType(EventUnit()) == "Ghost") && (UnitGetPropertyFixed(EventUnit(), c_unitPropMovementSpeedCurrent, c_unitPropCurrent) > 0.5) && (GameGetMissionTime() >= 600.0)) {
        return true;
    }
    else {
        if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true) && (UnitGetType(EventUnit()) != "Bunker") && (UnitGetType(EventUnit()) != "SpiderMine") && (UnitGetType(EventUnit()) != "SpiderMineBurrowed")) {
        }
        else {
            AISetUnitScriptControlled(EventUnit(), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_TemporaryOwnershipandLeash_Init () {
    gt__3P_TemporaryOwnershipandLeash = TriggerCreate("gt__3P_TemporaryOwnershipandLeash_Func");
    TriggerAddEventUnitSelected(gt__3P_TemporaryOwnershipandLeash, null, gv_pLAYER_11_ANTAGONIST, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Global Leash Check
//--------------------------------------------------------------------------------------------------
bool gt__3P_GlobalLeashCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vUnit;
    int lv_owner;

    // Automatic Variable Declarations
    unitgroup auto1939AB9C_g;
    int auto1939AB9C_u;
    unitgroup autoE2CCB021_g;
    int autoE2CCB021_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(2.0, c_timeGame);
        auto1939AB9C_g = UnitGroupAlliance(1, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1939AB9C_u = UnitGroupCount(auto1939AB9C_g, c_unitCountAll);
        for (;; auto1939AB9C_u -= 1) {
            lv_vUnit = UnitGroupUnitFromEnd(auto1939AB9C_g, auto1939AB9C_u);
            if (lv_vUnit == null) { break; }
            if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_11_ANTAGONIST, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_vUnit), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1) && (UnitHasBehavior2(lv_vUnit, "LocalDefender") == true) && (UnitHasBehavior2(lv_vUnit, "ControllerBehForStructs") == true) && (UnitGetCustomValue(lv_vUnit, 55) != 55.0) && (UnitGetType(lv_vUnit) != "Overseer") && (UnitGetType(lv_vUnit) != "Observer") && (UnitGetType(lv_vUnit) != "Probe") && (((DistanceBetweenPoints(UnitGetPosition(lv_vUnit), Point(UnitGetCustomValue(lv_vUnit, 50), UnitGetCustomValue(lv_vUnit, 51))) > 15.0) || (DistanceBetweenPoints(UnitGetPosition(lv_vUnit), UnitGetPosition(gv_amonsChampion)) < 11.0)) || (((UnitGetCustomValue(lv_vUnit, 54) == 54.0) || (UnitGetCustomValue(lv_vUnit, 57) == 57.0)) && (DistanceBetweenPoints(UnitGetPosition(lv_vUnit), Point(UnitGetCustomValue(lv_vUnit, 50), UnitGetCustomValue(lv_vUnit, 51))) > 6.0)))) {
                UnitIssueOrder(lv_vUnit, OrderTargetingPoint(AbilityCommand("attack", 0), Point(UnitGetCustomValue(lv_vUnit, 50), UnitGetCustomValue(lv_vUnit, 51))), c_orderQueueReplace);
                UnitBehaviorAddPlayer(lv_vUnit, "LocalDefenderReturning", 1, 1);
            }

        }
        autoE2CCB021_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE2CCB021_u = UnitGroupCount(autoE2CCB021_g, c_unitCountAll);
        for (;; autoE2CCB021_u -= 1) {
            lv_vUnit = UnitGroupUnitFromEnd(autoE2CCB021_g, autoE2CCB021_u);
            if (lv_vUnit == null) { break; }
            if ((UnitHasBehavior2(lv_vUnit, "LocalDefenderReturning") == true) && (DistanceBetweenPoints(UnitGetPosition(lv_vUnit), Point(UnitGetCustomValue(lv_vUnit, 50), UnitGetCustomValue(lv_vUnit, 51))) <= 2.0)) {
                UnitBehaviorRemovePlayer(lv_vUnit, "LocalDefenderReturning", 1, 1);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_GlobalLeashCheck_Init () {
    gt__3P_GlobalLeashCheck = TriggerCreate("gt__3P_GlobalLeashCheck_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Amon Temp Units Attacked
//--------------------------------------------------------------------------------------------------
bool gt__3P_AmonTempUnitsAttacked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    unitgroup autoEEA21A04_g;
    int autoEEA21A04_u;
    unit autoEEA21A04_var;

    // Variable Initialization
    lv_vUG = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gf__3P_AIOwner(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnitDamageSourceUnit()) == gv_pLAYER_02_USER)))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_11_ANTAGONIST, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vUG = UnitGroupFilterAlliance(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0), gv_pLAYER_11_ANTAGONIST, c_unitAllianceAlly, 0);
    autoEEA21A04_g = lv_vUG;
    autoEEA21A04_u = UnitGroupCount(autoEEA21A04_g, c_unitCountAll);
    for (;; autoEEA21A04_u -= 1) {
        autoEEA21A04_var = UnitGroupUnitFromEnd(autoEEA21A04_g, autoEEA21A04_u);
        if (autoEEA21A04_var == null) { break; }
        if ((UnitHasBehavior2(autoEEA21A04_var, "LocalDefender") == true)) {
            UnitBehaviorRemovePlayer(autoEEA21A04_var, "LocalDefender", gv_pLAYER_11_ANTAGONIST, 1);
            UnitBehaviorRemovePlayer(autoEEA21A04_var, "LocalDefenderReturning", gv_pLAYER_11_ANTAGONIST, 1);
            UnitBehaviorAddPlayer(autoEEA21A04_var, "Attacked", 11, 1);
        }
        else if ((UnitHasBehavior2(autoEEA21A04_var, "Attacked") == true)) {
            UnitBehaviorAddPlayer(autoEEA21A04_var, "Attacked", 11, 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_AmonTempUnitsAttacked_Init () {
    gt__3P_AmonTempUnitsAttacked = TriggerCreate("gt__3P_AmonTempUnitsAttacked_Func");
    TriggerAddEventUnitDamaged(gt__3P_AmonTempUnitsAttacked, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Upgrade Parity
//--------------------------------------------------------------------------------------------------
bool gt__3P_UpgradeParity_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto37785C5E_ae = 12;
    int auto37785C5E_var;

    // Conditions
    if (testConds) {
        if (!((EventUpgradeLevelDelta() >= 1))) {
            return false;
        }

        if (!(((EventPlayer() == gv_pLAYER_03_EnemyP01) || (EventPlayer() == gv_pLAYER_04_EnemyP02) || (EventPlayer() == gv_pLAYER_05_EnemyP01_TugOfWarPath) || (EventPlayer() == gv_pLAYER_06_EnemyP02_TugOfWarPath)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto37785C5E_var = 11;
    for ( ; auto37785C5E_var <= auto37785C5E_ae; auto37785C5E_var += 1 ) {
        TechTreeUpgradeAddLevel(auto37785C5E_var, EventUpgradeName(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_UpgradeParity_Init () {
    gt__3P_UpgradeParity = TriggerCreate("gt__3P_UpgradeParity_Func");
    TriggerEnable(gt__3P_UpgradeParity, false);
    TriggerAddEventUpgradeLevelChanged(gt__3P_UpgradeParity, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Structure Reposition
//--------------------------------------------------------------------------------------------------
bool gt__3P_StructureReposition_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((DistanceBetweenPoints(EventUnitTargetPoint(), Point(UnitGetCustomValue(EventUnit(), 50), UnitGetCustomValue(EventUnit(), 51))) >= 10.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitAbilityRemoveCooldown(EventUnit(), AbilityCommandGetAbility(EventUnitAbility()), "Abil/RepositionMissileTurret");
    UnitIssueOrder(EventUnit(), libNtve_gf_ReviveOrderTargetingPoint(EventUnitAbility(), Point(UnitGetCustomValue(EventUnit(), 50), UnitGetCustomValue(EventUnit(), 51)), EventUnit()), c_orderQueueReplace);
    libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/546710C4"), SoundLink("UI_GenericError", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_StructureReposition_Init () {
    gt__3P_StructureReposition = TriggerCreate("gt__3P_StructureReposition_Func");
    TriggerAddEventUnitAbility(gt__3P_StructureReposition, null, AbilityCommand("RepositionSunken", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt__3P_StructureReposition, null, AbilityCommand("RepositionSpore", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt__3P_StructureReposition, null, AbilityCommand("RepositionSpine", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt__3P_StructureReposition, null, AbilityCommand("RepositionShieldBattery", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt__3P_StructureReposition, null, AbilityCommand("RepositionPylon", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt__3P_StructureReposition, null, AbilityCommand("RepositionPlanetary", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt__3P_StructureReposition, null, AbilityCommand("RepositionPhotonCannon", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt__3P_StructureReposition, null, AbilityCommand("RepositionMonolith", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt__3P_StructureReposition, null, AbilityCommand("RepositionMissileTurret", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt__3P_StructureReposition, null, AbilityCommand("RepositionBunker", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt__3P_StructureReposition, null, AbilityCommand("RepositionBileLauncher", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Disable AI control
//--------------------------------------------------------------------------------------------------
bool gt__3P_DisableAIcontrol_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_vAW;

    // Automatic Variable Declarations
    unitgroup auto667FDB7E_g;
    int auto667FDB7E_u;
    unit auto667FDB7E_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto667FDB7E_g = UnitGroupSelected(gv_pLAYER_11_ANTAGONIST);
    auto667FDB7E_u = UnitGroupCount(auto667FDB7E_g, c_unitCountAll);
    for (;; auto667FDB7E_u -= 1) {
        auto667FDB7E_var = UnitGroupUnitFromEnd(auto667FDB7E_g, auto667FDB7E_u);
        if (auto667FDB7E_var == null) { break; }
        if ((UnitHasBehavior2(auto667FDB7E_var, "AWTimedLife") == true) && (UnitGetOwner(auto667FDB7E_var) != gv_pLAYER_11_ANTAGONIST)) {
            lv_vAW = true;
            AISetUnitScriptControlled(auto667FDB7E_var, false);
        }

    }
    if ((lv_vAW == true)) {
        libNtve_gf_UIErrorMessage(gv__3P_AntagonistPG, StringExternal("Param/Value/93F9EC63"), SoundLink("WidowMine_ArmedBeep", -1));
    }
    else {
        libNtve_gf_UIErrorMessage(gv__3P_AntagonistPG, StringExternal("Param/Value/A89C110D"), SoundLink("UI_GenericError", -1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_DisableAIcontrol_Init () {
    gt__3P_DisableAIcontrol = TriggerCreate("gt__3P_DisableAIcontrol_Func");
    TriggerAddEventKeyPressed(gt__3P_DisableAIcontrol, gv_pLAYER_11_ANTAGONIST, c_keyK, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_WorkerPreventRegion
//--------------------------------------------------------------------------------------------------
bool gt__3P_WorkerPreventRegion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), EventPlayer()) == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "SupportUnit") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMU_gf_MutatorIsEnabled("GreatWall") == true) && ((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagWorker) == true) || (UnitGetType(EventUnit()) == "QueenCoop"))) {
        return true;
    }

    UnitSetCustomValue(EventUnit(), 50, 160.0);
    UnitSetCustomValue(EventUnit(), 51, 84.0);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), Point(UnitGetCustomValue(EventUnit(), 50), UnitGetCustomValue(EventUnit(), 51))), c_orderQueueReplace);
    UnitBehaviorAddPlayer(EventUnit(), "LocalDefenderReturning", 1, 1);
    while (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(26)) == false))) {
        Wait(2.0, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    UnitBehaviorRemovePlayer(EventUnit(), "LocalDefenderReturning", 1, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_WorkerPreventRegion_Init () {
    gt__3P_WorkerPreventRegion = TriggerCreate("gt__3P_WorkerPreventRegion_Func");
    TriggerAddEventUnitRegion(gt__3P_WorkerPreventRegion, null, RegionFromId(26), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Resources from Shards & Duplicate Charge
//--------------------------------------------------------------------------------------------------
bool gt__3P_ResourcesfromShardsDuplicateCharge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_vMainShardRate = 12;
    const int lv_vSmallShardRate = 1;
    const int lv_vReservoirRate = 2;
    fixed lv_vEconomyInterval;
    int lv_vShardsClose;
    int lv_vBehCount;
    int lv_vIncome;

    // Automatic Variable Declarations
    string auto8BDDE4E5_val;
    unitgroup autoC482DD75_g;
    int autoC482DD75_u;
    unit autoC482DD75_var;
    unitgroup auto32F4293B_g;
    int auto32F4293B_u;
    unit auto32F4293B_var;

    // Variable Initialization
    lv_vIncome = lv_vMainShardRate;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv__3P_MainShard) == true))) {
            return false;
        }

        if (!((gf__3P_HybridPlaying() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8BDDE4E5_val = GameAttributeGameValue("[bnet:local/0.0/274050]1");
    {
        lv_vEconomyInterval = 3.5;
    }
    while (true) {
        Wait(lv_vEconomyInterval, c_timeGame);
        if ((GameGetMissionTime() >= 1200.0)) {
            UnitAbilityAddChargeUsed(gv__3P_AmonCasterUnit, "Duplicate", "Abil/Duplicate", -2.0);
        }
        else {
            UnitAbilityAddChargeUsed(gv__3P_AmonCasterUnit, "Duplicate", "Abil/Duplicate", -1.0);
        }
        PlayerModifyPropertyInt(gv_pLAYER_11_ANTAGONIST, c_playerPropCustom, c_playerPropOperAdd, lv_vMainShardRate);
        lv_vIncome = lv_vMainShardRate;
        TextTagCreate((StringExternal("Param/Value/91E143E0") + (IntToText(lv_vMainShardRate) + StringExternal("Param/Value/C52E8771"))), 24, UnitGetPosition(gv__3P_MainShard), 5.0, true, false, PlayerGroupSingle(gv_pLAYER_11_ANTAGONIST));
        TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 2.35, 2.35));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        TextTagShow(TextTagLastCreated(), PlayerGroupSingle(gv_pLAYER_11_ANTAGONIST), true);
        gv__3P_TotalMined += lv_vMainShardRate;
        autoC482DD75_g = gv__3P_ShardFragments;
        autoC482DD75_u = UnitGroupCount(autoC482DD75_g, c_unitCountAll);
        for (;; autoC482DD75_u -= 1) {
            autoC482DD75_var = UnitGroupUnitFromEnd(autoC482DD75_g, autoC482DD75_u);
            if (autoC482DD75_var == null) { break; }
            PlayerModifyPropertyInt(gv_pLAYER_11_ANTAGONIST, c_playerPropCustom, c_playerPropOperAdd, lv_vSmallShardRate);
            lv_vIncome += lv_vSmallShardRate;
            TextTagCreate((StringExternal("Param/Value/B392DEE7") + (IntToText(lv_vSmallShardRate) + StringExternal("Param/Value/EBE33D16"))), 24, UnitGetPosition(autoC482DD75_var), 5.0, true, false, PlayerGroupSingle(gv_pLAYER_11_ANTAGONIST));
            TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 2.35, 2.35));
            TextTagShow(TextTagLastCreated(), PlayerGroupSingle(gv_pLAYER_11_ANTAGONIST), true);
            gv__3P_TotalMined += lv_vSmallShardRate;
        }
        auto32F4293B_g = gv__3P_VoidEnergyReservoirs;
        auto32F4293B_u = UnitGroupCount(auto32F4293B_g, c_unitCountAll);
        for (;; auto32F4293B_u -= 1) {
            auto32F4293B_var = UnitGroupUnitFromEnd(auto32F4293B_g, auto32F4293B_u);
            if (auto32F4293B_var == null) { break; }
            lv_vBehCount = UnitBehaviorCount(auto32F4293B_var, "ExtractVoidEnergyBEH");
            if ((TextTagVisible(libHots_gf_TextTagForUnit(auto32F4293B_var, 1), gv_pLAYER_11_ANTAGONIST) == false)) {
                TextExpressionSetToken("Param/Expression/2D3A8CE5", "A", IntToText(0));
                TextTagCreate(TextExpressionAssemble("Param/Expression/2D3A8CE5"), 20, UnitGetPosition(auto32F4293B_var), 2.5, true, false, PlayerGroupSingle(gv_pLAYER_11_ANTAGONIST));
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, ColorWithAlpha(100.00, 100.00, 100.00, 74.90));
                TextTagShow(TextTagLastCreated(), gv__3P_AntagonistPG, true);
                libHots_gf_StoreTextTagForUnit(auto32F4293B_var, 1, TextTagLastCreated());
            }
            else {
                TextExpressionSetToken("Param/Expression/062ABBBA", "A", IntToText(lv_vBehCount));
                TextTagSetText(libHots_gf_TextTagForUnit(auto32F4293B_var, 1), TextExpressionAssemble("Param/Expression/062ABBBA"));
            }
            if ((lv_vBehCount >= 1)) {
                PlayerModifyPropertyInt(gv_pLAYER_11_ANTAGONIST, c_playerPropCustom, c_playerPropOperAdd, (lv_vBehCount * lv_vReservoirRate));
                lv_vIncome += (lv_vBehCount * lv_vReservoirRate);
                if (((UnitGetPropertyFixed(auto32F4293B_var, c_unitPropResources, c_unitPropCurrent) - (lv_vBehCount * lv_vReservoirRate)) <= 0.0)) {
                    UnitGroupIssueOrder(UnitGroup("VoidShardFragment", c_playerAny, RegionCircle(UnitGetPosition(auto32F4293B_var), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                    TextTagDestroy(libHots_gf_TextTagForUnit(auto32F4293B_var, 1));
                    UnitKill(auto32F4293B_var);
                }
                else {
                    UnitSetPropertyFixed(auto32F4293B_var, c_unitPropResources, (UnitGetPropertyFixed(auto32F4293B_var, c_unitPropResources, c_unitPropCurrent) - (lv_vBehCount * lv_vReservoirRate)));
                }
                TextTagCreate((StringExternal("Param/Value/8C048E32") + (IntToText((lv_vBehCount * lv_vReservoirRate)) + StringExternal("Param/Value/9789BCA1"))), 24, UnitGetPosition(auto32F4293B_var), 5.0, true, false, PlayerGroupSingle(gv_pLAYER_11_ANTAGONIST));
                TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 2.35, 2.35));
                TextTagShow(TextTagLastCreated(), PlayerGroupSingle(gv_pLAYER_11_ANTAGONIST), true);
                gv__3P_TotalMined += (lv_vBehCount * lv_vReservoirRate);
            }

        }
        TextExpressionSetToken("Param/Expression/04484E9B", "A", IntToText(lv_vIncome));
        libNtve_gf_SetDialogItemText(gv__3P_IncomeRateDialogItem, TextExpressionAssemble("Param/Expression/04484E9B"), gv__3P_AntagonistPG);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_ResourcesfromShardsDuplicateCharge_Init () {
    gt__3P_ResourcesfromShardsDuplicateCharge = TriggerCreate("gt__3P_ResourcesfromShardsDuplicateCharge_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Amon Void Energy Gain
//--------------------------------------------------------------------------------------------------
bool gt__3P_AmonVoidEnergyGain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dyingunit;
    fixed lv_xp;
    fixed lv_heroicxpoverride;
    fixed lv_heroicxpoverride2;
    fixed lv_minimumearnedxp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dyingunit = EventUnit();
    lv_heroicxpoverride = 30.0;
    lv_heroicxpoverride2 = 10.0;
    lv_minimumearnedxp = 1.0;

    // Conditions
    if (testConds) {
        if (!(((UnitFilterMatch(lv_dyingunit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), (1 << (c_targetFilterHallucination - 32)))) == true) || ((UnitFilterMatch(lv_dyingunit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), (1 << (c_targetFilterHallucination - 32)))) == true) && (libCOMU_gf_MutatorIsEnabled("GreatWall") == true))))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((UnitHasBehavior2(lv_dyingunit, "NoBiomassDrop") == false))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMU_gf_CT_UnitSpawnedByMutator(lv_dyingunit) == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(gv__3P_CommandersPG, libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_xp = ((UnitTypeGetProperty(UnitGetType(lv_dyingunit), c_unitPropSuppliesUsed)+UnitTypeGetProperty(UnitGetType(lv_dyingunit), c_unitPropSuppliesMade) )* 2.0);
    if ((UnitGetType(EventUnit()) == "SlaynElemental")) {
        lv_xp = 50.0;
    }
    else if ((UnitFilterMatch(lv_dyingunit, 1, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0)) == true) && (lv_xp <= lv_minimumearnedxp)) {
        lv_xp = lv_heroicxpoverride;
    }
    else if ((UnitFilterMatch(lv_dyingunit, 1, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterHeroic), 0)) == true) && (UnitGetType(EventUnit()) != "BarrierWall") && (UnitGetType(EventUnit()) != "SpiderMineBurrowed") && (lv_xp <= lv_heroicxpoverride2)) {
        lv_xp = lv_heroicxpoverride2;
    }
    else if ((lv_xp <= lv_minimumearnedxp) && (UnitGetType(EventUnit()) != "SpiderMineBurrowed")) {
        lv_xp = lv_minimumearnedxp;
    }
    PlayerModifyPropertyFixed(gv_pLAYER_11_ANTAGONIST, c_playerPropCustom, c_playerPropOperAdd, lv_xp);
    TextTagCreate((StringExternal("Param/Value/839E8A58") + (FixedToText(lv_xp, c_fixedPrecisionAny) + StringExternal("Param/Value/CB7435E3"))), 24, UnitGetPosition(lv_dyingunit), 0.0, true, false, PlayerGroupSingle(gv_pLAYER_11_ANTAGONIST));
    TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 2.35, 2.35));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
    TextTagShow(TextTagLastCreated(), PlayerGroupSingle(gv_pLAYER_11_ANTAGONIST), true);
    gv__3P_TotalAddedFrom += FixedToInt(lv_xp);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_AmonVoidEnergyGain_Init () {
    gt__3P_AmonVoidEnergyGain = TriggerCreate("gt__3P_AmonVoidEnergyGain_Func");
    TriggerAddEventUnitDied(gt__3P_AmonVoidEnergyGain, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Set Up Eco UI
//--------------------------------------------------------------------------------------------------
bool gt__3P_SetUpEcoUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetResourceVisible(gv__3P_AntagonistPG, c_resourceTypeMinerals, false);
    UISetResourceVisible(gv__3P_AntagonistPG, c_resourceTypeVespene, false);
    UISetFrameVisible(gv__3P_AntagonistPG, c_syncFrameTypeSupply, false);
    UISetFrameVisible(gv__3P_AntagonistPG, c_syncFrameTypeTipAlertPanel, false);
    UISetResourceVisible(gv__3P_AntagonistPG, c_resourceTypeCustom, true);
    UISetFrameVisible(gv__3P_AntagonistPG, c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(gv__3P_AntagonistPG, c_syncFrameTypeTeamResourceButton, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_SetUpEcoUI_Init () {
    gt__3P_SetUpEcoUI = TriggerCreate("gt__3P_SetUpEcoUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Shard Fragment Created
//--------------------------------------------------------------------------------------------------
bool gt__3P_ShardFragmentCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vUnit;

    // Automatic Variable Declarations
    unitgroup auto7E1CE6F2_g;
    int auto7E1CE6F2_u;
    unit auto7E1CE6F2_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vUnit = EventUnitCreatedUnit();
    if (((UnitGroupHasUnit(UnitControlGroup(gv_pLAYER_11_ANTAGONIST, 3), UnitGroupUnit(gv__3P_ShardFragments, 1)) == true) || (UnitGroupCount(gv__3P_ShardFragments, c_unitCountAlive) == 0))) {
        UnitControlGroupAddUnit(gv_pLAYER_11_ANTAGONIST, 3, EventUnitCreatedUnit());
    }

    Wait(2.0, c_timeGame);
    UnitGroupAdd(gv__3P_ShardFragments, EventUnitCreatedUnit());
    UnitGroupAdd(gv__3P_Shards, EventUnitCreatedUnit());
    auto7E1CE6F2_g = gv__3P_Shards;
    auto7E1CE6F2_u = UnitGroupCount(auto7E1CE6F2_g, c_unitCountAll);
    for (;; auto7E1CE6F2_u -= 1) {
        auto7E1CE6F2_var = UnitGroupUnitFromEnd(auto7E1CE6F2_g, auto7E1CE6F2_u);
        if (auto7E1CE6F2_var == null) { break; }
        if ((DistanceBetweenPoints(UnitGetPosition(lv_vUnit), UnitGetPosition(auto7E1CE6F2_var)) < 18.0) && (lv_vUnit != auto7E1CE6F2_var)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DummyUnit", 0, gv_pLAYER_11_ANTAGONIST, UnitGetPosition(lv_vUnit));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), auto7E1CE6F2_var), c_orderQueueReplace);
            Wait(RandomFixed(0.0, 2.0), c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_ShardFragmentCreated_Init () {
    gt__3P_ShardFragmentCreated = TriggerCreate("gt__3P_ShardFragmentCreated_Func");
    TriggerAddEventUnitCreated(gt__3P_ShardFragmentCreated, null, "SummonVoidShardFragment", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Shard Fragment Dies
//--------------------------------------------------------------------------------------------------
bool gt__3P_ShardFragmentDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1A99D889_g;
    int auto1A99D889_u;
    unit auto1A99D889_var;
    unitgroup auto70711B41_g;
    int auto70711B41_u;
    unit auto70711B41_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "VoidShardFragment"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1A99D889_g = UnitGroup("DummyUnit", gv_pLAYER_11_ANTAGONIST, RegionCircle(UnitGetPosition(EventUnit()), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1A99D889_u = UnitGroupCount(auto1A99D889_g, c_unitCountAll);
    for (;; auto1A99D889_u -= 1) {
        auto1A99D889_var = UnitGroupUnitFromEnd(auto1A99D889_g, auto1A99D889_u);
        if (auto1A99D889_var == null) { break; }
        UnitKill(auto1A99D889_var);
        UnitRemove(auto1A99D889_var);
    }
    auto70711B41_g = UnitGroup("DummyUnit", gv_pLAYER_11_ANTAGONIST, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto70711B41_u = UnitGroupCount(auto70711B41_g, c_unitCountAll);
    for (;; auto70711B41_u -= 1) {
        auto70711B41_var = UnitGroupUnitFromEnd(auto70711B41_g, auto70711B41_u);
        if (auto70711B41_var == null) { break; }
        if ((UnitGroupCount(UnitGroup("VoidShardFragment", gv_pLAYER_11_ANTAGONIST, RegionCircle(UnitGetPosition(auto70711B41_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0)) {
            UnitKill(auto70711B41_var);
            UnitRemove(auto70711B41_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_ShardFragmentDies_Init () {
    gt__3P_ShardFragmentDies = TriggerCreate("gt__3P_ShardFragmentDies_Func");
    TriggerAddEventUnitDied(gt__3P_ShardFragmentDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Salvage Void Shard Fragment CD
//--------------------------------------------------------------------------------------------------
bool gt__3P_SalvageVoidShardFragmentCD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerAddChargeUsed(gv_pLAYER_11_ANTAGONIST, "Abil/CreateShard", -1.0);
    UnitAbilityAddChargeUsed(gv__3P_MainShard, "SummonVoidShardFragment", "Abil/CreateShard", -1.0);
    PlayerModifyPropertyInt(gv_pLAYER_11_ANTAGONIST, c_playerPropCustom, c_playerPropOperAdd, 100);
    gv__3P_TotalAddedFrom += 100;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_SalvageVoidShardFragmentCD_Init () {
    gt__3P_SalvageVoidShardFragmentCD = TriggerCreate("gt__3P_SalvageVoidShardFragmentCD_Func");
    TriggerAddEventUnitAbility(gt__3P_SalvageVoidShardFragmentCD, null, AbilityCommand("VoidShardFragment", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Create Income Rate Dialog
//--------------------------------------------------------------------------------------------------
bool gt__3P_CreateIncomeRateDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(100, 50, c_anchorTopRight, 140, 21, true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorTopRight, 0, 0, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_IncomeRate", gv__3P_AntagonistPG);
    gv__3P_IncomeRateDialogItem = DialogControlLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), gv__3P_AntagonistPG, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_CreateIncomeRateDialog_Init () {
    gt__3P_CreateIncomeRateDialog = TriggerCreate("gt__3P_CreateIncomeRateDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Hero Purchased
//--------------------------------------------------------------------------------------------------
bool gt__3P_HeroPurchased_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto81AB07F0_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto81AB07F0_val = libNtve_gf_TriggeringProgressUpgrade();
    if (auto81AB07F0_val == "Raynor") {
        gf__3P_HeroActivate(1);
        SoundPlayForPlayer(SoundLink("MutatorAmonRaynor_BirthDialog", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (auto81AB07F0_val == "Tychus") {
        gf__3P_HeroActivate(2);
        SoundPlayForPlayer(SoundLink("MutatorAmonTychus_BirthDialog", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (auto81AB07F0_val == "Nova") {
        gf__3P_HeroActivate(3);
        SoundPlayForPlayer(SoundLink("MutatorAmonNova_BirthDialog", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (auto81AB07F0_val == "Dehaka") {
        gf__3P_HeroActivate(4);
        SoundPlayForPlayer(SoundLink("MutatorAmonDehaka_BirthDialog", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (auto81AB07F0_val == "Zagara") {
        gf__3P_HeroActivate(5);
        SoundPlayForPlayer(SoundLink("MutatorAmonZagara_BirthDialog", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (auto81AB07F0_val == "Kerrigan") {
        gf__3P_HeroActivate(6);
        SoundPlayForPlayer(SoundLink("MutatorAmonKerrigan_BirthDialog", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (auto81AB07F0_val == "Zeratul") {
        gf__3P_HeroActivate(7);
        SoundPlayForPlayer(SoundLink("MutatorAmonZeratul_BirthDialog", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (auto81AB07F0_val == "Karax") {
        gf__3P_HeroActivate(8);
        SoundPlayForPlayer(SoundLink("MutatorAmonKarax_BirthDialog", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (auto81AB07F0_val == "Artanis") {
        gf__3P_HeroActivate(9);
        SoundPlayForPlayer(SoundLink("MutatorAmonArtanis_BirthDialog", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_HeroPurchased_Init () {
    gt__3P_HeroPurchased = TriggerCreate("gt__3P_HeroPurchased_Func");
    TriggerAddEventUnitResearchProgress(gt__3P_HeroPurchased, UnitRefFromVariable("gv__3P_MainShard"), c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_KaraxFix
//--------------------------------------------------------------------------------------------------
bool gt__3P_KaraxFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto947312B8_g;
    int auto947312B8_u;
    unit auto947312B8_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MutatorAmonKarax"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    auto947312B8_g = UnitGroup("MutatorAmonKaraxInvisiblePylon", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto947312B8_u = UnitGroupCount(auto947312B8_g, c_unitCountAll);
    for (;; auto947312B8_u -= 1) {
        auto947312B8_var = UnitGroupUnitFromEnd(auto947312B8_g, auto947312B8_u);
        if (auto947312B8_var == null) { break; }
        UnitRemove(auto947312B8_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_KaraxFix_Init () {
    gt__3P_KaraxFix = TriggerCreate("gt__3P_KaraxFix_Func");
    TriggerAddEventUnitDied(gt__3P_KaraxFix, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Heroes_Create
//--------------------------------------------------------------------------------------------------
bool gt__3P_Heroes_Create_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vSpacingY;
    int lv_vOffsetY;
    int lv_vOffsetY2;
    int lv_vOffseX;
    int lv_vOffseX2;
    int lv_j;
    int lv_k;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vSpacingY = 35;
    lv_vOffsetY = 80;
    lv_vOffsetY2 = (lv_vOffsetY - 10);
    lv_vOffseX = 90;
    lv_vOffseX2 = (lv_vOffseX + 120);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(351, 800, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv__3P_Heroes_Dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 350, 500, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_challenge_frame_innerborder.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    TextExpressionSetToken("Param/Expression/62665C22", "A", IntToText(gv__3P_Heroes_MaxActive));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTop, 0, 20, TextExpressionAssemble("Param/Expression/62665C22"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ABChoiceRewardsTitle", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, lv_vOffseX, (lv_vOffsetY + (lv_vSpacingY * lv_j)), StringExternal("Param/Value/9D86D927"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_j += 1;
    gv__3P_Heroes_Label[lv_j] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, lv_vOffseX, (lv_vOffsetY + (lv_vSpacingY * lv_j)), StringExternal("Param/Value/0C27AC18"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_j += 1;
    gv__3P_Heroes_Label[lv_j] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, lv_vOffseX, (lv_vOffsetY + (lv_vSpacingY * lv_j)), StringExternal("Param/Value/F7257BDB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_j += 1;
    gv__3P_Heroes_Label[lv_j] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, lv_vOffseX, (lv_vOffsetY + (lv_vSpacingY * lv_j)), StringExternal("Param/Value/9C63D17B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_j += 1;
    gv__3P_Heroes_Label[lv_j] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, lv_vOffseX, (lv_vOffsetY + (lv_vSpacingY * lv_j)), StringExternal("Param/Value/E5A1D339"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_j += 1;
    gv__3P_Heroes_Label[lv_j] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, lv_vOffseX, (lv_vOffsetY + (lv_vSpacingY * lv_j)), StringExternal("Param/Value/07E7718F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_j += 1;
    gv__3P_Heroes_Label[lv_j] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, lv_vOffseX, (lv_vOffsetY + (lv_vSpacingY * lv_j)), StringExternal("Param/Value/944E2163"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_j += 1;
    gv__3P_Heroes_Label[lv_j] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, lv_vOffseX, (lv_vOffsetY + (lv_vSpacingY * lv_j)), StringExternal("Param/Value/5A7D2CEE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_j += 1;
    gv__3P_Heroes_Label[lv_j] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, lv_vOffseX, (lv_vOffsetY + (lv_vSpacingY * lv_j)), StringExternal("Param/Value/199DF035"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_j += 1;
    gv__3P_Heroes_Label[lv_j] = DialogControlLastCreated();
    lv_j = 0;
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, lv_vOffseX2, (lv_vOffsetY2 + (lv_vSpacingY * lv_j)), StringToText(""), false);
    lv_j += 1;
    gv__3P_Heroes_CheckBox[lv_j] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, lv_vOffseX2, (lv_vOffsetY2 + (lv_vSpacingY * lv_j)), StringToText(""), false);
    lv_j += 1;
    gv__3P_Heroes_CheckBox[lv_j] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, lv_vOffseX2, (lv_vOffsetY2 + (lv_vSpacingY * lv_j)), StringToText(""), false);
    lv_j += 1;
    gv__3P_Heroes_CheckBox[lv_j] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, lv_vOffseX2, (lv_vOffsetY2 + (lv_vSpacingY * lv_j)), StringToText(""), false);
    lv_j += 1;
    gv__3P_Heroes_CheckBox[lv_j] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, lv_vOffseX2, (lv_vOffsetY2 + (lv_vSpacingY * lv_j)), StringToText(""), false);
    lv_j += 1;
    gv__3P_Heroes_CheckBox[lv_j] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, lv_vOffseX2, (lv_vOffsetY2 + (lv_vSpacingY * lv_j)), StringToText(""), false);
    lv_j += 1;
    gv__3P_Heroes_CheckBox[lv_j] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, lv_vOffseX2, (lv_vOffsetY2 + (lv_vSpacingY * lv_j)), StringToText(""), false);
    lv_j += 1;
    gv__3P_Heroes_CheckBox[lv_j] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, lv_vOffseX2, (lv_vOffsetY2 + (lv_vSpacingY * lv_j)), StringToText(""), false);
    lv_j += 1;
    gv__3P_Heroes_CheckBox[lv_j] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, lv_vOffseX2, (lv_vOffsetY2 + (lv_vSpacingY * lv_j)), StringToText(""), false);
    lv_j += 1;
    gv__3P_Heroes_CheckBox[lv_j] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 120, 50, c_anchorTop, 0, 420, StringToText(""), StringExternal("Param/Value/78A830FC"), "");
    gv__3P_Heroes_CheckBox[10] = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_Heroes_Create_Init () {
    gt__3P_Heroes_Create = TriggerCreate("gt__3P_Heroes_Create_Func");
    TriggerAddEventMapInit(gt__3P_Heroes_Create);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Heroes_Open
//--------------------------------------------------------------------------------------------------
bool gt__3P_Heroes_Open_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_k;

    // Automatic Variable Declarations
    const int auto2874B461_ae = 9;
    const int auto2874B461_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv__3P_Heroes_Dialog, gv__3P_AntagonistPG, true);
    lv_k = 1;
    for ( ; ( (auto2874B461_ai >= 0 && lv_k <= auto2874B461_ae) || (auto2874B461_ai < 0 && lv_k >= auto2874B461_ae) ) ; lv_k += auto2874B461_ai ) {
        if ((gv__3P_Heroes_Purchased[lv_k] == false)) {
            libNtve_gf_SetDialogItemColor(gv__3P_Heroes_Label[lv_k], Color(149*100/255,150*100/255,151*100/255), gv__3P_AntagonistPG);
            DialogControlSetVisible(gv__3P_Heroes_CheckBox[lv_k], gv__3P_AntagonistPG, false);
        }
        else {
            libNtve_gf_SetDialogItemColor(gv__3P_Heroes_Label[lv_k], Color(100,100,100), gv__3P_AntagonistPG);
            DialogControlSetVisible(gv__3P_Heroes_CheckBox[lv_k], gv__3P_AntagonistPG, true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_Heroes_Open_Init () {
    gt__3P_Heroes_Open = TriggerCreate("gt__3P_Heroes_Open_Func");
    TriggerAddEventChatMessage(gt__3P_Heroes_Open, c_playerAny, "-open", true);
    TriggerAddEventUnitAbility(gt__3P_Heroes_Open, UnitRefFromVariable("gv__3P_MainShard"), AbilityCommand("ChooseActiveHeroes", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Heroes_Update
//--------------------------------------------------------------------------------------------------
bool gt__3P_Heroes_Update_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int[10] lv_vUpgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv__3P_Heroes_Dialog))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), gv_pLAYER_11_ANTAGONIST) == true)) {
        gv__3P_Heroes_NumberOfCheckedItems += 1;
    }
    else {
        gv__3P_Heroes_NumberOfCheckedItems -= 1;
    }
    if ((gv__3P_Heroes_NumberOfCheckedItems > gv__3P_Heroes_MaxActive)) {
        libNtve_gf_SetDialogItemChecked(EventDialogControl(), false, gv__3P_AntagonistPG);
        TextExpressionSetToken("Param/Expression/4C6FFC24", "A", IntToText(gv__3P_Heroes_MaxActive));
        libNtve_gf_UIErrorMessage(gv__3P_AntagonistPG, TextExpressionAssemble("Param/Expression/4C6FFC24"), SoundLink("UI_GenericError", -1));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_Heroes_Update_Init () {
    gt__3P_Heroes_Update = TriggerCreate("gt__3P_Heroes_Update_Func");
    TriggerAddEventDialogControl(gt__3P_Heroes_Update, gv_pLAYER_11_ANTAGONIST, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Heroes_Close
//--------------------------------------------------------------------------------------------------
bool gt__3P_Heroes_Close_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_k;

    // Automatic Variable Declarations
    const int auto922FFE3F_ae = 9;
    const int auto922FFE3F_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv__3P_Heroes_CheckBox[10]))) {
            return false;
        }

        if (!((gv__3P_Heroes_NumberOfCheckedItems <= gv__3P_Heroes_MaxActive))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_k = 1;
    for ( ; ( (auto922FFE3F_ai >= 0 && lv_k <= auto922FFE3F_ae) || (auto922FFE3F_ai < 0 && lv_k >= auto922FFE3F_ae) ) ; lv_k += auto922FFE3F_ai ) {
        gv__3P_Heroes_Active[lv_k] = libNtve_gf_DialogItemIsChecked(gv__3P_Heroes_CheckBox[lv_k], gv_pLAYER_11_ANTAGONIST);
    }
    DialogSetVisible(gv__3P_Heroes_Dialog, gv__3P_AntagonistPG, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_Heroes_Close_Init () {
    gt__3P_Heroes_Close = TriggerCreate("gt__3P_Heroes_Close_Func");
    TriggerAddEventDialogControl(gt__3P_Heroes_Close, gv_pLAYER_11_ANTAGONIST, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Heroes_Update Choose Active Heroes Tooltip
//--------------------------------------------------------------------------------------------------
bool gt__3P_Heroes_UpdateChooseActiveHeroesTooltip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogButton, "ChooseActiveHeroes", "Tooltip", gv_pLAYER_11_ANTAGONIST, ("Choose active heroes. Only <c val = \"ffff8a\">" + (IntToString(gv__3P_Heroes_MaxActive) + " heroes</c> can spawn with each attack wave. </n> </n>Last purchased heroes will spawn if not chosen otherwise.")));
    CatalogFieldValueSet(c_gameCatalogButton, "PurchaseHeroesforattackwaves", "Tooltip", gv_pLAYER_11_ANTAGONIST, ("Summon Void Shades of enemy heroes that <c val = \"ffff8a\">will spawn with each attack wave</c>. </n></n>Only <c val = \"ffff8a\">" + (IntToString(gv__3P_Heroes_MaxActive) + " heroes</c> can spawn at once.")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_Heroes_UpdateChooseActiveHeroesTooltip_Init () {
    gt__3P_Heroes_UpdateChooseActiveHeroesTooltip = TriggerCreate("gt__3P_Heroes_UpdateChooseActiveHeroesTooltip_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Last Base Init
//--------------------------------------------------------------------------------------------------
bool gt__3P_LastBaseInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD287FCE6_g;
    int autoD287FCE6_u;
    unit autoD287FCE6_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(gv__3P_LastBaseUG, UnitGroup(null, gv_pLAYER_05_EnemyP01_TugOfWarPath, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    UnitGroupAddUnitGroup(gv__3P_LastBaseUG, UnitGroup(null, gv_pLAYER_06_EnemyP02_TugOfWarPath, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    autoD287FCE6_g = gv__3P_LastBaseUG;
    autoD287FCE6_u = UnitGroupCount(autoD287FCE6_g, c_unitCountAll);
    for (;; autoD287FCE6_u -= 1) {
        autoD287FCE6_var = UnitGroupUnitFromEnd(autoD287FCE6_g, autoD287FCE6_u);
        if (autoD287FCE6_var == null) { break; }
        gv__3P_LastBaseTotalHealth += UnitGetPropertyFixed(autoD287FCE6_var, c_unitPropVitality, c_unitPropCurrent);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_LastBaseInit_Init () {
    gt__3P_LastBaseInit = TriggerCreate("gt__3P_LastBaseInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Hybrid Pushers Early
//--------------------------------------------------------------------------------------------------
bool gt__3P_HybridPushersEarly_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vCurrentTotalHealth;

    // Automatic Variable Declarations
    unitgroup auto997960BE_g;
    int auto997960BE_u;
    unit auto997960BE_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv__3P_LastBaseUG, EventUnit()) == true))) {
            return false;
        }

        if (!(((libNtve_gf_KillingPlayer() == gv_pLAYER_01_USER) || (libNtve_gf_KillingPlayer() == gv_pLAYER_02_USER)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto997960BE_g = gv__3P_LastBaseUG;
    auto997960BE_u = UnitGroupCount(auto997960BE_g, c_unitCountAll);
    for (;; auto997960BE_u -= 1) {
        auto997960BE_var = UnitGroupUnitFromEnd(auto997960BE_g, auto997960BE_u);
        if (auto997960BE_var == null) { break; }
        lv_vCurrentTotalHealth += UnitGetPropertyFixed(auto997960BE_var, c_unitPropVitality, c_unitPropCurrent);
    }
    if (((((gv__3P_LastBaseTotalHealth * 0.75) >= lv_vCurrentTotalHealth) && (UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 20)) || (UnitGetPropertyFixed(gv__3P_MainShard, c_unitPropLifePercent, c_unitPropCurrent) <= 75.0))) {
        TriggerExecute(gt_HybridPushers03, true, false);
        if (((((gv__3P_LastBaseTotalHealth * 0.15) >= lv_vCurrentTotalHealth) && (UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 20)) || (UnitGetPropertyFixed(gv__3P_MainShard, c_unitPropLifePercent, c_unitPropCurrent) <= 60.0))) {
            TriggerExecute(gt_HybridPushers04, true, false);
            TriggerEnable(TriggerGetCurrent(), false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_HybridPushersEarly_Init () {
    gt__3P_HybridPushersEarly = TriggerCreate("gt__3P_HybridPushersEarly_Func");
    TriggerAddEventUnitDied(gt__3P_HybridPushersEarly, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Global Suicide
//--------------------------------------------------------------------------------------------------
bool gt__3P_GlobalSuicide_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoE752A6F0_ae = 6;
    int autoE752A6F0_var;

    // Conditions
    if (testConds) {
        if (!((gf__3P_HybridPlaying() == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 50.0))) {
            return false;
        }

        if (!(((EventUnitDamageSourcePlayer() == gv_pLAYER_01_USER) || (EventUnitDamageSourcePlayer() == gv_pLAYER_02_USER)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoE752A6F0_var = 3;
    for ( ; autoE752A6F0_var <= autoE752A6F0_ae; autoE752A6F0_var += 1 ) {
        AIGlobalSuicide(autoE752A6F0_var);
    }
    TransmissionSendForPlayerSelect(gv__3P_CommandersPG, TransmissionSourceFromUnitType("HybridBehemoth", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/CF277CB3"), StringExternal("Param/Value/D8D59C3E"), 5.0, c_transmissionDurationSet, false, c_maxPlayers, false);
    TransmissionSendForPlayerSelect(gv__3P_AntagonistPG, TransmissionSourceFromUnitType("HybridBehemoth", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/90857F5B"), StringExternal("Param/Value/B4520563"), 5.0, c_transmissionDurationSet, false, c_maxPlayers, false);
    SoundPlayForPlayer(SoundLink("MutatorAmonGiftSteal", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_GlobalSuicide_Init () {
    gt__3P_GlobalSuicide = TriggerCreate("gt__3P_GlobalSuicide_Func");
    TriggerAddEventUnitDamaged(gt__3P_GlobalSuicide, UnitRefFromVariable("gv__3P_MainShard"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Tutorial - Init
//--------------------------------------------------------------------------------------------------
bool gt__3P_TutorialInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_allExceptAmon;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_allExceptAmon = PlayerGroupAll();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/3PTutorial");
    gv__3P_TutorialAntagonist = DialogControlLastCreated();
    if ((gf__3P_HybridPlaying() == true)) {
        TriggerExecute(gt__3P_SetUpEcoUI, true, false);
        CameraPan(gv_pLAYER_11_ANTAGONIST, PointFromId(881), 0.0, -1, 10.0, false);
        Wait(0.2, c_timeReal);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
        libCOOC_gf_MuteUnmuteAllSoundChannelsExcept(true, c_soundCategoryVoice, gv__3P_AntagonistPG);
        UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
        DialogSetVisible(libCOUI_gv_cU_CommanderDialog, gv__3P_AntagonistPG, false);
        DialogSetVisible(libCOUI_gv_cU_MutatorDialog, gv__3P_AntagonistPG, false);
        DialogSetVisible(libCOUI_gv_cU_MasteryDialog, gv__3P_AntagonistPG, false);
        libNtve_gf_SetDialogItemRenderPriority(gv__3P_TutorialAntagonist, 511, gv__3P_AntagonistPG);
    }

    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    DialogControlSendAnimationEvent(gv__3P_TutorialAntagonist, gv__3P_CommandersPG, "FadeEvent");
    Wait(2.0, c_timeReal);
    DialogControlSetVisible(gv__3P_TutorialAntagonist, gv__3P_CommandersPG, false);
    gf_RunTriggeratMissionTime(180.0, gt__3P_TutorialHeroPresent);
    TriggerExecute(gt__3P_TutorialWelcome, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_TutorialInit_Init () {
    gt__3P_TutorialInit = TriggerCreate("gt__3P_TutorialInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Tutorial - Tutorial Commanders Create
//--------------------------------------------------------------------------------------------------
bool gt__3P_TutorialTutorialCommandersCreate_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_vDialog;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_vDialog[init_i] = c_invalidDialogControlId;
    }

    // Conditions
    if (testConds) {
        if (!((gf__3P_HybridPlaying() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(451, 300, c_anchorTopRight, 20, 20, true);
    gv__3P_TutorialCommanders = DialogLastCreated();
    DialogSetRenderPriority(DialogLastCreated(), 555);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), gv__3P_CommandersPG, true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 450, 240, c_anchorTopRight, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_challenge_frame_innerborder.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 200, c_anchorTopRight, 35, 15, StringToText(""), "3P_SmallShard.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 280, 800, c_anchorTopLeft, 25, 35, StringExternal("Param/Value/62661FFE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_TutorialTutorialCommandersCreate_Init () {
    gt__3P_TutorialTutorialCommandersCreate = TriggerCreate("gt__3P_TutorialTutorialCommandersCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Tutorial
//--------------------------------------------------------------------------------------------------
bool gt__3P_Tutorial_Func (bool testConds, bool runActions) {
    // Variable Declarations
    sound lv_vSound;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gf__3P_HybridPlaying() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv__3P_TutorialExperiencedPlayer == true)) {
        TextExpressionSetToken("Param/Expression/AAD23984", "A", IntToText(TechTreeUpgradeCount(1, "CommanderLevel", c_techCountQueuedOrBetter)));
        TextExpressionSetToken("Param/Expression/AAD23984", "B", IntToText(TechTreeUpgradeCount(2, "CommanderLevel", c_techCountQueuedOrBetter)));
        TextExpressionSetToken("Param/Expression/AAD23984", "C", IntToText(libCOOC_gv_cCX_PlayerMasteryLevel[1]));
        TextExpressionSetToken("Param/Expression/AAD23984", "D", IntToText(libCOOC_gv_cCX_PlayerMasteryLevel[2]));
        TransmissionSendForPlayerSelect(gv__3P_AntagonistPG, TransmissionSourceFromUnitType("HybridBehemoth", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/D295E743"), TextExpressionAssemble("Param/Expression/AAD23984"), 5.0, c_transmissionDurationSet, false, c_maxPlayers, false);
        SoundPlayForPlayer(SoundLink("Amon_Vox_LoopCustom", -1), c_maxPlayers, gv__3P_AntagonistPG, 150.0, 0.0);
        Wait(4.0, c_timeReal);
        SoundStop(SoundLastPlayed(), true);
    }
    else {
        UnitGroupSelect(UnitGroupSelected(gv_pLAYER_11_ANTAGONIST), gv_pLAYER_11_ANTAGONIST, false);
        UnitSelect(gv__3P_MainShard, gv_pLAYER_11_ANTAGONIST, true);
        TransmissionSendForPlayerSelect(gv__3P_AntagonistPG, TransmissionSourceFromUnitType("HybridBehemoth", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/073D8823"), StringExternal("Param/Value/26A42444"), 6.0, c_transmissionDurationSet, false, c_maxPlayers, false);
        SoundPlayForPlayer(SoundLink("Amon_Vox_LoopCustom", -1), c_maxPlayers, gv__3P_AntagonistPG, 150.0, 0.0);
        lv_vSound = SoundLastPlayed();
        Wait(3.0, c_timeReal);
        SoundPlayForPlayer(SoundLink("UI_TipButtonAppear", -1), c_maxPlayers, gv__3P_AntagonistPG, 100.0, 0.0);
        UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "CreateShard", true);
        Wait(4.0, c_timeReal);
        SoundStop(lv_vSound, true);
        if ((UnitGroupCount(gv__3P_ShardFragments, c_unitCountAlive) >= 1)) {
            UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "CreateShard", false);
        }

    }
    libCOMU_gf_CT_RegisterMutator("LongRange", gt__3P_InitializeLongRangeFix, libCOMU_gt_CT_ShutdownLongRange);
    libCOMU_gf_CT_RegisterMutator("BlackFog", gt__3P_InitializeBlackFogFix, libCOMU_gt_CT_ShutdownBlackFog);
    libCOMU_gf_CT_RegisterMutator("MissileBarrage", gt__3P_InitializeMissileBarrageFix, libCOMU_gt_CT_ShutdownMissileBarrage);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_Tutorial_Init () {
    gt__3P_Tutorial = TriggerCreate("gt__3P_Tutorial_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Tutorial - Creates a Shard
//--------------------------------------------------------------------------------------------------
bool gt__3P_TutorialCreatesaShard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    sound lv_vSound;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gf__3P_HybridPlaying() == true))) {
            return false;
        }

        if (!((gv__3P_TutorialExperiencedPlayer == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt__3P_TutorialKeepSelectingMainShard, false);
    TriggerQueueEnter();
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "CreateShard", false);
    Wait(3.0, c_timeReal);
    TransmissionSendForPlayerSelect(gv__3P_AntagonistPG, TransmissionSourceFromUnitType("HybridBehemoth", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/4286C1BC"), StringExternal("Param/Value/98FC9A39"), 8.0, c_transmissionDurationSet, false, c_maxPlayers, false);
    SoundPlayForPlayer(SoundLink("Amon_Vox_LoopCustom", -1), c_maxPlayers, gv__3P_AntagonistPG, 200.0, 0.0);
    lv_vSound = SoundLastPlayed();
    Wait(1.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("UI_TipButtonAppear", -1), c_maxPlayers, gv__3P_AntagonistPG, 150.0, 0.0);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "ExtractVoidEnergy", true);
    Wait(2.0, c_timeReal);
    SoundStop(lv_vSound, true);
    Wait(4.0, c_timeReal);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "ExtractVoidEnergy", false);
    Wait(1.0, c_timeReal);
    TransmissionSendForPlayerSelect(gv__3P_AntagonistPG, TransmissionSourceFromUnitType("HybridBehemoth", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/095D1673"), StringExternal("Param/Value/2ADDD437"), 8.0, c_transmissionDurationSet, false, c_maxPlayers, false);
    SoundPlayForPlayer(SoundLink("Amon_Vox_LoopCustom", -1), c_maxPlayers, gv__3P_AntagonistPG, 200.0, 0.0);
    lv_vSound = SoundLastPlayed();
    Wait(1.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("UI_TipButtonAppear", -1), c_maxPlayers, gv__3P_AntagonistPG, 150.0, 0.0);
    UnitGroupSelect(UnitGroupSelected(gv_pLAYER_11_ANTAGONIST), gv_pLAYER_11_ANTAGONIST, false);
    UnitSelect(gv__3P_MainShard, gv_pLAYER_11_ANTAGONIST, true);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "PurchaseMenu", true);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "PurchaseMutators", true);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "PurchaseCustomMutators", true);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "PurchaseMoreMutators", true);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "PurchaseHeroesforattackwaves", true);
    Wait(2.0, c_timeReal);
    SoundStop(lv_vSound, true);
    Wait(4.0, c_timeReal);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "PurchaseMenu", false);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "PurchaseMutators", false);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "PurchaseMoreMutators", false);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "PurchaseHeroesforattackwaves", false);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "PurchaseCustomMutators", false);
    Wait(6.0, c_timeReal);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "CreateShard", false);
    TransmissionSendForPlayerSelect(gv__3P_AntagonistPG, TransmissionSourceFromUnitType("HybridBehemoth", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/ED4656A8"), StringExternal("Param/Value/A391DC1B"), 6.0, c_transmissionDurationSet, false, c_maxPlayers, false);
    SoundPlayForPlayer(SoundLink("Amon_Vox_LoopCustom", -1), c_maxPlayers, gv__3P_AntagonistPG, 200.0, 0.0);
    lv_vSound = SoundLastPlayed();
    Wait(2.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("UI_TipButtonAppear", -1), c_maxPlayers, gv__3P_AntagonistPG, 150.0, 0.0);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "Barrier2", true);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "Empower", true);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "Duplicate", true);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "GehennaBattlecruiser", true);
    Wait(4.0, c_timeReal);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "Barrier2", false);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "Empower", false);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "Duplicate", false);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "GehennaBattlecruiser", false);
    Wait(2.0, c_timeReal);
    SoundStop(lv_vSound, true);
    Wait(8.0, c_timeReal);
    TransmissionSendForPlayerSelect(gv__3P_AntagonistPG, TransmissionSourceFromUnitType("HybridBehemoth", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/0773450A"), StringExternal("Param/Value/F49B51E8"), 10.0, c_transmissionDurationSet, false, c_maxPlayers, false);
    SoundPlayForPlayer(SoundLink("Amon_Vox_LoopCustom", -1), c_maxPlayers, gv__3P_AntagonistPG, 200.0, 0.0);
    lv_vSound = SoundLastPlayed();
    Wait(8.0, c_timeReal);
    SoundStop(lv_vSound, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_TutorialCreatesaShard_Init () {
    gt__3P_TutorialCreatesaShard = TriggerCreate("gt__3P_TutorialCreatesaShard_Func");
    TriggerAddEventUnitAbility(gt__3P_TutorialCreatesaShard, UnitRefFromVariable("gv__3P_MainShard"), AbilityCommand("SummonVoidShardFragment", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Tutorial - Keep Selecting Main Shard
//--------------------------------------------------------------------------------------------------
bool gt__3P_TutorialKeepSelectingMainShard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    sound lv_vSound;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gf__3P_HybridPlaying() == true))) {
            return false;
        }

        if (!((gv__3P_TutorialExperiencedPlayer == false))) {
            return false;
        }

        if (!((EventUnit() != gv__3P_MainShard))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupSelect(UnitGroupSelected(gv_pLAYER_11_ANTAGONIST), gv_pLAYER_11_ANTAGONIST, false);
    UnitSelect(gv__3P_MainShard, gv_pLAYER_11_ANTAGONIST, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_TutorialKeepSelectingMainShard_Init () {
    gt__3P_TutorialKeepSelectingMainShard = TriggerCreate("gt__3P_TutorialKeepSelectingMainShard_Func");
    TriggerAddEventUnitSelected(gt__3P_TutorialKeepSelectingMainShard, null, gv_pLAYER_11_ANTAGONIST, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Tutorial - Attack Wave Spawned
//--------------------------------------------------------------------------------------------------
bool gt__3P_TutorialAttackWaveSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    sound lv_vSound;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gf__3P_HybridPlaying() == true))) {
            return false;
        }

        if (!((gv__3P_TutorialExperiencedPlayer == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TransmissionWait(TransmissionLastSent(), 1.0);
    TransmissionSendForPlayerSelect(gv__3P_AntagonistPG, TransmissionSourceFromUnitType("HybridBehemoth", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/CB406AEB"), StringExternal("Param/Value/47C1513D"), 6.0, c_transmissionDurationSet, false, c_maxPlayers, false);
    SoundPlayForPlayer(SoundLink("Amon_Vox_LoopCustom", -1), c_maxPlayers, gv__3P_AntagonistPG, 100.0, 0.0);
    lv_vSound = SoundLastPlayed();
    Wait(6.0, c_timeReal);
    SoundStop(lv_vSound, true);
    Wait(2.0, c_timeReal);
    SoundStop(lv_vSound, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_TutorialAttackWaveSpawned_Init () {
    gt__3P_TutorialAttackWaveSpawned = TriggerCreate("gt__3P_TutorialAttackWaveSpawned_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Tutorial - AI Choice
//--------------------------------------------------------------------------------------------------
bool gt__3P_TutorialAIChoice_Func (bool testConds, bool runActions) {
    // Variable Declarations
    sound lv_vSound;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gf__3P_HybridPlaying() == true))) {
            return false;
        }

        if (!((gv__3P_TutorialExperiencedPlayer == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TransmissionWait(TransmissionLastSent(), 1.0);
    TransmissionSendForPlayerSelect(gv__3P_AntagonistPG, TransmissionSourceFromUnitType("HybridBehemoth", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/5D23B4D7"), StringExternal("Param/Value/B9FB6B52"), 5.0, c_transmissionDurationSet, false, c_maxPlayers, false);
    SoundPlayForPlayer(SoundLink("Amon_Vox_LoopCustom", -1), c_maxPlayers, gv__3P_AntagonistPG, 100.0, 0.0);
    lv_vSound = SoundLastPlayed();
    Wait(1.0, c_timeReal);
    UnitGroupSelect(UnitGroupSelected(gv_pLAYER_11_ANTAGONIST), gv_pLAYER_11_ANTAGONIST, false);
    UnitSelect(gv__3P_MainShard, gv_pLAYER_11_ANTAGONIST, true);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "AIChoice", true);
    SoundPlayForPlayer(SoundLink("UI_TipButtonAppear", -1), c_maxPlayers, gv__3P_AntagonistPG, 100.0, 0.0);
    Wait(4.0, c_timeReal);
    SoundStop(lv_vSound, true);
    Wait(2.0, c_timeReal);
    UISetButtonFaceHighlighted(gv__3P_AntagonistPG, "AIChoice", false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_TutorialAIChoice_Init () {
    gt__3P_TutorialAIChoice = TriggerCreate("gt__3P_TutorialAIChoice_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Tutorial - Tutorial Close
//--------------------------------------------------------------------------------------------------
bool gt__3P_TutorialTutorialClose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gf__3P_HybridPlaying() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv__3P_TutorialCommanders, gv__3P_CommandersPG, false);
    DialogControlSendAnimationEvent(gv__3P_TutorialAntagonist, gv__3P_AntagonistPG, "FadeEvent");
    Wait(0.6, c_timeGame);
    libCOOC_gf_MuteUnmuteAllSoundChannelsExcept(false, c_soundCategoryVoice, gv__3P_AntagonistPG);
    Wait(2.0, c_timeGame);
    UISetFrameVisible(gv__3P_AntagonistPG, c_syncFrameTypeMenuBar, true);
    DialogControlSetVisible(gv__3P_TutorialAntagonist, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_TutorialTutorialClose_Init () {
    gt__3P_TutorialTutorialClose = TriggerCreate("gt__3P_TutorialTutorialClose_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Tutorial - Hero Present
//--------------------------------------------------------------------------------------------------
bool gt__3P_TutorialHeroPresent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gf__3P_HybridPlaying() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((GameAttributeGameValue("[bnet:local/0.0/274050]1") == "0002")) {
        TransmissionSendForPlayerSelect(gv__3P_AntagonistPG, TransmissionSourceFromUnitType("HybridBehemoth", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/4539FC06"), StringExternal("Param/Value/B6B92997"), 8.0, c_transmissionDurationSet, false, c_maxPlayers, false);
    }
    else {
        TransmissionSendForPlayerSelect(gv__3P_AntagonistPG, TransmissionSourceFromUnitType("HybridBehemoth", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/904F0FF0"), StringExternal("Param/Value/A0B20CD1"), 8.0, c_transmissionDurationSet, false, c_maxPlayers, false);
    }
    Wait(2.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("Amon_Vox_LoopCustom", -1), c_maxPlayers, gv__3P_AntagonistPG, 200.0, 0.0);
    Wait(2.0, c_timeReal);
    SoundStop(SoundLastPlayed(), true);
    if ((GameAttributeGameValue("[bnet:local/0.0/274050]1") == "0002")) {
        SoundPlayForPlayer(SoundLink("PEpilogue03_LightningSound", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(5.0, c_timeReal);
        PlayerModifyPropertyFixed(1, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 100.0);
        PlayerModifyPropertyFixed(2, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 100.0);
        UIDisplayMessage(gv__3P_AntagonistPG, c_messageAreaSubtitle, StringExternal("Param/Value/6810CE0C"));
        UIDisplayMessage(gv__3P_CommandersPG, c_messageAreaSubtitle, StringExternal("Param/Value/36310B72"));
    }
    else {
        UIDisplayMessage(gv__3P_AntagonistPG, c_messageAreaSubtitle, StringExternal("Param/Value/48938E09"));
        if ((TechTreeUpgradeCount(gv_pLAYER_11_ANTAGONIST, "Tychus", c_techCountQueuedOrBetter) == 0)) {
            TechTreeUpgradeAddLevel(gv_pLAYER_11_ANTAGONIST, "Tychus", 1);
            SoundPlayForPlayer(SoundLink("MutatorAmonTychus_BirthDialog", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            gf__3P_HeroActivate(2);
        }
        else {
            if ((TechTreeUpgradeCount(gv_pLAYER_11_ANTAGONIST, "Raynor", c_techCountQueuedOrBetter) == 0)) {
                TechTreeUpgradeAddLevel(gv_pLAYER_11_ANTAGONIST, "Raynor", 1);
                SoundPlayForPlayer(SoundLink("MutatorAmonRaynor_BirthDialog", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                gf__3P_HeroActivate(1);
            }
            else {
                if ((TechTreeUpgradeCount(gv_pLAYER_11_ANTAGONIST, "Dehaka", c_techCountQueuedOrBetter) == 0)) {
                    TechTreeUpgradeAddLevel(gv_pLAYER_11_ANTAGONIST, "Dehaka", 1);
                    SoundPlayForPlayer(SoundLink("MutatorAmonDehaka_BirthDialog", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                    gf__3P_HeroActivate(4);
                }
                else {
                    PlayerModifyPropertyInt(gv_pLAYER_11_ANTAGONIST, c_playerPropCustom, c_playerPropOperAdd, 500);
                    UIDisplayMessage(gv__3P_AntagonistPG, c_messageAreaSubtitle, StringExternal("Param/Value/EC8FBCF6"));
                    gv__3P_TotalAddedFrom += 500;
                }
            }
        }
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_TutorialHeroPresent_Init () {
    gt__3P_TutorialHeroPresent = TriggerCreate("gt__3P_TutorialHeroPresent_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Tutorial - Welcome
//--------------------------------------------------------------------------------------------------
bool gt__3P_TutorialWelcome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_vText;
    text lv_vDifficulty;

    // Automatic Variable Declarations
    string auto3E515109_val;

    // Variable Initialization
    lv_vText = StringExternal("Param/Value/DE5B9FD8");

    // Actions
    if (!runActions) {
        return true;
    }

    auto3E515109_val = GameAttributeGameValue("[bnet:local/0.0/274050]1");
    if (auto3E515109_val == "0002") {
        lv_vDifficulty = StringExternal("Param/Value/3A9EE0C5");
    }
    else if (auto3E515109_val == "0001") {
        lv_vDifficulty = StringExternal("Param/Value/4BE2596F");
    }
    else if (auto3E515109_val == "0003") {
        lv_vDifficulty = StringExternal("Param/Value/3C5E0168");
    }
    else if (auto3E515109_val == "0004") {
        lv_vDifficulty = StringExternal("Param/Value/91A1370C");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/FB7218A5", "A", lv_vDifficulty);
    UIDisplayMessage(gv__3P_CommandersPG, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/FB7218A5"));
    Wait(3.0, c_timeGame);
    BankLoad("MGRCoA3P", 1);
    if ((BankValueGetAsFlag(BankLastCreated(), "A", "Welcomed") == false)) {
        UIDisplayMessage(PlayerGroupSingle(1), c_messageAreaSubtitle, lv_vText);
        BankValueSetFromFlag(BankLastCreated(), "A", "Welcomed", true);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
    }

    BankLoad("MGRCoA3P", 2);
    if ((BankValueGetAsFlag(BankLastCreated(), "A", "Welcomed") == false)) {
        UIDisplayMessage(PlayerGroupSingle(2), c_messageAreaSubtitle, lv_vText);
        BankValueSetFromFlag(BankLastCreated(), "A", "Welcomed", true);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
    }

    BankLoad("MGRCoA3P", 11);
    if ((BankValueGetAsFlag(BankLastCreated(), "A", "Welcomed") == false)) {
        UIDisplayMessage(PlayerGroupSingle(11), c_messageAreaSubtitle, lv_vText);
        BankValueSetFromFlag(BankLastCreated(), "A", "Welcomed", true);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        BankSave(BankLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_TutorialWelcome_Init () {
    gt__3P_TutorialWelcome = TriggerCreate("gt__3P_TutorialWelcome_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Difficulty Set Up
//--------------------------------------------------------------------------------------------------
bool gt__3P_DifficultySetUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vMaxplayers;
    int lv_vPlayer;
    playergroup lv_vPlayerGroup;
    fixed lv_vRaynorLife;
    fixed lv_vTychusLife;
    fixed lv_vNovaLife;
    fixed lv_vDehakaLife;
    fixed lv_vDehakaSpawnLife;
    fixed lv_vZagaraLife;
    fixed lv_vKerriganLife;
    fixed lv_vKaraxLife;
    fixed lv_vKaraxShields;
    fixed lv_vArtanisLife;
    fixed lv_vArtanisShields;
    fixed lv_vZeratulLife;
    fixed lv_vZeratulShields;
    fixed lv_vCoef;

    // Automatic Variable Declarations
    string autoA5515CF4_val;
    int autoBA7C86BC_ae;
    int autoBA7C86BC_var;
    int auto48B7D7B6_ae;
    int auto48B7D7B6_var;
    int autoC6CEA5F3_ae;
    int autoC6CEA5F3_var;
    int auto375C7BC9_ae;
    int auto375C7BC9_var;
    playergroup auto120C32FB_g;
    int auto120C32FB_var;

    // Variable Initialization
    lv_vMaxplayers = 12;
    lv_vPlayer = 1;
    lv_vPlayerGroup = PlayerGroupEmpty();
    lv_vRaynorLife = 800.0;
    lv_vTychusLife = 800.0;
    lv_vNovaLife = 1000.0;
    lv_vDehakaLife = 800.0;
    lv_vDehakaSpawnLife = 300.0;
    lv_vZagaraLife = 1000.0;
    lv_vKerriganLife = 2000.0;
    lv_vKaraxLife = 600.0;
    lv_vKaraxShields = 600.0;
    lv_vArtanisLife = 1000.0;
    lv_vArtanisShields = 1000.0;
    lv_vZeratulLife = 600.0;
    lv_vZeratulShields = 600.0;
    lv_vCoef = 1.0;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA5515CF4_val = GameAttributeGameValue("[bnet:local/0.0/274050]1");
    if (autoA5515CF4_val == "0002") {
        autoBA7C86BC_ae = lv_vMaxplayers;
        autoBA7C86BC_var = 1;
        for ( ; autoBA7C86BC_var <= autoBA7C86BC_ae; autoBA7C86BC_var += 1 ) {
            PlayerSetDifficulty(autoBA7C86BC_var, 1);
            lv_vCoef = 0.3;
        }
    }
    else if (autoA5515CF4_val == "0001") {
        auto48B7D7B6_ae = lv_vMaxplayers;
        auto48B7D7B6_var = 1;
        for ( ; auto48B7D7B6_var <= auto48B7D7B6_ae; auto48B7D7B6_var += 1 ) {
            PlayerSetDifficulty(auto48B7D7B6_var, 2);
            lv_vCoef = 0.5;
        }
    }
    else if (autoA5515CF4_val == "0003") {
        autoC6CEA5F3_ae = lv_vMaxplayers;
        autoC6CEA5F3_var = 1;
        for ( ; autoC6CEA5F3_var <= autoC6CEA5F3_ae; autoC6CEA5F3_var += 1 ) {
            PlayerSetDifficulty(autoC6CEA5F3_var, 3);
            lv_vCoef = 0.7;
        }
    }
    else if (autoA5515CF4_val == "0004") {
        auto375C7BC9_ae = lv_vMaxplayers;
        auto375C7BC9_var = 1;
        for ( ; auto375C7BC9_var <= auto375C7BC9_ae; auto375C7BC9_var += 1 ) {
            PlayerSetDifficulty(auto375C7BC9_var, 4);
            lv_vCoef = 1.0;
        }
    }
    else {
    }
    lv_vRaynorLife *= lv_vCoef;
    lv_vTychusLife *= lv_vCoef;
    lv_vNovaLife *= lv_vCoef;
    lv_vDehakaLife *= lv_vCoef;
    lv_vDehakaSpawnLife *= lv_vCoef;
    lv_vZagaraLife *= lv_vCoef;
    lv_vKerriganLife *= lv_vCoef;
    lv_vZeratulLife *= lv_vCoef;
    lv_vZeratulShields *= lv_vCoef;
    lv_vKaraxLife *= lv_vCoef;
    lv_vKaraxShields *= lv_vCoef;
    lv_vArtanisLife *= lv_vCoef;
    lv_vArtanisShields *= lv_vCoef;
    PlayerGroupAdd(lv_vPlayerGroup, gv_pLAYER_03_EnemyP01);
    PlayerGroupAdd(lv_vPlayerGroup, gv_pLAYER_04_EnemyP02);
    PlayerGroupAdd(lv_vPlayerGroup, gv_pLAYER_05_EnemyP01_TugOfWarPath);
    PlayerGroupAdd(lv_vPlayerGroup, gv_pLAYER_06_EnemyP02_TugOfWarPath);
    PlayerGroupAdd(lv_vPlayerGroup, gv_pLAYER_14_DARKMIRROR);
    PlayerGroupAdd(lv_vPlayerGroup, gv_pLAYER_11_ANTAGONIST);
    auto120C32FB_g = lv_vPlayerGroup;
    auto120C32FB_var = -1;
    while (true) {
        auto120C32FB_var = PlayerGroupNextPlayer(auto120C32FB_g, auto120C32FB_var);
        if (auto120C32FB_var < 0) { break; }
        lv_vPlayer = auto120C32FB_var;
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonRaynor", "LifeMax", lv_vPlayer, FixedToString(lv_vRaynorLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonRaynor", "LifeStart", lv_vPlayer, FixedToString(lv_vRaynorLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonTychus", "LifeMax", lv_vPlayer, FixedToString(lv_vTychusLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonTychus", "LifeStart", lv_vPlayer, FixedToString(lv_vTychusLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonDehaka", "LifeMax", lv_vPlayer, FixedToString(lv_vDehakaLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonDehaka", "LifeStart", lv_vPlayer, FixedToString(lv_vDehakaLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonDehakaBurrowed", "LifeMax", lv_vPlayer, FixedToString(lv_vDehakaLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonDehakaBurrowed", "LifeStart", lv_vPlayer, FixedToString(lv_vDehakaLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonDehakaMirrorImage", "LifeMax", lv_vPlayer, FixedToString(lv_vDehakaSpawnLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonDehakaMirrorImage", "LifeStart", lv_vPlayer, FixedToString(lv_vDehakaSpawnLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonDehakaMirrorImageBurrowed", "LifeMax", lv_vPlayer, FixedToString(lv_vDehakaSpawnLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonDehakaMirrorImageBurrowed", "LifeStart", lv_vPlayer, FixedToString(lv_vDehakaSpawnLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "LifeMax", lv_vPlayer, FixedToString(lv_vKaraxLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "LifeStart", lv_vPlayer, FixedToString(lv_vKaraxLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "ShieldsMax", lv_vPlayer, FixedToString(lv_vKaraxShields, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "ShieldsStart", lv_vPlayer, FixedToString(lv_vKaraxShields, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonNova", "LifeMax", lv_vPlayer, FixedToString(lv_vNovaLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonNova", "LifeStart", lv_vPlayer, FixedToString(lv_vNovaLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZagara", "LifeMax", lv_vPlayer, FixedToString(lv_vZagaraLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZagara", "LifeStart", lv_vPlayer, FixedToString(lv_vZagaraLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZagaraBurrowed", "LifeMax", lv_vPlayer, FixedToString(lv_vZagaraLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZagaraBurrowed", "LifeStart", lv_vPlayer, FixedToString(lv_vZagaraLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "LifeMax", lv_vPlayer, FixedToString(lv_vArtanisLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "LifeStart", lv_vPlayer, FixedToString(lv_vArtanisLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "ShieldsMax", lv_vPlayer, FixedToString(lv_vArtanisShields, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "ShieldsStart", lv_vPlayer, FixedToString(lv_vArtanisShields, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "LifeMax", lv_vPlayer, FixedToString(lv_vZeratulLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "LifeStart", lv_vPlayer, FixedToString(lv_vZeratulLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "ShieldsMax", lv_vPlayer, FixedToString(lv_vZeratulShields, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "ShieldsStart", lv_vPlayer, FixedToString(lv_vZeratulShields, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKerrigan", "LifeMax", lv_vPlayer, FixedToString(lv_vKerriganLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKerrigan", "LifeStart", lv_vPlayer, FixedToString(lv_vKerriganLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKerriganBurrowed", "LifeMax", lv_vPlayer, FixedToString(lv_vKerriganLife, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKerriganBurrowed", "LifeStart", lv_vPlayer, FixedToString(lv_vKerriganLife, c_fixedPrecisionAny));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_DifficultySetUp_Init () {
    gt__3P_DifficultySetUp = TriggerCreate("gt__3P_DifficultySetUp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Prune for difficulties
//--------------------------------------------------------------------------------------------------
bool gt__3P_Prunefordifficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vValue;
    unit lv_vUnit;
    unitgroup lv_vGroup;
    fixed lv_vCost;
    fixed lv_vPercent;

    // Automatic Variable Declarations
    string auto0E2FC5FD_val;
    const int auto7C05BA3E_ae = 6;
    int auto7C05BA3E_var;
    unitgroup autoDEEB03E9_g;
    int autoDEEB03E9_u;
    unit autoDEEB03E9_var;

    // Variable Initialization
    lv_vValue = 5000.0;
    lv_vGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto0E2FC5FD_val = GameAttributeGameValue("[bnet:local/0.0/274050]1");
    if (auto0E2FC5FD_val == "0002") {
        lv_vPercent = 0.5;
    }
    else if (auto0E2FC5FD_val == "0001") {
        lv_vPercent = 0.33;
    }
    else if (auto0E2FC5FD_val == "0003") {
        lv_vPercent = 0.25;
    }
    else if (auto0E2FC5FD_val == "0004") {
        return true;
    }
    else {
        return true;
    }
    auto7C05BA3E_var = 3;
    for ( ; auto7C05BA3E_var <= auto7C05BA3E_ae; auto7C05BA3E_var += 1 ) {
        UnitGroupAddUnitGroup(lv_vGroup, UnitGroup(null, auto7C05BA3E_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_vGroup, UnitGroup("Bunker", auto7C05BA3E_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_vGroup, UnitGroup("MissileTurret", auto7C05BA3E_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_vGroup, UnitGroup("SpineCrawler", auto7C05BA3E_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_vGroup, UnitGroup("SporeCrawler", auto7C05BA3E_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_vGroup, UnitGroup("PhotonCannon", auto7C05BA3E_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_vGroup, UnitGroup("ShieldBattery", auto7C05BA3E_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    autoDEEB03E9_g = lv_vGroup;
    autoDEEB03E9_u = UnitGroupCount(autoDEEB03E9_g, c_unitCountAll);
    for (;; autoDEEB03E9_u -= 1) {
        autoDEEB03E9_var = UnitGroupUnitFromEnd(autoDEEB03E9_g, autoDEEB03E9_u);
        if (autoDEEB03E9_var == null) { break; }
        lv_vCost += UnitTypeGetCost(UnitGetType(autoDEEB03E9_var), c_unitCostSumMineralsVespene);
    }
    lv_vValue = (lv_vCost * lv_vPercent);
    while (true) {
        lv_vUnit = UnitGroupRandomUnit(lv_vGroup, c_unitCountAlive);
        if (((lv_vUnit == null) || (lv_vValue <= 0.0))) {
            break;
        }

        lv_vValue -= UnitTypeGetCost(UnitGetType(lv_vUnit), c_unitCostSumMineralsVespene);
        UnitRemove(lv_vUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_Prunefordifficulties_Init () {
    gt__3P_Prunefordifficulties = TriggerCreate("gt__3P_Prunefordifficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Speed Set Up
//--------------------------------------------------------------------------------------------------
bool gt__3P_SpeedSetUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoB9869329_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB9869329_val = GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]3000");
    if (autoB9869329_val == "Slor") {
        GameSetSpeedValue(c_gameSpeedSlower);
    }
    else if (autoB9869329_val == "Slow") {
        GameSetSpeedValue(c_gameSpeedSlow);
    }
    else if (autoB9869329_val == "Norm") {
        GameSetSpeedValue(c_gameSpeedNormal);
    }
    else if (autoB9869329_val == "Fast") {
        GameSetSpeedValue(c_gameSpeedFast);
    }
    else if (autoB9869329_val == "Fasr") {
        GameSetSpeedValue(c_gameSpeedFaster);
    }
    else {
    }
    GameSetSpeedLocked(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_SpeedSetUp_Init () {
    gt__3P_SpeedSetUp = TriggerCreate("gt__3P_SpeedSetUp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Bank Initialize
//--------------------------------------------------------------------------------------------------
bool gt__3P_BankInitialize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BankLoad("MGRCoA3P", 11);
    if ((BankVerify(BankLastCreated()) == true)) {
        gv__3P_BankSupplyKilledInitialValue = BankValueGetAsFixed(BankLastCreated(), "A", "Kills");
    }
    else {
        gv__3P_BankSupplyKilledInitialValue = 0.0;
    }
    if ((gv__3P_BankSupplyKilledInitialValue >= 1000.0)) {
        gv__3P_TutorialExperiencedPlayer = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_BankInitialize_Init () {
    gt__3P_BankInitialize = TriggerCreate("gt__3P_BankInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Synchronize Bank
//--------------------------------------------------------------------------------------------------
bool gt__3P_SynchronizeBank_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vKills;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vKills = (gv__3P_BankSupplyKilledInitialValue + gv__3P_SuppliesKilled);
    if ((ObjectiveGetState(gv__3P_ObjectiveKillJinara) == c_objectiveStateCompleted)) {
        lv_vKills += IntToFixed(gv__3P_JinaraKillBonusAmount);
    }

    if ((ObjectiveGetState(gv_objectiveDefendSlaynElemental) == c_objectiveStateCompleted)) {
        lv_vKills += IntToFixed(gv__3P_SlaynKillBonusAmount);
    }

    if ((ObjectiveGetState(gv_objectiveDefendSlaynElemental02) == c_objectiveStateCompleted)) {
        lv_vKills += IntToFixed(gv__3P_SlaynKillBonusAmount);
    }

    BankLoad("MGRCoA3P", 11);
    BankValueSetFromFixed(BankLastCreated(), "A", "Kills", lv_vKills);
    BankValueSetFromInt(BankLastCreated(), "A", "MinedVoidEnergy", gv__3P_TotalMined);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    BankSave(BankLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_SynchronizeBank_Init () {
    gt__3P_SynchronizeBank = TriggerCreate("gt__3P_SynchronizeBank_Func");
    TriggerAddEventTimePeriodic(gt__3P_SynchronizeBank, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Ji'nara defeated sync
//--------------------------------------------------------------------------------------------------
bool gt__3P_Jinaradefeatedsync_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vDefeatedInitial;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    BankLoad("MGRCoA3P", 11);
    lv_vDefeatedInitial = BankValueGetAsInt(BankLastCreated(), "A", "JinaraDefeated");
    BankValueSetFromInt(BankLastCreated(), "A", "JinaraDefeated", (lv_vDefeatedInitial + 1));
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    BankSave(BankLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_Jinaradefeatedsync_Init () {
    gt__3P_Jinaradefeatedsync = TriggerCreate("gt__3P_Jinaradefeatedsync_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Show off
//--------------------------------------------------------------------------------------------------
bool gt__3P_Showoff_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[11] lv_vDialogItem;
    int lv_vLength;
    int lv_vCoef;
    int lv_vMaxItems;

    // Automatic Variable Declarations
    int auto5D47002A_ae;
    int auto5D47002A_var;
    int autoF6937688_ae;
    int autoF6937688_var;
    int auto75B2F53D_ae;
    int auto75B2F53D_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_vDialogItem[init_i] = c_invalidDialogControlId;
    }
    lv_vCoef = 6;
    lv_vMaxItems = 7;

    // Conditions
    if (testConds) {
        if (!((gf__3P_HybridPlaying() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    BankLoad("MGRCoA3P", 11);
    BankValueSetFromText(BankLastCreated(), "A", "Name", PlayerName(gv_pLAYER_11_ANTAGONIST));
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    BankSave(BankLastCreated());
    lv_vLength = StringLength(BankValueGetAsString(BankLastCreated(), "A", "Name"));
    DialogCreate((310 + (lv_vLength * lv_vCoef)), 200, c_anchorTopRight, 20, 200, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (290 + (lv_vLength * lv_vCoef)), 105, c_anchorTopLeft, 20, 10, StringToText(""), "Assets\\Textures\\ui_battlenet_challenge_frame_innerborder.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    lv_vDialogItem[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, 25, 20, StringToText(""), "Assets\\Textures\\tip_hybridbehemoth.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    lv_vDialogItem[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 50, c_anchorTopLeft, 105, 25, PlayerName(gv_pLAYER_11_ANTAGONIST), Color(100.00, 0.00, 0.00), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_ShowOffName", PlayerGroupAll());
    lv_vDialogItem[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorTopLeft, 105, 55, StringExternal("Param/Value/D762E410"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_vDialogItem[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 105, 80, StringExternal("Param/Value/68DC6781"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_vDialogItem[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopRight, 10, 39, FixedToText(BankValueGetAsFixed(BankLastCreated(), "A", "Kills"), c_fixedPrecisionAny), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_ShowOff", PlayerGroupAll());
    lv_vDialogItem[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 50, c_anchorTopRight, 10, 64, IntToText(BankValueGetAsInt(BankLastCreated(), "A", "JinaraDefeated")), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_ShowOff", PlayerGroupAll());
    lv_vDialogItem[7] = DialogControlLastCreated();
    auto5D47002A_ae = lv_vMaxItems;
    auto5D47002A_var = 1;
    for ( ; auto5D47002A_var <= auto5D47002A_ae; auto5D47002A_var += 1 ) {
        DialogControlFadeTransparency(lv_vDialogItem[auto5D47002A_var], PlayerGroupAll(), 0.0, 100.0);
    }
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    autoF6937688_ae = lv_vMaxItems;
    autoF6937688_var = 1;
    for ( ; autoF6937688_var <= autoF6937688_ae; autoF6937688_var += 1 ) {
        DialogControlFadeTransparency(lv_vDialogItem[autoF6937688_var], PlayerGroupAll(), 2.0, 0.0);
    }
    Wait(15.0, c_timeGame);
    auto75B2F53D_ae = lv_vMaxItems;
    auto75B2F53D_var = 1;
    for ( ; auto75B2F53D_var <= auto75B2F53D_ae; auto75B2F53D_var += 1 ) {
        DialogControlFadeTransparency(lv_vDialogItem[auto75B2F53D_var], PlayerGroupAll(), 2.0, 100.0);
    }
    Wait(5.0, c_timeGame);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_Showoff_Init () {
    gt__3P_Showoff = TriggerCreate("gt__3P_Showoff_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Kill Notifications Create
//--------------------------------------------------------------------------------------------------
bool gt__3P_KillNotificationsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(600, 600, c_anchorTop, 0, 30, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv__3P_KillDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 250, c_anchorTop, 0, 10, StringExternal("Param/Value/9DFC19E4"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_KillStreak M1", PlayerGroupAll());
    gv__3P_KillDialogItem[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 250, c_anchorTop, 0, 10, StringExternal("Param/Value/19C5553E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_KillStreak M1", PlayerGroupAll());
    gv__3P_KillDialogItem[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 100, c_anchorTop, -120, 130, StringExternal("Param/Value/66B1C80D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_KillStreak RightAlign", PlayerGroupAll());
    gv__3P_KillDialogItem[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 100, c_anchorTop, 80, 130, StringExternal("Param/Value/6454DCAC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_KillStreak LeftAlign", PlayerGroupAll());
    gv__3P_KillDialogItem[3] = DialogControlLastCreated();
    DialogControlSetVisible(gv__3P_KillDialogItem[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv__3P_KillDialogItem[4], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_KillNotificationsCreate_Init () {
    gt__3P_KillNotificationsCreate = TriggerCreate("gt__3P_KillNotificationsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Kill Notifications Update
//--------------------------------------------------------------------------------------------------
bool gt__3P_KillNotificationsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto002A2132_ae = gv__3P_KillDialogMaxItems;
    int auto002A2132_var;
    const int autoB35F5605_ae = gv__3P_KillDialogMaxItems;
    int autoB35F5605_var;

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("UI_MissionLaunchMenu_Select", -1), c_maxPlayers, gv__3P_AntagonistPG, 100.0, 0.0);
    if ((TriggerActiveCount(gt__3P_KillNotificationsFade) >= 1)) {
        TriggerStop(gt__3P_KillNotificationsFade);
        auto002A2132_var = 1;
        for ( ; auto002A2132_var <= auto002A2132_ae; auto002A2132_var += 1 ) {
            DialogControlFadeTransparency(gv__3P_KillDialogItem[auto002A2132_var], PlayerGroupAll(), 0.5, 100.0);
        }
        Wait(0.5, c_timeGame);
        DialogControlSetVisible(gv__3P_KillDialogItem[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv__3P_KillDialogItem[4], PlayerGroupAll(), false);
    }

    autoB35F5605_var = 1;
    for ( ; autoB35F5605_var <= autoB35F5605_ae; autoB35F5605_var += 1 ) {
        DialogControlFadeTransparency(gv__3P_KillDialogItem[autoB35F5605_var], PlayerGroupAll(), 0.0, 0.0);
    }
    DialogSetVisible(gv__3P_KillDialog, gv__3P_AntagonistPG, true);
    TextExpressionSetToken("Param/Expression/1F55DE17", "A", FixedToText(gv__3P_KillStreak, 0));
    libNtve_gf_SetDialogItemText(gv__3P_KillDialogItem[2], TextExpressionAssemble("Param/Expression/1F55DE17"), PlayerGroupAll());
    if ((gv__3P_KillStreak >= 100)) {
        TextExpressionSetToken("Param/Expression/3FBB4034", "A", FixedToText(gv__3P_KillStreak, 0));
        libNtve_gf_SetDialogItemText(gv__3P_KillDialogItem[2], TextExpressionAssemble("Param/Expression/3FBB4034"), PlayerGroupAll());
    }
    else {
        TextExpressionSetToken("Param/Expression/313292C2", "A", FixedToText(gv__3P_KillStreak, 0));
        libNtve_gf_SetDialogItemText(gv__3P_KillDialogItem[2], TextExpressionAssemble("Param/Expression/313292C2"), PlayerGroupAll());
    }
    if (((gv__3P_KillStreak >= 50) && (gv__3P_KillStreak <= 99))) {
        if ((DialogControlIsVisible(gv__3P_KillDialogItem[1], gv_pLAYER_11_ANTAGONIST) == false)) {
            DialogControlSetVisible(gv__3P_KillDialogItem[1], gv__3P_AntagonistPG, true);
            SoundPlayForPlayer(SoundLink("UI_MissionLaunchMenu_Select2", -1), c_maxPlayers, gv__3P_AntagonistPG, 75.0, 0.0);
        }

    }
    else {
        if ((gv__3P_KillStreak >= 100)) {
            if ((DialogControlIsVisible(gv__3P_KillDialogItem[4], gv_pLAYER_11_ANTAGONIST) == false)) {
                DialogControlSetVisible(gv__3P_KillDialogItem[1], PlayerGroupAll(), false);
                DialogControlSetVisible(gv__3P_KillDialogItem[4], gv__3P_AntagonistPG, true);
                SoundPlayForPlayer(SoundLink("UI_MissionLaunchMenu_Select2", -1), c_maxPlayers, gv__3P_AntagonistPG, 90.0, 0.0);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_KillNotificationsUpdate_Init () {
    gt__3P_KillNotificationsUpdate = TriggerCreate("gt__3P_KillNotificationsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Kill Notifications Fade
//--------------------------------------------------------------------------------------------------
bool gt__3P_KillNotificationsFade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto4B66897F_ae = gv__3P_KillDialogMaxItems;
    int auto4B66897F_var;

    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv__3P_KillDialog, gv_pLAYER_11_ANTAGONIST) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    auto4B66897F_var = 1;
    for ( ; auto4B66897F_var <= auto4B66897F_ae; auto4B66897F_var += 1 ) {
        DialogControlFadeTransparency(gv__3P_KillDialogItem[auto4B66897F_var], PlayerGroupAll(), 1.4, 100.0);
    }
    Wait(1.5, c_timeGame);
    DialogSetVisible(gv__3P_KillDialog, gv__3P_AntagonistPG, false);
    DialogControlSetVisible(gv__3P_KillDialogItem[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv__3P_KillDialogItem[4], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_KillNotificationsFade_Init () {
    gt__3P_KillNotificationsFade = TriggerCreate("gt__3P_KillNotificationsFade_Func");
    TriggerAddEventTimer(gt__3P_KillNotificationsFade, gv__3P_KillTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_QuitButtonUsed
//--------------------------------------------------------------------------------------------------
bool gt__3P_QuitButtonUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv__3P_QuitButton))) {
            return false;
        }

        if (!((EventPlayer() == gv_pLAYER_11_ANTAGONIST))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__3P_SynchronizeBank, true, true);
    if (((((gv__3P_VespeneKilled * 2.0) + gv__3P_MineralsKilled) < 50000.0) || (((gv__3P_SuppliesMadeKilled * 4.0) + gv__3P_SuppliesKilled) < 1000.0) || (UnitIsAlive(gv__3P_MainShard) == false) || (UnitIsAlive(gv_jinara) == true))) {
        if (((((gv__3P_VespeneKilled * 2.0) + gv__3P_MineralsKilled) >= 25000.0) || (((gv__3P_SuppliesMadeKilled * 4.0) + gv__3P_SuppliesKilled) >= 500.0))) {
            GameOver(gv_pLAYER_11_ANTAGONIST, c_gameOverTie, false, true);
        }
        else {
            GameOver(gv_pLAYER_11_ANTAGONIST, c_gameOverDefeat, false, true);
        }
    }
    else {
        GameOver(gv_pLAYER_11_ANTAGONIST, c_gameOverVictory, false, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_QuitButtonUsed_Init () {
    gt__3P_QuitButtonUsed = TriggerCreate("gt__3P_QuitButtonUsed_Func");
    TriggerEnable(gt__3P_QuitButtonUsed, false);
    TriggerAddEventDialogControl(gt__3P_QuitButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_VoidShardDestroyed
//--------------------------------------------------------------------------------------------------
bool gt__3P_VoidShardDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    ObjectiveSetState(gv__3P_ObjectiveKillJinara, c_objectiveStateFailed);
    ObjectiveSetState(gv__3P_ObjectiveDefendVoidShard, c_objectiveStateFailed);
    gf__3P_AmonMissionEndFanfare();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_VoidShardDestroyed_Init () {
    gt__3P_VoidShardDestroyed = TriggerCreate("gt__3P_VoidShardDestroyed_Func");
    TriggerAddEventUnitDied(gt__3P_VoidShardDestroyed, UnitRefFromVariable("gv__3P_MainShard"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_PlayerLeaves
//--------------------------------------------------------------------------------------------------
bool gt__3P_PlayerLeaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerStatus(1) != c_playerStatusActive))) {
            return false;
        }

        if (!((PlayerStatus(2) != c_playerStatusActive))) {
            return false;
        }

        if (!((PlayerStatus(gv_pLAYER_11_ANTAGONIST) == c_playerStatusActive))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf__3P_AmonVictoryFanfare(ge__3P_VictoryType_BaseDestroyed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_PlayerLeaves_Init () {
    gt__3P_PlayerLeaves = TriggerCreate("gt__3P_PlayerLeaves_Func");
    TriggerAddEventPlayerLeft(gt__3P_PlayerLeaves, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_CreateStartTimerDialog
//--------------------------------------------------------------------------------------------------
bool gt__3P_CreateStartTimerDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vLabel;
    int lv_vTime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vLabel = c_invalidDialogControlId;
    lv_vTime = 300;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorBottomLeft, 0, 0, true);
    gv__3P_StartTimerDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 556);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 40, c_anchorBottomLeft, 10, 10, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    TextExpressionSetToken("Param/Expression/7DB00E6A", "A", TextTimeFormat(StringToText("<min2/>:<sec2/>"), lv_vTime));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/7DB00E6A"), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "3P_StartTimer", PlayerGroupAll());
    while (true) {
        Wait(1.0, c_timeReal);
        lv_vTime -= 1;
        TextExpressionSetToken("Param/Expression/13012E9C", "A", TextTimeFormat(StringToText("<min2/>:<sec2/>"), lv_vTime));
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/13012E9C"), PlayerGroupAll());
        if ((lv_vTime < 30) && (lv_vTime > 6)) {
            SoundPlayForPlayer(SoundLink("TM_UI_Countdown01", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }

        if ((lv_vTime == 6)) {
            SoundPlayForPlayer(SoundLink("AC_UI_Countdown_5MxEnd", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }

        if ((lv_vTime == 0)) {
            break;
        }

    }
    if ((GameGetMissionTime() < 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B833C3F2"));
        gf__3P_EarlyStart();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_CreateStartTimerDialog_Init () {
    gt__3P_CreateStartTimerDialog = TriggerCreate("gt__3P_CreateStartTimerDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Quicken
//--------------------------------------------------------------------------------------------------
bool gt__3P_Quicken_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_c_AttackWavePreTime += 60.0;
    CatalogFieldValueModify(c_gameCatalogAbil, "Quicken", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_unitCostCustomResource) + "]", EventPlayer(), FixedToString(250.0, c_fixedPrecisionAny), c_upgradeOperationAdd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_Quicken_Init () {
    gt__3P_Quicken = TriggerCreate("gt__3P_Quicken_Func");
    TriggerAddEventUnitAbility(gt__3P_Quicken, null, AbilityCommand("Quicken", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Strengthen Champion
//--------------------------------------------------------------------------------------------------
bool gt__3P_StrengthenChampion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_tugOfWar_Speed_3P_Mod += 0.05;
    CatalogFieldValueModify(c_gameCatalogAbil, "StrengthenChampion", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_unitCostCustomResource) + "]", EventPlayer(), FixedToString(250.0, c_fixedPrecisionAny), c_upgradeOperationAdd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_StrengthenChampion_Init () {
    gt__3P_StrengthenChampion = TriggerCreate("gt__3P_StrengthenChampion_Func");
    TriggerAddEventUnitAbility(gt__3P_StrengthenChampion, null, AbilityCommand("StrengthenChampion", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Start
//--------------------------------------------------------------------------------------------------
bool gt__3P_Start_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv__3P_Started = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_Start_Init () {
    gt__3P_Start = TriggerCreate("gt__3P_Start_Func");
    TriggerAddEventGeneric(gt__3P_Start, "CU_CommChoiceEventClosed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Race Init
//--------------------------------------------------------------------------------------------------
bool gt__3P_RaceInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    int lv_b;
    int lv_c;

    // Automatic Variable Declarations
    string auto5FC60CFD_val;
    int auto2446BC06_val;
    const int auto6727B1BA_ae = 6;
    int auto6727B1BA_var;
    unitgroup auto4AD57D22_g;
    int auto4AD57D22_u;
    unit auto4AD57D22_var;
    string auto958CA7C7_val;
    const int auto5547CF34_ae = 6;
    int auto5547CF34_var;
    string autoBA63A7E1_val;
    int auto0C391F2E_val;
    int autoEDE12AD8_val;
    int auto2305D70E_val;
    string auto3A2DD3A3_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto5FC60CFD_val = GameAttributeGameValue("[bnet:local/0.0/274050]2");
    if (auto5FC60CFD_val == "0003") {
        gv__3P_ActiveRace = "Terr";
    }
    else if (auto5FC60CFD_val == "0001") {
        gv__3P_ActiveRace = "Zerg";
    }
    else if (auto5FC60CFD_val == "0002") {
        gv__3P_ActiveRace = "Prot";
    }
    else if (auto5FC60CFD_val == "0004") {
        auto2446BC06_val = RandomInt(1, 6);
        if (auto2446BC06_val == 1) {
            gv__3P_ActiveRace = "Terr";
        }
        else if (auto2446BC06_val == 6) {
            gv__3P_ActiveRace = "Terr";
        }
        else if (auto2446BC06_val == 2) {
            gv__3P_ActiveRace = "Zerg";
        }
        else if (auto2446BC06_val == 5) {
            gv__3P_ActiveRace = "Zerg";
        }
        else if (auto2446BC06_val == 3) {
            gv__3P_ActiveRace = "Prot";
        }
        else if (auto2446BC06_val == 4) {
            gv__3P_ActiveRace = "Prot";
        }
        else {
        }
    }
    else {
        gv__3P_ActiveRace = "Terr";
    }
    auto6727B1BA_var = 3;
    for ( ; auto6727B1BA_var <= auto6727B1BA_ae; auto6727B1BA_var += 1 ) {
        auto4AD57D22_g = UnitGroup(null, auto6727B1BA_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4AD57D22_u = UnitGroupCount(auto4AD57D22_g, c_unitCountAll);
        for (;; auto4AD57D22_u -= 1) {
            auto4AD57D22_var = UnitGroupUnitFromEnd(auto4AD57D22_g, auto4AD57D22_u);
            if (auto4AD57D22_var == null) { break; }
            auto958CA7C7_val = libCOMI_gf_GetUnitRace(auto4AD57D22_var);
            if (auto958CA7C7_val == "Zerg") {
                lv_a += 1;
                gv__3P_ZergRecord[lv_a].lv_unitFacing = UnitGetFacing(auto4AD57D22_var);
                gv__3P_ZergRecord[lv_a].lv_unitOwner = UnitGetOwner(auto4AD57D22_var);
                gv__3P_ZergRecord[lv_a].lv_unitPosition = UnitGetPosition(auto4AD57D22_var);
                gv__3P_ZergRecord[lv_a].lv_unitType = UnitGetType(auto4AD57D22_var);
                if ((gv__3P_ActiveRace != "Zerg")) {
                    UnitRemove(auto4AD57D22_var);
                }

            }
            else if (auto958CA7C7_val == "Prot") {
                lv_b += 1;
                gv__3P_ProtossRecord[lv_b].lv_unitFacing = UnitGetFacing(auto4AD57D22_var);
                gv__3P_ProtossRecord[lv_b].lv_unitOwner = UnitGetOwner(auto4AD57D22_var);
                gv__3P_ProtossRecord[lv_b].lv_unitPosition = UnitGetPosition(auto4AD57D22_var);
                gv__3P_ProtossRecord[lv_b].lv_unitType = UnitGetType(auto4AD57D22_var);
                if ((gv__3P_ActiveRace != "Prot")) {
                    UnitRemove(auto4AD57D22_var);
                }

            }
            else if (auto958CA7C7_val == "Terr") {
                lv_c += 1;
                gv__3P_TerranRecord[lv_c].lv_unitFacing = UnitGetFacing(auto4AD57D22_var);
                gv__3P_TerranRecord[lv_c].lv_unitOwner = UnitGetOwner(auto4AD57D22_var);
                gv__3P_TerranRecord[lv_c].lv_unitPosition = UnitGetPosition(auto4AD57D22_var);
                gv__3P_TerranRecord[lv_c].lv_unitType = UnitGetType(auto4AD57D22_var);
                if ((gv__3P_ActiveRace != "Terr")) {
                    UnitRemove(auto4AD57D22_var);
                }

            }
            else {
            }
        }
    }
    auto5547CF34_var = 3;
    for ( ; auto5547CF34_var <= auto5547CF34_ae; auto5547CF34_var += 1 ) {
        autoBA63A7E1_val = gv__3P_ActiveRace;
        if (autoBA63A7E1_val == "Zerg") {
            libNtve_gf_SetUpgradeLevelForPlayer(auto5547CF34_var, "AmonIsZerg", 1);
            auto0C391F2E_val = RandomInt(1, 5);
            if (auto0C391F2E_val == 1) {
                libCOMI_gf_StartCoopAIwithSpecificPersonality(auto5547CF34_var, 1, "ZergBuildGround");
            }
            else if (auto0C391F2E_val == 2) {
                libCOMI_gf_StartCoopAIwithSpecificPersonality(auto5547CF34_var, 1, "ZergBuildMutaLing");
            }
            else if (auto0C391F2E_val == 3) {
                libCOMI_gf_StartCoopAIwithSpecificPersonality(auto5547CF34_var, 1, "ZergBuildSwarmy");
            }
            else if (auto0C391F2E_val == 4) {
                libCOMI_gf_StartCoopAIwithSpecificPersonality(auto5547CF34_var, 1, "ZergBuildGroundClassic");
            }
            else if (auto0C391F2E_val == 5) {
                libCOMI_gf_StartCoopAIwithSpecificPersonality(auto5547CF34_var, 1, "ZergBuildAirClassic");
            }
            else {
            }
        }
        else if (autoBA63A7E1_val == "Prot") {
            libNtve_gf_SetUpgradeLevelForPlayer(auto5547CF34_var, "AmonIsProtoss", 1);
            CreepModify(PointFromId(875), 150.0, false, false);
            autoEDE12AD8_val = RandomInt(1, 8);
            if (autoEDE12AD8_val == 1) {
                libCOMI_gf_StartCoopAIwithSpecificPersonality(auto5547CF34_var, 1, "ProtossBuildGateway");
            }
            else if (autoEDE12AD8_val == 2) {
                libCOMI_gf_StartCoopAIwithSpecificPersonality(auto5547CF34_var, 1, "ProtossBuildRoboColossus");
            }
            else if (autoEDE12AD8_val == 3) {
                libCOMI_gf_StartCoopAIwithSpecificPersonality(auto5547CF34_var, 1, "ProtossBuildRoboReaver");
            }
            else if (autoEDE12AD8_val == 4) {
                libCOMI_gf_StartCoopAIwithSpecificPersonality(auto5547CF34_var, 1, "ProtossBuildSkytossCarrier");
            }
            else if (autoEDE12AD8_val == 5) {
                libCOMI_gf_StartCoopAIwithSpecificPersonality(auto5547CF34_var, 1, "ProtossBuildSkytossTempest");
            }
            else if (autoEDE12AD8_val == 6) {
                libCOMI_gf_StartCoopAIwithSpecificPersonality(auto5547CF34_var, 1, "ProtossBuildTechy");
            }
            else if (autoEDE12AD8_val == 7) {
                libCOMI_gf_StartCoopAIwithSpecificPersonality(auto5547CF34_var, 1, "ProtossBuildAirClassic");
            }
            else if (autoEDE12AD8_val == 8) {
                libCOMI_gf_StartCoopAIwithSpecificPersonality(auto5547CF34_var, 1, "ProtossBuildGroundClassic");
            }
            else {
            }
        }
        else if (autoBA63A7E1_val == "Terr") {
            libNtve_gf_SetUpgradeLevelForPlayer(auto5547CF34_var, "AmonIsTerran", 1);
            CreepModify(PointFromId(875), 150.0, false, false);
            auto2305D70E_val = RandomInt(1, 6);
            if (auto2305D70E_val == 1) {
                libCOMI_gf_StartCoopAIwithSpecificPersonality(auto5547CF34_var, 1, "TerranBuildBioMechStar");
            }
            else if (auto2305D70E_val == 2) {
                libCOMI_gf_StartCoopAIwithSpecificPersonality(auto5547CF34_var, 1, "TerranBuildMechStarport");
            }
            else if (auto2305D70E_val == 3) {
                libCOMI_gf_StartCoopAIwithSpecificPersonality(auto5547CF34_var, 1, "TerranBuildShadowTech");
            }
            else if (auto2305D70E_val == 4) {
                libCOMI_gf_StartCoopAIwithSpecificPersonality(auto5547CF34_var, 1, "TerranBuildSkyTerran");
            }
            else if (auto2305D70E_val == 5) {
                libCOMI_gf_StartCoopAIwithSpecificPersonality(auto5547CF34_var, 1, "TerranBuildBioClassic");
            }
            else if (auto2305D70E_val == 6) {
                libCOMI_gf_StartCoopAIwithSpecificPersonality(auto5547CF34_var, 1, "TerranBuildMechClassic");
            }
            else {
            }
        }
        else {
        }
    }
    auto3A2DD3A3_val = gv__3P_ActiveRace;
    if (auto3A2DD3A3_val == "Zerg") {
        libNtve_gf_SetUpgradeLevelForPlayer(11, "AmonIsZerg", 1);
    }
    else if (auto3A2DD3A3_val == "Prot") {
        libNtve_gf_SetUpgradeLevelForPlayer(11, "AmonIsProtoss", 1);
    }
    else if (auto3A2DD3A3_val == "Terr") {
        libNtve_gf_SetUpgradeLevelForPlayer(11, "AmonIsTerran", 1);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(11, "AmonIsZerg", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_RaceInit_Init () {
    gt__3P_RaceInit = TriggerCreate("gt__3P_RaceInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Map init
//--------------------------------------------------------------------------------------------------
bool gt__3P_Mapinit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vCommander;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    int autoDEF10BE6_ae;
    int autoDEF10BE6_var;
    playergroup autoE2F1699B_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameIsOnline() == true)) {
        libA8FDA37D_gv_uT_DevCommands[0] = libA8FDA37D_ge_UT_DevCommandTypes_Visual;
        libA8FDA37D_gv_uT_DevCommands[1] = libA8FDA37D_ge_UT_DevCommandTypes_Visual;
        libA8FDA37D_gv_uT_DevCommands[2] = libA8FDA37D_ge_UT_DevCommandTypes_Visual;
        libA8FDA37D_gv_uT_DevCommands[11] = libA8FDA37D_ge_UT_DevCommandTypes_Visual;
    }
    else {
        TriggerExecute(gt__3P_DebugStart, true, false);
    }
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    PlayerGroupAdd(gv__3P_CommandersPG, gv_pLAYER_01_USER);
    PlayerGroupAdd(gv__3P_CommandersPG, gv_pLAYER_02_USER);
    PlayerGroupAdd(gv__3P_AntagonistPG, gv_pLAYER_11_ANTAGONIST);
    TriggerEnable(lib01833E95_gt_AF_Score, false);
    TriggerExecute(gt__3P_DifficultySetUp, true, false);
    TriggerExecute(gt__3P_MutatorPricesFill, true, false);
    TriggerExecute(gt__3P_BankInitialize, true, false);
    TriggerExecute(gt__3P_Heroes_Create, true, false);
    TriggerExecute(gt__3P_TutorialInit, true, false);
    TriggerExecute(gt__3P_TutorialTutorialCommandersCreate, true, false);
    TriggerExecute(gt__3P_CreateStartTimerDialog, true, false);
    gf_RunTriggeratMissionTime((0.1 * 60.0), gt__3P_Tutorial);
    gf_RunTriggeratMissionTime((2.0 * 60.0), gt__3P_TutorialAIChoice);
    gf__3P_CreateVoidEnergyReservoir((0.01 * 60.0), 10, 17);
    gf__3P_CreateVoidEnergyReservoir((0.02 * 60.0), 15, 25);
    gf__3P_CreateVoidEnergyReservoir((0.04 * 60.0), 25, 40);
    gf__3P_CreateVoidEnergyReservoir((0.05 * 60.0), 35, 50);
    gf__3P_CreateVoidEnergyReservoir((11.2 * 60.0), 10, 25);
    libCOOC_gv_cCX_PlayerCommander[gv_pLAYER_11_ANTAGONIST] = null;
    UnitGroupAdd(gv__3P_Shards, gv__3P_MainShard);
    UnitAbilityEnable(gv__3P_MainShard, "ChooseActiveHeroes", false);
    AISetAPM(gv_pLAYER_05_EnemyP01_TugOfWarPath, 2000);
    TechTreeRequirementsEnable(gv_pLAYER_05_EnemyP01_TugOfWarPath, false);
    CatalogFieldValueSet(c_gameCatalogButton, "ChooseActiveHeroes", "Tooltip", gv_pLAYER_11_ANTAGONIST, ("Choose active heroes. Only " + IntToString(gv__3P_Heroes_MaxActive) + " heroes can spawn with attack waves."));
    Wait(0.0, c_timeReal);
    DialogSetVisible(libCOUI_gv_cU_MutatorDialog, PlayerGroupAll(), false);
    DialogControlHookup(libCOUI_gv_cU_CommanderPanel, c_triggerControlTypeButton, "AICompButton");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libCOUI_gv_cU_CommanderPanel, c_triggerControlTypeButton, "MutatorButton");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libCOUI_gv_cU_CommanderPanel, c_triggerControlTypePulldown, "ChallengePulldown");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libCOUI_gv_cU_CommanderPanel, c_triggerControlTypeLabel, "MutatorCountLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    autoDEF10BE6_ae = (UserDataInstanceCount("PlayerCommanders") + 1);
    autoDEF10BE6_var = 0;
    for ( ; autoDEF10BE6_var <= autoDEF10BE6_ae; autoDEF10BE6_var += 1 ) {
        lv_vCommander = UserDataInstance("PlayerCommanders", autoDEF10BE6_var);
        libCOOC_gf_CC_PlayerExperienceSetToLevel(gv_pLAYER_01_USER, 15, lv_vCommander);
        libCOOC_gf_CC_UpdateTechStates(gv_pLAYER_01_USER);
        libCOOC_gf_CC_PlayerExperienceSetToLevel(gv_pLAYER_02_USER, 15, lv_vCommander);
        libCOOC_gf_CC_UpdateTechStates(gv_pLAYER_02_USER);
    }
    autoE2F1699B_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoE2F1699B_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOUI_gf_CU_CommanderUpdate(lv_indexPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_Mapinit_Init () {
    gt__3P_Mapinit = TriggerCreate("gt__3P_Mapinit_Func");
    TriggerAddEventMapInit(gt__3P_Mapinit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Before Intro
//--------------------------------------------------------------------------------------------------
bool gt__3P_BeforeIntro_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vRandom;

    // Automatic Variable Declarations
    unitgroup autoDE2408EE_g;
    int autoDE2408EE_u;
    unit autoDE2408EE_var;
    unitgroup auto2C093B2F_g;
    int auto2C093B2F_u;
    unit auto2C093B2F_var;
    const int autoE06DC647_ae = 6;
    int autoE06DC647_var;
    unitgroup auto9992E545_g;
    int auto9992E545_u;
    unit auto9992E545_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__3P_Properlysetalliances, true, false);
    TriggerExecute(gt__3P_RaceInit, true, false);
    TriggerExecute(gt__3P_Prunefordifficulties, true, false);
    TriggerExecute(gt__3P_TutorialTutorialClose, true, false);
    TriggerExecute(gt__3P_SpeedSetUp, true, false);
    DialogSetVisible(gv__3P_StartTimerDialog, PlayerGroupAll(), false);
    TriggerStop(gt__3P_CreateStartTimerDialog);
    if ((gf__3P_HybridPlaying() == false)) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_11_ANTAGONIST, c_playerPropCustom, c_playerPropOperSetTo, 300);
    gv__3P_TotalAddedFrom += 300;
    TriggerExecute(gt__3P_KillNotificationsCreate, true, false);
    TriggerExecute(gt__3P_ResourcesfromShardsDuplicateCharge, true, false);
    autoDE2408EE_g = UnitGroup("DestructibleRock4x4", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDE2408EE_u = UnitGroupCount(autoDE2408EE_g, c_unitCountAll);
    for (;; autoDE2408EE_u -= 1) {
        autoDE2408EE_var = UnitGroupUnitFromEnd(autoDE2408EE_g, autoDE2408EE_u);
        if (autoDE2408EE_var == null) { break; }
        if (((GameAttributeGameValue("[bnet:local/0.0/274050]1") == "0001") || (GameAttributeGameValue("[bnet:local/0.0/274050]1") == "0002"))) {
            UnitSetPropertyFixed(autoDE2408EE_var, c_unitPropLifeMax, 500.0);
        }
        else {
            UnitSetPropertyFixed(autoDE2408EE_var, c_unitPropLifeMax, 1000.0);
        }
        UnitSetPropertyFixed(autoDE2408EE_var, c_unitPropLifePercent, 100.0);
    }
    auto2C093B2F_g = UnitGroup("DestructibleRock6x6", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2C093B2F_u = UnitGroupCount(auto2C093B2F_g, c_unitCountAll);
    for (;; auto2C093B2F_u -= 1) {
        auto2C093B2F_var = UnitGroupUnitFromEnd(auto2C093B2F_g, auto2C093B2F_u);
        if (auto2C093B2F_var == null) { break; }
        if (((GameAttributeGameValue("[bnet:local/0.0/274050]1") == "0001") || (GameAttributeGameValue("[bnet:local/0.0/274050]1") == "0002"))) {
            UnitSetPropertyFixed(auto2C093B2F_var, c_unitPropLifeMax, 1000.0);
        }
        else {
            UnitSetPropertyFixed(auto2C093B2F_var, c_unitPropLifeMax, 2000.0);
        }
        UnitSetPropertyFixed(auto2C093B2F_var, c_unitPropLifePercent, 100.0);
    }
    autoE06DC647_var = 3;
    for ( ; autoE06DC647_var <= autoE06DC647_ae; autoE06DC647_var += 1 ) {
        TriggerExecute(gt__3P_Heroes_UpdateChooseActiveHeroesTooltip, true, false);
        auto9992E545_g = UnitGroup(null, autoE06DC647_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9992E545_u = UnitGroupCount(auto9992E545_g, c_unitCountAll);
        for (;; auto9992E545_u -= 1) {
            auto9992E545_var = UnitGroupUnitFromEnd(auto9992E545_g, auto9992E545_u);
            if (auto9992E545_var == null) { break; }
            gf__3P_SetLocalDefender(auto9992E545_var);
            gf__3P_DisableLongRangeAbilities(auto9992E545_var);
            if ((UnitGetType(auto9992E545_var) == "HighTemplar")) {
                UnitAbilityEnable(auto9992E545_var, "ArchonWarp", false);
            }

            if ((UnitTypeTestAttribute(UnitGetType(auto9992E545_var), c_unitAttributeStructure) == true) && (UnitGetType(auto9992E545_var) != "Bunker") && (UnitGetOwner(auto9992E545_var) == 6)) {
                UnitSetOwner(auto9992E545_var, 5, true);
            }

            if ((UnitTypeTestAttribute(UnitGetType(auto9992E545_var), c_unitAttributeStructure) == true) && (UnitGetType(auto9992E545_var) != "Bunker") && (UnitGetOwner(auto9992E545_var) == 4)) {
                UnitSetOwner(auto9992E545_var, 3, true);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_BeforeIntro_Init () {
    gt__3P_BeforeIntro = TriggerCreate("gt__3P_BeforeIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_After Intro
//--------------------------------------------------------------------------------------------------
bool gt__3P_AfterIntro_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_uG;
    string lv_iNST;

    // Automatic Variable Declarations
    string auto1FB51B01_userType;
    int auto1FB51B01_i;
    const int auto3F3396EB_n = 5;
    int auto3F3396EB_i;

    // Variable Initialization
    lv_uG = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gf__3P_HybridPlaying() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libCOUI_gv_cU_MasteryDialog, PlayerGroupAll(), false);
    if (((PlayerStatus(1) != c_playerStatusActive) || (PlayerStatus(2) != c_playerStatusActive) || (PlayerType(1) != c_playerTypeUser) || (PlayerType(2) != c_playerTypeUser))) {
        libCOMI_gf_SetAllianceCoop(1, 2, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
    }

    PlayerModifyPropertyInt(gv_pLAYER_11_ANTAGONIST, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 100);
    auto1FB51B01_userType = "PlayerCommanders";
    auto1FB51B01_i = 1;
    for ( ; auto1FB51B01_i <= UserDataInstanceCount(auto1FB51B01_userType) ; auto1FB51B01_i += 1 ) {
        lv_iNST = UserDataInstance(auto1FB51B01_userType, auto1FB51B01_i);
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_11_ANTAGONIST, UserDataGetUpgrade("PlayerCommanders", lv_iNST, "DefaultUpgrades", 1), 0);
    }
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_11_ANTAGONIST, "PlayerCommander", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_11_ANTAGONIST, "CoopCommanderAmon", 1);
    PlayerSetRace(gv_pLAYER_11_ANTAGONIST, "Terr");
    libCOOC_gf_CC_UpdateTechStates(gv_pLAYER_11_ANTAGONIST);
    libCOOC_gf_CC_ApplyTech(gv_pLAYER_11_ANTAGONIST);
    gf__3P_GlobalCasterCreateUnit(gv_pLAYER_11_ANTAGONIST);
    libCOUI_gf_CU_GPShowHide(true, gv_pLAYER_11_ANTAGONIST, c_transitionDurationImmediate);
    libCOUI_gf_CU_GPVisibilityAutoUpdate(true, gv_pLAYER_11_ANTAGONIST, c_transitionDurationImmediate);
    DialogControlSetVisible(libCOUI_gv_cU_GPPanel[gv_pLAYER_11_ANTAGONIST], gv__3P_AntagonistPG, true);
    UnitControlGroupAddUnit(gv_pLAYER_11_ANTAGONIST, 4, gv__3P_MainShard);
    TriggerEnable(gt__3P_UpgradeParity, true);
    TriggerExecute(gt__3P_Showoff, true, false);
    TriggerExecute(gt__3P_LastBaseInit, true, false);
    TriggerExecute(gt__3P_CreateIncomeRateDialog, true, false);
    Wait(0.5, c_timeGame);
    GameSetSpeedLocked(true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, true);
    gf__3P_DisableMacroAbilitiesINIT();
    lv_uG = UnitGroupAlliance(1, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    for (auto3F3396EB_i = 1; auto3F3396EB_i <= auto3F3396EB_n; auto3F3396EB_i += 1) {
        UnitGroupPauseAll(lv_uG, false);
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt__3P_GlobalLeashCheck, true, false);
    Wait(1.0, c_timeGame);
    UnitAbilityAddChargeUsed(gv__3P_MainShard, "3PShardTrain", "Abil/3PShardTrain", 5.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_AfterIntro_Init () {
    gt__3P_AfterIntro = TriggerCreate("gt__3P_AfterIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Reveal rocks & units inbetween
//--------------------------------------------------------------------------------------------------
bool gt__3P_Revealrocksunitsinbetween_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const fixed lv_vRockDistanceReveal = 8.0;

    // Automatic Variable Declarations
    unitgroup autoEB15BD65_g;
    int autoEB15BD65_u;
    unit autoEB15BD65_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealArea(1, RegionCircle(UnitGetPosition(UnitFromId(1479466114)), lv_vRockDistanceReveal), 0.0625, true);
    VisRevealArea(1, RegionCircle(UnitGetPosition(UnitFromId(971263958)), lv_vRockDistanceReveal), 0.0625, true);
    autoEB15BD65_g = UnitGroup(null, c_playerAny, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEB15BD65_u = UnitGroupCount(autoEB15BD65_g, c_unitCountAll);
    for (;; autoEB15BD65_u -= 1) {
        autoEB15BD65_var = UnitGroupUnitFromEnd(autoEB15BD65_g, autoEB15BD65_u);
        if (autoEB15BD65_var == null) { break; }
        UnitSetCustomValue(autoEB15BD65_var, 57, 57.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_Revealrocksunitsinbetween_Init () {
    gt__3P_Revealrocksunitsinbetween = TriggerCreate("gt__3P_Revealrocksunitsinbetween_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TW_Main_Thread_Player01
//--------------------------------------------------------------------------------------------------
bool gt_TW_Main_Thread_Player01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_cPlayer = 1;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerStatus(lv_cPlayer) == c_playerStatusActive))) {
            return false;
        }

        if (!((PlayerType(lv_cPlayer) == c_playerTypeUser))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    BankLoad("MMTwitchIntegration", 1);
    lib01833E95_gf_TW_SetUp(lv_cPlayer, BankLastCreated());
    while (true) {
        if ((PlayerStatus(lv_cPlayer) != c_playerStatusActive)) {
            break;
        }

        BankReload(lib01833E95_gv_tW_Bank[lv_cPlayer]);
        BankWait(lib01833E95_gv_tW_Bank[lv_cPlayer]);
        lib01833E95_gf_TW_ActionCycle(lv_cPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TW_Main_Thread_Player01_Init () {
    gt_TW_Main_Thread_Player01 = TriggerCreate("gt_TW_Main_Thread_Player01_Func");
    TriggerAddEventMapInit(gt_TW_Main_Thread_Player01);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TW_Main_Thread_Player02
//--------------------------------------------------------------------------------------------------
bool gt_TW_Main_Thread_Player02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_cPlayer = 2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerStatus(lv_cPlayer) == c_playerStatusActive))) {
            return false;
        }

        if (!((PlayerType(lv_cPlayer) == c_playerTypeUser))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    BankLoad("MMTwitchIntegration", 2);
    lib01833E95_gf_TW_SetUp(lv_cPlayer, BankLastCreated());
    while (true) {
        if ((PlayerStatus(lv_cPlayer) != c_playerStatusActive)) {
            break;
        }

        BankReload(lib01833E95_gv_tW_Bank[lv_cPlayer]);
        BankWait(lib01833E95_gv_tW_Bank[lv_cPlayer]);
        lib01833E95_gf_TW_ActionCycle(lv_cPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TW_Main_Thread_Player02_Init () {
    gt_TW_Main_Thread_Player02 = TriggerCreate("gt_TW_Main_Thread_Player02_Func");
    TriggerAddEventMapInit(gt_TW_Main_Thread_Player02);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TW_Main_Thread_Player11
//--------------------------------------------------------------------------------------------------
bool gt_TW_Main_Thread_Player11_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_cPlayer = 11;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerStatus(lv_cPlayer) == c_playerStatusActive))) {
            return false;
        }

        if (!((PlayerType(lv_cPlayer) == c_playerTypeUser))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    BankLoad("MMTwitchIntegration", 11);
    lib01833E95_gf_TW_SetUp(lv_cPlayer, BankLastCreated());
    while (true) {
        if ((PlayerStatus(lv_cPlayer) != c_playerStatusActive)) {
            break;
        }

        BankReload(lib01833E95_gv_tW_Bank[lv_cPlayer]);
        BankWait(lib01833E95_gv_tW_Bank[lv_cPlayer]);
        lib01833E95_gf_TW_ActionCycle(lv_cPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TW_Main_Thread_Player11_Init () {
    gt_TW_Main_Thread_Player11 = TriggerCreate("gt_TW_Main_Thread_Player11_Func");
    TriggerAddEventMapInit(gt_TW_Main_Thread_Player11);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_humanPlayersAndAllies;
    playergroup lv_enemyPlayers;
    int lv_humanIter;
    int lv_enemyIter;
    int lv_enemyPowerShareIter;

    // Automatic Variable Declarations
    playergroup autoD27D8BB6_g;
    playergroup auto2FC2DAC8_g;
    playergroup auto03D1682D_g;
    playergroup auto4BE6DD64_g;
    playergroup auto13887C1A_g;

    // Variable Initialization
    lv_humanPlayersAndAllies = PlayerGroupEmpty();
    lv_enemyPlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(lv_humanPlayersAndAllies, gv_pLAYER_01_USER);
    PlayerGroupAdd(lv_humanPlayersAndAllies, gv_pLAYER_02_USER);
    PlayerGroupAdd(lv_enemyPlayers, gv_pLAYER_04_EnemyP02);
    PlayerGroupAdd(lv_enemyPlayers, gv_pLAYER_03_EnemyP01);
    PlayerGroupAdd(lv_enemyPlayers, gv_pLAYER_05_EnemyP01_TugOfWarPath);
    PlayerGroupAdd(lv_enemyPlayers, gv_pLAYER_06_EnemyP02_TugOfWarPath);
    PlayerGroupAdd(lv_enemyPlayers, gv_pLAYER_14_DARKMIRROR);
    PlayerGroupAdd(lv_enemyPlayers, gv_pLAYER_11_ANTAGONIST);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_11_ANTAGONIST);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_11_ANTAGONIST);
    libNtve_gf_SetPlayerGroupAlliance(lv_humanPlayersAndAllies, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetPlayerGroupAlliance(lv_enemyPlayers, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
    autoD27D8BB6_g = lv_enemyPlayers;
    lv_enemyIter = -1;
    while (true) {
        lv_enemyIter = PlayerGroupNextPlayer(autoD27D8BB6_g, lv_enemyIter);
        if (lv_enemyIter < 0) { break; }
        auto2FC2DAC8_g = lv_humanPlayersAndAllies;
        lv_humanIter = -1;
        while (true) {
            lv_humanIter = PlayerGroupNextPlayer(auto2FC2DAC8_g, lv_humanIter);
            if (lv_humanIter < 0) { break; }
            libNtve_gf_SetAlliance(lv_humanIter, lv_enemyIter, libNtve_ge_AllianceSetting_Enemy);
        }
        auto03D1682D_g = lv_enemyPlayers;
        lv_enemyPowerShareIter = -1;
        while (true) {
            lv_enemyPowerShareIter = PlayerGroupNextPlayer(auto03D1682D_g, lv_enemyPowerShareIter);
            if (lv_enemyPowerShareIter < 0) { break; }
            if ((lv_enemyIter != lv_enemyPowerShareIter)) {
                PlayerSetAlliance(lv_enemyIter, c_allianceIdPower, lv_enemyPowerShareIter, true);
            }

        }
        libNtve_gf_SetAlliance(lv_enemyIter, gv_pLAYER_08_JINARA, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(lv_enemyIter, gv_pLAYER_09_AMONS_CHAMPION, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(lv_enemyIter, gv_pLAYER_10_ELEMENTAL, libNtve_ge_AllianceSetting_Neutral);
    }
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_08_JINARA, "CoopNPCPlayer", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_09_AMONS_CHAMPION, "CoopNPCPlayer", 1);
    auto4BE6DD64_g = lv_humanPlayersAndAllies;
    lv_humanIter = -1;
    while (true) {
        lv_humanIter = PlayerGroupNextPlayer(auto4BE6DD64_g, lv_humanIter);
        if (lv_humanIter < 0) { break; }
        libNtve_gf_SetAlliance(lv_humanIter, gv_pLAYER_08_JINARA, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(lv_humanIter, gv_pLAYER_09_AMONS_CHAMPION, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(lv_humanIter, gv_pLAYER_10_ELEMENTAL, libNtve_ge_AllianceSetting_Enemy);
    }
    libNtve_gf_SetAlliance(gv_pLAYER_08_JINARA, gv_pLAYER_09_AMONS_CHAMPION, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_08_JINARA, gv_pLAYER_10_ELEMENTAL, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_09_AMONS_CHAMPION, gv_pLAYER_10_ELEMENTAL, libNtve_ge_AllianceSetting_Neutral);
    libCOMI_gf_SetAlliedCommandersstartingResources();
    auto13887C1A_g = lv_enemyPlayers;
    lv_enemyIter = -1;
    while (true) {
        lv_enemyIter = PlayerGroupNextPlayer(auto13887C1A_g, lv_enemyIter);
        if (lv_enemyIter < 0) { break; }
        PlayerSetState(lv_enemyIter, c_playerStateFoodIgnored, true);
        PlayerModifyPropertyInt(lv_enemyIter, c_playerPropMinerals, c_playerPropOperSetTo, 1000);
        PlayerModifyPropertyInt(lv_enemyIter, c_playerPropVespene, c_playerPropOperSetTo, 1000);
        PlayerSetColorIndex(lv_enemyIter, libCOMI_gf_EnemyPlayerColor(), true);
        PlayerSetAlliance(lv_enemyIter, c_allianceIdSpend, gv_pLAYER_11_ANTAGONIST, false);
    }
    PlayerSetAlliance(gv_pLAYER_11_ANTAGONIST, c_allianceIdSpend, gv_pLAYER_11_ANTAGONIST, true);
    PlayerSetColorIndex(gv_pLAYER_01_USER, libCOMI_gf_HumanPlayerColor(gv_pLAYER_01_USER), true);
    PlayerSetColorIndex(gv_pLAYER_02_USER, libCOMI_gf_HumanPlayerColor(gv_pLAYER_02_USER), true);
    PlayerSetColorIndex(gv_pLAYER_08_JINARA, 1, true);
    PlayerSetColorIndex(gv_pLAYER_09_AMONS_CHAMPION, 1, true);
    PlayerSetColorIndex(gv_pLAYER_10_ELEMENTAL, libCOMI_gf_EnemyPlayerColor(), true);
    libNtve_gf_AddPlayerGroupToPlayerGroup(lv_enemyPlayers, gv_enemyPlayerGroup);
    PlayerScoreValueSetFromFixed(gv_pLAYER_01_USER, "SlaynPush", 0.0);
    PlayerScoreValueSetFromFixed(gv_pLAYER_02_USER, "SlaynPush", 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init04Technology, true, false);
    libCOOC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init06MusicSound, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    TriggerExecute(gt__3P_BeforeIntro, true, true);
    libCOMI_gf_PlayMapIntroZoom(true);
    TriggerExecute(gt__3P_AfterIntro, true, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init04Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Technology_Init () {
    gt_Init04Technology = TriggerCreate("gt_Init04Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7C2FE287_g;
    int auto7C2FE287_u;
    unit auto7C2FE287_var;
    unitgroup autoEB7E5006_g;
    int autoEB7E5006_u;
    unit autoEB7E5006_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(gv_jinara, c_unitPropMovementSpeed, 0.5);
    libNtve_gf_ChangeUnitDamage(gv_jinara, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetState(gv_jinara, c_unitStateTargetable, false);
    UnitSetState(gv_jinara, c_unitStateStatusBar, false);
    UnitSetState(gv_jinara, c_unitStateTurnSuppressed, false);
    libCOMI_gf_SetUnitInfoTextCampaign(gv_jinara, null, StringExternal("Param/Value/97C5B9D5"), null);
    UnitSetPropertyFixed(gv_amonsChampion, c_unitPropMovementSpeed, 0.75);
    libNtve_gf_ChangeUnitDamage(gv_amonsChampion, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetState(gv_amonsChampion, c_unitStateTargetable, false);
    UnitSetState(gv_amonsChampion, c_unitStateStatusBar, false);
    UnitSetState(gv_amonsChampion, c_unitStateTurnSuppressed, false);
    libCOMI_gf_SetUnitInfoTextCampaign(gv_amonsChampion, null, StringExternal("Param/Value/5C296AF0"), null);
    auto7C2FE287_g = UnitGroup("HighTemplar", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7C2FE287_u = UnitGroupCount(auto7C2FE287_g, c_unitCountAll);
    for (;; auto7C2FE287_u -= 1) {
        auto7C2FE287_var = UnitGroupUnitFromEnd(auto7C2FE287_g, auto7C2FE287_u);
        if (auto7C2FE287_var == null) { break; }
        UnitSetPropertyFixed(auto7C2FE287_var, c_unitPropEnergyPercent, 100.0);
    }
    UnitSetFacing(gv_tugOfWarEscortTargetUnit, 315.0, 0.0);
    UnitSetState(gv_tugOfWarEscortTargetUnit, c_unitStateTurnSuppressed, false);
    autoEB7E5006_g = UnitGroup("SlaynSwarmHostSpawnFlyer", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEB7E5006_u = UnitGroupCount(autoEB7E5006_g, c_unitCountAll);
    for (;; autoEB7E5006_u -= 1) {
        autoEB7E5006_var = UnitGroupUnitFromEnd(autoEB7E5006_g, autoEB7E5006_u);
        if (autoEB7E5006_var == null) { break; }
        UnitBehaviorAdd(autoEB7E5006_var, "CritterWanderLeash", autoEB7E5006_var, 1);
        UnitBehaviorAdd(autoEB7E5006_var, "Harmless", autoEB7E5006_var, 1);
        UnitBehaviorAdd(autoEB7E5006_var, "NoBiomassDrop", autoEB7E5006_var, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06MusicSound_Init () {
    gt_Init06MusicSound = TriggerCreate("gt_Init06MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoC7783B15_g;
    int autoC7783B15_var;

    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libCOMI_gf_AutoRevealRegionCoop(RegionFromId(1), RegionFromId(1), gv_pLAYER_08_JINARA);
    autoC7783B15_g = gv__3P_CommandersPG;
    autoC7783B15_var = -1;
    while (true) {
        autoC7783B15_var = PlayerGroupNextPlayer(autoC7783B15_g, autoC7783B15_var);
        if (autoC7783B15_var < 0) { break; }
        libCOMI_gf_AutoRevealRegionCoop(RegionFromId(1), RegionFromId(1), autoC7783B15_var);
    }
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(7), true, false);
    VisExploreArea(gv_pLAYER_02_USER, RegionFromId(7), true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_soloriteCocoonLife;
    fixed lv_elementalLife;
    int lv_stage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER) == 4)) {
        UnitRemove(UnitFromId(187));
    }

    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER) == 4)) {
        UnitRemove(UnitFromId(295));
    }

    gv_elementalMaxDisableCooldown = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 60.0, 60.0, 30.0, 15.0, 1.0, 1.0);
    lv_elementalLife = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 1500.0, 1500.0, 2500.0, 3500.0, 5000.0, 6000.0);
    CatalogFieldValueModify(c_gameCatalogUnit, "SlaynElemental", "LifeMax", gv_pLAYER_10_ELEMENTAL, FixedToString(lv_elementalLife, c_fixedPrecisionAny), c_upgradeOperationSet);
    CatalogFieldValueModify(c_gameCatalogUnit, "SlaynElemental", "LifeStart", gv_pLAYER_10_ELEMENTAL, FixedToString(lv_elementalLife, c_fixedPrecisionAny), c_upgradeOperationSet);
    lv_soloriteCocoonLife = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 25.0, 25.0, 50.0, 50.0, 200.0, 300.0);
    CatalogFieldValueModify(c_gameCatalogUnit, "SlaynElementalGrabGroundUnit", "LifeMax", gv_pLAYER_10_ELEMENTAL, FixedToString(lv_soloriteCocoonLife, c_fixedPrecisionAny), c_upgradeOperationSet);
    CatalogFieldValueModify(c_gameCatalogUnit, "SlaynElementalGrabGroundUnit", "LifeStart", gv_pLAYER_10_ELEMENTAL, FixedToString(lv_soloriteCocoonLife, c_fixedPrecisionAny), c_upgradeOperationSet);
    CatalogFieldValueModify(c_gameCatalogUnit, "SlaynElementalGrabAirUnit", "LifeMax", gv_pLAYER_10_ELEMENTAL, FixedToString(lv_soloriteCocoonLife, c_fixedPrecisionAny), c_upgradeOperationSet);
    CatalogFieldValueModify(c_gameCatalogUnit, "SlaynElementalGrabAirUnit", "LifeStart", gv_pLAYER_10_ELEMENTAL, FixedToString(lv_soloriteCocoonLife, c_fixedPrecisionAny), c_upgradeOperationSet);
    gv_tugOfWar_Presence_Check_Humans = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "PitAlarakShieldRegenAuraSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny);
    gv_tugOfWar_Presence_Check_EnemyAI = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "PitMalashShieldRegenAuraSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny);
    lv_stage = ge_HybridAttack_Attack01;
    gv_hybridPushTriggerSpacial[lv_stage] = RegionFromId(13);
    TimerStart(gv_hybridPushTriggerTemporal[lv_stage], (9.0 * 60.0), false, c_timeAI);
    gv_hybridPushTimeFailure[lv_stage] = (libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 5.0, 5.0, 4.0, 4.0, 2.0, 2.0) * 60.0);
    gv_hybridPush_DelayAttacks[lv_stage] = (libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0) * 60.0);
    lv_stage = ge_HybridAttack_Attack02;
    gv_hybridPushTriggerSpacial[lv_stage] = RegionFromId(15);
    TimerStart(gv_hybridPushTriggerTemporal[lv_stage], (15.0 * 60.0), false, c_timeAI);
    gv_hybridPushTimeFailure[lv_stage] = (libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 5.0, 5.0, 4.0, 4.0, 2.0, 2.0) * 60.0);
    gv_hybridPush_DelayAttacks[lv_stage] = (libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0) * 60.0);
    lv_stage = ge_HybridAttack_Attack03;
    gv_hybridPushTriggerSpacial[lv_stage] = RegionFromId(20);
    TimerStart(gv_hybridPushTriggerTemporal[lv_stage], (23.0 * 60.0), false, c_timeAI);
    gv_hybridPushTimeFailure[lv_stage] = (libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 7.0, 7.0, 5.0, 5.0, 2.0, 2.0) * 60.0);
    gv_hybridPush_DelayAttacks[lv_stage] = (libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0) * 60.0);
    lv_stage = ge_HybridAttack_Attack04;
    gv_hybridPushTriggerSpacial[lv_stage] = RegionFromId(21);
    TimerStart(gv_hybridPushTriggerTemporal[lv_stage], (30.0 * 60.0), false, c_timeAI);
    gv_hybridPushTimeFailure[lv_stage] = (libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 6.0, 6.0, 4.0, 4.0, 2.0, 2.0) * 60.0);
    gv_hybridPush_DelayAttacks[lv_stage] = (libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0) * 60.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sleep Inactive Units
//--------------------------------------------------------------------------------------------------
bool gt_SleepInactiveUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_placedUnits;
    unit lv_sleepyUnit;
    playergroup lv_sleepyOwners;
    int lv_sleepyPlayer;

    // Automatic Variable Declarations
    playergroup autoB956AB79_g;
    playergroup auto9D30DE47_g;
    unitgroup autoBF52A277_g;
    int autoBF52A277_u;

    // Variable Initialization
    lv_placedUnits = UnitGroupEmpty();
    lv_sleepyOwners = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(lv_sleepyOwners, gv_pLAYER_03_EnemyP01);
    PlayerGroupAdd(lv_sleepyOwners, gv_pLAYER_04_EnemyP02);
    PlayerGroupAdd(lv_sleepyOwners, gv_pLAYER_05_EnemyP01_TugOfWarPath);
    PlayerGroupAdd(lv_sleepyOwners, gv_pLAYER_06_EnemyP02_TugOfWarPath);
    autoB956AB79_g = lv_sleepyOwners;
    lv_sleepyPlayer = -1;
    while (true) {
        lv_sleepyPlayer = PlayerGroupNextPlayer(autoB956AB79_g, lv_sleepyPlayer);
        if (lv_sleepyPlayer < 0) { break; }
        UnitGroupAddUnitGroup(lv_placedUnits, UnitGroup(null, lv_sleepyPlayer, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    while (!((gv_gameHasBegun == true))) {
        Wait(1.0, c_timeGame);
    }
    auto9D30DE47_g = lv_sleepyOwners;
    lv_sleepyPlayer = -1;
    while (true) {
        lv_sleepyPlayer = PlayerGroupNextPlayer(auto9D30DE47_g, lv_sleepyPlayer);
        if (lv_sleepyPlayer < 0) { break; }
        if ((PlayerRace(lv_sleepyPlayer) == "Terr")) {
            Wait(30.0, c_timeAI);
            break;
        }

    }
    autoBF52A277_g = lv_placedUnits;
    autoBF52A277_u = UnitGroupCount(autoBF52A277_g, c_unitCountAll);
    for (;; autoBF52A277_u -= 1) {
        lv_sleepyUnit = UnitGroupUnitFromEnd(autoBF52A277_g, autoBF52A277_u);
        if (lv_sleepyUnit == null) { break; }
        libCOMI_gf_SleepWakeUpUnitCoop(lv_sleepyUnit, true, libCOMI_ge_SleepWakeUpExcludeOption_RespectExclusions);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SleepInactiveUnits_Init () {
    gt_SleepInactiveUnits = TriggerCreate("gt_SleepInactiveUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Load Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_SleepInactiveUnits, true, false);
    libCOMI_gf_LoadCoopMission("AC_SlaynPayload", gt_Init03LoadingComplete);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01LoadData_Init () {
    gt_Init01LoadData = TriggerCreate("gt_Init01LoadData_Func");
    TriggerAddEventMapInit(gt_Init01LoadData);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_tacticalAIUsers;

    // Automatic Variable Declarations
    playergroup autoC53A7D76_g;
    int autoC53A7D76_var;

    // Variable Initialization
    lv_tacticalAIUsers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_attackWaveTime, 86400.0, false, c_timeAI);
    libCOMI_gf_StartCoopAI(gv_pLAYER_03_EnemyP01, gv_pLAYER_01_USER);
    libCOMI_gf_StartCoopAI(gv_pLAYER_04_EnemyP02, gv_pLAYER_02_USER);
    libCOMI_gf_StartCoopMissionMechanicAI(gv_pLAYER_05_EnemyP01_TugOfWarPath, libCOMI_gv_cM_CoopAIPlayer_CommanderShared);
    libCOMI_gf_StartCoopMissionMechanicAI(gv_pLAYER_06_EnemyP02_TugOfWarPath, libCOMI_gv_cM_CoopAIPlayer_CommanderShared);
    AICampaignStart(gv_pLAYER_05_EnemyP01_TugOfWarPath);
    AICampaignStart(gv_pLAYER_06_EnemyP02_TugOfWarPath);
    PlayerGroupAdd(lv_tacticalAIUsers, gv_pLAYER_03_EnemyP01);
    PlayerGroupAdd(lv_tacticalAIUsers, gv_pLAYER_04_EnemyP02);
    PlayerGroupAdd(lv_tacticalAIUsers, gv_pLAYER_05_EnemyP01_TugOfWarPath);
    PlayerGroupAdd(lv_tacticalAIUsers, gv_pLAYER_06_EnemyP02_TugOfWarPath);
    autoC53A7D76_g = lv_tacticalAIUsers;
    autoC53A7D76_var = -1;
    while (true) {
        autoC53A7D76_var = PlayerGroupNextPlayer(autoC53A7D76_g, autoC53A7D76_var);
        if (autoC53A7D76_var < 0) { break; }
        libNtve_gf_SetTacticalAIThink(autoC53A7D76_var, "Diamondback", "AIDiamondback", false);
    }
    PlayerGroupAdd(gv_attackWavePlayers, gv_pLAYER_03_EnemyP01);
    PlayerGroupAdd(gv_attackWavePlayers, gv_pLAYER_04_EnemyP02);
    PlayerGroupAdd(gv_escortWavePlayers, gv_pLAYER_05_EnemyP01_TugOfWarPath);
    PlayerGroupAdd(gv_escortWavePlayers, gv_pLAYER_06_EnemyP02_TugOfWarPath);
    TriggerExecute(gt_SetupHybridPusherHybridTypes, true, false);
    TriggerExecute(gt_PickFirstAttackWaveTarget, true, false);
    TriggerExecute(gt_RunAIWaves, true, false);
    libCOMI_gf_EnableDisableCoopAIPlayerAttackPings(gv_escortWavePlayers, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoB56D340D_val;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameHasBegun = true;
    gf_RunTriggeratMissionTime((0.2 * 60.0), gt__3P_ObjectiveKillUnitsCreate);
    gf_RunTriggeratMissionTime((0.3 * 60.0), gt__3P_ObjectiveKillJinaraCreate);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/CF72EB02"), null, PointFromId(1559));
    UIAlertPoint("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/FDD624A4"), null, PointFromId(370));
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_01_USER);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_02_USER);
    TriggerExecute(gt_SetEffortValues, true, false);
    TriggerExecute(gt_RunBonusObjective, true, false);
    Wait(7.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt__3P_Revealrocksunitsinbetween, true, false);
    TriggerExecute(gt_ObjectiveKillAmonsChampionCreate, true, true);
    Wait(2.0, c_timeReal);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, PointFromId(882), StringExternal("Param/Value/03B914C3"));
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_ObjectiveJinaraMustSurviveCreate, true, true);
    TriggerExecute(gt_TugOfWarInitialize, true, false);
    Wait(2.0, c_timeReal);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    autoB56D340D_val = RandomInt(0, 2);
    if (autoB56D340D_val == 0) {
        gf__3P_SendMissionTransmission("Intro1CoA", true, -1);
        gf__3P_SendMissionTransmission("Intro1CoAP2", true, -1);
    }
    else if (autoB56D340D_val == 1) {
        gf__3P_SendMissionTransmission("Intro2CoA", true, -1);
        gf__3P_SendMissionTransmission("Intro2CoAP2", true, -1);
    }
    else {
        gf__3P_SendMissionTransmission("Intro3CoA", true, -1);
        gf__3P_SendMissionTransmission("Intro3CoAP2", true, -1);
    }
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Bonus Objective
//--------------------------------------------------------------------------------------------------
bool gt_RunBonusObjective_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RunTriggeratMissionTime((10.0 * 60.0), gt_SlaynElemental01Create);
    gf_RunTriggeratMissionTime((16.0 * 60.0), gt_SlaynElemental02bCreate);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunBonusObjective_Init () {
    gt_RunBonusObjective = TriggerCreate("gt_RunBonusObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Final Base Q
//--------------------------------------------------------------------------------------------------
bool gt_RevealFinalBaseQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/4380B61E"), null, RegionGetCenter(RegionFromId(17)));
    UIAlertPoint("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/FE574198"), null, RegionGetCenter(RegionFromId(17)));
    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), RegionGetCenter(RegionFromId(17)), 270.0, "PingAlert", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0);
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/404AFC41"));
    SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    gf__3P_SendMissionTransmission("NearVictoryCoA", true, -1);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealFinalBaseQ_Init () {
    gt_RevealFinalBaseQ = TriggerCreate("gt_RevealFinalBaseQ_Func");
    TriggerAddEventUnitRegion(gt_RevealFinalBaseQ, UnitRefFromVariable("gv_jinara"), RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Initialize
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarInitialize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto74A1F8EB_g;
    int auto74A1F8EB_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto74A1F8EB_g = libCOOC_gf_HumanPlayers();
    auto74A1F8EB_var = -1;
    while (true) {
        auto74A1F8EB_var = PlayerGroupNextPlayer(auto74A1F8EB_g, auto74A1F8EB_var);
        if (auto74A1F8EB_var < 0) { break; }
        VisExploreArea(auto74A1F8EB_var, RegionFromId(3), true, false);
        libCOMI_gf_SetAllianceCoop(auto74A1F8EB_var, gv_pLAYER_08_JINARA, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libCOMI_gf_SetAllianceCoop(auto74A1F8EB_var, gv_pLAYER_09_AMONS_CHAMPION, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    }
    gv_tugOfWar_ForwardWaypoint = 4;
    gv_tugOfWar_ReverseWaypoint = 2;
    libCOMI_gf_ShareVisionofUnitCoop(gv_jinara, true, gv_pLAYER_01_USER);
    libCOMI_gf_ShareVisionofUnitCoop(gv_jinara, true, gv_pLAYER_02_USER);
    libCOMI_gf_ShareVisionofUnitCoop(gv_jinara, true, gv_pLAYER_03_EnemyP01);
    libCOMI_gf_ShareVisionofUnitCoop(gv_jinara, true, gv_pLAYER_04_EnemyP02);
    libCOMI_gf_ShareVisionofUnitCoop(gv_jinara, true, gv_pLAYER_05_EnemyP01_TugOfWarPath);
    libCOMI_gf_ShareVisionofUnitCoop(gv_jinara, true, gv_pLAYER_06_EnemyP02_TugOfWarPath);
    UnitSetState(gv_tugOfWarBubbleUnit, c_unitStateTurnSuppressed, false);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_jinara), StringExternal("Param/Value/64995A61"));
    gv_tugOfWar_Ping = PingLastCreated();
    PingSetUnit(PingLastCreated(), gv_jinara);
    gv_tugOfWar_State = ge_TugOfWarState_Hold;
    TriggerExecute(gt_TugOfWarController, true, false);
    TriggerExecute(gt_TugOfWarJinaraAmonsChampionAttackLogic, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarInitialize_Init () {
    gt_TugOfWarInitialize = TriggerCreate("gt_TugOfWarInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Controller
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarController_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    string lv_tugOfWarPointName;
    int[2] lv_superPusherPings;

    // Automatic Variable Declarations
    int autoD6090633_val;

    // Variable Initialization
    lv_tugOfWarPointName = "PathWaypoint";
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_superPusherPings[init_i] = c_invalidPingId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(gt_TugOfWarStateUpdate, true, true);
        if ((gv_tugOfWar_ForwardWaypoint < gv_tugOfWar_WaypointMax) && (DistanceBetweenPoints(UnitGetPosition(gv_tugOfWarBubbleUnit), PointFromName((lv_tugOfWarPointName + gf_FormatIntegerIntoMultiDigitString(gv_tugOfWar_ForwardWaypoint, 1)))) <= 1.0)) {
            gv_tugOfWar_ForwardWaypoint += 1;
            gv_tugOfWar_ReverseWaypoint += 1;
        }
        else {
            if ((gv_tugOfWar_ReverseWaypoint > 0) && (DistanceBetweenPoints(UnitGetPosition(gv_tugOfWarBubbleUnit), PointFromName((lv_tugOfWarPointName + gf_FormatIntegerIntoMultiDigitString(gv_tugOfWar_ReverseWaypoint, 1)))) <= 1.0)) {
                gv_tugOfWar_ForwardWaypoint -= 1;
                gv_tugOfWar_ReverseWaypoint -= 1;
            }

        }
        if ((gv_tugOfWar_ForwardWaypoint >= gv_tugOfWar_Waypoint_FarthestForward)) {
            gv_tugOfWar_Waypoint_FarthestForward = gv_tugOfWar_ForwardWaypoint;
        }

        autoD6090633_val = gv_tugOfWar_State;
        if (autoD6090633_val == ge_TugOfWarState_Paused) {
            UnitIssueOrder(gv_tugOfWarBubbleUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }
        else if (autoD6090633_val == ge_TugOfWarState_Hold) {
            UnitIssueOrder(gv_tugOfWarBubbleUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }
        else if (autoD6090633_val == ge_TugOfWarState_Forward) {
            UnitIssueOrder(gv_tugOfWarBubbleUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName((lv_tugOfWarPointName + gf_FormatIntegerIntoMultiDigitString(gv_tugOfWar_ForwardWaypoint, 1)))), c_orderQueueReplace);
        }
        else if (autoD6090633_val == ge_TugOfWarState_Reverse) {
            UnitIssueOrder(gv_tugOfWarBubbleUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName((lv_tugOfWarPointName + gf_FormatIntegerIntoMultiDigitString(gv_tugOfWar_ReverseWaypoint, 1)))), c_orderQueueReplace);
        }
        else if (autoD6090633_val == ge_TugOfWarState_ReverseSuper) {
            UnitIssueOrder(gv_tugOfWarBubbleUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName((lv_tugOfWarPointName + gf_FormatIntegerIntoMultiDigitString(gv_tugOfWar_ReverseWaypoint, 1)))), c_orderQueueReplace);
        }
        else {
        }
        UnitIssueOrder(gv_jinara, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_tugOfWarBubbleUnit), 1.5, PointFromName(("PathWaypoint" + gf_FormatIntegerIntoMultiDigitString(gv_tugOfWar_ReverseWaypoint, 1))))), c_orderQueueReplace);
        UnitIssueOrder(gv_amonsChampion, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_tugOfWarBubbleUnit), 1.5, PointFromName(("PathWaypoint" + gf_FormatIntegerIntoMultiDigitString(gv_tugOfWar_ForwardWaypoint, 1))))), c_orderQueueReplace);
        libNtve_gf_MakeUnitFacePoint(gv_jinara, UnitGetPosition(gv_amonsChampion), 0.0);
        libNtve_gf_MakeUnitFacePoint(gv_amonsChampion, UnitGetPosition(gv_jinara), 0.0);
        TriggerExecute(gt_TugOfWarMoveBossTarget, true, false);
        if ((gv_tugOfWar_State == ge_TugOfWarState_Reverse)) {
            PingSetRotation(gv_tugOfWar_Ping, (UnitGetFacing(gv_jinara) + 180.0));
        }
        else {
            if ((gv_tugOfWar_State == ge_TugOfWarState_Forward)) {
                PingSetRotation(gv_tugOfWar_Ping, UnitGetFacing(gv_jinara));
            }
            else {
                PingSetRotation(gv_tugOfWar_Ping, 270.0);
            }
        }
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarController_Init () {
    gt_TugOfWarController = TriggerCreate("gt_TugOfWarController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War State Update
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarStateUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_friendlyUnitsNearTugOfWar;
    unitgroup lv_enemyUnitsNearTugOfWar;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_friendlyUnitsNearTugOfWar = UnitGroupEmpty();
    lv_enemyUnitsNearTugOfWar = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_tugOfWar_State != ge_TugOfWarState_Paused) && (gv_tugOfWar_State != ge_TugOfWarState_EventControlled)) {
        TriggerExecute(gt_TugOfWarHybridSuperPusher, true, true);
        if ((gv_hybridSuperPusherState_Current == false)) {
            gv_tugOfWar_Presence_P1 = !(libNtve_gf_UnitGroupIsDead(gf_GetSupportingUnitsNearJinara(gv_pLAYER_01_USER, 1)));
            gv_tugOfWar_Presence_P2 = !(libNtve_gf_UnitGroupIsDead(gf_GetSupportingUnitsNearJinara(gv_pLAYER_02_USER, 1)));
            gv_tugOfWar_Presence_EnemyAI = !(libNtve_gf_UnitGroupIsDead(gf_GetPushingUnitsNearAmonsChampion(1)));
            gv_tugOfWar_Presence_SuperPushers = false;
        }
        else {
            gv_tugOfWar_Presence_P1 = false;
            gv_tugOfWar_Presence_P2 = false;
            gv_tugOfWar_Presence_EnemyAI = false;
            gv_tugOfWar_Presence_SuperPushers = true;
        }
        if ((gv_tugOfWar_Presence_EnemyAI == false) && (gv_tugOfWar_Presence_SuperPushers == false) && (gv_tugOfWar_Presence_P1 == true) && (gv_tugOfWar_Presence_P2 == true)) {
            if ((gv_tugOfWar_State != ge_TugOfWarState_Forward)) {
                gv_tugOfWar_State = ge_TugOfWarState_Forward;
                PingSetModel(gv_tugOfWar_Ping, "PingArrow");
                PingSetColor(gv_tugOfWar_Ping, Color(0.00, 100.00, 0.00));
                PingSetTooltip(gv_tugOfWar_Ping, StringExternal("Param/Value/F1FA574E"));
                PingSetScale(gv_tugOfWar_Ping, 1.0);
                UnitSetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, gf_TugOfWarGetSpeed(gv_tugOfWar_State));
                UnitSetPropertyFixed(gv_jinara, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 1.5));
                UnitSetPropertyFixed(gv_amonsChampion, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 1.5));
                TimerPause(gv_losingGroundTimer01, true);
                TimerPause(gv_losingGroundTimer02, true);
                TriggerExecute(gt_StatForwardPushTime, true, false);
            }

        }
        else if ((gv_tugOfWar_Presence_EnemyAI == true) && (gv_tugOfWar_Presence_SuperPushers == false) && ((gv_tugOfWar_Presence_P1 == false) || (gv_tugOfWar_Presence_P2 == false))) {
            if ((gv_tugOfWar_State != ge_TugOfWarState_Reverse)) {
                gv_tugOfWar_State = ge_TugOfWarState_Reverse;
                PingSetModel(gv_tugOfWar_Ping, "PingArrow");
                PingSetColor(gv_tugOfWar_Ping, Color(100.00, 0.00, 0.00));
                PingSetTooltip(gv_tugOfWar_Ping, StringExternal("Param/Value/7110633D"));
                PingSetScale(gv_tugOfWar_Ping, 1.0);
                UnitSetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, gf_TugOfWarGetSpeed(gv_tugOfWar_State));
                UnitSetPropertyFixed(gv_jinara, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 1.5));
                UnitSetPropertyFixed(gv_amonsChampion, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 1.5));
                TimerStart(gv_losingGroundTimer01, 30.0, false, c_timeGame);
                TimerStart(gv_losingGroundTimer02, 60.0, false, c_timeGame);
                TriggerExecute(gt_StatPushBackDistance, true, false);
            }

        }
        else if ((gv_tugOfWar_Presence_SuperPushers == true)) {
            if ((gv_tugOfWar_State != ge_TugOfWarState_ReverseSuper)) {
                gv_tugOfWar_State = ge_TugOfWarState_ReverseSuper;
                PingSetModel(gv_tugOfWar_Ping, "PingWarning");
                PingSetColor(gv_tugOfWar_Ping, Color(100.00, 0.00, 0.00));
                PingSetTooltip(gv_tugOfWar_Ping, StringExternal("Param/Value/65756038"));
                PingSetScale(gv_tugOfWar_Ping, 1.0);
                UnitSetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, gf_TugOfWarGetSpeed(gv_tugOfWar_State));
                UnitSetPropertyFixed(gv_jinara, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 1.5));
                UnitSetPropertyFixed(gv_amonsChampion, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 1.5));
                TimerStart(gv_losingGroundTimer01, 30.0, false, c_timeGame);
                TimerStart(gv_losingGroundTimer02, 60.0, false, c_timeGame);
                TriggerExecute(gt_StatPushBackDistance, true, false);
            }

        }
        else if (true) {
            if ((gv_tugOfWar_State != ge_TugOfWarState_Hold)) {
                gv_tugOfWar_State = ge_TugOfWarState_Hold;
                PingSetModel(gv_tugOfWar_Ping, "PingCircleImportant");
                PingSetColor(gv_tugOfWar_Ping, Color(100.00, 100.00, 100.00));
                PingSetTooltip(gv_tugOfWar_Ping, StringExternal("Param/Value/4493EF8F"));
                PingSetScale(gv_tugOfWar_Ping, 0.33);
                UnitSetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, gf_TugOfWarGetSpeed(gv_tugOfWar_State));
                UnitSetPropertyFixed(gv_jinara, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 1.5));
                UnitSetPropertyFixed(gv_amonsChampion, c_unitPropMovementSpeed, (UnitGetPropertyFixed(gv_tugOfWarBubbleUnit, c_unitPropMovementSpeed, c_unitPropCurrent) * 1.5));
                TimerPause(gv_losingGroundTimer01, true);
                TimerPause(gv_losingGroundTimer02, true);
                TriggerExecute(gt_RemindertoSupportTransmissionQ, true, false);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarStateUpdate_Init () {
    gt_TugOfWarStateUpdate = TriggerCreate("gt_TugOfWarStateUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Move Boss Target
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarMoveBossTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_friendlyUnitsNearTugOfWar;
    point lv_escortTargetRestingLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_friendlyUnitsNearTugOfWar = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(lv_friendlyUnitsNearTugOfWar, gf_GetSupportingUnitsNearJinara(gv_pLAYER_01_USER, 0));
    UnitGroupAddUnitGroup(lv_friendlyUnitsNearTugOfWar, gf_GetSupportingUnitsNearJinara(gv_pLAYER_02_USER, 0));
    if ((UnitGroupCount(lv_friendlyUnitsNearTugOfWar, c_unitCountAlive) > 0)) {
        UnitIssueOrder(gv_tugOfWarEscortTargetUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGroupCenterOfGroup(lv_friendlyUnitsNearTugOfWar)), c_orderQueueReplace);
    }
    else if (true) {
        lv_escortTargetRestingLocation = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_amonsChampion), 6.0, PointFromName(("PathWaypoint" + gf_FormatIntegerIntoMultiDigitString(gv_tugOfWar_ForwardWaypoint, 1))));
        UnitIssueOrder(gv_tugOfWarEscortTargetUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_escortTargetRestingLocation), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarMoveBossTarget_Init () {
    gt_TugOfWarMoveBossTarget = TriggerCreate("gt_TugOfWarMoveBossTarget_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Ji'nara/Amon's Champion Attack Logic
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarJinaraAmonsChampionAttackLogic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoFCAF62D2_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((libCOMI_gf_GameIsOver() == false)) {
        if ((gv_tugOfWar_State != ge_TugOfWarState_ReverseSuper)) {
            autoFCAF62D2_val = RandomInt(1, 3);
            if (autoFCAF62D2_val == 1) {
                UnitIssueOrder(gv_jinara, Order(AbilityCommand("PitAlarakFightDummyAbilityCancel", 0)), c_orderQueueReplace);
                UnitIssueOrder(gv_amonsChampion, Order(AbilityCommand("PitMalashFightDummyAbilityCancel", 0)), c_orderQueueReplace);
                Wait(0.5, c_timeGame);
                UnitIssueOrder(gv_jinara, OrderTargetingUnit(AbilityCommand("PitAlarakFightDummyAbility", 0), gv_amonsChampion), c_orderQueueReplace);
                Wait(RandomFixed(1.5, 3.0), c_timeGame);
            }
            else if (autoFCAF62D2_val == 2) {
                UnitIssueOrder(gv_jinara, Order(AbilityCommand("PitAlarakFightDummyAbilityCancel", 0)), c_orderQueueReplace);
                UnitIssueOrder(gv_amonsChampion, Order(AbilityCommand("PitMalashFightDummyAbilityCancel", 0)), c_orderQueueReplace);
                Wait(0.5, c_timeGame);
                UnitIssueOrder(gv_amonsChampion, OrderTargetingUnit(AbilityCommand("PitMalashFightDummyAbility", 0), gv_jinara), c_orderQueueReplace);
                Wait(RandomFixed(1.5, 3.0), c_timeGame);
            }
            else if (autoFCAF62D2_val == 3) {
                UnitIssueOrder(gv_jinara, Order(AbilityCommand("PitAlarakFightDummyAbilityCancel", 0)), c_orderQueueReplace);
                UnitIssueOrder(gv_amonsChampion, Order(AbilityCommand("PitMalashFightDummyAbilityCancel", 0)), c_orderQueueReplace);
                Wait(0.5, c_timeGame);
                if ((gv_tugOfWar_State == ge_TugOfWarState_Forward)) {
                    UnitIssueOrder(gv_jinara, OrderTargetingUnit(AbilityCommand("PitAlarakFightDummyAbility", 0), gv_amonsChampion), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(gv_amonsChampion, OrderTargetingUnit(AbilityCommand("PitMalashFightDummyAbility", 0), gv_jinara), c_orderQueueReplace);
                }
                Wait(RandomFixed(1.5, 3.0), c_timeGame);
            }
            else {
            }
        }
        else {
            UnitIssueOrder(gv_jinara, Order(AbilityCommand("PitAlarakFightDummyAbilityCancel", 0)), c_orderQueueReplace);
            UnitIssueOrder(gv_amonsChampion, Order(AbilityCommand("PitMalashFightDummyAbilityCancel", 0)), c_orderQueueReplace);
            Wait(0.5, c_timeGame);
            UnitIssueOrder(gv_amonsChampion, OrderTargetingUnit(AbilityCommand("PitMalashFightDummyAbility", 0), gv_jinara), c_orderQueueReplace);
            Wait(RandomFixed(1.5, 3.0), c_timeGame);
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarJinaraAmonsChampionAttackLogic_Init () {
    gt_TugOfWarJinaraAmonsChampionAttackLogic = TriggerCreate("gt_TugOfWarJinaraAmonsChampionAttackLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War First Time Player At Tug Of War Q
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarFirstTimePlayerAtTugOfWarQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player01Assists;
    int lv_player02Assists;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player01Assists = UnitGroupCount(gf_GetSupportingUnitsNearJinara(gv_pLAYER_01_USER, 0), c_unitCountAlive);
    lv_player02Assists = UnitGroupCount(gf_GetSupportingUnitsNearJinara(gv_pLAYER_02_USER, 0), c_unitCountAlive);
    if ((lv_player01Assists == 0) && (lv_player02Assists == 0)) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_jinara), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    lv_player01Assists = UnitGroupCount(gf_GetSupportingUnitsNearJinara(gv_pLAYER_01_USER, 0), c_unitCountAlive);
    lv_player02Assists = UnitGroupCount(gf_GetSupportingUnitsNearJinara(gv_pLAYER_02_USER, 0), c_unitCountAlive);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    if (((lv_player01Assists == 0) || (lv_player02Assists == 0))) {
        gf__3P_SendMissionTransmission("OneSupportCoA", false, -1);
        libCOMI_gf_WaitForMissionTransmission();
    }
    else {
        gf__3P_SendMissionTransmission("BothSupportCoA", true, -1);
    }
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarFirstTimePlayerAtTugOfWarQ_Init () {
    gt_TugOfWarFirstTimePlayerAtTugOfWarQ = TriggerCreate("gt_TugOfWarFirstTimePlayerAtTugOfWarQ_Func");
    TriggerAddEventTimePeriodic(gt_TugOfWarFirstTimePlayerAtTugOfWarQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War First Time Enemy At Tug Of War Q
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarFirstTimeEnemyAtTugOfWarQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_announcerLineCooldown) <= 0.0))) {
            return false;
        }

        if (!((UnitGroupCount(gf_GetPushingUnitsNearAmonsChampion(1), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((UnitGroupCount(gf_GetSupportingUnitsNearJinara(gv_pLAYER_01_USER, 1), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitGroupCount(gf_GetSupportingUnitsNearJinara(gv_pLAYER_02_USER, 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F751B7D8"), null, UnitGetPosition(gv_jinara));
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_jinara), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    gf__3P_SendMissionTransmission("EnemySupportCoA", true, -1);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    TriggerQueueExit();
    Wait(90.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarFirstTimeEnemyAtTugOfWarQ_Init () {
    gt_TugOfWarFirstTimeEnemyAtTugOfWarQ = TriggerCreate("gt_TugOfWarFirstTimeEnemyAtTugOfWarQ_Func");
    TriggerAddEventTimePeriodic(gt_TugOfWarFirstTimeEnemyAtTugOfWarQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Losing Ground 01 Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarLosingGround01WarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_tugOfWar_ReverseWaypoint > 1))) {
            return false;
        }

        if (!((gv_tugOfWar_State == ge_TugOfWarState_Reverse))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/62C4A983"), null, UnitGetPosition(gv_jinara));
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_jinara), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HalfDefeatCoA", true, -1);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    TriggerQueueExit();
    if ((gv_tugOfWarLosingGround01Count == 4)) {
        gv_tugOfWarLosingGround01Count = 1;
    }
    else {
        gv_tugOfWarLosingGround01Count += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarLosingGround01WarningQ_Init () {
    gt_TugOfWarLosingGround01WarningQ = TriggerCreate("gt_TugOfWarLosingGround01WarningQ_Func");
    TriggerAddEventTimer(gt_TugOfWarLosingGround01WarningQ, gv_losingGroundTimer01);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Losing Ground 02 Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarLosingGround02WarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_tugOfWar_ReverseWaypoint > 1))) {
            return false;
        }

        if (!((gv_tugOfWar_State == ge_TugOfWarState_Reverse))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/8A7C289C"), null, UnitGetPosition(gv_jinara));
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_jinara), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_tugOfWar_ReverseWaypoint <= 5)) {
        libCOMI_gf_SendMissionTransmission("NearDefeatCoA", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("HalfDefeatCoA", true, -1);
    }
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    TriggerQueueExit();
    if ((gv_tugOfWarLosingGround02Count == 3)) {
        gv_tugOfWarLosingGround02Count = 1;
    }
    else {
        gv_tugOfWarLosingGround02Count += 1;
    }
    TimerStart(gv_losingGroundTimer02, 60.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarLosingGround02WarningQ_Init () {
    gt_TugOfWarLosingGround02WarningQ = TriggerCreate("gt_TugOfWarLosingGround02WarningQ_Func");
    TriggerAddEventTimer(gt_TugOfWarLosingGround02WarningQ, gv_losingGroundTimer02);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Defeat Imminent Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarDefeatImminentWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_tugOfWar_State == ge_TugOfWarState_Reverse))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/23913464"), null, UnitGetPosition(gv_jinara));
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_jinara), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("FinalDefeatCoA", true, -1);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    TriggerQueueExit();
    Wait(50.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarDefeatImminentWarningQ_Init () {
    gt_TugOfWarDefeatImminentWarningQ = TriggerCreate("gt_TugOfWarDefeatImminentWarningQ_Func");
    TriggerAddEventUnitRegion(gt_TugOfWarDefeatImminentWarningQ, UnitRefFromVariable("gv_jinara"), RegionFromId(34), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Victory Imminent Q
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarVictoryImminentQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_tugOfWar_State == ge_TugOfWarState_Forward))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("FinalVictoryCoA", true, -1);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarVictoryImminentQ_Init () {
    gt_TugOfWarVictoryImminentQ = TriggerCreate("gt_TugOfWarVictoryImminentQ_Func");
    TriggerAddEventUnitRegion(gt_TugOfWarVictoryImminentQ, UnitRefFromVariable("gv_amonsChampion"), RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Forces Destroyed Watcher
//--------------------------------------------------------------------------------------------------
bool gt_ForcesDestroyedWatcher_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(UnitGetPosition(gv_tugOfWarBubbleUnit), gv_tugOfWar_Presence_Check_Humans)) == true))) {
            return false;
        }

        if (!((libNtve_gf_KillingUnit() != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true) && (PlayerGroupHasPlayer(gv_enemyPlayerGroup, UnitGetOwner(libNtve_gf_KillingUnit())) == true) && (UnitGroupCount(gf_GetSupportingUnitsNearJinara(gv_pLAYER_01_USER, 0), c_unitCountAlive) == 0) && (UnitGroupCount(gf_GetSupportingUnitsNearJinara(gv_pLAYER_02_USER, 0), c_unitCountAlive) == 0)) {
        TriggerExecute(gt_ForcesDestroyedPlayerTransmissionQ, true, false);
    }
    else if ((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(libNtve_gf_KillingUnit())) == true) && (PlayerGroupHasPlayer(gv_enemyPlayerGroup, UnitGetOwner(EventUnit())) == true) && (UnitGroupCount(gf_GetPushingUnitsNearAmonsChampion(0), c_unitCountAlive) == 0)) {
        TriggerExecute(gt_ForcesDestroyedEnemyTransmissionQ, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForcesDestroyedWatcher_Init () {
    gt_ForcesDestroyedWatcher = TriggerCreate("gt_ForcesDestroyedWatcher_Func");
    TriggerAddEventUnitDied(gt_ForcesDestroyedWatcher, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Forces Destroyed Player Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_ForcesDestroyedPlayerTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentMissionTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == false))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_announcerLineCooldown) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_currentMissionTime = GameGetMissionTime();
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_currentMissionTime) > gv_c_SkipIfNotPlayedIn)) {
        return true;
    }

    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    gf__3P_SendMissionTransmission("SupportDeadCoA", true, -1);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    TriggerQueueExit();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForcesDestroyedPlayerTransmissionQ_Init () {
    gt_ForcesDestroyedPlayerTransmissionQ = TriggerCreate("gt_ForcesDestroyedPlayerTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Forces Destroyed Enemy Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_ForcesDestroyedEnemyTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentMissionTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == false))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_announcerLineCooldown) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_currentMissionTime = GameGetMissionTime();
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_currentMissionTime) > gv_c_SkipIfNotPlayedIn)) {
        return true;
    }

    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    gf__3P_SendMissionTransmission("EnemySupportDeadCoA", true, -1);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    TriggerQueueExit();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForcesDestroyedEnemyTransmissionQ_Init () {
    gt_ForcesDestroyedEnemyTransmissionQ = TriggerCreate("gt_ForcesDestroyedEnemyTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reminder to Support Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_RemindertoSupportTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(gv_reminderToSupportTimer, 90.0, false, c_timeGame);
    while ((TimerGetRemaining(gv_reminderToSupportTimer) > 0.0)) {
        if ((gv_tugOfWar_State != ge_TugOfWarState_Hold)) {
            TriggerEnable(TriggerGetCurrent(), true);
            return true;
        }
        else {
            Wait(0.5, c_timeGame);
        }
    }
    if ((TimerGetRemaining(gv_announcerLineCooldown) <= 0.0)) {
        TriggerQueueEnter();
        libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
        gf__3P_SendMissionTransmission("NoSupportCoA", true, -1);
        libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
        TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
        TriggerQueueExit();
    }

    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemindertoSupportTransmissionQ_Init () {
    gt_RemindertoSupportTransmissionQ = TriggerCreate("gt_RemindertoSupportTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Hybrid Super Pusher
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarHybridSuperPusher_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_hybridBullyingJinara;
    unitgroup lv_hybridInPlay;

    // Automatic Variable Declarations
    unitgroup auto73BCC87A_g;
    int auto73BCC87A_u;
    unit auto73BCC87A_var;

    // Variable Initialization
    lv_hybridBullyingJinara = UnitGroupEmpty();
    lv_hybridInPlay = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hybridSuperPusherState_Current = false;
    lv_hybridInPlay = gv_hybridSuperPushers;
    auto73BCC87A_g = lv_hybridInPlay;
    auto73BCC87A_u = UnitGroupCount(auto73BCC87A_g, c_unitCountAll);
    for (;; auto73BCC87A_u -= 1) {
        auto73BCC87A_var = UnitGroupUnitFromEnd(auto73BCC87A_g, auto73BCC87A_u);
        if (auto73BCC87A_var == null) { break; }
        if ((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(auto73BCC87A_var)) == false)) {
            if ((gf_HybridcanSuperPush(auto73BCC87A_var) == true)) {
                gv_hybridSuperPusherState_Current = true;
                UnitGroupAdd(lv_hybridBullyingJinara, auto73BCC87A_var);
                UnitBehaviorAdd(auto73BCC87A_var, "PitMalashShieldRegen", gv_amonsChampion, 1);
            }

        }
        else {
            UnitGroupRemove(lv_hybridInPlay, auto73BCC87A_var);
        }
    }
    if ((gv_hybridSuperPusherState_Current != gv_hybridSuperPusherState_Previous)) {
        if ((gv_hybridSuperPusherState_Current == false)) {
            UnitAbilityEnable(gv_jinara, "PitAlarakFightDummyAbility", true);
            UnitBehaviorAddPlayer(gv_jinara, "PitAlarakShieldRegenAura", UnitGetOwner(gv_jinara), 1);
            UnitKill(gv_hybridSuperPusherFX);
        }
        else {
            UnitBehaviorRemovePlayer(gv_jinara, "PitAlarakShieldRegenAura", UnitGetOwner(gv_jinara), 1);
            UnitAbilityEnable(gv_jinara, "PitAlarakFightDummyAbility", false);
            TriggerExecute(gt_TugOfWarHybridSappingStrengthQ, true, false);
            if ((UnitIsAlive(gv_hybridSuperPusherFX) == false)) {
                UnitCreate(1, "DuelBubbleUnit", 0, 0, UnitGetPosition(gv_tugOfWarBubbleUnit), 270.0);
                gv_hybridSuperPusherFX = UnitLastCreated();
                gf_HybridSuperPusherFXLogic(gv_hybridSuperPusherFX);
            }

        }
    }

    if ((gv_hybridSuperPusherState_Current == false)) {
        UnitBehaviorRemove(gv_amonsChampion, "Angry", 1);
    }
    else {
        UnitBehaviorAdd(gv_amonsChampion, "Angry", gv_amonsChampion, 1);
    }
    gv_hybridSuperPusherState_Previous = gv_hybridSuperPusherState_Current;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarHybridSuperPusher_Init () {
    gt_TugOfWarHybridSuperPusher = TriggerCreate("gt_TugOfWarHybridSuperPusher_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tug Of War Hybrid Sapping Strength Q
//--------------------------------------------------------------------------------------------------
bool gt_TugOfWarHybridSappingStrengthQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClearAll();
    TriggerQueueEnter();
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HybridSupportCoA", true, -1);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    TriggerQueueExit();
    Wait(45.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TugOfWarHybridSappingStrengthQ_Init () {
    gt_TugOfWarHybridSappingStrengthQ = TriggerCreate("gt_TugOfWarHybridSappingStrengthQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slayn Elemental 01 Create
//--------------------------------------------------------------------------------------------------
bool gt_SlaynElemental01Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PointSetFacing(PointFromId(43), AngleBetweenPoints(PointFromId(43), PointFromId(935)));
    libNtve_gf_CreateUnitsAtPoint2(1, "SlaynElemental", 0, gv_pLAYER_10_ELEMENTAL, PointFromId(43));
    gv_slaynElemental01 = UnitLastCreated();
    gf_RunSlaynElementalAI(gv_slaynElemental01, RegionFromId(5), 9);
    TriggerQueueEnter();
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(gv_slaynElemental01), StringExternal("Param/Value/C1AED07B"));
    PingSetUnit(PingLastCreated(), gv_slaynElemental01);
    libHots_gf_StorePingForUnit(gv_slaynElemental01, 1, PingLastCreated());
    TriggerExecute(gt_ObjectiveKillSlaynElementalsCreate, true, false);
    Wait(2.0, c_timeGame);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    gf__3P_SendMissionTransmission("BonusObjectiveCoA", true, -1);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlaynElemental01Create_Init () {
    gt_SlaynElemental01Create = TriggerCreate("gt_SlaynElemental01Create_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slayn Elemental 02a Create
//--------------------------------------------------------------------------------------------------
bool gt_SlaynElemental02aCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PointSetFacing(PointFromId(60), AngleBetweenPoints(PointFromId(60), PointFromId(71)));
    libNtve_gf_CreateUnitsAtPoint2(1, "SlaynElemental", 0, gv_pLAYER_10_ELEMENTAL, PointFromId(60));
    gv_slaynElemental02a = UnitLastCreated();
    gf_RunSlaynElementalAI(gv_slaynElemental02a, RegionFromId(16), 9);
    TriggerQueueEnter();
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(gv_slaynElemental02a), StringExternal("Param/Value/12974173"));
    PingSetUnit(PingLastCreated(), gv_slaynElemental02a);
    libHots_gf_StorePingForUnit(gv_slaynElemental02a, 1, PingLastCreated());
    TriggerExecute(gt_ObjectiveKillSlaynElementalsCreate02, true, false);
    Wait(2.0, c_timeGame);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    gf__3P_SendMissionTransmission("BonusNewCoA", true, -1);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlaynElemental02aCreate_Init () {
    gt_SlaynElemental02aCreate = TriggerCreate("gt_SlaynElemental02aCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slayn Elemental 02b Create
//--------------------------------------------------------------------------------------------------
bool gt_SlaynElemental02bCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PointSetFacing(PointFromId(46), AngleBetweenPoints(PointFromId(46), PointFromId(937)));
    libNtve_gf_CreateUnitsAtPoint2(1, "SlaynElemental", 0, gv_pLAYER_10_ELEMENTAL, PointFromId(46));
    gv_slaynElemental02b = UnitLastCreated();
    gf_RunSlaynElementalAI(gv_slaynElemental02b, RegionFromId(33), 9);
    TriggerQueueEnter();
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(gv_slaynElemental02b), StringExternal("Param/Value/EF069200"));
    PingSetUnit(PingLastCreated(), gv_slaynElemental02b);
    libHots_gf_StorePingForUnit(gv_slaynElemental02b, 1, PingLastCreated());
    TriggerExecute(gt_ObjectiveKillSlaynElementalsCreate02, true, false);
    Wait(2.0, c_timeGame);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    gf__3P_SendMissionTransmission("BonusNewCoA", true, -1);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlaynElemental02bCreate_Init () {
    gt_SlaynElemental02bCreate = TriggerCreate("gt_SlaynElemental02bCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Critter Dies
//--------------------------------------------------------------------------------------------------
bool gt_CritterDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_triggeringUnitPoint;
    point lv_spawnLocation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SlaynSwarmHostSpawnFlyer"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringUnitPoint = UnitGetPosition(EventUnit());
    Wait(RandomFixed(5.0, 20.0), c_timeGame);
    if ((RegionContainsPoint(RegionFromId(5), lv_triggeringUnitPoint) == true)) {
        lv_spawnLocation = RegionRandomPoint(RegionFromId(8));
    }
    else if ((RegionContainsPoint(RegionFromId(16), lv_triggeringUnitPoint) == true)) {
        lv_spawnLocation = RegionRandomPoint(RegionFromId(6));
    }
    else if ((RegionContainsPoint(RegionFromId(33), lv_triggeringUnitPoint) == true)) {
        lv_spawnLocation = RegionRandomPoint(RegionFromId(11));
    }
    else if (true) {
        return true;
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SlaynSwarmHostSpawnFlyer", 0, 0, lv_spawnLocation);
    UnitBehaviorAdd(UnitLastCreated(), "CritterWanderLeash", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "NoBiomassDrop", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "Harmless", UnitLastCreated(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CritterDies_Init () {
    gt_CritterDies = TriggerCreate("gt_CritterDies_Func");
    TriggerAddEventUnitDied(gt_CritterDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slayn Elemental Cocoon Q
//--------------------------------------------------------------------------------------------------
bool gt_SlaynElementalCocoonQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentMissionTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_announcerLineCooldown) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_currentMissionTime = GameGetMissionTime();
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_currentMissionTime) > gv_c_SkipIfNotPlayedIn)) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    gf__3P_SendMissionTransmission("BonusWarningCoA", true, -1);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlaynElementalCocoonQ_Init () {
    gt_SlaynElementalCocoonQ = TriggerCreate("gt_SlaynElementalCocoonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slayn Elemental Escapes Q
//--------------------------------------------------------------------------------------------------
bool gt_SlaynElementalEscapesQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentMissionTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_announcerLineCooldown) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentMissionTime = GameGetMissionTime();
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_currentMissionTime) > gv_c_SkipIfNotPlayedIn)) {
        return true;
    }

    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    gf__3P_SendMissionTransmission("BonusExpiredCoA", true, -1);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    TriggerQueueExit();
    Wait(90.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlaynElementalEscapesQ_Init () {
    gt_SlaynElementalEscapesQ = TriggerCreate("gt_SlaynElementalEscapesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slayn Elemental Going to Escape Q
//--------------------------------------------------------------------------------------------------
bool gt_SlaynElementalGoingtoEscapeQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentMissionTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_announcerLineCooldown) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentMissionTime = GameGetMissionTime();
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_currentMissionTime) > gv_c_SkipIfNotPlayedIn)) {
        return true;
    }

    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    gf__3P_SendMissionTransmission("BonusReminderCoA", true, -1);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    TriggerQueueExit();
    Wait(180.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlaynElementalGoingtoEscapeQ_Init () {
    gt_SlaynElementalGoingtoEscapeQ = TriggerCreate("gt_SlaynElementalGoingtoEscapeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slayn Elemental Killed First Q
//--------------------------------------------------------------------------------------------------
bool gt_SlaynElementalKilledFirstQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentMissionTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentMissionTime = GameGetMissionTime();
    TriggerQueueEnter();
    if (((libCOMI_gf_GameIsOver() == true) || ((GameGetMissionTime() - lv_currentMissionTime) > gv_c_SkipIfNotPlayedIn))) {
        return true;
    }

    TriggerQueueEnter();
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    gf__3P_SendMissionTransmission("BonusTwoDownCoA", true, -1);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlaynElementalKilledFirstQ_Init () {
    gt_SlaynElementalKilledFirstQ = TriggerCreate("gt_SlaynElementalKilledFirstQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slayn Elemental Killed Last Q
//--------------------------------------------------------------------------------------------------
bool gt_SlaynElementalKilledLastQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentMissionTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentMissionTime = GameGetMissionTime();
    TriggerQueueEnter();
    if (((libCOMI_gf_GameIsOver() == true) || ((GameGetMissionTime() - lv_currentMissionTime) > gv_c_SkipIfNotPlayedIn))) {
        return true;
    }

    TriggerQueueEnter();
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    gf__3P_SendMissionTransmission("BonusCompleteCoA", true, -1);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlaynElementalKilledLastQ_Init () {
    gt_SlaynElementalKilledLastQ = TriggerCreate("gt_SlaynElementalKilledLastQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pick First Attack Wave Target
//--------------------------------------------------------------------------------------------------
bool gt_PickFirstAttackWaveTarget_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER), 0, 1, 2, 3, 4, 5) == libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER), 0, 1, 2, 3, 4, 5))) {
        if ((RandomInt(0, 1) == 1)) {
            gv_attackWave_Player01First = false;
        }
        else {
            gv_attackWave_Player01First = true;
        }
    }
    else {
        if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER), 0, 1, 2, 3, 4, 5) > libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER), 0, 1, 2, 3, 4, 5))) {
            gv_attackWave_Player01First = true;
        }
        else {
            gv_attackWave_Player01First = false;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickFirstAttackWaveTarget_Init () {
    gt_PickFirstAttackWaveTarget = TriggerCreate("gt_PickFirstAttackWaveTarget_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run AI Waves
//--------------------------------------------------------------------------------------------------
bool gt_RunAIWaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_modOffseter;

    // Automatic Variable Declarations
    const int auto10B2F2AD_n = 100;
    int auto10B2F2AD_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AttackWaveatTime((7.5 * 60.0), gt_AttackWave01SingleWave);
    gf_AttackWaveatTime((11.0 * 60.0), gt_AttackWave02SingleWave);
    gf_AttackWaveatTime((14.0 * 60.0), gt_AttackWave03SingleWave);
    gf_AttackWaveatTime((16.5 * 60.0), gt_AttackWave04SingleWave);
    gf_AttackWaveatTime((19.0 * 60.0), gt_AttackWave05DoubleWave);
    gf_AttackWaveatTime((21.0 * 60.0), gt_AttackWave05DoubleWave);
    gf_AttackWaveatTime((23.0 * 60.0), gt_AttackWave06DoubleWave);
    gf_AttackWaveatTime((25.0 * 60.0), gt_AttackWave06DoubleWave);
    gf_AttackWaveatTime((27.0 * 60.0), gt_AttackWave07DoubleWave);
    gf_AttackWaveatTime((29.0 * 60.0), gt_AttackWave07DoubleWave);
    for (auto10B2F2AD_i = 1; auto10B2F2AD_i <= auto10B2F2AD_n; auto10B2F2AD_i += 1) {
        lv_modOffseter = (lv_modOffseter + 10.0);
        gf_AttackWaveatTime(((19.0 + lv_modOffseter) * 60.0), gt_AttackWave05DoubleWave);
        gf_AttackWaveatTime(((21.0 + lv_modOffseter) * 60.0), gt_AttackWave05DoubleWave);
        gf_AttackWaveatTime(((23.0 + lv_modOffseter) * 60.0), gt_AttackWave06DoubleWave);
        gf_AttackWaveatTime(((25.0 + lv_modOffseter) * 60.0), gt_AttackWave06DoubleWave);
        gf_AttackWaveatTime(((27.0 + lv_modOffseter) * 60.0), gt_AttackWave07DoubleWave);
        gf_AttackWaveatTime(((29.0 + lv_modOffseter) * 60.0), gt_AttackWave07DoubleWave);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunAIWaves_Init () {
    gt_RunAIWaves = TriggerCreate("gt_RunAIWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_EscortWaveTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((gv_tugOfWar_State == ge_TugOfWarState_Hold) || (gv_tugOfWar_State == ge_TugOfWarState_Forward)))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_announcerLineCooldown) <= 0.0))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_tugOfWarBubbleUnit), 13.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    gf__3P_SendMissionTransmission("EnemySupportIncCoA", true, -1);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_announcerLineCooldown, gv_c_AnnouncerLineCooldown_Amount, false, c_timeReal);
    TriggerQueueExit();
    Wait(120.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWaveTransmissionQ_Init () {
    gt_EscortWaveTransmissionQ = TriggerCreate("gt_EscortWaveTransmissionQ_Func");
    TriggerAddEventPlayerAIWave(gt_EscortWaveTransmissionQ, gv_pLAYER_05_EnemyP01_TugOfWarPath);
    TriggerAddEventPlayerAIWave(gt_EscortWaveTransmissionQ, gv_pLAYER_06_EnemyP02_TugOfWarPath);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 0, 0, 0, 0) != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave01_Init () {
    gt_EscortWave01 = TriggerCreate("gt_EscortWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave02_Init () {
    gt_EscortWave02 = TriggerCreate("gt_EscortWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave03_Init () {
    gt_EscortWave03 = TriggerCreate("gt_EscortWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave04_Init () {
    gt_EscortWave04 = TriggerCreate("gt_EscortWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave05_Init () {
    gt_EscortWave05 = TriggerCreate("gt_EscortWave05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 06
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave06_Init () {
    gt_EscortWave06 = TriggerCreate("gt_EscortWave06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 07
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave07_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave07_Init () {
    gt_EscortWave07 = TriggerCreate("gt_EscortWave07_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 08
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave08_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave08_Init () {
    gt_EscortWave08 = TriggerCreate("gt_EscortWave08_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 09
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave09_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave09_Init () {
    gt_EscortWave09 = TriggerCreate("gt_EscortWave09_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 10
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave10_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave10_Init () {
    gt_EscortWave10 = TriggerCreate("gt_EscortWave10_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 11
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave11_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave11_Init () {
    gt_EscortWave11 = TriggerCreate("gt_EscortWave11_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 12
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave12_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave12_Init () {
    gt_EscortWave12 = TriggerCreate("gt_EscortWave12_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 13
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave13_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave13_Init () {
    gt_EscortWave13 = TriggerCreate("gt_EscortWave13_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 14
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave14_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave14_Init () {
    gt_EscortWave14 = TriggerCreate("gt_EscortWave14_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 15
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave15_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave15_Init () {
    gt_EscortWave15 = TriggerCreate("gt_EscortWave15_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 16
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave16_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave16_Init () {
    gt_EscortWave16 = TriggerCreate("gt_EscortWave16_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 17
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave17_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave17_Init () {
    gt_EscortWave17 = TriggerCreate("gt_EscortWave17_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 18
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave18_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave18_Init () {
    gt_EscortWave18 = TriggerCreate("gt_EscortWave18_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 19
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave19_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave19_Init () {
    gt_EscortWave19 = TriggerCreate("gt_EscortWave19_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 20
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave20_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave20_Init () {
    gt_EscortWave20 = TriggerCreate("gt_EscortWave20_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 21
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave21_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave21_Init () {
    gt_EscortWave21 = TriggerCreate("gt_EscortWave21_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 22
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave22_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave22_Init () {
    gt_EscortWave22 = TriggerCreate("gt_EscortWave22_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Wave 23
//--------------------------------------------------------------------------------------------------
bool gt_EscortWave23_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_warpInRegion = gf_GetEscortWarpInRegion();
    gf_EscortWaveSend(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWave23_Init () {
    gt_EscortWave23 = TriggerCreate("gt_EscortWave23_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    gf__3P_SendMissionTransmission("AttackWave", true, -1);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(45.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveTransmissionQ_Init () {
    gt_AttackWaveTransmissionQ = TriggerCreate("gt_AttackWaveTransmissionQ_Func");
    TriggerAddEventPlayerAIWave(gt_AttackWaveTransmissionQ, gv_pLAYER_03_EnemyP01);
    TriggerAddEventPlayerAIWave(gt_AttackWaveTransmissionQ, gv_pLAYER_04_EnemyP02);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01 - Single Wave
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01SingleWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    if ((gv_attackWave_Player01First == true)) {
        lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(31));
    }
    else {
        lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(30));
    }
    gf_SendSingleTargetDoubleWave(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave01SingleWave_Init () {
    gt_AttackWave01SingleWave = TriggerCreate("gt_AttackWave01SingleWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 02 - Single Wave
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave02SingleWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    if ((gv_attackWave_Player01First == false)) {
        lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(31));
    }
    else {
        lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(30));
    }
    gf_SendSingleTargetDoubleWave(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave02SingleWave_Init () {
    gt_AttackWave02SingleWave = TriggerCreate("gt_AttackWave02SingleWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 03 - Single Wave
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave03SingleWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    if ((gv_attackWave_Player01First == true)) {
        lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(31));
    }
    else {
        lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(30));
    }
    gf_SendSingleTargetDoubleWave(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave03SingleWave_Init () {
    gt_AttackWave03SingleWave = TriggerCreate("gt_AttackWave03SingleWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 04 - Single Wave
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave04SingleWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    if ((gv_attackWave_Player01First == false)) {
        lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(31));
    }
    else {
        lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(30));
    }
    gf_SendSingleTargetDoubleWave(lv_waveTechLevel, lv_waveResourceAmount, lv_warpInRegion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave04SingleWave_Init () {
    gt_AttackWave04SingleWave = TriggerCreate("gt_AttackWave04SingleWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05 - Double Wave
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave05DoubleWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;
    bool lv_west;
    int lv_playerGroupIter;
    int lv_playerIter;
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    const int auto7831139D_ae = 2;
    const int auto7831139D_ai = 1;

    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    if ((RandomInt(0, 100) > 50)) {
        lv_west = true;
    }

    lv_playerGroupIter = 1;
    for ( ; ( (auto7831139D_ai >= 0 && lv_playerGroupIter <= auto7831139D_ae) || (auto7831139D_ai < 0 && lv_playerGroupIter >= auto7831139D_ae) ) ; lv_playerGroupIter += auto7831139D_ai ) {
        if ((lv_west == true)) {
            lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(31));
        }
        else {
            lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(30));
        }
        lv_playerIter = PlayerGroupPlayer(gv_attackWavePlayers, lv_playerGroupIter);
        AIAttackWaveSetTargetPoint(lv_playerIter, gf_AttackWaveDestination(lv_playerIter));
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lv_playerIter, c_playerAny, lv_waveResourceAmount, lv_waveTechLevel, RegionGetCenter(lv_warpInRegion), false);
        UnitGroupAddUnitGroup(lv_attackGroup, libCOMI_gf_LastCreatedCoopAttackForce());
    }
    gf__3P_CreateHeroes(RegionGetCenter(lv_warpInRegion), gv_pLAYER_03_EnemyP01);
    UnitGroupAddUnitGroup(lv_attackGroup, gv__3P_LastCreatedHeroes);
    gf__3P_SetupAttackWave(lv_attackGroup);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave05DoubleWave_Init () {
    gt_AttackWave05DoubleWave = TriggerCreate("gt_AttackWave05DoubleWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 06 - Double Wave
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave06DoubleWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;
    bool lv_west;
    int lv_playerGroupIter;
    int lv_playerIter;
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    const int auto5801965B_ae = 2;
    const int auto5801965B_ai = 1;

    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    if ((RandomInt(0, 100) > 50)) {
        lv_west = true;
    }

    lv_playerGroupIter = 1;
    for ( ; ( (auto5801965B_ai >= 0 && lv_playerGroupIter <= auto5801965B_ae) || (auto5801965B_ai < 0 && lv_playerGroupIter >= auto5801965B_ae) ) ; lv_playerGroupIter += auto5801965B_ai ) {
        if ((lv_west == true)) {
            lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(31));
        }
        else {
            lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(30));
        }
        lv_playerIter = PlayerGroupPlayer(gv_attackWavePlayers, lv_playerGroupIter);
        AIAttackWaveSetTargetPoint(lv_playerIter, gf_AttackWaveDestination(lv_playerIter));
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lv_playerIter, c_playerAny, lv_waveResourceAmount, lv_waveTechLevel, RegionGetCenter(lv_warpInRegion), false);
        UnitGroupAddUnitGroup(lv_attackGroup, libCOMI_gf_LastCreatedCoopAttackForce());
    }
    gf__3P_CreateHeroes(RegionGetCenter(lv_warpInRegion), gv_pLAYER_03_EnemyP01);
    UnitGroupAddUnitGroup(lv_attackGroup, gv__3P_LastCreatedHeroes);
    gf__3P_SetupAttackWave(lv_attackGroup);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave06DoubleWave_Init () {
    gt_AttackWave06DoubleWave = TriggerCreate("gt_AttackWave06DoubleWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 07 - Double Wave
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave07DoubleWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTechLevel;
    int lv_waveResourceAmount;
    region lv_warpInRegion;
    bool lv_west;
    int lv_playerGroupIter;
    int lv_playerIter;
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    const int auto5BA57EE2_ae = 2;
    const int auto5BA57EE2_ai = 1;

    // Variable Initialization
    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveTechLevel = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    lv_waveResourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    if ((RandomInt(0, 100) > 50)) {
        lv_west = true;
    }

    lv_playerGroupIter = 1;
    for ( ; ( (auto5BA57EE2_ai >= 0 && lv_playerGroupIter <= auto5BA57EE2_ae) || (auto5BA57EE2_ai < 0 && lv_playerGroupIter >= auto5BA57EE2_ae) ) ; lv_playerGroupIter += auto5BA57EE2_ai ) {
        if ((lv_west == true)) {
            lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(31));
        }
        else {
            lv_warpInRegion = gf_GetAttackWarpInRegion(RegionFromId(30));
        }
        lv_playerIter = PlayerGroupPlayer(gv_attackWavePlayers, lv_playerGroupIter);
        AIAttackWaveSetTargetPoint(lv_playerIter, gf_AttackWaveDestination(lv_playerIter));
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lv_playerIter, c_playerAny, lv_waveResourceAmount, lv_waveTechLevel, RegionGetCenter(lv_warpInRegion), false);
        UnitGroupAddUnitGroup(lv_attackGroup, libCOMI_gf_LastCreatedCoopAttackForce());
    }
    gf__3P_CreateHeroes(RegionGetCenter(lv_warpInRegion), gv_pLAYER_03_EnemyP01);
    UnitGroupAddUnitGroup(lv_attackGroup, gv__3P_LastCreatedHeroes);
    gf__3P_SetupAttackWave(lv_attackGroup);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave07DoubleWave_Init () {
    gt_AttackWave07DoubleWave = TriggerCreate("gt_AttackWave07DoubleWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Hybrid Pusher Hybrid Types
//--------------------------------------------------------------------------------------------------
bool gt_SetupHybridPusherHybridTypes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stage;

    // Automatic Variable Declarations
    int auto998DE1B1_val;
    int autoD68F5A68_val;
    int autoB329551F_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (true) {
    }

    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_05_EnemyP01_TugOfWarPath), 0, 1, 2, 3, 4, 5) > libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_06_EnemyP02_TugOfWarPath), 0, 1, 2, 3, 4, 5))) {
        gv_hybridPusherPlayer = gv_pLAYER_05_EnemyP01_TugOfWarPath;
    }
    else {
        gv_hybridPusherPlayer = gv_pLAYER_06_EnemyP02_TugOfWarPath;
    }
    if ((RandomFixed(0.0, 1.0) <= 0.33)) {
        if ((gv_options_Boss == 1)) {
            gv_hybridPusher_Boss = "HybridDominatorVoid";
        }

        if ((gv_options_Enforcer1 == 1)) {
            gv_hybridPusher_Enforcer01 = "HybridReaver";
        }

    }
    else {
        if ((gv_options_Boss == 1)) {
            gv_hybridPusher_Boss = "HybridBehemoth";
        }

        if ((gv_options_Enforcer1 == 1)) {
            gv_hybridPusher_Enforcer01 = "HybridDestroyer";
        }

    }
    if ((gv_options_Boss != 1)) {
        auto998DE1B1_val = gv_options_Boss;
        if (auto998DE1B1_val == 2) {
            gv_hybridPusher_Boss = "HybridBehemoth";
        }
        else {
            gv_hybridPusher_Boss = "HybridDominatorVoid";
        }
    }

    if ((gv_options_Enforcer1 != 1)) {
        autoD68F5A68_val = gv_options_Boss;
        if (autoD68F5A68_val == 2) {
            gv_hybridPusher_Enforcer01 = "HybridReaver";
        }
        else if (autoD68F5A68_val == 3) {
            gv_hybridPusher_Enforcer01 = "HybridDestroyer";
        }
        else {
            gv_hybridPusher_Enforcer01 = "HybridNemesis";
        }
    }

    autoB329551F_val = RandomInt(0, 2);
    if (autoB329551F_val == 0) {
        gv_hybridPusher_Enforcer02 = gv_hybridPusher_Enforcer01;
    }
    else if (autoB329551F_val == 1) {
        gv_hybridPusher_Enforcer02 = "HybridNemesis";
    }
    else {
        gv_hybridPusher_Enforcer01 = "HybridNemesis";
        gv_hybridPusher_Enforcer02 = "HybridNemesis";
    }
    TriggerExecute(gt_RunHybridPushers, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupHybridPusherHybridTypes_Init () {
    gt_SetupHybridPusherHybridTypes = TriggerCreate("gt_SetupHybridPusherHybridTypes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Hybrid Pushers
//--------------------------------------------------------------------------------------------------
bool gt_RunHybridPushers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!(((TimerGetRemaining(gv_hybridPushTriggerTemporal[ge_HybridAttack_Attack01]) <= 0.0) || (libNtve_gf_UnitInRegion(gv_tugOfWarBubbleUnit, gv_hybridPushTriggerSpacial[ge_HybridAttack_Attack01]) == true)))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_HybridPushers01, true, true);
    while (!(((TimerGetRemaining(gv_hybridPushTriggerTemporal[ge_HybridAttack_Attack02]) <= 0.0) || (libNtve_gf_UnitInRegion(gv_tugOfWarBubbleUnit, gv_hybridPushTriggerSpacial[ge_HybridAttack_Attack02]) == true)))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_HybridPushers02, true, true);
    while (!(((TimerGetRemaining(gv_hybridPushTriggerTemporal[ge_HybridAttack_Attack03]) <= 0.0) || (libNtve_gf_UnitInRegion(gv_tugOfWarBubbleUnit, gv_hybridPushTriggerSpacial[ge_HybridAttack_Attack03]) == true)))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_HybridPushers03, true, true);
    while (!(((TimerGetRemaining(gv_hybridPushTriggerTemporal[ge_HybridAttack_Attack04]) <= 0.0) || (libNtve_gf_UnitInRegion(gv_tugOfWarBubbleUnit, gv_hybridPushTriggerSpacial[ge_HybridAttack_Attack04]) == true)))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_HybridPushers04, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunHybridPushers_Init () {
    gt_RunHybridPushers = TriggerCreate("gt_RunHybridPushers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Pushers 01
//--------------------------------------------------------------------------------------------------
bool gt_HybridPushers01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_channelWave;
    point lv_spawnLocation;
    int lv_stage;
    unitgroup lv_hybridBodyGuards;
    unit lv_bossHybrid;
    fixed lv_bodyguardPos_BaseDistance;
    fixed lv_bodyguardPos_AngleSpacing;
    fixed lv_bodyguardPos_GuardsPerRow;
    unitgroup lv_hybridFrontRow;
    unitgroup lv_hybridBackRow;
    unitgroup lv_hybridBossRow;
    unitgroup lv_enemyTargets;
    int lv_enemyTargetsCount_Prev;
    unit lv_pusherBlockCenter;

    // Automatic Variable Declarations
    unitgroup auto0C48B6A8_g;
    int auto0C48B6A8_u;
    unit auto0C48B6A8_var;

    // Variable Initialization
    lv_channelWave = UnitGroupEmpty();
    lv_hybridBodyGuards = UnitGroupEmpty();
    lv_hybridFrontRow = UnitGroupEmpty();
    lv_hybridBackRow = UnitGroupEmpty();
    lv_hybridBossRow = UnitGroupEmpty();
    lv_enemyTargets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DelayAttackandEscortWaves(gv_hybridPush_DelayAttacks[lv_stage]);
    lv_stage = ge_HybridAttack_Attack01;
    gv_hybridReverseSpeed = ((gf_DistanceToFailurefromPoint(RegionGetCenter(gv_hybridPushTriggerSpacial[lv_stage]))-(libNtve_gf_WidthOfRegion(gv_hybridPushTriggerSpacial[lv_stage]) * 0.5)) / gv_hybridPushTimeFailure[lv_stage]);
    lv_spawnLocation = PointFromId(496);
    lv_channelWave = gf_CreateHybridPusherGroup(lv_stage, lv_spawnLocation);
    gf__3P_HybridPushersSetUp(lv_channelWave);
    auto0C48B6A8_g = lv_channelWave;
    auto0C48B6A8_u = UnitGroupCount(auto0C48B6A8_g, c_unitCountAll);
    for (;; auto0C48B6A8_u -= 1) {
        auto0C48B6A8_var = UnitGroupUnitFromEnd(auto0C48B6A8_g, auto0C48B6A8_u);
        if (auto0C48B6A8_var == null) { break; }
        gf_CreateWarpInEffect(auto0C48B6A8_var);
    }
    gf_PingHybridSuperPushers(lv_channelWave);
    gf_PushersInfluencePings(lv_channelWave);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_hybridPusherPlayer, gv_hybridPusherPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, PointFromId(229), true);
    lv_hybridBodyGuards = libCOMI_gf_LastCreatedCoopAttackForce();
    gf__3P_HybridBodyguardsSetup(lv_hybridBodyGuards);
    Wait(10.0, c_timeAI);
    UnitCreate(1, "InvisibleEscortFlying", c_unitCreateIgnorePlacement, gv_hybridPusherPlayer, lv_spawnLocation, PointGetFacing(lv_spawnLocation));
    lv_pusherBlockCenter = UnitLastCreated();
    UnitSetState(lv_pusherBlockCenter, c_unitStateTurnSuppressed, false);
    Wait(4.0, c_timeAI);
    if ((UnitGroupCount(lv_channelWave, c_unitCountAlive) == 0)) {
        return true;
    }

    AIAttackWaveSetTargetEscort(gv_hybridPusherPlayer, libNtve_gf_ConvertUnitToUnitGroup(lv_pusherBlockCenter), 0);
    if ((gv_hybridPusher_Boss == "HybridBehemoth")) {
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridReaver", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridBackRow, UnitGroupFilter("HybridDestroyer", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridBackRow, UnitGroupFilter("HybridNemesis", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else {
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridReaver", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridDestroyer", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridNemesis", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    lv_hybridBossRow = UnitGroupFilter(gv_hybridPusher_Boss, gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_hybridBossRow, c_unitCountAlive) > 0)) {
        gf_AssignGuardLocations(lv_pusherBlockCenter, UnitGroupFilter(gv_hybridPusher_Boss, gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 2.0, (360 / UnitGroupCount(lv_hybridBossRow, c_unitCountAlive)), UnitGroupCount(lv_hybridBossRow, c_unitCountAlive));
    }

    lv_bodyguardPos_BaseDistance = 4.0;
    lv_bodyguardPos_AngleSpacing = 15.0;
    lv_bodyguardPos_GuardsPerRow = UnitGroupCount(lv_hybridFrontRow, c_unitCountAlive);
    gf_AssignGuardLocations(lv_pusherBlockCenter, lv_hybridFrontRow, lv_bodyguardPos_BaseDistance, lv_bodyguardPos_AngleSpacing, lv_bodyguardPos_GuardsPerRow);
    lv_bodyguardPos_BaseDistance = -5.0;
    lv_bodyguardPos_AngleSpacing = 15.0;
    lv_bodyguardPos_GuardsPerRow = UnitGroupCount(lv_hybridBackRow, c_unitCountAlive);
    gf_AssignGuardLocations(lv_pusherBlockCenter, lv_hybridBackRow, lv_bodyguardPos_BaseDistance, lv_bodyguardPos_AngleSpacing, lv_bodyguardPos_GuardsPerRow);
    if ((UnitGroupCount(lv_hybridFrontRow, c_unitCountAlive) == 0)) {
        lv_bodyguardPos_BaseDistance = 2.0;
    }
    else {
        lv_bodyguardPos_BaseDistance = 4.0;
    }
    if ((UnitGroupCount(lv_hybridBodyGuards, c_unitCountAlive) != 0)) {
        lv_bodyguardPos_GuardsPerRow = SquareRoot(UnitGroupCount(lv_hybridBodyGuards, c_unitCountAlive));
        lv_bodyguardPos_AngleSpacing = (60.0 / lv_bodyguardPos_GuardsPerRow);
    }

    gf_AssignGuardLocations(lv_pusherBlockCenter, lv_hybridBodyGuards, lv_bodyguardPos_BaseDistance, lv_bodyguardPos_AngleSpacing, lv_bodyguardPos_GuardsPerRow);
    AIAttackWaveSend(gv_hybridPusherPlayer, 0, false);
    while ((libCOMI_gf_GameIsOver() == false) && (UnitGroupCount(lv_channelWave, c_unitCountAlive) > 0)) {
        lv_enemyTargets = UnitGroupAlliance(gv_hybridPusherPlayer, c_unitAllianceEnemy, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_enemyTargets, c_unitCountAlive) > 0)) {
            UnitIssueOrder(lv_pusherBlockCenter, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_enemyTargets, lv_spawnLocation))), c_orderQueueReplace);
        }
        else {
            if ((UnitGroupCount(lv_enemyTargets, c_unitCountAlive) != lv_enemyTargetsCount_Prev)) {
                UnitIssueOrder(lv_pusherBlockCenter, OrderTargetingPoint(AbilityCommand("move", 0), lv_spawnLocation), c_orderQueueReplace);
            }

        }
        lv_enemyTargetsCount_Prev = UnitGroupCount(lv_enemyTargets, c_unitCountAlive);
        Wait(1.0, c_timeAI);
    }
    UnitRemove(lv_pusherBlockCenter);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridPushers01_Init () {
    gt_HybridPushers01 = TriggerCreate("gt_HybridPushers01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Pushers 02
//--------------------------------------------------------------------------------------------------
bool gt_HybridPushers02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stage;
    unitgroup lv_channelWave;
    point lv_spawnLocation;
    unitgroup lv_hybridBodyGuards;
    fixed lv_bodyguardPos_BaseDistance;
    fixed lv_bodyguardPos_AngleSpacing;
    fixed lv_bodyguardPos_GuardsPerRow;
    unitgroup lv_hybridFrontRow;
    unitgroup lv_hybridBackRow;
    unitgroup lv_hybridBossRow;
    unitgroup lv_enemyTargets;
    int lv_enemyTargetsCount_Prev;
    unit lv_pusherBlockCenter;

    // Automatic Variable Declarations
    unitgroup auto00EA946C_g;
    int auto00EA946C_u;
    unit auto00EA946C_var;

    // Variable Initialization
    lv_channelWave = UnitGroupEmpty();
    lv_hybridBodyGuards = UnitGroupEmpty();
    lv_hybridFrontRow = UnitGroupEmpty();
    lv_hybridBackRow = UnitGroupEmpty();
    lv_hybridBossRow = UnitGroupEmpty();
    lv_enemyTargets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DelayAttackandEscortWaves(gv_hybridPush_DelayAttacks[lv_stage]);
    lv_stage = ge_HybridAttack_Attack02;
    gv_hybridReverseSpeed = ((gf_DistanceToFailurefromPoint(RegionGetCenter(gv_hybridPushTriggerSpacial[lv_stage]))-(libNtve_gf_WidthOfRegion(gv_hybridPushTriggerSpacial[lv_stage]) * 0.5)) / gv_hybridPushTimeFailure[lv_stage]);
    lv_spawnLocation = PointFromId(498);
    lv_channelWave = gf_CreateHybridPusherGroup(lv_stage, lv_spawnLocation);
    gf__3P_HybridPushersSetUp(lv_channelWave);
    auto00EA946C_g = lv_channelWave;
    auto00EA946C_u = UnitGroupCount(auto00EA946C_g, c_unitCountAll);
    for (;; auto00EA946C_u -= 1) {
        auto00EA946C_var = UnitGroupUnitFromEnd(auto00EA946C_g, auto00EA946C_u);
        if (auto00EA946C_var == null) { break; }
        gf_CreateWarpInEffect(auto00EA946C_var);
    }
    gf_PingHybridSuperPushers(lv_channelWave);
    gf_PushersInfluencePings(lv_channelWave);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_hybridPusherPlayer, gv_hybridPusherPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, lv_spawnLocation, true);
    lv_hybridBodyGuards = libCOMI_gf_LastCreatedCoopAttackForce();
    gf__3P_HybridBodyguardsSetup(lv_hybridBodyGuards);
    Wait(10.0, c_timeAI);
    UnitCreate(1, "InvisibleEscortFlying", c_unitCreateIgnorePlacement, gv_hybridPusherPlayer, lv_spawnLocation, PointGetFacing(lv_spawnLocation));
    lv_pusherBlockCenter = UnitLastCreated();
    UnitSetState(lv_pusherBlockCenter, c_unitStateTurnSuppressed, false);
    Wait(4.0, c_timeAI);
    if ((UnitGroupCount(lv_channelWave, c_unitCountAlive) == 0)) {
        return true;
    }

    AIAttackWaveSetTargetEscort(gv_hybridPusherPlayer, libNtve_gf_ConvertUnitToUnitGroup(lv_pusherBlockCenter), 0);
    if ((gv_hybridPusher_Boss == "HybridBehemoth")) {
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridReaver", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridBackRow, UnitGroupFilter("HybridDestroyer", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridBackRow, UnitGroupFilter("HybridNemesis", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else {
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridReaver", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridDestroyer", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridNemesis", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    lv_hybridBossRow = UnitGroupFilter(gv_hybridPusher_Boss, gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_hybridBossRow, c_unitCountAlive) > 0)) {
        gf_AssignGuardLocations(lv_pusherBlockCenter, UnitGroupFilter(gv_hybridPusher_Boss, gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 2.0, (360 / UnitGroupCount(lv_hybridBossRow, c_unitCountAlive)), UnitGroupCount(lv_hybridBossRow, c_unitCountAlive));
    }

    lv_bodyguardPos_BaseDistance = 4.0;
    lv_bodyguardPos_AngleSpacing = 15.0;
    lv_bodyguardPos_GuardsPerRow = UnitGroupCount(lv_hybridFrontRow, c_unitCountAlive);
    gf_AssignGuardLocations(lv_pusherBlockCenter, lv_hybridFrontRow, lv_bodyguardPos_BaseDistance, lv_bodyguardPos_AngleSpacing, lv_bodyguardPos_GuardsPerRow);
    lv_bodyguardPos_BaseDistance = -5.0;
    lv_bodyguardPos_AngleSpacing = 15.0;
    lv_bodyguardPos_GuardsPerRow = UnitGroupCount(lv_hybridBackRow, c_unitCountAlive);
    gf_AssignGuardLocations(lv_pusherBlockCenter, lv_hybridBackRow, lv_bodyguardPos_BaseDistance, lv_bodyguardPos_AngleSpacing, lv_bodyguardPos_GuardsPerRow);
    if ((UnitGroupCount(lv_hybridFrontRow, c_unitCountAlive) == 0)) {
        lv_bodyguardPos_BaseDistance = 3.0;
    }
    else {
        lv_bodyguardPos_BaseDistance = 5.0;
    }
    if ((UnitGroupCount(lv_hybridBodyGuards, c_unitCountAlive) != 0)) {
        lv_bodyguardPos_GuardsPerRow = SquareRoot(UnitGroupCount(lv_hybridBodyGuards, c_unitCountAlive));
        lv_bodyguardPos_AngleSpacing = (75.0 / lv_bodyguardPos_GuardsPerRow);
    }

    gf_AssignGuardLocations(lv_pusherBlockCenter, lv_hybridBodyGuards, lv_bodyguardPos_BaseDistance, lv_bodyguardPos_AngleSpacing, lv_bodyguardPos_GuardsPerRow);
    AIAttackWaveSend(gv_hybridPusherPlayer, 0, false);
    while ((libCOMI_gf_GameIsOver() == false) && (UnitGroupCount(lv_channelWave, c_unitCountAlive) > 0)) {
        lv_enemyTargets = UnitGroupAlliance(gv_hybridPusherPlayer, c_unitAllianceEnemy, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_enemyTargets, c_unitCountAlive) > 0)) {
            UnitIssueOrder(lv_pusherBlockCenter, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_enemyTargets, lv_spawnLocation))), c_orderQueueReplace);
        }
        else {
            if ((UnitGroupCount(lv_enemyTargets, c_unitCountAlive) != lv_enemyTargetsCount_Prev)) {
                UnitIssueOrder(lv_pusherBlockCenter, OrderTargetingPoint(AbilityCommand("move", 0), lv_spawnLocation), c_orderQueueReplace);
            }

        }
        lv_enemyTargetsCount_Prev = UnitGroupCount(lv_enemyTargets, c_unitCountAlive);
        Wait(1.0, c_timeAI);
    }
    UnitRemove(lv_pusherBlockCenter);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridPushers02_Init () {
    gt_HybridPushers02 = TriggerCreate("gt_HybridPushers02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Pushers 03
//--------------------------------------------------------------------------------------------------
bool gt_HybridPushers03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_channelWave;
    point lv_spawnLocation;
    int lv_stage;
    unitgroup lv_hybridBodyGuards;
    unit lv_pusherBlockCenter;
    int lv_bodyGuardIter;
    fixed lv_bodyguardPos_Distance;
    fixed lv_bodyguardPos_AngleOffset;
    fixed lv_bodyguardPos_BaseDistance;
    fixed lv_bodyguardPos_AngleSpacing;
    fixed lv_bodyguardPos_GuardsPerRow;
    unitgroup lv_hybridFrontRow;
    unitgroup lv_hybridBackRow;
    unitgroup lv_hybridBossRow;
    unitgroup lv_enemyTargets;
    int lv_enemyTargetsCount_Prev;
    wave lv_escortWave;

    // Automatic Variable Declarations
    unitgroup auto5D3B1015_g;
    int auto5D3B1015_u;
    unit auto5D3B1015_var;

    // Variable Initialization
    lv_channelWave = UnitGroupEmpty();
    lv_hybridBodyGuards = UnitGroupEmpty();
    lv_hybridFrontRow = UnitGroupEmpty();
    lv_hybridBackRow = UnitGroupEmpty();
    lv_hybridBossRow = UnitGroupEmpty();
    lv_enemyTargets = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_DelayAttackandEscortWaves(gv_hybridPush_DelayAttacks[lv_stage]);
    lv_stage = ge_HybridAttack_Attack03;
    gv_hybridReverseSpeed = ((gf_DistanceToFailurefromPoint(RegionGetCenter(gv_hybridPushTriggerSpacial[lv_stage]))-(libNtve_gf_WidthOfRegion(gv_hybridPushTriggerSpacial[lv_stage]) * 0.5)) / gv_hybridPushTimeFailure[lv_stage]);
    lv_spawnLocation = PointFromId(500);
    lv_channelWave = gf_CreateHybridPusherGroup(lv_stage, lv_spawnLocation);
    gf__3P_HybridPushersSetUp(lv_channelWave);
    auto5D3B1015_g = lv_channelWave;
    auto5D3B1015_u = UnitGroupCount(auto5D3B1015_g, c_unitCountAll);
    for (;; auto5D3B1015_u -= 1) {
        auto5D3B1015_var = UnitGroupUnitFromEnd(auto5D3B1015_g, auto5D3B1015_u);
        if (auto5D3B1015_var == null) { break; }
        gf_CreateWarpInEffect(auto5D3B1015_var);
    }
    gf_PingHybridSuperPushers(lv_channelWave);
    gf_PushersInfluencePings(lv_channelWave);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_hybridPusherPlayer, gv_hybridPusherPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, lv_spawnLocation, true);
    lv_hybridBodyGuards = libCOMI_gf_LastCreatedCoopAttackForce();
    gf__3P_HybridBodyguardsSetup(lv_hybridBodyGuards);
    UnitCreate(1, "InvisibleEscortFlying", c_unitCreateIgnorePlacement, gv_hybridPusherPlayer, PointFromId(500), PointGetFacing(PointFromId(500)));
    lv_pusherBlockCenter = UnitLastCreated();
    UnitSetState(lv_pusherBlockCenter, c_unitStateTurnSuppressed, false);
    Wait(4.0, c_timeAI);
    if ((UnitGroupCount(lv_channelWave, c_unitCountAlive) == 0)) {
        return true;
    }

    AIAttackWaveSetTargetEscort(gv_hybridPusherPlayer, libNtve_gf_ConvertUnitToUnitGroup(lv_pusherBlockCenter), 0);
    if ((gv_hybridPusher_Boss == "HybridBehemoth")) {
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridReaver", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridBackRow, UnitGroupFilter("HybridDestroyer", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridBackRow, UnitGroupFilter("HybridNemesis", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else {
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridReaver", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridDestroyer", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_hybridFrontRow, UnitGroupFilter("HybridNemesis", gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    lv_hybridBossRow = UnitGroupFilter(gv_hybridPusher_Boss, gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_hybridBossRow, c_unitCountAlive) > 0)) {
        gf_AssignGuardLocations(lv_pusherBlockCenter, UnitGroupFilter(gv_hybridPusher_Boss, gv_hybridPusherPlayer, lv_channelWave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 2.0, (360 / UnitGroupCount(lv_hybridBossRow, c_unitCountAlive)), UnitGroupCount(lv_hybridBossRow, c_unitCountAlive));
    }

    lv_bodyguardPos_BaseDistance = 4.0;
    lv_bodyguardPos_AngleSpacing = 15.0;
    lv_bodyguardPos_GuardsPerRow = UnitGroupCount(lv_hybridFrontRow, c_unitCountAlive);
    gf_AssignGuardLocations(lv_pusherBlockCenter, lv_hybridFrontRow, lv_bodyguardPos_BaseDistance, lv_bodyguardPos_AngleSpacing, lv_bodyguardPos_GuardsPerRow);
    lv_bodyguardPos_BaseDistance = -5.0;
    lv_bodyguardPos_AngleSpacing = 15.0;
    lv_bodyguardPos_GuardsPerRow = UnitGroupCount(lv_hybridBackRow, c_unitCountAlive);
    gf_AssignGuardLocations(lv_pusherBlockCenter, lv_hybridBackRow, lv_bodyguardPos_BaseDistance, lv_bodyguardPos_AngleSpacing, lv_bodyguardPos_GuardsPerRow);
    if ((UnitGroupCount(lv_hybridFrontRow, c_unitCountAlive) == 0)) {
        lv_bodyguardPos_BaseDistance = 3.0;
    }
    else {
        lv_bodyguardPos_BaseDistance = 5.0;
    }
    if ((UnitGroupCount(lv_hybridBodyGuards, c_unitCountAlive) != 0)) {
        lv_bodyguardPos_GuardsPerRow = SquareRoot(UnitGroupCount(lv_hybridBodyGuards, c_unitCountAlive));
        lv_bodyguardPos_AngleSpacing = (75.0 / lv_bodyguardPos_GuardsPerRow);
    }

    gf_AssignGuardLocations(lv_pusherBlockCenter, lv_hybridBodyGuards, lv_bodyguardPos_BaseDistance, lv_bodyguardPos_AngleSpacing, lv_bodyguardPos_GuardsPerRow);
    AIAttackWaveSend(gv_hybridPusherPlayer, 0, false);
    lv_escortWave = WaveLastCreated();
    while ((libCOMI_gf_GameIsOver() == false) && (UnitGroupCount(lv_channelWave, c_unitCountAlive) > 0)) {
        lv_enemyTargets = UnitGroupAlliance(gv_hybridPusherPlayer, c_unitAllianceEnemy, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_enemyTargets, c_unitCountAlive) > 0)) {
            UnitIssueOrder(lv_pusherBlockCenter, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_enemyTargets, lv_spawnLocation))), c_orderQueueReplace);
        }
        else {
            if ((UnitGroupCount(lv_enemyTargets, c_unitCountAlive) != lv_enemyTargetsCount_Prev)) {
                UnitIssueOrder(lv_pusherBlockCenter, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(500)), c_orderQueueReplace);
            }

        }
        lv_enemyTargetsCount_Prev = UnitGroupCount(lv_enemyTargets, c_unitCountAlive);
        Wait(1.0, c_timeAI);
    }
    UnitRemove(lv_pusherBlockCenter);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridPushers03_Init () {
    gt_HybridPushers03 = TriggerCreate("gt_HybridPushers03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Pushers 04
//--------------------------------------------------------------------------------------------------
bool gt_HybridPushers04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_channelWave;
    point lv_spawnLocation;
    int lv_stage;
    unitgroup lv_hybridBodyGuards_Left;
    unitgroup lv_hybridBodyGuards_Right;
    int lv_tugOfWarPathIter;

    // Automatic Variable Declarations
    unitgroup autoD047C030_g;
    int autoD047C030_u;
    unit autoD047C030_var;
    int auto6FF03B61_ae;
    const int auto6FF03B61_ai = -3;

    // Variable Initialization
    lv_channelWave = UnitGroupEmpty();
    lv_hybridBodyGuards_Left = UnitGroupEmpty();
    lv_hybridBodyGuards_Right = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt__3P_HybridPushersEarly, false);
    gf_DelayAttackandEscortWaves(gv_hybridPush_DelayAttacks[lv_stage]);
    lv_stage = ge_HybridAttack_Attack04;
    gv_hybridReverseSpeed = ((gf_DistanceToFailurefromPoint(RegionGetCenter(gv_hybridPushTriggerSpacial[lv_stage]))-(libNtve_gf_WidthOfRegion(gv_hybridPushTriggerSpacial[lv_stage]) * 0.5)) / gv_hybridPushTimeFailure[lv_stage]);
    lv_spawnLocation = PointFromId(510);
    lv_channelWave = gf_CreateHybridPusherGroup(lv_stage, lv_spawnLocation);
    gf__3P_HybridPushersSetUp(lv_channelWave);
    autoD047C030_g = lv_channelWave;
    autoD047C030_u = UnitGroupCount(autoD047C030_g, c_unitCountAll);
    for (;; autoD047C030_u -= 1) {
        autoD047C030_var = UnitGroupUnitFromEnd(autoD047C030_g, autoD047C030_u);
        if (autoD047C030_var == null) { break; }
        gf_CreateWarpInEffect(autoD047C030_var);
    }
    gf_PingHybridSuperPushers(lv_channelWave);
    gf_PushersInfluencePings(lv_channelWave);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_hybridPusherPlayer, gv_hybridPusherPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, PointFromId(518), true);
    lv_hybridBodyGuards_Left = libCOMI_gf_LastCreatedCoopAttackForce();
    gf__3P_HybridBodyguardsSetup(lv_hybridBodyGuards_Left);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_hybridPusherPlayer, gv_hybridPusherPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, PointFromId(519), true);
    lv_hybridBodyGuards_Right = libCOMI_gf_LastCreatedCoopAttackForce();
    gf__3P_HybridBodyguardsSetup(lv_hybridBodyGuards_Right);
    while (!((libNtve_gf_UnitGroupIsDead(lv_channelWave) == true))) {
        Wait(1.0, c_timeGame);
    }
    UnitGroupAddUnitGroup(lv_hybridBodyGuards_Right, lv_hybridBodyGuards_Left);
    AIAttackWaveSetTargetEscortNL(gv_hybridPusherPlayer, libNtve_gf_ConvertUnitToUnitGroup(gv_tugOfWarBubbleUnit), 1);
    auto6FF03B61_ae = gv_tugOfWar_ForwardWaypoint;
    lv_tugOfWarPathIter = gv_tugOfWar_WaypointMax;
    for ( ; ( (auto6FF03B61_ai >= 0 && lv_tugOfWarPathIter <= auto6FF03B61_ae) || (auto6FF03B61_ai < 0 && lv_tugOfWarPathIter >= auto6FF03B61_ae) ) ; lv_tugOfWarPathIter += auto6FF03B61_ai ) {
        AIAttackWaveAddWaypoint(gv_hybridPusherPlayer, gf_GetPathWaypoint(lv_tugOfWarPathIter), false);
    }
    gf_AssignGuardLocations(gv_tugOfWarBubbleUnit, lv_hybridBodyGuards_Right, 4.0, 10.0, 10.0);
    AIAttackWaveSend(gv_hybridPusherPlayer, 0, false);
    gv_finalHybridWaveDefeated = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridPushers04_Init () {
    gt_HybridPushers04 = TriggerCreate("gt_HybridPushers04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Effort Values
//--------------------------------------------------------------------------------------------------
bool gt_SetEffortValues_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libNtve_gf_UnitInRegion(gv_tugOfWarBubbleUnit, gv_hybridPushTriggerSpacial[ge_HybridAttack_Attack01]) == true))) {
        Wait(1.0, c_timeAI);
    }
    libCOOC_gf_SetMissionEffort(15.0);
    while (!((libNtve_gf_UnitInRegion(gv_tugOfWarBubbleUnit, gv_hybridPushTriggerSpacial[ge_HybridAttack_Attack02]) == true))) {
        Wait(1.0, c_timeAI);
    }
    libCOOC_gf_SetMissionEffort(33.0);
    while (!((libNtve_gf_UnitInRegion(gv_tugOfWarBubbleUnit, gv_hybridPushTriggerSpacial[ge_HybridAttack_Attack03]) == true))) {
        Wait(1.0, c_timeAI);
    }
    libCOOC_gf_SetMissionEffort(66.0);
    while (!((libNtve_gf_UnitInRegion(gv_tugOfWarBubbleUnit, gv_hybridPushTriggerSpacial[ge_HybridAttack_Attack04]) == true))) {
        Wait(1.0, c_timeAI);
    }
    libCOOC_gf_SetMissionEffort(100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetEffortValues_Init () {
    gt_SetEffortValues = TriggerCreate("gt_SetEffortValues_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_05_EnemyP01_TugOfWarPath, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_05_EnemyP01_TugOfWarPath, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_04_EnemyP02, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_04_EnemyP02, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_03_EnemyP01, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_03_EnemyP01, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_06_EnemyP02_TugOfWarPath, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_06_EnemyP02_TugOfWarPath, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true) || (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerExecute(gt_ObjectiveJinaraMustSurviveFailed, true, false);
    TriggerExecute(gt_ObjectiveKillAmonsChampionFailed, true, false);
    if ((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true)) {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/696FB05F"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/1846F82B"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    }
    else if ((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true)) {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/70641D5A"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/066E4C3B"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    }
    else if (true) {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libCOMI_ge_CampaignMessageType_MissionFailed, StringToText(""), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    }
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    Wait(1.5, c_timeGame);
    TriggerExecute(gt_Defeat, true, false);
    gf__3P_AmonVictoryFanfare(ge__3P_VictoryType_BaseDestroyed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_cinematicRemoveUnits;

    // Automatic Variable Declarations
    playergroup autoA6ED69E0_g;
    int autoA6ED69E0_var;

    // Variable Initialization
    lv_cinematicRemoveUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    libCOMI_gf_SendMissionTransmission("DefeatCoA", false, -1);
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    TriggerExecute(gt_ObjectiveKillAmonsChampionFailed, true, false);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    CameraLockInput(gv_pLAYER_11_ANTAGONIST, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UnitClearSelection(gv_pLAYER_11_ANTAGONIST);
    UISetSelectionTypeEnabled(libCOOC_gf_HumanPlayers(), c_localSelectionTypeUnknown, false);
    CameraPan(gv_pLAYER_01_USER, PointFromId(860), 1.5, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, PointFromId(860), 1.5, -1, 10.0, false);
    CameraPan(gv_pLAYER_11_ANTAGONIST, PointFromId(860), 1.5, -1, 10.0, false);
    gv_tugOfWar_State = ge_TugOfWarState_Paused;
    UnitKill(gv_tugOfWarBubbleUnit);
    UnitKill(gv_hybridSuperPusherFX);
    autoA6ED69E0_g = gv_enemyPlayerGroup;
    autoA6ED69E0_var = -1;
    while (true) {
        autoA6ED69E0_var = PlayerGroupNextPlayer(autoA6ED69E0_g, autoA6ED69E0_var);
        if (autoA6ED69E0_var < 0) { break; }
        libNtve_gf_SetAlliance(autoA6ED69E0_var, gv_pLAYER_01_USER, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(autoA6ED69E0_var, gv_pLAYER_02_USER, libNtve_ge_AllianceSetting_Neutral);
    }
    TriggerStop(gt_TugOfWarJinaraAmonsChampionAttackLogic);
    TriggerStop(gt_TugOfWarController);
    UnitIssueOrder(gv_jinara, Order(AbilityCommand("PitAlarakFightDummyAbilityCancel", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_amonsChampion, Order(AbilityCommand("PitMalashFightDummyAbilityCancel", 0)), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("Event_Taldarim02_PitDeath_Explosion", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.75, c_timeGame);
    UnitIssueOrder(gv_amonsChampion, OrderTargetingUnit(AbilityCommand("PitMalashKillAlarak", 0), gv_jinara), c_orderQueueReplace);
    libCOMI_gf_WaitForMissionTransmission();
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ObjectiveJinaraMustSurviveFailed, true, false);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/F46A1648"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/8CBAE83B"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_11_ANTAGONIST), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/0F9CB6A0"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(1.5, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Defeat, true, false);
    gf__3P_AmonVictoryFanfare(ge__3P_VictoryType_JinaraKilled);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventUnitRegion(gt_DefeatPrimaryObjectiveFailed, UnitRefFromVariable("gv_jinara"), RegionFromId(18), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Amon's Champion Defeated Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryAmonsChampionDefeatedCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_TugOfWarJinaraAmonsChampionAttackLogic);
    gv_tugOfWar_State = ge_TugOfWarState_Paused;
    UnitKill(gv_tugOfWarBubbleUnit);
    UnitIssueOrder(gv_jinara, Order(AbilityCommand("PitAlarakFightDummyAbilityCancel", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_amonsChampion, Order(AbilityCommand("PitMalashFightDummyAbilityCancel", 0)), c_orderQueueReplace);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryAmonsChampionDefeatedCompleted_Init () {
    gt_VictoryAmonsChampionDefeatedCompleted = TriggerCreate("gt_VictoryAmonsChampionDefeatedCompleted_Func");
    TriggerAddEventUnitRegion(gt_VictoryAmonsChampionDefeatedCompleted, UnitRefFromVariable("gv_amonsChampion"), RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    TriggerExecute(gt_ObjectiveJinaraMustSurviveComplete, true, true);
    TriggerExecute(gt_ObjectiveKillAmonsChampionComplete, true, true);
    libCOMI_gf_RunMissionVictorySequence(gt_VictoryFanfareQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt__3P_SynchronizeBank, true, false);
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddTrackedStatistic("StructuresKilledCount");
    VictoryPanelAddTrackedStatistic("StructuresLostCount");
    GameOver(1, c_gameOverVictory, true, true);
    GameOver(2, c_gameOverVictory, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fanfare Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_cinematicRemoveUnits;

    // Automatic Variable Declarations
    playergroup auto8F227809_g;
    int auto8F227809_var;

    // Variable Initialization
    lv_cinematicRemoveUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClearAll();
    TriggerQueueEnter();
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    libCOMI_gf_SendMissionTransmission("VictoryCoA", false, -1);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    CameraLockInput(gv_pLAYER_11_ANTAGONIST, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UnitClearSelection(gv_pLAYER_11_ANTAGONIST);
    UISetSelectionTypeEnabled(libCOOC_gf_HumanPlayers(), c_localSelectionTypeUnknown, false);
    CameraPan(gv_pLAYER_01_USER, PointFromId(882), 1.5, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, PointFromId(882), 1.5, -1, 10.0, false);
    CameraPan(gv_pLAYER_11_ANTAGONIST, PointFromId(882), 1.5, -1, 10.0, false);
    auto8F227809_g = gv_enemyPlayerGroup;
    auto8F227809_var = -1;
    while (true) {
        auto8F227809_var = PlayerGroupNextPlayer(auto8F227809_g, auto8F227809_var);
        if (auto8F227809_var < 0) { break; }
        libNtve_gf_SetAlliance(auto8F227809_var, gv_pLAYER_01_USER, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(auto8F227809_var, gv_pLAYER_02_USER, libNtve_ge_AllianceSetting_Neutral);
    }
    libCOMI_gf_DisplayCampaignMessage(libCOOC_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/3223D936"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    SoundPlayForPlayer(SoundLink("Event_Taldarim02_EndCine_A", 0), c_maxPlayers, PlayerGroupAll(), 50.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Taldarim02_PitDeath_Explosion", 0), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    Wait(1.5, c_timeGame);
    UnitIssueOrder(gv_jinara, OrderTargetingUnit(AbilityCommand("PitAlarakKillMalash", 0), gv_amonsChampion), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    libCOMI_gf_WaitForMissionTransmission();
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Victory, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryFanfareQ_Init () {
    gt_VictoryFanfareQ = TriggerCreate("gt_VictoryFanfareQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Fanfare
//--------------------------------------------------------------------------------------------------
bool gt_DefeatFanfare_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatFanfare_Init () {
    gt_DefeatFanfare = TriggerCreate("gt_DefeatFanfare_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    libCOMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_02_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_02_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    GameOver(1, c_gameOverDefeat, true, true);
    GameOver(2, c_gameOverDefeat, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Victory Quit
//--------------------------------------------------------------------------------------------------
bool gt__3P_VictoryQuit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetGameMenuItemVisible(gv__3P_AntagonistPG, c_gameMenuDialogQuitButton, true);
    UISetGameMenuItemVisible(gv__3P_AntagonistPG, c_gameMenuDialogExitButton, true);
    UISetGameMenuItemVisible(gv__3P_AntagonistPG, c_gameMenuDialogGenericButton1, false);
    TriggerExecute(gt__3P_SynchronizeBank, true, true);
    if (((UnitIsAlive(gv__3P_MainShard) == true) || (ObjectiveGetState(gv_objectiveJinaraMustSurvive) == c_objectiveStateFailed) || (((gv__3P_SuppliesMadeKilled / 2.0) + gv__3P_SuppliesKilled) > 500.0) || (((gv__3P_VespeneKilled * 2.0) + gv__3P_MineralsKilled) > 15000.0))) {
        GameOver(gv_pLAYER_11_ANTAGONIST, c_gameOverVictory, true, true);
    }
    else {
        if (((((gv__3P_SuppliesMadeKilled / 2.0) + gv__3P_SuppliesKilled) > 250.0) || (((gv__3P_VespeneKilled * 2.0) + gv__3P_MineralsKilled) > 7500.0))) {
            GameOver(gv_pLAYER_11_ANTAGONIST, c_gameOverTie, true, true);
        }
        else {
            GameOver(gv_pLAYER_11_ANTAGONIST, c_gameOverDefeat, true, true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_VictoryQuit_Init () {
    gt__3P_VictoryQuit = TriggerCreate("gt__3P_VictoryQuit_Func");
    TriggerAddEventGameMenuItemSelected(gt__3P_VictoryQuit, gv_pLAYER_11_ANTAGONIST, c_gameMenuDialogGenericButton1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Forward Push Time
//--------------------------------------------------------------------------------------------------
bool gt_StatForwardPushTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localVictoryStatPushTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((gv_tugOfWar_State == ge_TugOfWarState_Forward) && (libCOMI_gf_GameIsOver() == false)) {
        Wait(1.0, c_timeAI);
        lv_localVictoryStatPushTime += 1;
        if ((lv_localVictoryStatPushTime > gv_bestForwardPushTime)) {
            gv_bestForwardPushTime = lv_localVictoryStatPushTime;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatForwardPushTime_Init () {
    gt_StatForwardPushTime = TriggerCreate("gt_StatForwardPushTime_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Push Back Distance
//--------------------------------------------------------------------------------------------------
bool gt_StatPushBackDistance_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_previousLocation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (((gv_tugOfWar_State == ge_TugOfWarState_Reverse) || (gv_tugOfWar_State == ge_TugOfWarState_ReverseSuper)) && (libCOMI_gf_GameIsOver() == false)) {
        if ((lv_previousLocation != null)) {
            gv_totalDistanceJinaraPushedBack += DistanceBetweenPoints(UnitGetPosition(gv_jinara), lv_previousLocation);
        }

        lv_previousLocation = UnitGetPosition(gv_jinara);
        PlayerScoreValueSetFromFixed(gv_pLAYER_01_USER, "SlaynPush", gv_totalDistanceJinaraPushedBack);
        PlayerScoreValueSetFromFixed(gv_pLAYER_02_USER, "SlaynPush", gv_totalDistanceJinaraPushedBack);
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatPushBackDistance_Init () {
    gt_StatPushBackDistance = TriggerCreate("gt_StatPushBackDistance_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Objective - Kill Units Create
//--------------------------------------------------------------------------------------------------
bool gt__3P_ObjectiveKillUnitsCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_vObjText;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vObjText = StringExternal("Param/Value/4506D128");

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreateForPlayers(StringExternal("Param/Value/EDBEAE6C"), StringExternal("Param/Value/917A5281"), c_objectiveStateActive, true, PlayerGroupSingle(gv_pLAYER_11_ANTAGONIST));
    gv__3P_ObjectiveDefendVoidShard = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 1);
    TextExpressionSetToken("Param/Expression/AF9E2D74", "D", FixedToText(gv__3P_SuppliesKilled, 0));
    TextExpressionSetToken("Param/Expression/AF9E2D74", "A", FixedToText(gv__3P_MineralsKilled, 0));
    TextExpressionSetToken("Param/Expression/AF9E2D74", "B", FixedToText(gv__3P_VespeneKilled, 0));
    TextExpressionSetToken("Param/Expression/AF9E2D74", "C", FixedToText(gv__3P_SuppliesMadeKilled, 0));
    lv_vObjText = TextExpressionAssemble("Param/Expression/AF9E2D74");
    ObjectiveCreateForPlayers(lv_vObjText, StringExternal("Param/Value/CC4371B9"), c_objectiveStateActive, true, PlayerGroupSingle(gv_pLAYER_11_ANTAGONIST));
    ObjectiveSetPriority(ObjectiveLastCreated(), 0);
    gv__3P_ObjectiveKillUnits = ObjectiveLastCreated();
    gv__3P_ObjectiveKillUnitsActive = true;
    TriggerExecute(gt__3P_ObjectiveKillUnitsUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_ObjectiveKillUnitsCreate_Init () {
    gt__3P_ObjectiveKillUnitsCreate = TriggerCreate("gt__3P_ObjectiveKillUnitsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Objective - Kill Units Update
//--------------------------------------------------------------------------------------------------
bool gt__3P_ObjectiveKillUnitsUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_vObjText;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vObjText = StringExternal("Param/Value/79E9A4FB");

    // Conditions
    if (testConds) {
        if (!(((UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropCurrent) > 0.0) || (UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesMade, c_unitPropCurrent) > 0.0) || (UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostSumMineralsVespene) > 0) || (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true)))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SIInfestedCivilian"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SIInfestedTrooper"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "HunterKiller"))) {
            return false;
        }

        if (!(((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), libNtve_gf_KillingPlayer()) == true) || (UnitGetType(EventUnit()) == "Baneling") || (UnitGetType(EventUnit()) == "HotSHunter") || (UnitGetType(EventUnit()) == "HotSSplitterlingBig") || (UnitGetType(EventUnit()) == "HotSSplitterlingMedium") || (UnitGetType(EventUnit()) == "Scourge")))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true)) {
        gv__3P_SuppliesKilled += 10.0;
        gv__3P_MineralsKilled += 500.0;
        gv__3P_VespeneKilled += 100.0;
    }
    else {
        gv__3P_SuppliesKilled += UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropCurrent);
        gv__3P_SuppliesMadeKilled += UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesMade, c_unitPropCurrent);
        gv__3P_MineralsKilled += UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostMinerals);
        gv__3P_VespeneKilled += UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostVespene);
    }
    if ((gv__3P_ObjectiveKillUnitsActive == true)) {
        TextExpressionSetToken("Param/Expression/95F5D8E3", "D", FixedToText(gv__3P_SuppliesKilled, 0));
        TextExpressionSetToken("Param/Expression/95F5D8E3", "A", FixedToText(gv__3P_MineralsKilled, 0));
        TextExpressionSetToken("Param/Expression/95F5D8E3", "B", FixedToText(gv__3P_VespeneKilled, 0));
        TextExpressionSetToken("Param/Expression/95F5D8E3", "C", FixedToText(gv__3P_SuppliesMadeKilled, 0));
        lv_vObjText = TextExpressionAssemble("Param/Expression/95F5D8E3");
        ObjectiveSetName(gv__3P_ObjectiveKillUnits, lv_vObjText);
    }

    if ((TimerGetRemaining(gv__3P_KillTimer) > 0.0)) {
        TimerStart(gv__3P_KillTimer, 4.0, false, c_timeGame);
        gv__3P_KillStreak += 1.0;
        if ((gv__3P_KillStreak >= 10.0)) {
            TriggerExecute(gt__3P_KillNotificationsUpdate, true, false);
        }

    }
    else {
        TimerStart(gv__3P_KillTimer, 4.0, false, c_timeGame);
        gv__3P_KillStreak = 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_ObjectiveKillUnitsUpdate_Init () {
    gt__3P_ObjectiveKillUnitsUpdate = TriggerCreate("gt__3P_ObjectiveKillUnitsUpdate_Func");
    TriggerAddEventUnitDied(gt__3P_ObjectiveKillUnitsUpdate, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3P_Objective - Kill Ji'nara Create
//--------------------------------------------------------------------------------------------------
bool gt__3P_ObjectiveKillJinaraCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TextExpressionSetToken("Param/Expression/10F2C0A7", "A", IntToText(gv__3P_JinaraKillBonusAmount));
    ObjectiveCreateForPlayers(TextExpressionAssemble("Param/Expression/10F2C0A7"), StringExternal("Param/Value/C7234C86"), c_objectiveStateActive, false, gv__3P_AntagonistPG);
    gv__3P_ObjectiveKillJinara = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3P_ObjectiveKillJinaraCreate_Init () {
    gt__3P_ObjectiveKillJinaraCreate = TriggerCreate("gt__3P_ObjectiveKillJinaraCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Amon's Champion Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillAmonsChampionCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_SlaynHamsterBall_Primary01");
    gv_objectiveKillAmonsChampion = ObjectiveLastCreated();
    ObjectiveSetPlayerGroup(ObjectiveLastCreated(), gv__3P_CommandersPG);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillAmonsChampionCreate_Init () {
    gt_ObjectiveKillAmonsChampionCreate = TriggerCreate("gt_ObjectiveKillAmonsChampionCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Amon's Champion Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillAmonsChampionComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillAmonsChampionCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_SlaynHamsterBall_Primary01", libCOOC_ge_MissionObjectiveState_Completed);
    ObjectiveSetState(gv__3P_ObjectiveKillJinara, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillAmonsChampionComplete_Init () {
    gt_ObjectiveKillAmonsChampionComplete = TriggerCreate("gt_ObjectiveKillAmonsChampionComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Amon's Champion Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillAmonsChampionFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillAmonsChampionCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_SlaynHamsterBall_Primary01", libCOOC_ge_MissionObjectiveState_Failed);
    ObjectiveSetState(gv__3P_ObjectiveKillJinara, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillAmonsChampionFailed_Init () {
    gt_ObjectiveKillAmonsChampionFailed = TriggerCreate("gt_ObjectiveKillAmonsChampionFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Ji'nara Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveJinaraMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_SlaynHamsterBall_Primary02");
    gv_objectiveJinaraMustSurvive = ObjectiveLastCreated();
    ObjectiveSetPlayerGroup(ObjectiveLastCreated(), gv__3P_CommandersPG);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveJinaraMustSurviveCreate_Init () {
    gt_ObjectiveJinaraMustSurviveCreate = TriggerCreate("gt_ObjectiveJinaraMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Ji'nara Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveJinaraMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveJinaraMustSurviveCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_SlaynHamsterBall_Primary02", libCOOC_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveJinaraMustSurviveComplete_Init () {
    gt_ObjectiveJinaraMustSurviveComplete = TriggerCreate("gt_ObjectiveJinaraMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Ji'nara Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveJinaraMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveJinaraMustSurviveCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_SlaynHamsterBall_Primary02", libCOOC_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveJinaraMustSurviveFailed_Init () {
    gt_ObjectiveJinaraMustSurviveFailed = TriggerCreate("gt_ObjectiveJinaraMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Slayn Elementals Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSlaynElementalsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_SlaynHamsterBall_Bonus01");
    gv_objectiveKillSlaynElementals = ObjectiveLastCreated();
    ObjectiveSetPlayerGroup(ObjectiveLastCreated(), gv__3P_CommandersPG);
    TextExpressionSetToken("Param/Expression/51189C5B", "A", IntToText(gv__3P_SlaynKillBonusAmount));
    ObjectiveCreateForPlayers(TextExpressionAssemble("Param/Expression/51189C5B"), StringExternal("Param/Value/144AD5D4"), c_objectiveStateActive, false, gv__3P_AntagonistPG);
    gv_objectiveDefendSlaynElemental = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    Wait(2.0, c_timeReal);
    gv_objectiveElementalWriteOutComplete01 = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSlaynElementalsCreate_Init () {
    gt_ObjectiveKillSlaynElementalsCreate = TriggerCreate("gt_ObjectiveKillSlaynElementalsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Slayn Elementals Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSlaynElementalsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillSlaynElementalsCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_SlaynHamsterBall_Bonus01", libCOOC_ge_MissionObjectiveState_Completed);
    libCOMI_gf_SetMissionObjectiveProgress("AC_SlaynHamsterBall_Bonus01", 1);
    ObjectiveSetState(gv_objectiveDefendSlaynElemental, c_objectiveStateFailed);
    Wait(10.0, c_timeGame);
    ObjectiveShow(gv_objectiveDefendSlaynElemental, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSlaynElementalsComplete_Init () {
    gt_ObjectiveKillSlaynElementalsComplete = TriggerCreate("gt_ObjectiveKillSlaynElementalsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Slayn Elementals Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSlaynElementalsFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillSlaynElementalsCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_SlaynHamsterBall_Bonus01", libCOOC_ge_MissionObjectiveState_Failed);
    ObjectiveSetState(gv_objectiveDefendSlaynElemental, c_objectiveStateCompleted);
    BankLoad("MGRCoA3P", gv_pLAYER_11_ANTAGONIST);
    BankValueSetFromInt(BankLastCreated(), "A", "ElementalProtected", (BankValueGetAsInt(BankLastCreated(), "A", "ElementalProtected") + 1));
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    BankSave(BankLastCreated());
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSlaynElementalsFailed_Init () {
    gt_ObjectiveKillSlaynElementalsFailed = TriggerCreate("gt_ObjectiveKillSlaynElementalsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Slayn Elementals Create 02
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSlaynElementalsCreate02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_SlaynHamsterBall_Bonus02");
    gv_objectiveKillSlaynElementals02 = ObjectiveLastCreated();
    ObjectiveSetPlayerGroup(ObjectiveLastCreated(), gv__3P_CommandersPG);
    TextExpressionSetToken("Param/Expression/24A79D6B", "A", IntToText(gv__3P_SlaynKillBonusAmount));
    ObjectiveCreateForPlayers(TextExpressionAssemble("Param/Expression/24A79D6B"), StringExternal("Param/Value/FEE607D0"), c_objectiveStateActive, false, gv__3P_AntagonistPG);
    gv_objectiveDefendSlaynElemental02 = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    Wait(2.0, c_timeReal);
    gv_objectiveElementalWriteOutComplete02 = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSlaynElementalsCreate02_Init () {
    gt_ObjectiveKillSlaynElementalsCreate02 = TriggerCreate("gt_ObjectiveKillSlaynElementalsCreate02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Slayn Elementals Complete 02
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSlaynElementalsComplete02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillSlaynElementalsCreate02, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_SlaynHamsterBall_Bonus02", libCOOC_ge_MissionObjectiveState_Completed);
    libCOMI_gf_SetMissionObjectiveProgress("AC_SlaynHamsterBall_Bonus02", 1);
    ObjectiveSetState(gv_objectiveDefendSlaynElemental02, c_objectiveStateFailed);
    Wait(10.0, c_timeGame);
    ObjectiveShow(gv_objectiveDefendSlaynElemental02, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSlaynElementalsComplete02_Init () {
    gt_ObjectiveKillSlaynElementalsComplete02 = TriggerCreate("gt_ObjectiveKillSlaynElementalsComplete02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Kill Slayn Elementals Failed 02
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillSlaynElementalsFailed02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillSlaynElementalsCreate02, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_SlaynHamsterBall_Bonus02", libCOOC_ge_MissionObjectiveState_Failed);
    ObjectiveSetState(gv_objectiveDefendSlaynElemental02, c_objectiveStateCompleted);
    BankLoad("MGRCoA3P", gv_pLAYER_11_ANTAGONIST);
    BankValueSetFromInt(BankLastCreated(), "A", "ElementalProtected", (BankValueGetAsInt(BankLastCreated(), "A", "ElementalProtected") + 1));
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    BankSave(BankLastCreated());
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillSlaynElementalsFailed02_Init () {
    gt_ObjectiveKillSlaynElementalsFailed02 = TriggerCreate("gt_ObjectiveKillSlaynElementalsFailed02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt__3P_RaceSwitch_Init();
    gt__3P_DebugStart_Init();
    gt__3P_TotalVoidEnergyMined_Init();
    gt__3P_Prunemanual_Init();
    gt_CTRLAMove_Init();
    gt_CTRLBMissionEndFanfare_Init();
    gt_CTRLC_Init();
    gt_CTRLDCreateSomeunits_Init();
    gt_CTRLECustomWave_Init();
    gt_CTRLFWave7_Init();
    gt_CTRLGControl_Init();
    gt_CTRLH_Init();
    gt_CTRLIResources_Init();
    gt_CTRLJJinaraDefeatedPlus_Init();
    gt_CTRLKPingLoc_Init();
    gt_CTRLLAttack_Init();
    gt_CTRLM_Init();
    gt__3P_TransmissionSend_Init();
    gt__3P_UnitCreated_Init();
    gt__3P_RevealPrestigestoAmon_Init();
    gt__3P_Show_Init();
    gt__3P_AIChoiceOK_Init();
    gt__3P_AIChoiceCancel_Init();
    gt__3P_Duplicate_Init();
    gt__3P_Empower_Init();
    gt__3P_Gorgon_Init();
    gt__3P_Barrier_Init();
    gt__3P_Targeting_Init();
    gt__3P_BarrierCreated_Init();
    gt__3P_MutatorPricesFill_Init();
    gt__3P_MutatorPurchased_Init();
    gt__3P_MutatorPriceStarted_Init();
    gt__3P_MutatorPriceCancelled_Init();
    gt__3P_UnitChangesOwner_Init();
    gt__3P_UnitCreationFix_Init();
    gt__3P_UnitDamageFix_Init();
    gt__3P_JustDieSearchFix_Init();
    gt__3P_InitializeLongRangeFix_Init();
    gt__3P_InitializeBlackFogFix_Init();
    gt__3P_InitializeMissileBarrageFix_Init();
    gt__3P_MissileBarrage_Init();
    gt__3P_DarkMirrorFix_Init();
    gt__3P_NecronomiconFixA_Init();
    gt__3P_NectonomiconFixB_Init();
    gt__3P_Properlysetalliances_Init();
    gt__3P_TemporaryOwnershipandLeash_Init();
    gt__3P_GlobalLeashCheck_Init();
    gt__3P_AmonTempUnitsAttacked_Init();
    gt__3P_UpgradeParity_Init();
    gt__3P_StructureReposition_Init();
    gt__3P_DisableAIcontrol_Init();
    gt__3P_WorkerPreventRegion_Init();
    gt__3P_ResourcesfromShardsDuplicateCharge_Init();
    gt__3P_AmonVoidEnergyGain_Init();
    gt__3P_SetUpEcoUI_Init();
    gt__3P_ShardFragmentCreated_Init();
    gt__3P_ShardFragmentDies_Init();
    gt__3P_SalvageVoidShardFragmentCD_Init();
    gt__3P_CreateIncomeRateDialog_Init();
    gt__3P_HeroPurchased_Init();
    gt__3P_KaraxFix_Init();
    gt__3P_Heroes_Create_Init();
    gt__3P_Heroes_Open_Init();
    gt__3P_Heroes_Update_Init();
    gt__3P_Heroes_Close_Init();
    gt__3P_Heroes_UpdateChooseActiveHeroesTooltip_Init();
    gt__3P_LastBaseInit_Init();
    gt__3P_HybridPushersEarly_Init();
    gt__3P_GlobalSuicide_Init();
    gt__3P_TutorialInit_Init();
    gt__3P_TutorialTutorialCommandersCreate_Init();
    gt__3P_Tutorial_Init();
    gt__3P_TutorialCreatesaShard_Init();
    gt__3P_TutorialKeepSelectingMainShard_Init();
    gt__3P_TutorialAttackWaveSpawned_Init();
    gt__3P_TutorialAIChoice_Init();
    gt__3P_TutorialTutorialClose_Init();
    gt__3P_TutorialHeroPresent_Init();
    gt__3P_TutorialWelcome_Init();
    gt__3P_DifficultySetUp_Init();
    gt__3P_Prunefordifficulties_Init();
    gt__3P_SpeedSetUp_Init();
    gt__3P_BankInitialize_Init();
    gt__3P_SynchronizeBank_Init();
    gt__3P_Jinaradefeatedsync_Init();
    gt__3P_Showoff_Init();
    gt__3P_KillNotificationsCreate_Init();
    gt__3P_KillNotificationsUpdate_Init();
    gt__3P_KillNotificationsFade_Init();
    gt__3P_QuitButtonUsed_Init();
    gt__3P_VoidShardDestroyed_Init();
    gt__3P_PlayerLeaves_Init();
    gt__3P_CreateStartTimerDialog_Init();
    gt__3P_Quicken_Init();
    gt__3P_StrengthenChampion_Init();
    gt__3P_Start_Init();
    gt__3P_RaceInit_Init();
    gt__3P_Mapinit_Init();
    gt__3P_BeforeIntro_Init();
    gt__3P_AfterIntro_Init();
    gt__3P_Revealrocksunitsinbetween_Init();
    gt_TW_Main_Thread_Player01_Init();
    gt_TW_Main_Thread_Player02_Init();
    gt_TW_Main_Thread_Player11_Init();
    gt_Init02Players_Init();
    gt_Init03LoadingComplete_Init();
    gt_Init04Technology_Init();
    gt_Init05Units_Init();
    gt_Init06MusicSound_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_SleepInactiveUnits_Init();
    gt_Init01LoadData_Init();
    gt_StartAI_Init();
    gt_StartGameQ_Init();
    gt_RunBonusObjective_Init();
    gt_RevealFinalBaseQ_Init();
    gt_TugOfWarInitialize_Init();
    gt_TugOfWarController_Init();
    gt_TugOfWarStateUpdate_Init();
    gt_TugOfWarMoveBossTarget_Init();
    gt_TugOfWarJinaraAmonsChampionAttackLogic_Init();
    gt_TugOfWarFirstTimePlayerAtTugOfWarQ_Init();
    gt_TugOfWarFirstTimeEnemyAtTugOfWarQ_Init();
    gt_TugOfWarLosingGround01WarningQ_Init();
    gt_TugOfWarLosingGround02WarningQ_Init();
    gt_TugOfWarDefeatImminentWarningQ_Init();
    gt_TugOfWarVictoryImminentQ_Init();
    gt_ForcesDestroyedWatcher_Init();
    gt_ForcesDestroyedPlayerTransmissionQ_Init();
    gt_ForcesDestroyedEnemyTransmissionQ_Init();
    gt_RemindertoSupportTransmissionQ_Init();
    gt_TugOfWarHybridSuperPusher_Init();
    gt_TugOfWarHybridSappingStrengthQ_Init();
    gt_SlaynElemental01Create_Init();
    gt_SlaynElemental02aCreate_Init();
    gt_SlaynElemental02bCreate_Init();
    gt_CritterDies_Init();
    gt_SlaynElementalCocoonQ_Init();
    gt_SlaynElementalEscapesQ_Init();
    gt_SlaynElementalGoingtoEscapeQ_Init();
    gt_SlaynElementalKilledFirstQ_Init();
    gt_SlaynElementalKilledLastQ_Init();
    gt_PickFirstAttackWaveTarget_Init();
    gt_RunAIWaves_Init();
    gt_EscortWaveTransmissionQ_Init();
    gt_EscortWave01_Init();
    gt_EscortWave02_Init();
    gt_EscortWave03_Init();
    gt_EscortWave04_Init();
    gt_EscortWave05_Init();
    gt_EscortWave06_Init();
    gt_EscortWave07_Init();
    gt_EscortWave08_Init();
    gt_EscortWave09_Init();
    gt_EscortWave10_Init();
    gt_EscortWave11_Init();
    gt_EscortWave12_Init();
    gt_EscortWave13_Init();
    gt_EscortWave14_Init();
    gt_EscortWave15_Init();
    gt_EscortWave16_Init();
    gt_EscortWave17_Init();
    gt_EscortWave18_Init();
    gt_EscortWave19_Init();
    gt_EscortWave20_Init();
    gt_EscortWave21_Init();
    gt_EscortWave22_Init();
    gt_EscortWave23_Init();
    gt_AttackWaveTransmissionQ_Init();
    gt_AttackWave01SingleWave_Init();
    gt_AttackWave02SingleWave_Init();
    gt_AttackWave03SingleWave_Init();
    gt_AttackWave04SingleWave_Init();
    gt_AttackWave05DoubleWave_Init();
    gt_AttackWave06DoubleWave_Init();
    gt_AttackWave07DoubleWave_Init();
    gt_SetupHybridPusherHybridTypes_Init();
    gt_RunHybridPushers_Init();
    gt_HybridPushers01_Init();
    gt_HybridPushers02_Init();
    gt_HybridPushers03_Init();
    gt_HybridPushers04_Init();
    gt_SetEffortValues_Init();
    gt_AIGiveResources_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryAmonsChampionDefeatedCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_VictoryFanfareQ_Init();
    gt_DefeatFanfare_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_Defeat_Init();
    gt__3P_VictoryQuit_Init();
    gt_StatForwardPushTime_Init();
    gt_StatPushBackDistance_Init();
    gt_TipReadyQ_Init();
    gt__3P_ObjectiveKillUnitsCreate_Init();
    gt__3P_ObjectiveKillUnitsUpdate_Init();
    gt__3P_ObjectiveKillJinaraCreate_Init();
    gt_ObjectiveKillAmonsChampionCreate_Init();
    gt_ObjectiveKillAmonsChampionComplete_Init();
    gt_ObjectiveKillAmonsChampionFailed_Init();
    gt_ObjectiveJinaraMustSurviveCreate_Init();
    gt_ObjectiveJinaraMustSurviveComplete_Init();
    gt_ObjectiveJinaraMustSurviveFailed_Init();
    gt_ObjectiveKillSlaynElementalsCreate_Init();
    gt_ObjectiveKillSlaynElementalsComplete_Init();
    gt_ObjectiveKillSlaynElementalsFailed_Init();
    gt_ObjectiveKillSlaynElementalsCreate02_Init();
    gt_ObjectiveKillSlaynElementalsComplete02_Init();
    gt_ObjectiveKillSlaynElementalsFailed02_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
