//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Salvation
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"
include "LibCOMI"
include "ai36ECF245"
include "ai5D126363"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libLotv_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
    libVCUI_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_USER_1 = 1;
const int gv_pLAYER_USER_2 = 2;
const int gv_pLAYER_USER_3 = 3;
const int gv_pLAYER_USER_4 = 4;
const int gv_pLAYER_USER_5 = 5;
const int gv_aI_ALLY_TALDARIM = 7;
const int gv_aI_ALLY_NERAZIM = 8;
const int gv_aI_ALLY_PURIFIER = 9;
const int gv_aI_ALLY_TERRAN = 10;
const int gv_aI_ALLY_KHALAI = 11;
const int gv_aI_AMON_ZERG = 12;
const int gv_aI_AMON_PROTOSS = 13;
const int gv_aI_AMON_TERRAN = 14;
const int gv_aI_AMON_FORCES = 15;
const int gv_aI_AMON_FORCES_ARMADA = 15;
const int gv_aI_AMON_FORCES_ZERG_1 = 15;
const int gv_aI_AMON_FORCES_ZERG_2 = 15;
const int gv_aI_AMON_FORCES_ZERG_3 = 15;
const int gv_aI_AMON_FORCES_ZERG_4 = 15;
const int gv_rOLE_AMON_ZERG = 12;
const int gv_rOLE_AMON_PROTOSS = 13;
const int gv_rOLE_AMON_TERRAN = 14;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
string[libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPCutsceneFilter;
int gv_cU_GPAlarakGemClickCount;
bool[libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPInitialized;
fixed[libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPLastEnergyUpdate;
bool[libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPEnergyHighlighting;
bool[5][libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPButtonHighlighted;
unit[libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPUnit;
unitgroup[libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPCasterGroup;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPPanel;
int gv_cU_GPPanelHolder;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPAlarakButton;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPEnergyBar;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPEnergyTooltip;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPEnergyBarScene;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPEnergyGlassScene;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPEnergyLabel;
bool[libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPVisible;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPCmdPanel;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPCmdPanelUnitStatus;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPCutscene;
int[5][libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPCmdButtons;
int[5][libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPCmdButtonArrows;
int[5][libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPUnitEnergyLinks;
int[5][libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPCmdButtonActiveImage;
int[5][libCOMI_gv_cCC_MAXPLAYERS + 1] gv_cU_GPCmdButtonBackgroundImage;
unit[13] gv_globalCasterUnitArray;
int[13] gv_casterUnitEnergyTracker;
int[13] gv_casterUnitEnergyTracker_visual;
unit[14] gv_globalCasterforplayer;
unitgroup[14] gv_globalCastergroupforplayer;
bool[14] gv_allyofArtanis2;
unit gv_drakkumDrill;
int gv_drakkum2ndaryPanel;
int[14] gv_orbitalStrikeCharges;
int[14] gv_thermalLanceCharges;
bool gv_gameIsStarted;
int gv_aI_ALLY_KEYSTONE;
int gv_rOLE_TALDARIM;
int gv_rOLE_NERAZIM;
int gv_rOLE_PURIFIER;
int gv_rOLE_TERRAN;
int gv_rOLE_KHALAI;
playergroup gv_friendlyPlayerGroup;
playergroup gv_enemyPlayerGroup;
string gv_mapMusicTrack;
unit gv_casterArtanis;
unit gv_casterVorazun;
unit gv_casterAlarak;
unit gv_casterPurifier;
unit gv_casterRaynor;
unit gv_casterKeystone;
unit gv_artanis;
unit gv_vorazun;
unit gv_karax;
unit gv_alarak;
unit gv_raynor;
unit gv_swann;
unit gv_tychus;
unit gv_stetmann;
unit gv_theBrutalisk;
unit gv_nerazimNexus;
unit gv_taldarimNexus;
unit gv_purifierNexus;
unit gv_raynorCommandCenter;
unit gv_artanisNexus;
int gv_objectiveDestroyZergBase2;
int[11] gv_recentBuildingDeathHistory;
int gv_recentBuildingDeaths;
int gv_energyQPendingCount;
revealer gv_keystoneRevealer;
int gv_keystoneBoard;
fixed gv_keystoneChargeCurrent;
fixed gv_keystoneChargeMax;
fixed gv_keystoneChargeIncrement;
bool gv_cinematicCompleted;
unitgroup gv_cinematicTempUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicHiddenUnits;
unit gv_introSuperWarpGate;
bool gv_introMusicCompleted;
int[9] gv_introMinerals;
int[3] gv_introGas;
unitgroup gv_introNerazimUnits;
unitgroup gv_introPurifierUnits;
unitgroup gv_introTaldarimUnits;
unitgroup gv_introPrePlacedPlayerUnits;
unitgroup gv_introWarpedInPlayerUnits;
unit gv_introAlarak;
unit gv_introVorazun;
unit gv_introKarax;
point[8] gv_prismDeployPoints;
bool[5] gv_spearTierState;
int[5] gv_disableDialog;
int gv_armadaUpgradeCounter;
unitgroup gv_armadaUnitGroup;
int gv_alliedNexusesLost;
int gv_armadaUnitsHitBySOA;
bool gv_achievement_UsedSpearofAdunAbilities;
unit gv_victoryArtanis;
unit gv_victoryAlarak;
unit gv_victoryVorazun;
unit gv_victoryKarax;
unit gv_victoryFenix;

void InitGlobals () {
    int init_i;
    int init_j;

    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        gv_cU_GPCutsceneFilter[init_i] = "";
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        gv_cU_GPCasterGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        gv_cU_GPPanel[init_i] = c_invalidDialogControlId;
    }
    gv_cU_GPPanelHolder = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        gv_cU_GPAlarakButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        gv_cU_GPEnergyBar[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        gv_cU_GPEnergyTooltip[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        gv_cU_GPEnergyBarScene[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        gv_cU_GPEnergyGlassScene[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        gv_cU_GPEnergyLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        gv_cU_GPCmdPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        gv_cU_GPCmdPanelUnitStatus[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        gv_cU_GPCutscene[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            gv_cU_GPCmdButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            gv_cU_GPCmdButtonArrows[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            gv_cU_GPUnitEnergyLinks[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            gv_cU_GPCmdButtonActiveImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            gv_cU_GPCmdButtonBackgroundImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_casterUnitEnergyTracker[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_casterUnitEnergyTracker_visual[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 13; init_i += 1) {
        gv_globalCastergroupforplayer[init_i] = UnitGroupEmpty();
    }
    gv_drakkum2ndaryPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 13; init_i += 1) {
        gv_orbitalStrikeCharges[init_i] = 5;
    }
    for (init_i = 0; init_i <= 13; init_i += 1) {
        gv_thermalLanceCharges[init_i] = 3;
    }
    gv_aI_ALLY_KEYSTONE = 6;
    gv_rOLE_TALDARIM = 7;
    gv_rOLE_NERAZIM = 8;
    gv_rOLE_PURIFIER = 9;
    gv_rOLE_TERRAN = 10;
    gv_rOLE_KHALAI = 11;
    gv_friendlyPlayerGroup = PlayerGroupEmpty();
    gv_enemyPlayerGroup = PlayerGroupEmpty();
    gv_casterArtanis = UnitFromId(1016298423);
    gv_casterVorazun = UnitFromId(1242393302);
    gv_casterAlarak = UnitFromId(569746599);
    gv_casterPurifier = UnitFromId(1877456816);
    gv_casterRaynor = UnitFromId(1581776677);
    gv_casterKeystone = UnitFromId(418);
    gv_artanis = UnitFromId(962312020);
    gv_vorazun = UnitFromId(21);
    gv_karax = UnitFromId(55);
    gv_alarak = UnitFromId(606981334);
    gv_raynor = UnitFromId(1225030290);
    gv_swann = UnitFromId(1457255383);
    gv_tychus = UnitFromId(1214175694);
    gv_stetmann = UnitFromId(1969305090);
    gv_theBrutalisk = UnitFromId(77);
    gv_nerazimNexus = UnitFromId(38);
    gv_taldarimNexus = UnitFromId(26);
    gv_purifierNexus = UnitFromId(37);
    gv_raynorCommandCenter = UnitFromId(1615408480);
    gv_artanisNexus = UnitFromId(22);
    gv_objectiveDestroyZergBase2 = c_invalidObjectiveId;
    gv_keystoneBoard = c_boardNone;
    gv_keystoneChargeMax = 2000.0;
    gv_keystoneChargeIncrement = 1.0;
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_introNerazimUnits = UnitGroupEmpty();
    gv_introPurifierUnits = UnitGroupEmpty();
    gv_introTaldarimUnits = UnitGroupEmpty();
    gv_introPrePlacedPlayerUnits = UnitGroupEmpty();
    gv_introWarpedInPlayerUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_spearTierState[init_i] = true;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_disableDialog[init_i] = c_invalidDialogId;
    }
    gv_armadaUnitGroup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_CU_GPInit (int lp_player);
void gf_CU_GPInitProtoss (int lp_player);
void gf_CU_GPInitAlarak (int lp_player);
void gf_CU_GPInitFenix (int lp_player);
void gf_LinkUnitEnergyToGlobalCasterButton (unit lp_unit, int lp_player, int lp_index);
void gf_CU_GPInitRaynor (int lp_player);
void gf_CU_GPInitSwann (int lp_player);
void gf_CU_GPInitAbathur (int lp_player);
void gf_CU_GPInitStukov (int lp_player);
void gf_CU_GPInitDehaka (int lp_player);
void gf_CU_GPInitNova (int lp_player);
abilcmd gf_CU_GPActiveAbilityCommand (int lp_slot, int lp_player);
void gf_CU_GPSoAUpdateVitals (int lp_player);
void gf_CU_GPHighlightButton (int lp_slot, bool lp_on, int lp_player);
void gf_CU_GPCheckForEnergyHighlight (int lp_player);
void gf_CU_GPEnergyHighlight (bool lp_enable, int lp_player);
void gf_CU_GPSetUnit (unit lp_casterUnit, int lp_player);
void gf_CU_GPShowHide (bool lp_showHide, int lp_player, fixed lp_duration);
void gf_CU_GPVisibilitySet (bool lp_showHide, int lp_player, fixed lp_duration);
void gf_CU_GPVisibilityAutoUpdate (bool lp_showHide, int lp_player, fixed lp_duration);
void gf_CreateEnergyTracker (int lp_playernumber);
void gf_SetArtanisAllies2 (int lp_playernumber);
void gf_SetZergFaction (int lp_playernumber);
void gf_SetTerranFaction (int lp_playernumber);
void gf_SetProtossFaction (int lp_playernumber, string lp_faction);
void gf_TaldarimSkin (int lp_playernumber);
void gf_PurifierSkin (int lp_playernumber);
void gf_NerazimSkin (int lp_playernumber);
void gf_SetPlayerRole (string lp_role, int lp_playernumber, bool lp_ownership);
void gf_GlobalPowers (int lp_player);
void gf_MovingRevealers (region lp_movingRegion);
fixed gf_KeystoneChargePercent ();
void gf_TurnWarpedInUnit (unit lp_unit);
void gf_AIWarpPrism (int lp_owner, unit lp_warpPrism, unitgroup lp_nearbyUnits);
void gf_AINerazimStalker (int lp_owner, unit lp_blinkStalker, unitgroup lp_nearbyUnits);
void gf_AIOverseer (int lp_owner, unit lp_overseer, unitgroup lp_nearbyUnits);
void gf_AIKarax (int lp_owner, unit lp_karax, unitgroup lp_nearbyUnits);
void gf_AIAlarak (int lp_owner, unit lp_alarak, unitgroup lp_nearbyUnits);
void gf_AIVorazun (int lp_owner, unit lp_vorazun, unitgroup lp_nearbyUnits);
void gf_DisableSpearPowerQ (int lp_index);
void gf_EnableDisableTier1Power (bool lp_enableDisable);
void gf_EnableDisableTier2Power (bool lp_enableDisable);
void gf_EnableDisableTier3Power (bool lp_enableDisable);
void gf_EnableDisableTier4Power (bool lp_enableDisable);
void gf_EnableDisableSpearTier (bool lp_enableDisable, string lp_powerSlot);
void gf_CreateDisableImage (int lp_dialog);
void gf_DisableAllActiveSpearPowers ();
void gf_SpawnStreamingWaveUnit (int lp_count, string lp_unitType, int lp_player, point lp_spawnPoint, fixed lp_delay);
void gf_SuperWarpGateLogic (unit lp_transport);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_CU_GPVitalChangesP1;
trigger gt_CU_GPVitalChangesP2;
trigger gt_CU_GPBirthFinished;
trigger gt_CU_GPDeathRemove2D;
trigger gt_CU_GPAlarakGemPress;
trigger gt_TrackGlobalCasterEnergy;
trigger gt_GuardianShellAura2;
trigger gt_PM_SoASuperShieldsActivated3;
trigger gt_ChronoWaveEffect3;
trigger gt_BFGbeam2;
trigger gt_SwannVespeneDroneTrigger2;
trigger gt_SwannSiegeTankRebuildController2;
trigger gt_SwannThorRebuildController2;
trigger gt_ResetDrakkumDrillPanel;
trigger gt_BFGbeam;
trigger gt_SwannVespeneDroneTrigger;
trigger gt_SwannSiegeTankRebuildController;
trigger gt_SwannThorRebuildController;
trigger gt_NovaSiegeModeProgressiveRangeIncreaseApply;
trigger gt_ArtanisOrbitalStrikeinitial;
trigger gt_ArtanisOrbitalStrike2ndaryCasts;
trigger gt_KaraxOrbitalStrikeRecast;
trigger gt_ThermalLanceinitialactivation;
trigger gt_ThermalLancetargetarea;
trigger gt_ThermalLance2ndarycasts;
trigger gt_ThermalLanceRefundIfCanceled;
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_StartGame;
trigger gt_MultiPlayerIntro;
trigger gt_TipReadyQ;
trigger gt_CreepExpansion1TimeBased;
trigger gt_CreepExpansion2AlliedNexusFalls;
trigger gt_ObjectiveKeystoneMustSurviveCreate;
trigger gt_ObjectiveKeystoneMustSurviveComplete;
trigger gt_ObjectiveKeystoneMustSurviveFailed;
trigger gt_KeystoneStatus;
trigger gt_KeystoneCharging;
trigger gt_KeystoneQuarterSave;
trigger gt_KeystoneHalfQ;
trigger gt_KeystoneAlmostDoneQ;
trigger gt_BuildingDeathHistoryUpdate;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroCatchWarpedUnits;
trigger gt_IntroMusic;
trigger gt_StartAI;
trigger gt_AIUpgradesCasualNormal;
trigger gt_AIUpgradesHardBrutal;
trigger gt_ZergBaseRebuildAmonForcesArmy;
trigger gt_AlliedMindControlCancelSuicide;
trigger gt_OverseerDespawn;
trigger gt_ProtossChampionRevived;
trigger gt_ReportKaraxArmadaWarning;
trigger gt_ReportArtanisArmadainitialattack;
trigger gt_ReportArtanisArmadaanotherattack;
trigger gt_ReportKaraxArmadalargerattack;
trigger gt_ReportAmonArmadahugeattack;
trigger gt_ReportKaraxMassiveprotossattacks;
trigger gt_AmonTransmission1;
trigger gt_AmonTransmission2;
trigger gt_AmonTransmission3;
trigger gt_ReportArtanisZergStreamingAttacks3entrances;
trigger gt_ReportArtanisZergStreamingAttacks2entrances;
trigger gt_ReportArtanisZergStreamingAttacks1entrance;
trigger gt_ReportRaynorZergStreamingAttacks4entrances;
trigger gt_ReportArtanisZergStreamingAttackAlarak;
trigger gt_ReportRaynorZergStreamingAttackRaynor;
trigger gt_ReportAlarakInitialAttackAlarak;
trigger gt_ReportKaraxInitialAttackKarax;
trigger gt_ReportVorazunInitialAttackVorazun;
trigger gt_VorazunRetreatTransmission;
trigger gt_KaraxRetreatTransmission;
trigger gt_AlarakRetreatTransmission;
trigger gt_RaynorRetreatTransmission;
trigger gt_VorazunNexusTransmission;
trigger gt_KaraxNexusTransmission;
trigger gt_AlarakNexusTransmission;
trigger gt_RaynorNexusTransmission;
trigger gt_AlarakTripwireTransmission;
trigger gt_VorazunTripwireTransmission;
trigger gt_PurifierTripwireTransmission;
trigger gt_DisableSpearPower1;
trigger gt_DisableSpearPower2;
trigger gt_DisableSpearPower3;
trigger gt_DisableSpearPower4;
trigger gt_SpearAttackTransmission01Q;
trigger gt_StreamingWave10PUR;
trigger gt_StreamingWave09TAL;
trigger gt_StreamingWave08NER;
trigger gt_StreamingWave07TAL;
trigger gt_StreamingWave06NER;
trigger gt_StreamingWave05PUR;
trigger gt_StreamingWave04PUR;
trigger gt_StreamingWave03NER;
trigger gt_StreamingWave02TAL;
trigger gt_StreamingWave01TAL;
trigger gt_ArmadaAttack1Mid;
trigger gt_ArmadaAttack2TopMid;
trigger gt_ArmadaAttack3BotMid;
trigger gt_ArmadaAttack4Bot;
trigger gt_ArmadaAttack5Mid;
trigger gt_ArmadaAttack6BotMid;
trigger gt_ArmadaAttack7Mid;
trigger gt_ArmadaAttack8TopMid;
trigger gt_ArmadaAttack9Top;
trigger gt_ArmadaAttack10Mid;
trigger gt_ArmadaAttack11Top;
trigger gt_ArmadaAttack12Mid;
trigger gt_ArmadaAttack13Bot;
trigger gt_SuperWarpGateSpawns;
trigger gt_DefeatBaseDead;
trigger gt_DefeatKeystoneDestroyed;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_StatSoAHitsonGoldenArmada;
trigger gt_AchievementSoAHitsonGoldenArmada;
trigger gt_AchievementVictorywithoutusingSpearofAdun;
trigger gt_MasteryKilltheBrutalisk;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;
trigger gt_VictoryMusic;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai36ECF245") { ai36ECF245_start(p); }
    if (cai_playerAI[p] == "ai5D126363") { ai5D126363_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai36ECF245") { ai36ECF245_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai5D126363") { ai5D126363_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai36ECF245") { return ai36ECF245_getCustomData(p); }
    if (cai_playerAI[p] == "ai5D126363") { return ai5D126363_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai36ECF245") { return ai36ECF245_getLastWave(p); }
    if (cai_playerAI[p] == "ai5D126363") { return ai5D126363_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai36ECF245") { ai36ECF245_waves_run(p, target); }
    if (cai_playerAI[p] == "ai5D126363") { ai5D126363_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai36ECF245") { ai36ECF245_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai5D126363") { ai5D126363_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai36ECF245") { ai36ECF245_waves_stop(); }
    if (ai == "ai5D126363") { ai5D126363_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai36ECF245") { ai36ECF245_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai5D126363") { ai5D126363_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai36ECF245") { ai36ECF245_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai5D126363") { ai5D126363_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai36ECF245") { return ai36ECF245_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai5D126363") { return ai5D126363_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai36ECF245") { return ai36ECF245_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai5D126363") { return ai5D126363_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai36ECF245") { return ai36ECF245_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai5D126363") { return ai5D126363_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai36ECF245", 6);
    cai_start("ai5D126363", 15);
    AICampaignStart(7);
    AICampaignStart(8);
    AICampaignStart(9);
    AICampaignStart(10);
    AICampaignStart(11);
    AICampaignStart(12);
    AICampaignStart(13);
    AICampaignStart(14);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 12);
    PlayerGroupAdd(target, 13);
    PlayerGroupAdd(target, 14);
    PlayerGroupAdd(target, 15);
    cai_waves_run(6, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 6);
    PlayerGroupAdd(target, 7);
    PlayerGroupAdd(target, 8);
    PlayerGroupAdd(target, 9);
    PlayerGroupAdd(target, 10);
    PlayerGroupAdd(target, 11);
    cai_waves_run(15, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_CU_GPInit (int lp_player) {
    // Automatic Variable Declarations
    string auto02D26085_val;
    string auto8B481DDD_val;
    string auto8FF8357F_val;
    string autoF7740BC3_val;

    // Implementation
    if ((gv_cU_GPInitialized[lp_player] == true)) {
        return ;
    }

    gv_cU_GPInitialized[lp_player] = true;
    if ((gv_cU_GPPanelHolder == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/GlobalCastingPanel");
        gv_cU_GPPanelHolder = DialogControlLastCreated();
        DialogControlSetVisible(gv_cU_GPPanelHolder, PlayerGroupAll(), false);
    }

    auto02D26085_val = PlayerRace(lp_player);
    if (auto02D26085_val == "Prot") {
        auto8B481DDD_val = libCOMI_gf_ActiveCommanderForPlayer(lp_player);
        if (auto8B481DDD_val == "ProtossArtanis") {
            gf_CU_GPInitProtoss(lp_player);
        }
        else if (auto8B481DDD_val == "ProtossVorazun") {
            gf_CU_GPInitProtoss(lp_player);
        }
        else if (auto8B481DDD_val == "ProtossKarax") {
            gf_CU_GPInitProtoss(lp_player);
        }
        else if (auto8B481DDD_val == "ProtossAlarak") {
            gf_CU_GPInitAlarak(lp_player);
        }
        else if (auto8B481DDD_val == "ProtossFenix") {
            gf_CU_GPInitFenix(lp_player);
        }
        else {
        }
    }
    else if (auto02D26085_val == "Terr") {
        auto8FF8357F_val = libCOMI_gf_ActiveCommanderForPlayer(lp_player);
        if (auto8FF8357F_val == "TerranRaynor") {
            gf_CU_GPInitRaynor(lp_player);
        }
        else if (auto8FF8357F_val == "TerranSwann") {
            gf_CU_GPInitSwann(lp_player);
        }
        else if (auto8FF8357F_val == "TerranNova") {
            gf_CU_GPInitNova(lp_player);
        }
        else {
        }
    }
    else if (auto02D26085_val == "Zerg") {
        autoF7740BC3_val = libCOMI_gf_ActiveCommanderForPlayer(lp_player);
        if (autoF7740BC3_val == "ZergAbathur") {
            gf_CU_GPInitAbathur(lp_player);
        }
        else if (autoF7740BC3_val == "ZergStukov") {
            gf_CU_GPInitStukov(lp_player);
        }
        else if (autoF7740BC3_val == "ZergDehaka") {
            gf_CU_GPInitDehaka(lp_player);
        }
        else {
        }
    }
    else {
    }
}

void gf_CU_GPInitProtoss (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    int autoC8018208_val;
    const int auto34DD5999_ae = 4;
    const int auto34DD5999_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    autoC8018208_val = lp_player;
    if (autoC8018208_val == 1) {
        TriggerEnable(gt_CU_GPVitalChangesP1, true);
    }
    else if (autoC8018208_val == 2) {
        TriggerEnable(gt_CU_GPVitalChangesP2, true);
    }
    else {
    }
    DialogControlCreateInPanelFromTemplate(gv_cU_GPPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/ProtossCasterPanelTemplate");
    gv_cU_GPPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "SoAButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "LotV_SoAMissionUIPanel/SoACommandPanelTemplate");
    gv_cU_GPCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (auto34DD5999_ai >= 0 && lv_buttonIndex <= auto34DD5999_ae) || (auto34DD5999_ai < 0 && lv_buttonIndex >= auto34DD5999_ae) ) ; lv_buttonIndex += auto34DD5999_ai ) {
        DialogControlHookup(gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        gv_cU_GPCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "SoAAbilityArrow0" + IntToString(lv_buttonIndex));
        gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, gv_cU_GPCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "SoAEnergyTooltipHitFrame");
    gv_cU_GPEnergyTooltip[lp_player] = DialogControlLastCreated();
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "SoAEnergyBarFill");
    gv_cU_GPEnergyBar[lp_player] = DialogControlLastCreated();
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypeLabel, "SoAEnergyLabel");
    gv_cU_GPEnergyLabel[lp_player] = DialogControlLastCreated();
    DialogControlSetVisible(gv_cU_GPPanel[lp_player], PlayerGroupAll(), false);
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypeCutscene, "SoACommandCutscene");
    gv_cU_GPCutscene[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemCutscene(gv_cU_GPCutscene[lp_player], "Cutscenes\\UI_SoAMission.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(gv_cU_GPCutscene[lp_player]));
    DialogControlHookup(gv_cU_GPEnergyBar[lp_player], c_triggerControlTypeCutscene, "SoAFillScene");
    gv_cU_GPEnergyBarScene[lp_player] = DialogControlLastCreated();
    CutscenePlay(CutsceneGetTriggerControl(gv_cU_GPEnergyBarScene[lp_player]));
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypeCutscene, "SoAOverlayCutscene");
    gv_cU_GPEnergyGlassScene[lp_player] = DialogControlLastCreated();
    CutscenePlay(CutsceneGetTriggerControl(gv_cU_GPEnergyGlassScene[lp_player]));
    if ((libCOMI_gf_ActiveCommanderForPlayer(lp_player) == "ProtossArtanis") && (libCOMI_gf_CC_PlayerMasteryUpgradeLevel(lp_player, "ArtanisMastery6") > 0)) {
        TextExpressionSetToken("Param/Expression/CCA876D0", "STDTOOLTIP", StringExternal("UI/SoAMissionEnergyTooltip"));
        TextExpressionSetToken("Param/Expression/CCA876D0", "ENERGY", IntToText(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryArtanisStartingAndMaxSoAEnergyDisplayDummy", "Amount", lp_player)));
        libNtve_gf_SetDialogItemTooltip(gv_cU_GPEnergyTooltip[lp_player], TextExpressionAssemble("Param/Expression/CCA876D0"), PlayerGroupSingle(lp_player));
    }
    else if ((libCOMI_gf_ActiveCommanderForPlayer(lp_player) == "ProtossVorazun") && (libCOMI_gf_CC_PlayerMasteryUpgradeLevel(lp_player, "VorazunMastery6") > 0)) {
        TextExpressionSetToken("Param/Expression/B7495FA3", "STDTOOLTIP", StringExternal("UI/SoAMissionEnergyTooltip"));
        TextExpressionSetToken("Param/Expression/B7495FA3", "ENERGY", IntToText(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryVorazunStartingAndMaxSoAEnergyDisplayDummy", "Amount", lp_player)));
        libNtve_gf_SetDialogItemTooltip(gv_cU_GPEnergyTooltip[lp_player], TextExpressionAssemble("Param/Expression/B7495FA3"), PlayerGroupSingle(lp_player));
    }
    else if ((libCOMI_gf_ActiveCommanderForPlayer(lp_player) == "ProtossKarax") && (libCOMI_gf_CC_PlayerMasteryUpgradeLevel(lp_player, "KaraxMastery6") > 0)) {
        TextExpressionSetToken("Param/Expression/165673C2", "STDTOOLTIP", StringExternal("UI/SoAMissionEnergyTooltip"));
        TextExpressionSetToken("Param/Expression/165673C2", "ENERGY", IntToText(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryKaraxStartingAndMaxSoAEnergyDisplayDummy", "Amount", lp_player)));
        libNtve_gf_SetDialogItemTooltip(gv_cU_GPEnergyTooltip[lp_player], TextExpressionAssemble("Param/Expression/165673C2"), PlayerGroupSingle(lp_player));
    }
}

void gf_CU_GPInitAlarak (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int autoEBA2DEDD_ae = 2;
    const int autoEBA2DEDD_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(gv_cU_GPPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/AlarakCasterPanelTemplate");
    gv_cU_GPPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypeCutscene, "AlarakCommandCutscene");
    gv_cU_GPCutscene[lp_player] = DialogControlLastCreated();
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "ButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_GlobalCastingTemplates/AlarakGlobalCommandPanelTemplate");
    gv_cU_GPCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (autoEBA2DEDD_ai >= 0 && lv_buttonIndex <= autoEBA2DEDD_ae) || (autoEBA2DEDD_ai < 0 && lv_buttonIndex >= autoEBA2DEDD_ae) ) ; lv_buttonIndex += autoEBA2DEDD_ai ) {
        DialogControlHookup(gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        gv_cU_GPCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "AbilityArrow0" + IntToString(lv_buttonIndex));
        gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, gv_cU_GPCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlSetVisible(gv_cU_GPPanel[lp_player], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemCutscene(gv_cU_GPCutscene[lp_player], "Cutscenes\\UI_AlarakCastingPanel.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(gv_cU_GPCutscene[lp_player]));
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypeButton, "GemButton");
    gv_cU_GPAlarakButton[lp_player] = DialogControlLastCreated();
    TriggerEnable(gt_CU_GPAlarakGemPress, true);
}

void gf_CU_GPInitFenix (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto76D87F2F_ae = 3;
    const int auto76D87F2F_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(gv_cU_GPPanelHolder, c_triggerControlTypePanel, "Coop_TopBar_Fenix/FenixCasterPanelTemplate");
    gv_cU_GPPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "SoAButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_TopBar_Fenix/FenixGlobalCasterCommandPanelTemplate");
    gv_cU_GPCmdPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeUnitStatus, "CommandPanelUnitStatus");
    gv_cU_GPCmdPanelUnitStatus[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (auto76D87F2F_ai >= 0 && lv_buttonIndex <= auto76D87F2F_ae) || (auto76D87F2F_ai < 0 && lv_buttonIndex >= auto76D87F2F_ae) ) ; lv_buttonIndex += auto76D87F2F_ai ) {
        DialogControlHookup(gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        gv_cU_GPCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(gv_cU_GPCmdButtons[lv_buttonIndex][lp_player], c_triggerControlTypeImage, "FenixButtonActiveImage");
        gv_cU_GPCmdButtonActiveImage[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(gv_cU_GPCmdButtons[lv_buttonIndex][lp_player], c_triggerControlTypeImage, "FenixButtonInactiveImage");
        gv_cU_GPCmdButtonBackgroundImage[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "SoAAbilityArrow0" + IntToString(lv_buttonIndex));
        gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, gv_cU_GPCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
        DialogControlHookup(gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeUnitStatus, "HeroMonitorStatusFrame0" + IntToString(lv_buttonIndex-1));
        gv_cU_GPUnitEnergyLinks[lv_buttonIndex][lp_player] = DialogControlLastCreated();
    }
    DialogControlSetVisible(gv_cU_GPPanel[lp_player], PlayerGroupAll(), false);
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypeCutscene, "FenixCommandCutscene");
    gv_cU_GPCutscene[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemCutscene(gv_cU_GPCutscene[lp_player], "Cutscenes\\UI_FenixCastingPanel.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(gv_cU_GPCutscene[lp_player]));
    if ((libCOMI_gf_CC_PerkStateCheck("FenixUnlockArbiterSuit", libCOMI_ge_CC_PerkState_Active, "ProtossFenix", lp_player) == true)) {
        DialogControlSetAnimationState(gv_cU_GPCmdButtons[3][lp_player], PlayerGroupAll(), "UnlockState", "Unlocked");
    }
    else {
        DialogControlSetAnimationState(gv_cU_GPCmdButtons[3][lp_player], PlayerGroupAll(), "UnlockState", "Locked");
    }
}

void gf_LinkUnitEnergyToGlobalCasterButton (unit lp_unit, int lp_player, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemUnit(gv_cU_GPUnitEnergyLinks[lp_index][lp_player], lp_unit, PlayerGroupSingle(lp_player));
    DialogControlSetVisible(gv_cU_GPUnitEnergyLinks[lp_index][lp_player], PlayerGroupSingle(lp_player), true);
}

void gf_CU_GPInitRaynor (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto7DDE6CF1_ae = 2;
    const int auto7DDE6CF1_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(gv_cU_GPPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate");
    gv_cU_GPPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypeCutscene, "TerranCommandCutscene");
    gv_cU_GPCutscene[lp_player] = DialogControlLastCreated();
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "ButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_GlobalCastingTemplates/RaynorGlobalCommandPanelTemplate");
    gv_cU_GPCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (auto7DDE6CF1_ai >= 0 && lv_buttonIndex <= auto7DDE6CF1_ae) || (auto7DDE6CF1_ai < 0 && lv_buttonIndex >= auto7DDE6CF1_ae) ) ; lv_buttonIndex += auto7DDE6CF1_ai ) {
        DialogControlHookup(gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        gv_cU_GPCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "AbilityArrow0" + IntToString(lv_buttonIndex));
        gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, gv_cU_GPCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlSetVisible(gv_cU_GPPanel[lp_player], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemCutscene(gv_cU_GPCutscene[lp_player], "Cutscenes\\UI_TerranCastingPanel.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(gv_cU_GPCutscene[lp_player]));
    gv_cU_GPCutsceneFilter[lp_player] = "TwoButtons";
}

void gf_CU_GPInitSwann (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto732E9D26_ae = 4;
    const int auto732E9D26_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(gv_cU_GPPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate");
    gv_cU_GPPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypeCutscene, "TerranCommandCutscene");
    gv_cU_GPCutscene[lp_player] = DialogControlLastCreated();
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "ButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_GlobalCastingTemplates/TerranGlobalCommandPanelTemplate");
    gv_cU_GPCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (auto732E9D26_ai >= 0 && lv_buttonIndex <= auto732E9D26_ae) || (auto732E9D26_ai < 0 && lv_buttonIndex >= auto732E9D26_ae) ) ; lv_buttonIndex += auto732E9D26_ai ) {
        DialogControlHookup(gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        gv_cU_GPCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "AbilityArrow0" + IntToString(lv_buttonIndex));
        gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, gv_cU_GPCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlSetVisible(gv_cU_GPPanel[lp_player], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemCutscene(gv_cU_GPCutscene[lp_player], "Cutscenes\\UI_TerranCastingPanel.SC2Cutscene", PlayerGroupAll());
    gv_cU_GPCutsceneFilter[lp_player] = "FourButtons";
    CutscenePlay(CutsceneGetTriggerControl(gv_cU_GPCutscene[lp_player]));
}

void gf_CU_GPInitAbathur (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto2BB76616_ae = 2;
    const int auto2BB76616_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(gv_cU_GPPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/ZergCasterPanelTemplate");
    gv_cU_GPPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypeCutscene, "ZergCommandCutscene");
    gv_cU_GPCutscene[lp_player] = DialogControlLastCreated();
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "ButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_GlobalCastingTemplates/ZergGlobalCommandPanelTemplate");
    gv_cU_GPCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (auto2BB76616_ai >= 0 && lv_buttonIndex <= auto2BB76616_ae) || (auto2BB76616_ai < 0 && lv_buttonIndex >= auto2BB76616_ae) ) ; lv_buttonIndex += auto2BB76616_ai ) {
        DialogControlHookup(gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        gv_cU_GPCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "AbilityArrow0" + IntToString(lv_buttonIndex));
        gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, gv_cU_GPCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlSetVisible(gv_cU_GPPanel[lp_player], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemCutscene(gv_cU_GPCutscene[lp_player], "Cutscenes\\UI_ZergCastingPanel.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(gv_cU_GPCutscene[lp_player]));
}

void gf_CU_GPInitStukov (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto30421A92_ae = 4;
    const int auto30421A92_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(gv_cU_GPPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/ZergCasterPanelTemplate");
    gv_cU_GPPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypeCutscene, "ZergCommandCutscene");
    gv_cU_GPCutscene[lp_player] = DialogControlLastCreated();
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "ButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_GlobalCastingTemplates/StukovGlobalCommandPanelTemplate");
    gv_cU_GPCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (auto30421A92_ai >= 0 && lv_buttonIndex <= auto30421A92_ae) || (auto30421A92_ai < 0 && lv_buttonIndex >= auto30421A92_ae) ) ; lv_buttonIndex += auto30421A92_ai ) {
        DialogControlHookup(gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        gv_cU_GPCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "AbilityArrow0" + IntToString(lv_buttonIndex));
        gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, gv_cU_GPCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlSetVisible(gv_cU_GPPanel[lp_player], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemCutscene(gv_cU_GPCutscene[lp_player], "Cutscenes\\UI_StukovCastingPanel.SC2Cutscene", PlayerGroupSingle(lp_player));
    CutscenePlay(CutsceneGetTriggerControl(gv_cU_GPCutscene[lp_player]));
}

void gf_CU_GPInitDehaka (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int autoE9EB47F6_ae = 4;
    const int autoE9EB47F6_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(gv_cU_GPPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/ZergCasterPanelTemplate");
    gv_cU_GPPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypeCutscene, "ZergCommandCutscene");
    gv_cU_GPCutscene[lp_player] = DialogControlLastCreated();
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "ButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_GlobalCastingTemplates/DehakaGlobalCommandPanelTemplate");
    gv_cU_GPCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (autoE9EB47F6_ai >= 0 && lv_buttonIndex <= autoE9EB47F6_ae) || (autoE9EB47F6_ai < 0 && lv_buttonIndex >= autoE9EB47F6_ae) ) ; lv_buttonIndex += autoE9EB47F6_ai ) {
        DialogControlHookup(gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        gv_cU_GPCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "AbilityArrow0" + IntToString(lv_buttonIndex));
        gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, gv_cU_GPCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlSetVisible(gv_cU_GPPanel[lp_player], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemCutscene(gv_cU_GPCutscene[lp_player], "Cutscenes\\UI_DehakaCastingPanel.SC2Cutscene", PlayerGroupSingle(lp_player));
    CutscenePlay(CutsceneGetTriggerControl(gv_cU_GPCutscene[lp_player]));
}

void gf_CU_GPInitNova (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto6EADE59C_ae = 4;
    const int auto6EADE59C_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(gv_cU_GPPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate");
    gv_cU_GPPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypeCutscene, "TerranCommandCutscene");
    gv_cU_GPCutscene[lp_player] = DialogControlLastCreated();
    DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "ButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_GlobalCastingTemplates/TerranGlobalCommandPanelTemplate");
    gv_cU_GPCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (auto6EADE59C_ai >= 0 && lv_buttonIndex <= auto6EADE59C_ae) || (auto6EADE59C_ai < 0 && lv_buttonIndex >= auto6EADE59C_ae) ) ; lv_buttonIndex += auto6EADE59C_ai ) {
        DialogControlHookup(gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        gv_cU_GPCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "AbilityArrow0" + IntToString(lv_buttonIndex));
        gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, gv_cU_GPCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlSetVisible(gv_cU_GPPanel[lp_player], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemCutscene(gv_cU_GPCutscene[lp_player], "Cutscenes\\UI_TerranCastingPanel.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(gv_cU_GPCutscene[lp_player]));
    gv_cU_GPCutsceneFilter[lp_player] = "Nova";
}

abilcmd gf_CU_GPActiveAbilityCommand (int lp_slot, int lp_player) {
    // Variable Declarations
    int lv_cardIndex;
    int lv_buttonIndex;
    string lv_path;
    abilcmd lv_command;

    // Automatic Variable Declarations
    int auto8084B0EF_ae;
    const int auto8084B0EF_ai = 1;
    int autoFC4F767D_ae;
    const int autoFC4F767D_ai = 1;

    // Variable Initialization
    lv_path = "";

    // Implementation
    auto8084B0EF_ae = (CatalogFieldValueCount(c_gameCatalogUnit, "SoACaster", "CardLayouts", lp_player)-1);
    lv_cardIndex = 0;
    for ( ; ( (auto8084B0EF_ai >= 0 && lv_cardIndex <= auto8084B0EF_ae) || (auto8084B0EF_ai < 0 && lv_cardIndex >= auto8084B0EF_ae) ) ; lv_cardIndex += auto8084B0EF_ai ) {
        autoFC4F767D_ae = (CatalogFieldValueCount(c_gameCatalogUnit, "SoACaster", (("CardLayouts[" + IntToString(lv_cardIndex) + "].LayoutButtons")), lp_player)-1);
        lv_buttonIndex = 0;
        for ( ; ( (autoFC4F767D_ai >= 0 && lv_buttonIndex <= autoFC4F767D_ae) || (autoFC4F767D_ai < 0 && lv_buttonIndex >= autoFC4F767D_ae) ) ; lv_buttonIndex += autoFC4F767D_ai ) {
            lv_path = ("CardLayouts[" + IntToString(lv_cardIndex) + "].LayoutButtons[" + IntToString(lv_buttonIndex) + "]");
            if ((CatalogFieldValueGet(c_gameCatalogUnit, "SoACaster", ((lv_path + ".Type")), lp_player) == "AbilCmd") && (CatalogFieldValueGetAsInt(c_gameCatalogUnit, "SoACaster", ((lv_path + ".Row")), lp_player) == 0) && (CatalogFieldValueGetAsInt(c_gameCatalogUnit, "SoACaster", ((lv_path + ".Column")), lp_player) == (lp_slot-1))) {
                lv_command = StringToAbilCmd(CatalogFieldValueGet(c_gameCatalogUnit, "SoACaster", ((lv_path + ".AbilCmd")), lp_player));
                if ((TechTreeAbilityIsAllowed(lp_player, lv_command) == true)) {
                    return lv_command;
                }

            }

        }
    }
    return null;
}

void gf_CU_GPSoAUpdateVitals (int lp_player) {
    // Variable Declarations
    playergroup lv_soAPlayers;
    int lv_orbHeight;
    fixed lv_energyFloored;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soAPlayers = PlayerGroupEmpty();

    // Implementation
    lv_energyFloored = Floor(UnitGetPropertyFixed(gv_cU_GPUnit[lp_player], c_unitPropEnergy, c_unitPropCurrent));
    if ((lv_energyFloored == gv_cU_GPLastEnergyUpdate[lp_player])) {
        return ;
    }

    gv_cU_GPLastEnergyUpdate[lp_player] = lv_energyFloored;
    lv_soAPlayers = PlayerGroupSingle(lp_player);
    TextExpressionSetToken("Param/Expression/A207CC0C", "A", IntToText(FixedToInt(lv_energyFloored)));
    libNtve_gf_SetDialogItemText(gv_cU_GPEnergyLabel[lp_player], TextExpressionAssemble("Param/Expression/A207CC0C"), lv_soAPlayers);
    DialogControlSendAnimationEvent(gv_cU_GPEnergyBarScene[lp_player], PlayerGroupAll(), "SetEnergyPlay");
    DialogControlSetAnimationTime(gv_cU_GPEnergyBarScene[lp_player], PlayerGroupAll(), "EnergyLevel", UnitGetPropertyFixed(gv_cU_GPUnit[lp_player], c_unitPropEnergyPercent, c_unitPropCurrent));
    DialogControlSendAnimationEvent(gv_cU_GPEnergyBarScene[lp_player], PlayerGroupAll(), "SetEnergyPause");
    gf_CU_GPCheckForEnergyHighlight(lp_player);
}

void gf_CU_GPHighlightButton (int lp_slot, bool lp_on, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_cU_GPCmdButtonArrows[lp_slot][lp_player] == c_invalidDialogControlId)) {
        return ;
    }

    gv_cU_GPButtonHighlighted[lp_slot][lp_player] = lp_on;
    if ((lp_on == true) && (DialogControlIsVisible(gv_cU_GPPanel[lp_player], lp_player) == true)) {
        DialogControlSetVisible(gv_cU_GPCmdButtonArrows[lp_slot][lp_player], PlayerGroupSingle(lp_player), true);
    }
    else {
        DialogControlSetVisible(gv_cU_GPCmdButtonArrows[lp_slot][lp_player], PlayerGroupSingle(lp_player), false);
    }
}

void gf_CU_GPCheckForEnergyHighlight (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerRace(lp_player) != "Prot") || (libCOMI_gf_ActiveCommanderForPlayer(lp_player) == "ProtossAlarak") || (libCOMI_gf_ActiveCommanderForPlayer(lp_player) == "ProtossFenix") || (DialogControlIsVisible(gv_cU_GPCmdPanel[lp_player], lp_player) == false))) {
        return ;
    }

    if ((UnitGetPropertyFixed(gv_cU_GPUnit[lp_player], c_unitPropEnergyPercent, c_unitPropCurrent) == 100.0)) {
        gf_CU_GPEnergyHighlight(true, lp_player);
    }
    else {
        gf_CU_GPEnergyHighlight(false, lp_player);
    }
}

void gf_CU_GPEnergyHighlight (bool lp_enable, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enable == true)) {
        gv_cU_GPEnergyHighlighting[lp_player] = true;
        CutsceneGoToBookmark(CutsceneGetTriggerControl(gv_cU_GPEnergyGlassScene[lp_player]), "PowerUp");
        CutsceneGoToBookmark(CutsceneGetTriggerControl(gv_cU_GPEnergyBarScene[lp_player]), "PowerUp");
        CutsceneGoToBookmark(CutsceneGetTriggerControl(gv_cU_GPCutscene[lp_player]), "PowerUp");
    }
    else {
        if ((gv_cU_GPEnergyHighlighting[lp_player] == true)) {
            CutsceneGoToBookmark(CutsceneGetTriggerControl(gv_cU_GPEnergyGlassScene[lp_player]), "PowerDown");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(gv_cU_GPEnergyBarScene[lp_player]), "PowerDown");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(gv_cU_GPCutscene[lp_player]), "PowerDown");
            gv_cU_GPEnergyHighlighting[lp_player] = false;
        }

    }
}

void gf_CU_GPSetUnit (unit lp_casterUnit, int lp_player) {
    // Automatic Variable Declarations
    unitgroup autoB6FC5314_g;
    int autoB6FC5314_u;
    unit autoB6FC5314_var;

    // Implementation
    gf_CU_GPInit(lp_player);
    gv_cU_GPUnit[lp_player] = lp_casterUnit;
    autoB6FC5314_g = gv_cU_GPCasterGroup[lp_player];
    autoB6FC5314_u = UnitGroupCount(autoB6FC5314_g, c_unitCountAll);
    for (;; autoB6FC5314_u -= 1) {
        autoB6FC5314_var = UnitGroupUnitFromEnd(autoB6FC5314_g, autoB6FC5314_u);
        if (autoB6FC5314_var == null) { break; }
        UnitGroupRemove(gv_cU_GPCasterGroup[lp_player], autoB6FC5314_var);
    }
    UnitGroupAdd(gv_cU_GPCasterGroup[lp_player], lp_casterUnit);
    libNtve_gf_SetDialogItemUnitGroup(gv_cU_GPCmdPanel[lp_player], gv_cU_GPCasterGroup[lp_player], PlayerGroupSingle(lp_player));
    if ((TechTreeUpgradeCount(lp_player, "FenixCommander", c_techCountCompleteOnly) == 1)) {
        libNtve_gf_SetDialogItemUnit(gv_cU_GPCmdPanelUnitStatus[lp_player], gv_cU_GPUnit[lp_player], PlayerGroupSingle(lp_player));
    }

    if ((PlayerRace(lp_player) == "Prot")) {
        gf_CU_GPSoAUpdateVitals(lp_player);
    }

}

void gf_CU_GPShowHide (bool lp_showHide, int lp_player, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    gv_cU_GPVisible[lp_player] = (lp_showHide == true);
    gf_CU_GPVisibilitySet(lp_showHide, lp_player, lp_duration);
}

void gf_CU_GPVisibilitySet (bool lp_showHide, int lp_player, fixed lp_duration) {
    // Variable Declarations
    playergroup lv_updatePlayers;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto0301DB60_ae = 4;
    const int auto0301DB60_ai = 1;
    const int autoA7054F38_ae = 4;
    const int autoA7054F38_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();

    // Implementation
    lv_updatePlayers = PlayerGroupSingle(lp_player);
    gf_CU_GPInit(lp_player);
    if ((gv_cU_GPPanel[lp_player] == c_invalidDialogControlId)) {
        return ;
    }

    if ((gv_cU_GPCutsceneFilter[lp_player] != "")) {
        CutsceneAddFilter(CutsceneGetTriggerControl(gv_cU_GPCutscene[lp_player]), gv_cU_GPCutsceneFilter[lp_player]);
    }

    if ((lp_showHide == true)) {
        DialogControlSetVisible(gv_cU_GPPanelHolder, lv_updatePlayers, lp_showHide);
        DialogControlSetVisible(gv_cU_GPPanel[lp_player], lv_updatePlayers, lp_showHide);
        if ((gv_cU_GPCutscene[lp_player] == c_invalidDialogControlId)) {
            return ;
        }

        CutsceneSetTime(CutsceneGetTriggerControl(gv_cU_GPCutscene[lp_player]), 0);
        CutscenePlay(CutsceneGetTriggerControl(gv_cU_GPCutscene[lp_player]));
        if ((gv_cU_GPEnergyBarScene[lp_player] != c_invalidDialogControlId)) {
            CutsceneSetTime(CutsceneGetTriggerControl(gv_cU_GPEnergyBarScene[lp_player]), 0);
        }

        if ((gv_cU_GPEnergyGlassScene[lp_player] != c_invalidDialogControlId)) {
            CutsceneSetTime(CutsceneGetTriggerControl(gv_cU_GPEnergyGlassScene[lp_player]), 0);
        }

        if ((lp_duration == c_transitionDurationImmediate)) {
            lv_buttonIndex = 1;
            for ( ; ( (autoA7054F38_ai >= 0 && lv_buttonIndex <= autoA7054F38_ae) || (autoA7054F38_ai < 0 && lv_buttonIndex >= autoA7054F38_ae) ) ; lv_buttonIndex += autoA7054F38_ai ) {
                if ((gv_cU_GPButtonHighlighted[lv_buttonIndex][lp_player] == true) && (gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], lv_updatePlayers, true);
                }

            }
            CutsceneGoToBookmark(CutsceneGetTriggerControl(gv_cU_GPCutscene[lp_player]), "LoopStart");
            if ((gv_cU_GPEnergyBarScene[lp_player] != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(gv_cU_GPEnergyBarScene[lp_player]), "LoopStart");
            }

            if ((gv_cU_GPEnergyGlassScene[lp_player] != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(gv_cU_GPEnergyGlassScene[lp_player]), "LoopStart");
            }

            DialogControlSetVisible(gv_cU_GPCmdPanel[lp_player], lv_updatePlayers, lp_showHide);
            if ((gv_cU_GPEnergyLabel[lp_player] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_cU_GPEnergyLabel[lp_player], lv_updatePlayers, lp_showHide);
            }

        }
        else {
            DialogControlSetVisible(gv_cU_GPCmdPanel[lp_player], lv_updatePlayers, false);
            if ((gv_cU_GPEnergyLabel[lp_player] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_cU_GPEnergyLabel[lp_player], lv_updatePlayers, false);
            }

        }
    }
    else {
        if ((lp_duration == c_transitionDurationImmediate)) {
            lv_buttonIndex = 1;
            for ( ; ( (auto0301DB60_ai >= 0 && lv_buttonIndex <= auto0301DB60_ae) || (auto0301DB60_ai < 0 && lv_buttonIndex >= auto0301DB60_ae) ) ; lv_buttonIndex += auto0301DB60_ai ) {
                if ((gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], lv_updatePlayers, false);
                }

            }
            DialogControlSetVisible(gv_cU_GPPanelHolder, lv_updatePlayers, lp_showHide);
            DialogControlSetVisible(gv_cU_GPPanel[lp_player], lv_updatePlayers, lp_showHide);
            DialogControlSetVisible(gv_cU_GPCmdPanel[lp_player], lv_updatePlayers, lp_showHide);
            if ((gv_cU_GPEnergyLabel[lp_player] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_cU_GPEnergyLabel[lp_player], lv_updatePlayers, lp_showHide);
            }

            if ((gv_cU_GPEnergyTooltip[lp_player] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_cU_GPEnergyTooltip[lp_player], lv_updatePlayers, lp_showHide);
            }

        }
        else {
            CutsceneGoToBookmark(CutsceneGetTriggerControl(gv_cU_GPCutscene[lp_player]), "Death");
            if ((gv_cU_GPEnergyBarScene[lp_player] != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(gv_cU_GPEnergyBarScene[lp_player]), "Death");
            }

            if ((gv_cU_GPEnergyGlassScene[lp_player] != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(gv_cU_GPEnergyGlassScene[lp_player]), "Death");
            }

        }
    }
}

void gf_CU_GPVisibilityAutoUpdate (bool lp_showHide, int lp_player, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_cU_GPVisible[lp_player] == false)) {
        return ;
    }

    gf_CU_GPVisibilitySet(lp_showHide, lp_player, lp_duration);
}

void gf_CreateEnergyTracker (int lp_playernumber) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 120, 80, c_anchorBottomRight, 25, 0, StringToText(""), StringToText(""), "");
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
    gv_casterUnitEnergyTracker[lp_playernumber] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 114, 1, c_anchorBottomRight, 28, 3, StringToText(""), "Assets\\Textures\\ui_void_shared_progressbarfill_zerg.dds", c_triggerImageTypeNormal, false, Color(254*100/255,138*100/255,14*100/255), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
    gv_casterUnitEnergyTracker_visual[lp_playernumber] = DialogControlLastCreated();
}

void gf_SetArtanisAllies2 (int lp_playernumber) {
    // Variable Declarations
    int lv_integer;

    // Automatic Variable Declarations
    const int auto2F733888_ae = 12;
    const int auto2F733888_ai = 1;

    // Variable Initialization

    // Implementation
    lv_integer = 1;
    for ( ; ( (auto2F733888_ai >= 0 && lv_integer <= auto2F733888_ae) || (auto2F733888_ai < 0 && lv_integer >= auto2F733888_ae) ) ; lv_integer += auto2F733888_ai ) {
        if ((libNtve_gf_PlayerIsEnemy(lp_playernumber, lv_integer, libNtve_ge_PlayerRelation_Ally) == true)) {
            gv_allyofArtanis2[lv_integer] = true;
        }

    }
}

void gf_SetZergFaction (int lp_playernumber) {
    // Variable Declarations
    int lv_playernumber;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_playernumber = lp_playernumber;
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganCommander", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganInfestedCosmetic", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "K5PrimalSlash", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "K5PsiStrike", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganImmobilizationWave", 1);
    TechTreeAbilityAllow(lp_playernumber, AbilityCommand("KerriganVoidCoopCrushingGripWave", 0), true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganVoidCoopImprovedLeapingStrike", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganZagaraSpawningPoolUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "HotSZerglingHealth", true);
    TechTreeUpgradeAllow(lp_playernumber, "ZerglingArmorShred", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "HotSLurker", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "HotSHaveLurker", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "HotSHaveLurker", 1);
    TechTreeUnitAllow(lv_playernumber, "Hydralisk", false);
    TechTreeUnitAllow(lv_playernumber, "Lurker", true);
    TechTreeUnitAllow(lv_playernumber, "HydraliskLurker", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganHydraliskUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "HydraliskFrenzy", true);
    TechTreeUpgradeAllow(lp_playernumber, "HotSHydraliskHealth", true);
    TechTreeUpgradeAllow(lp_playernumber, "SeismicSpines", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganCreepBonusesCoop", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "K5CreepBonuses", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "VoidCoopGreaterNydusWorm", 1);
    TechTreeUpgradeAllow(lp_playernumber, "K5ChainLightning", true);
    TechTreeUpgradeAllow(lp_playernumber, "K5Cooldowns", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "K5Fury", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganKerriganUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "MutaliskSunderingGlave", true);
    TechTreeUpgradeAllow(lp_playernumber, "KerriganVoidCoopBroodlordSpeed", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "CoopZerglingRaptor", 1);
    TechTreeUnitAllow(lv_playernumber, "Zergling", false);
    TechTreeUnitAllow(lv_playernumber, "HotSRaptor", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganUltraliskUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "UltraliskBurrowChargeUpgrade", true);
    TechTreeUpgradeAllow(lp_playernumber, "HotSTissueAssimilation", true);
    TechTreeUpgradeAllow(lp_playernumber, "HotSUltraliskBurrowCharge", true);
    TechTreeUnitAllow(lv_playernumber, "HotSTorrasque", true);
    TechTreeUnitAllow(lv_playernumber, "Ultralisk", false);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "HotSTorrasque", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganVoidCoopEnergyRegen", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "ZagaraCommander", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "K5TwoDrones", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "HotSHaveAberration", 1);
    TechTreeAbilityAllow(lp_playernumber, AbilityCommand("ZagaraVoidCoopMassRoachDrop", 0), true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "QueenDoubleInjectLarva", 1);
    TechTreeUpgradeAllow(lp_playernumber, "ScourgeGasCostReduction", true);
    TechTreeUpgradeAllow(lp_playernumber, "ScourgeSplashDamage", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "ZagaraBileLaunchers", 1);
    TechTreeUnitAllow(lp_playernumber, "BileLauncherZagara", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganZagaraSpawningPoolUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "HotSZerglingHealth", true);
    TechTreeUpgradeAllow(lp_playernumber, "ZerglingArmorShred", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "ZagaraVoidCoopBanelingSpawner", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "ZagaraVoidCoopAberrationBanelingIncubation", 1);
    TechTreeUpgradeAllow(lp_playernumber, "AberrationArmorAura", true);
    TechTreeUpgradeAllow(lp_playernumber, "ZagaraVoidCoopAttackUpgrade", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "ZagaraVoidCoopImprovedMassRoachDrop", 1);
    TechTreeUpgradeAllow(lp_playernumber, "HotSRupture", true);
    TechTreeUpgradeAllow(lp_playernumber, "HotSBanelingCorrosiveBile", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "CoopZerglingSwarmling", 1);
    TechTreeUnitAllow(lv_playernumber, "HotSSwarmling", true);
    TechTreeUnitAllow(lv_playernumber, "Zergling", false);
    TechTreeUpgradeAllow(lp_playernumber, "BileLauncherBombardmentCooldown", true);
    TechTreeUpgradeAllow(lp_playernumber, "BileLauncherIncreasedRange", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "CoopBanelingSplitterling", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "ZagaraVoidCoopImprovedAbilities", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "AbathurCommander", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "HotSHaveQueen", 1);
    TechTreeUnitAllow(lv_playernumber, "Brutalisk", true);
    TechTreeUnitAllow(lv_playernumber, "HotSLeviathan", true);
    TechTreeUnitAllow(lv_playernumber, "Leviathan", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "AbathurToxicNestIcreasedBiomass", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "ToxicNestattackgivesMarkforCollectionPassive", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "AbathurImprovedMend", 1);
    TechTreeUpgradeAllow(lp_playernumber, "AbathurBioMechanicalTransfusion", true);
    TechTreeUpgradeAllow(lp_playernumber, "AbathurHatcheryDoubleQueue", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "AbathurBiomassRefund", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "HotSHaveViper", 1);
    TechTreeUpgradeAllow(lp_playernumber, "AbathurDeepTunnel", true);
    TechTreeUpgradeAllow(lp_playernumber, "ViperAbductImprovedStun", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "AbathurEnableSymbiote", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "KerriganSpirelUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "DevourerAoEDamage", true);
    TechTreeUpgradeAllow(lp_playernumber, "GuardianAttackRangeIncrease", true);
    TechTreeUpgradeAllow(lp_playernumber, "MutaliskSunderingGlave", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "AbathurMorphTimeCostReduced", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "AbathurEnemyDeathCreateLocusts", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "RoachVile", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "HotSHaveVile", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "AbathurBiomassLifeLeech", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "StukovCommander", 1);
    TechTreeAbilityAllow(lp_playernumber, AbilityCommand("SIStukovInfestStructureUpgraded", 0), true);
    TechTreeAbilityAllow(lp_playernumber, AbilityCommand("SIStukovInfestStructure", 0), false);
    TechTreeAbilityAllow(lp_playernumber, AbilityCommand("SIStukovInfestStructureUpgraded", 0), false);
    TechTreeAbilityAllow(lp_playernumber, AbilityCommand("SIStukovInfestStructure", 0), true);
    TechTreeUpgradeAllow(lp_playernumber, "HeavyInfestation", false);
    TechTreeUpgradeAllow(lp_playernumber, "SIBarracksTrainInfestedCivilianLevel4", false);
    TechTreeAbilityAllow(lv_playernumber, AbilityCommand("StukovSummonApocalisk", 0), false);
    TechTreeUpgradeAllow(lp_playernumber, "SIBunkerArmor", false);
    TechTreeUpgradeAllow(lp_playernumber, "SIBunkerLifeRegen", false);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "SIImprovedMarineSpawning", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "StukovInfantryUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "SIMarinePlaguedMunitions", false);
    TechTreeUpgradeAllow(lp_playernumber, "StukovInfestedCivilianSpawnBroodlingOnDeath", false);
    TechTreeUnitAllow(lp_playernumber, "SIQueen", false);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "StukovFactoryUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "InfestedSiegeTankArmoredDamage", false);
    TechTreeUpgradeAllow(lp_playernumber, "SIDiamondbackSnailTrail", false);
    TechTreeAbilityAllow(lv_playernumber, AbilityCommand("StukovSummonAleksander", 0), false);
    TechTreeUpgradeAllow(lp_playernumber, "StukovInfestedBansheeInfestedLife", false);
    TechTreeUpgradeAllow(lp_playernumber, "LiberatorInfestedBecomeSwarm", false);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "StukovApocaliskUpgrades", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "StukovBroodQueenUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "SIQueenEnergy", false);
    TechTreeUpgradeAllow(lp_playernumber, "SIQueenFungalGrowth", false);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "SIInfestedBunkerUpgraded", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "StukovAleksanderMindControl", 1);
    TechTreeAbilityAllow(lp_playernumber, AbilityCommand("SIStukovInfestStructure", 0), true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_playernumber, "StukovEngineeringBayUpgradeCatch", 1);
}

void gf_SetTerranFaction (int lp_playernumber) {
    // Variable Declarations
    int lv_pLAYER;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pLAYER = lp_playernumber;

    // Implementation
    lv_pLAYER = lp_playernumber;
    PlayerSetRace(lv_pLAYER, "Terr");
    PlayerSetCommander(lv_pLAYER, "Raynor");
    PlayerSetColorIndex(lv_pLAYER, 2, true);
    TechTreeUpgradeAddLevel(lv_pLAYER, "NovaCommander", 1);
    TechTreeUpgradeAddLevel(lv_pLAYER, "RaynorCommander", 1);
    TechTreeUpgradeAddLevel(lv_pLAYER, "SwannCommander", 1);
    TechTreeUpgradeAddLevel(lv_pLAYER, "MengskCommander", 1);
    TechTreeUpgradeAddLevel(lv_pLAYER, "TychusCommander", 1);
    TechTreeUpgradeAddLevel(lv_pLAYER, "StetmannCommander", 1);
    TechTreeUpgradeAddLevel(lv_pLAYER, "StetmannIsPresent", 1);
    TechTreeUpgradeAddLevel(lv_pLAYER, "CommanderLevel", 15);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "TychusHeroMaxed", 15);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "RaynorCommanderStimUpgrade", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "RaynorCommander", 1);
    TechTreeUpgradeAllow(lp_playernumber, "NanoConstructor", true);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "Stimpack", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "CommanderLevel", 15);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "RaynorBansheeAirstrike", 1);
    TechTreeAbilityAllow(lv_pLAYER, AbilityCommand("BansheeAirstrike", 0), true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "RaynorFirebatMedicRange", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "RaynorInfantryUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "BearclawNozzles", true);
    TechTreeUpgradeAllow(lp_playernumber, "FirebatJuggernautPlating", true);
    TechTreeUpgradeAllow(lp_playernumber, "StabilizerMedPacks", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "Raynorlevel5", 1);
    TechTreeAbilityAllow(lv_pLAYER, AbilityCommand("HyperionAdvancedPDD", 0), true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "RaynorUnlockBattlecruiser", 1);
    TechTreeUnitAllow(lp_playernumber, "Battlecruiser", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "ShrikeTurret", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "OrbitalStrike", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "RaynorFactoryUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "CerberusMines", true);
    TechTreeUpgradeAllow(lp_playernumber, "RaynorImprovedSiegeMode", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "RaynorCommanderArmorVanadium", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "RaynorArmoryUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "VehicleAfterburners", true);
    TechTreeUpgradeAllow(lp_playernumber, "SwannCommanderVehicleWeaponRange", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SupplyDepotDrop", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "RaynorStarportUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "ClusterWarheads", true);
    TechTreeUpgradeAllow(lp_playernumber, "HALORockets", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "RaynorCommanderHyperionAdvancedTargetingSystems", 1);
    TechTreeBehaviorAllow(lv_pLAYER, "HyperionVoidCoopDamageAura", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "RaynorCommanderTerranWeaponAttackSpeed", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SwannCommander", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SwannSpecialDelivery", 1);
    TechTreeAbilityAllow(lv_pLAYER, AbilityCommand("SpecialDelivery", 0), true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SwannKelMorianTurretUpgrades", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "LazerDrillupgrade1", 1);
    TechTreeUpgradeAllow(lv_pLAYER, "DrakkenLaserDrillNuke", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "VespeneHarvester", 1);
    TechTreeAbilityAllow(lv_pLAYER, AbilityCommand("VespeneDroneCast", 0), true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SwannUnlockThor", 1);
    TechTreeUnitAllow(lp_playernumber, "Thor", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SwannFactoryUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "MultilockTargetingSystems", true);
    TechTreeUpgradeAllow(lp_playernumber, "330mmBarrageCannons", true);
    TechTreeUpgradeAllow(lp_playernumber, "CycloneLockOnDamageUpgrade", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SwannCommanderWorkerFreeRepairs", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "AdvancedConstruction", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SwannArmoryUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "RegenerativeBioSteel", true);
    TechTreeUpgradeAllow(lp_playernumber, "SwannCommanderVehicleWeaponRange", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "TechReactor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SwannEngineeringBayUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "FireSuppressionSystems", true);
    TechTreeUpgradeAllow(lp_playernumber, "SwannTurretIncreasedAttackSpeed", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SwannCommanderImmortalityProtocol", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SwannStarportUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "CloakDistortionField", true);
    TechTreeUpgradeAllow(lp_playernumber, "ScienceVesselResearchDefensiveMatrix", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SwannImprovedSpecialDelivery", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SwannCommanderVehicleHealth", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "NovaCommander", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "BlackOps", 1);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "Nova_BlackOps_COOP", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "GriffinBombingRun", 1);
    TechTreeAbilityAllow(lv_pLAYER, AbilityCommand("NovaGriffinBombingRunActivate", 0), true);
    TechTreeAbilityAllow(lv_pLAYER, AbilityCommand("NovaGriffinBombingRunTargetingDummy", 0), true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "NovaAssaultMode", 1);
    TechTreeAbilityAllow(lv_pLAYER, AbilityCommand("NovaKitSwap", 0), true);
    TechTreeAbilityAllow(lv_pLAYER, AbilityCommand("NovaKitSwap", 1), true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "NovaBarracksUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "MarineSuperStim", true);
    TechTreeUpgradeAllow(lp_playernumber, "MarauderMagrailMunitions", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "TacticalAirlift", 1);
    TechTreeAbilityAllow(lv_pLAYER, AbilityCommand("NovaGriffinTransportLoadUnits", 0), true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "NovaFactoryUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "NovaUnitLockdown", true);
    TechTreeUpgradeAllow(lp_playernumber, "HellbatJumpJetAssault", true);
    TechTreeUpgradeAllow(lp_playernumber, "SiegeTankSiegeModeProgressiveRangeIncease", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "AutoHarvester", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "NovaCovertOpsUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "GhostBlackOpsTripleTap", true);
    TechTreeUpgradeAllow(lp_playernumber, "NovaLifeRegen", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "NovaTacNukeandHoloDecoy", 1);
    TechTreeAbilityAllow(lv_pLAYER, AbilityCommand("NovaCoopDecoyTarget", 0), true);
    TechTreeAbilityAllow(lv_pLAYER, AbilityCommand("NovaCoopCasterNuke", 0), true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "NovaStarportUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "BansheeAirstrike", true);
    TechTreeUpgradeAllow(lp_playernumber, "MultiTaskMAFServosLiberator", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "NovaBetterResearch", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "NovaRavenUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "RavenSuperScience", true);
    TechTreeUpgradeAllow(lp_playernumber, "HealingDroneCloakHealBeam", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "NovaGlobalPowerUpgrades", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "NovaNovaUpgradeCatch", 1);
    TechTreeUpgradeAllow(lp_playernumber, "NovaShotgunBlastRange", true);
    TechTreeUpgradeAllow(lp_playernumber, "NovaSnipeRefund", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "NovaStanceDance", 1);
    TechTreeAbilityAllow(lv_pLAYER, AbilityCommand("EnergyNovaAiur06", 0), false);
    TechTreeAbilityAllow(lv_pLAYER, AbilityCommand("NovaWeaponHellfireShotgunSwap", 0), true);
    TechTreeAbilityAllow(lv_pLAYER, AbilityCommand("NovaWeaponCanisterRifleSwap", 0), true);
    TechTreeAbilityAllow(lv_pLAYER, AbilityCommand("NovaWeaponPsiBladeSwap", 0), true);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "NovaWeaponPsiBlade", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "NovaGadgetHolographicDecoy", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "NovaArmorJumpSuit", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "NovaHelmetDominationVisor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "NovaHelmetSensorVisor", 1);
}

void gf_SetProtossFaction (int lp_playernumber, string lp_faction) {
    // Variable Declarations
    int lv_pLAYER;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_pLAYER = lp_playernumber;
    TechTreeUnitAllow(lp_playernumber, "SOAMothershipv4", false);
    TechTreeUnitAllow(lp_playernumber, "Flagship", false);
    TechTreeUnitAllow(lp_playernumber, "MothershipCore", false);
    TechTreeUnitAllow(lp_playernumber, "Mothership", false);
    if ((lp_faction == "0001")) {
        TechTreeUnitAllow(lp_playernumber, "ArtanisVoid", true);
        TechTreeUnitAllow(lp_playernumber, "KhaydarinMonolith", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "KaraxKhaydarinMonolithUnlock", 1);
    }
    else {
        TechTreeUnitAllow(lp_playernumber, "ArtanisVoid", false);
        TechTreeUnitAllow(lp_playernumber, "KhaydarinMonolith", false);
    }
    if ((lp_faction == "0003")) {
        TechTreeUnitAllow(lp_playernumber, "ZeratulCoop", true);
        TechTreeUnitAllow(lp_playernumber, "VorazunChampion", true);
    }
    else {
        TechTreeUnitAllow(lp_playernumber, "ZeratulCoop", false);
        TechTreeUnitAllow(lp_playernumber, "VorazunChampion", false);
    }
    if ((lp_faction == "0004")) {
        TechTreeUnitAllow(lp_playernumber, "AlarakCoop", true);
    }
    else {
        TechTreeUnitAllow(lp_playernumber, "AlarakCoop", false);
    }
    if ((lp_faction == "0002")) {
        TechTreeUnitAllow(lp_playernumber, "KaraxChampion", true);
        TechTreeUnitAllow(lp_playernumber, "FenixChampion", true);
    }
    else {
        TechTreeUnitAllow(lp_playernumber, "KaraxChampion", false);
        TechTreeUnitAllow(lp_playernumber, "FenixChampion", false);
    }
    if ((lp_faction == "0001")) {
    }

    if ((lp_faction == "0003")) {
        TechTreeUnitAllow(lp_playernumber, "AutomatedAssimilatorZeratul", true);
        TechTreeUnitAllow(lp_playernumber, "ZeratulRoboticsFacility", true);
        TechTreeUnitAllow(lp_playernumber, "ZeratulCyberneticsCore", true);
        TechTreeUnitAllow(lp_playernumber, "ZeratulCoopReviveBeacon", true);
        TechTreeUnitAllow(lp_playernumber, "ZeratulGateway", true);
        TechTreeUnitAllow(lp_playernumber, "ZeratulDarkShrine", true);
        TechTreeUnitAllow(lp_playernumber, "ZeratulPhotonCannon", true);
        TechTreeUnitAllow(lp_playernumber, "ZeratulKhaydarinMonolith", true);
        TechTreeUnitAllow(lp_playernumber, "ZeratulRoboticsBay", true);
        TechTreeUnitAllow(lp_playernumber, "ZeratulACArtifact", true);
        TechTreeUnitAllow(lp_playernumber, "StarPortal", true);
        TechTreeUnitAllow(lp_playernumber, "ShieldBatteryNerazim", true);
        TechTreeUnitAllow(lp_playernumber, "TemplarArchive", false);
    }
    else {
        TechTreeUnitAllow(lp_playernumber, "AutomatedAssimilatorZeratul", false);
        TechTreeUnitAllow(lp_playernumber, "ZeratulRoboticsFacility", false);
        TechTreeUnitAllow(lp_playernumber, "ZeratulCyberneticsCore", false);
        TechTreeUnitAllow(lp_playernumber, "ZeratulCoopReviveBeacon", false);
        TechTreeUnitAllow(lp_playernumber, "ZeratulGateway", false);
        TechTreeUnitAllow(lp_playernumber, "ZeratulDarkShrine", false);
        TechTreeUnitAllow(lp_playernumber, "ZeratulPhotonCannon", false);
        TechTreeUnitAllow(lp_playernumber, "ZeratulKhaydarinMonolith", false);
        TechTreeUnitAllow(lp_playernumber, "ZeratulRoboticsBay", false);
        TechTreeUnitAllow(lp_playernumber, "ZeratulACArtifact", false);
        TechTreeUnitAllow(lp_playernumber, "StarPortal", false);
        TechTreeUnitAllow(lp_playernumber, "ShieldBatteryNerazim", false);
    }
    if ((lp_faction == "0004")) {
        TechTreeUnitAllow(lp_playernumber, "DarkShrine", false);
    }

    if ((lp_faction == "0002")) {
        TechTreeUnitAllow(lp_playernumber, "ShieldBattery", false);
        TechTreeUnitAllow(lp_playernumber, "DarkShrine", false);
        TechTreeUnitAllow(lp_playernumber, "TemplarArchive", false);
    }

    TechTreeUnitAllow(lp_playernumber, "Zealot", true);
    TechTreeUnitAllow(lp_playernumber, "HighTemplar", false);
    TechTreeUnitAllow(lp_playernumber, "DarkTemplar", false);
    if ((lp_faction == "0001")) {
        TechTreeUnitAllow(lv_pLAYER, "HighTemplar", true);
        TechTreeUnitAllow(lp_playernumber, "Zealot", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "VoidStalkerDragoon", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "VoidZealotWhirlwind", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "HaveGuardian", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "ArtanisUnlockHighArchon", 1);
        TechTreeUnitAllow(lp_playernumber, "HighTemplar", true);
        TechTreeUnitAllow(lp_playernumber, "Sentry", true);
        TechTreeUnitAllow(lp_playernumber, "Replicant", true);
        TechTreeUnitAllow(lp_playernumber, "DarkTemplar", true);
    }
    else {
        TechTreeUnitAllow(lp_playernumber, "Sentry", false);
        TechTreeUnitAllow(lp_playernumber, "Replicant", false);
    }
    if ((lp_faction == "0003")) {
        TechTreeUnitAllow(lp_playernumber, "DarkTemplar", true);
        TechTreeUnitAllow(lp_playernumber, "DarkArchon", true);
    }
    else {
        TechTreeUnitAllow(lp_playernumber, "DarkArchon", false);
    }
    if ((lp_faction == "0004")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "VoidHighTemplarTerazine", 1);
        TechTreeUnitAllow(lp_playernumber, "Monitor", true);
        TechTreeUnitAllow(lp_playernumber, "Supplicant", true);
        TechTreeUnitAllow(lp_playernumber, "SupplicantWarpTrainCreator", true);
        TechTreeUnitAllow(lp_playernumber, "SupplicantWarpTrainDummy", true);
        TechTreeUnitAllow(lv_pLAYER, "HighTemplarTaldarim", true);
        TechTreeUnitAllow(lp_playernumber, "DarkTemplarTaldarim", true);
        TechTreeUnitAllow(lp_playernumber, "HighTemplar", true);
    }
    else {
        TechTreeUnitAllow(lp_playernumber, "Monitor", false);
        TechTreeUnitAllow(lp_playernumber, "Supplicant", false);
        TechTreeUnitAllow(lp_playernumber, "SupplicantWarpTrainCreator", false);
        TechTreeUnitAllow(lp_playernumber, "SupplicantWarpTrainDummy", false);
        TechTreeUnitAllow(lv_pLAYER, "HighTemplarTaldarim", false);
        TechTreeUnitAllow(lp_playernumber, "DarkTemplarTaldarim", false);
    }
    if ((lp_faction == "0002")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "VoidZealotSuperShields", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "ZealotResearchReconstruction", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "ZealotResearchReconstruction", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "VoidSentryPurifier", 1);
        TechTreeUnitAllow(lp_playernumber, "Adept", true);
        TechTreeUnitAllow(lp_playernumber, "HighTemplar", true);
    }
    else {
        TechTreeUnitAllow(lp_playernumber, "Adept", false);
    }
    TechTreeUnitAllow(lp_playernumber, "WarpPrism", false);
    TechTreeUnitAllow(lp_playernumber, "Colossus", false);
    TechTreeUnitAllow(lp_playernumber, "Disruptor", false);
    TechTreeUnitAllow(lp_playernumber, "Reaver", false);
    TechTreeUnitAllow(lp_playernumber, "Observer", false);
    if ((lp_faction == "0001")) {
        TechTreeUnitAllow(lp_playernumber, "WarpPrism", true);
        TechTreeUnitAllow(lp_playernumber, "Reaver", true);
        TechTreeUnitAllow(lp_playernumber, "Observer", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "ArtanisUnlockReaver", 1);
        TechTreeUnitAllow(lp_playernumber, "Colossus", true);
    }

    if ((lp_faction == "0003")) {
    }

    if ((lp_faction == "0004")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "VoidColossusTaldarim", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "VoidImmortalTaldarim", 1);
        TechTreeUnitAllow(lp_playernumber, "WarpPrismTaldarim", true);
        TechTreeUnitAllow(lp_playernumber, "Colossus", true);
    }
    else {
        TechTreeUnitAllow(lp_playernumber, "Disruptor", true);
        TechTreeUnitAllow(lp_playernumber, "WarpPrismTaldarim", false);
    }
    if ((lp_faction == "0002")) {
        TechTreeUnitAllow(lp_playernumber, "Disruptor", true);
        TechTreeUnitAllow(lp_playernumber, "WarpPrism", true);
        TechTreeUnitAllow(lp_playernumber, "Colossus", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "PurifierColossus", 1);
    }

    TechTreeUnitAllow(lp_playernumber, "VoidRay", false);
    TechTreeUnitAllow(lp_playernumber, "ProtossFrigate", false);
    TechTreeUnitAllow(lp_playernumber, "Tempest", false);
    TechTreeUnitAllow(lp_playernumber, "CorsairMP", false);
    TechTreeUnitAllow(lp_playernumber, "Oracle", false);
    TechTreeUnitAllow(lp_playernumber, "Scout", false);
    TechTreeUnitAllow(lp_playernumber, "Carrier", false);
    TechTreeUnitAllow(lp_playernumber, "CarrierAiur", false);
    TechTreeUnitAllow(lp_playernumber, "FenixClolarionCarrier", false);
    if ((lp_faction == "0001")) {
        TechTreeUnitAllow(lp_playernumber, "CarrierAiur", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "ArtanisUnlockTempest", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "VoidCarrierTempest", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "HaveVoidTempest", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "VoidCarrierAiur", 1);
        TechTreeUnitAllow(lp_playernumber, "Mothership", true);
        TechTreeUnitAllow(lp_playernumber, "Tempest", true);
    }
    else {
        TechTreeUnitAllow(lp_playernumber, "Mothership", false);
    }
    if ((lp_faction == "0003")) {
        TechTreeUnitAllow(lp_playernumber, "CorsairMP", true);
        TechTreeUnitAllow(lp_playernumber, "Carrier", true);
        TechTreeUnitAllow(lp_playernumber, "MothershipCore", true);
        TechTreeUnitAllow(lp_playernumber, "CorsairMP", true);
        TechTreeUnitAllow(lp_playernumber, "Oracle", true);
        TechTreeUnitAllow(lp_playernumber, "Tempest", true);
    }
    else {
        TechTreeUnitAllow(lp_playernumber, "MothershipCore", false);
    }
    if ((lp_faction == "0004")) {
        TechTreeUnitAllow(lp_playernumber, "Carrier", true);
        TechTreeUnitAllow(lp_playernumber, "Oracle", true);
        TechTreeUnitAllow(lp_playernumber, "Tempest", true);
        TechTreeUnitAllow(lp_playernumber, "SOAMothershipv4", true);
    }
    else {
        TechTreeUnitAllow(lp_playernumber, "Flagship", false);
    }
    if ((lp_faction == "0002")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "PurifierPheonixMiirage", 1);
        TechTreeUnitAllow(lp_playernumber, "FenixClolarionCarrier", true);
        TechTreeUnitAllow(lp_playernumber, "Scout", true);
        TechTreeUnitAllow(lp_playernumber, "Oracle", true);
        TechTreeUnitAllow(lp_playernumber, "ArbiterMP", true);
        TechTreeUnitAllow(lp_playernumber, "Tempest", true);
    }
    else {
        TechTreeUnitAllow(lp_playernumber, "ArbiterMP", false);
    }
    if ((lp_faction == "0001")) {
        TechTreeAbilityAllow(1, AbilityCommand("ShieldBatteryStructureBarrier", 0), true);
    }
    else {
        TechTreeAbilityAllow(1, AbilityCommand("ShieldBatteryStructureBarrier", 0), false);
    }
    if ((lp_faction == "0001")) {
        TechTreeUnitAllow(lv_pLAYER, "KhaydarinMonolith", true);
        TechTreeUpgradeAllow(lp_playernumber, "KaraxTurretRange", true);
        TechTreeUpgradeAllow(lp_playernumber, "KaraxTurretAttackSpeed", true);
        TechTreeUpgradeAllow(lp_playernumber, "ShieldBatteryStructureBarrier", true);
    }
    else {
        TechTreeUnitAllow(lv_pLAYER, "KhaydarinMonolith", false);
        TechTreeUpgradeAllow(lp_playernumber, "KaraxTurretRange", false);
        TechTreeUpgradeAllow(lp_playernumber, "KaraxTurretAttackSpeed", false);
        TechTreeUpgradeAllow(lp_playernumber, "ShieldBatteryStructureBarrier", false);
    }
    if ((lp_faction == "0003")) {
    }

    if ((lp_faction == "0004")) {
        TechTreeUpgradeAllow(lp_playernumber, "AlarakAttackStunUpgrade", true);
        TechTreeUpgradeAllow(lp_playernumber, "AlarakDestructionWaveDistance", true);
    }
    else {
        TechTreeUpgradeAllow(lp_playernumber, "AlarakAttackStunUpgrade", false);
        TechTreeUpgradeAllow(lp_playernumber, "AlarakDestructionWaveDistance", false);
    }
    if ((lp_faction == "0002")) {
        TechTreeUpgradeAllow(lp_playernumber, "FenixSuitAttackDamage", true);
        TechTreeUpgradeAllow(lp_playernumber, "FenixArbiterDetection", true);
        TechTreeUpgradeAllow(lp_playernumber, "AStrongHeart", true);
        TechTreeUpgradeAllow(lp_playernumber, "SentryResearchChronoBeam", true);
    }
    else {
        TechTreeUpgradeAllow(lp_playernumber, "SentryResearchChronoBeam", false);
        TechTreeUpgradeAllow(lp_playernumber, "FenixSuitAttackDamage", false);
        TechTreeUpgradeAllow(lp_playernumber, "FenixArbiterDetection", false);
        TechTreeUpgradeAllow(lp_playernumber, "AStrongHeart", false);
    }
    if ((lp_faction == "0001")) {
        TechTreeUpgradeAllow(lp_playernumber, "SOAWarpGateCharges", true);
        TechTreeUpgradeAllow(lp_playernumber, "haltech", true);
        TechTreeUpgradeAllow(lp_playernumber, "SentryResearchShieldRepairDouble", true);
        TechTreeUpgradeAllow(lp_playernumber, "KaraxEnergyRegenUpgrade", true);
    }
    else {
        TechTreeUpgradeAllow(lp_playernumber, "SOAWarpGateCharges", false);
        TechTreeUpgradeAllow(lp_playernumber, "haltech", false);
        TechTreeUpgradeAllow(lp_playernumber, "SentryResearchShieldRepairDouble", false);
        TechTreeUpgradeAllow(lp_playernumber, "KaraxEnergyRegenUpgrade", false);
    }
    if ((lp_faction == "0003")) {
    }

    if ((lp_faction == "0004")) {
        TechTreeUpgradeAllow(lv_pLAYER, "AlarakHavocAbilityRange", true);
        TechTreeUpgradeAllow(lv_pLAYER, "AlarakHavocTargetLockBuff", true);
        TechTreeUpgradeAllow(lp_playernumber, "AlarackHavocPermanentCloak", true);
    }
    else {
        TechTreeUpgradeAllow(lp_playernumber, "AlarakHavocTargetLockBuff", false);
        TechTreeUpgradeAllow(lp_playernumber, "AlarakHavocAbilityRange", false);
        TechTreeUpgradeAllow(lp_playernumber, "AlarackHavocPermanentCloak", false);
    }
    if ((lp_faction == "0002")) {
    }

    TechTreeUpgradeAllow(lp_playernumber, "BlinkTech", true);
    if ((lp_faction == "0001")) {
        TechTreeUpgradeAllow(lp_playernumber, "Charge", true);
        TechTreeUpgradeAllow(lp_playernumber, "ZealotResearchWhirlwind", true);
        TechTreeUpgradeAllow(lp_playernumber, "StalkerResearchDragoonRange", true);
        TechTreeUpgradeAllow(lp_playernumber, "StalkerResearchDragoonHealth", true);
        TechTreeUpgradeAllow(lp_playernumber, "KaraxEnergyRegenUpgrade", true);
    }
    else {
        TechTreeUpgradeAllow(lp_playernumber, "ZealotResearchWhirlwind", false);
        TechTreeUpgradeAllow(lp_playernumber, "StalkerResearchDragoonHealth", false);
        TechTreeUpgradeAllow(lp_playernumber, "StalkerResearchDragoonRange", false);
        TechTreeUpgradeAllow(lp_playernumber, "KaraxEnergyRegenUpgrade", false);
    }
    if ((lp_faction == "0003")) {
        TechTreeUpgradeAllow(lp_playernumber, "ZealotResearchShadowCharge", true);
        TechTreeUpgradeAllow(lp_playernumber, "ZealotResearchShadowStun", true);
        TechTreeUpgradeAllow(lp_playernumber, "BlinkTech", true);
        TechTreeUpgradeAllow(lp_playernumber, "StalkerResearchBlinkShieldRestore", true);
    }
    else {
        TechTreeUpgradeAllow(lp_playernumber, "ZealotResearchShadowCharge", false);
        TechTreeUpgradeAllow(lp_playernumber, "ZealotResearchShadowStun", false);
        TechTreeUpgradeAllow(lp_playernumber, "BlinkTech", false);
        TechTreeUpgradeAllow(lp_playernumber, "StalkerResearchBlinkShieldRestore", false);
    }
    if ((lp_faction == "0004")) {
        TechTreeUpgradeAllow(lp_playernumber, "AlarakSupplicantShieldArmor", true);
        TechTreeUpgradeAllow(lv_pLAYER, "AlarakStalkerPhasingArmor", true);
        TechTreeUpgradeAllow(lv_pLAYER, "AlarakSupplicantMaxShields", true);
    }
    else {
        TechTreeUpgradeAllow(lp_playernumber, "AlarakSupplicantShieldArmor", false);
        TechTreeUpgradeAllow(lp_playernumber, "AlarakStalkerPhasingArmor", false);
        TechTreeUpgradeAllow(lp_playernumber, "AlarakSupplicantMaxShields", false);
    }
    if ((lp_faction == "0002")) {
        TechTreeUpgradeAllow(lp_playernumber, "AdeptShadeDebuff", true);
        TechTreeUpgradeAllow(lp_playernumber, "Charge", true);
        TechTreeUpgradeAllow(lp_playernumber, "ZealotResearchReconstruction", true);
        TechTreeUpgradeAllow(lp_playernumber, "EnergizerReclamation", true);
        TechTreeUpgradeAllow(lp_playernumber, "AdeptPiercingAttack", true);
        TechTreeUpgradeAllow(lp_playernumber, "AdeptFenixShadeSpawn", true);
        TechTreeUpgradeAllow(lp_playernumber, "FenixChampionTalisAdeptBounceShotUpgrade", true);
        TechTreeUpgradeAllow(lp_playernumber, "AdeptShieldUpgrade", true);
        TechTreeUpgradeAllow(lp_playernumber, "AdeptKillBounce", true);
    }
    else {
        TechTreeUpgradeAllow(lp_playernumber, "AdeptShadeDebuff", false);
        TechTreeUpgradeAllow(lp_playernumber, "ZealotResearchReconstruction", false);
        TechTreeUpgradeAllow(lp_playernumber, "EnergizerReclamation", false);
        TechTreeUpgradeAllow(lp_playernumber, "AdeptPiercingAttack", false);
        TechTreeUpgradeAllow(lp_playernumber, "AdeptFenixShadeSpawn", false);
        TechTreeUpgradeAllow(lp_playernumber, "FenixChampionTalisAdeptBounceShotUpgrade", false);
        TechTreeUpgradeAllow(lp_playernumber, "AdeptShieldUpgrade", false);
        TechTreeUpgradeAllow(lp_playernumber, "AdeptKillBounce", false);
    }
    TechTreeUpgradeAllow(lp_playernumber, "StalkerResearchBlinkCharges", false);
    TechTreeUpgradeAllow(lp_playernumber, "StalkerResearchBlinkCharges", true);
    if ((lp_faction == "0001")) {
        TechTreeUpgradeAllow(lp_playernumber, "HighTemplarKhaydarinAmulet", true);
        TechTreeUpgradeAllow(lp_playernumber, "HealingPsionicStorm", true);
        TechTreeUpgradeAllow(lp_playernumber, "PsiStormTech", true);
    }
    else {
        TechTreeUpgradeAllow(lp_playernumber, "HighTemplarKhaydarinAmulet", false);
        TechTreeUpgradeAllow(lp_playernumber, "HealingPsionicStorm", false);
        TechTreeUpgradeAllow(lp_playernumber, "PsiStormTech", false);
    }
    if ((lp_faction == "0003")) {
        TechTreeUpgradeAllow(lp_playernumber, "DarkArchonFullStartingEnergy", true);
        TechTreeUpgradeAllow(lp_playernumber, "DarkArchonMindControl", true);
    }
    else {
        TechTreeUpgradeAllow(lp_playernumber, "DarkArchonFullStartingEnergy", false);
        TechTreeUpgradeAllow(lp_playernumber, "DarkArchonMindControl", false);
    }
    if ((lp_faction == "0004")) {
        TechTreeUpgradeAllow(lv_pLAYER, "AlarakHighTemplarImprovedSacrifice", true);
        TechTreeUpgradeAllow(lp_playernumber, "AlarakHighTemplarPsionicOrbTravelDistance", true);
        TechTreeUpgradeAllow(lp_playernumber, "VoidHighTemplarMindBlast", true);
    }
    else {
        TechTreeUpgradeAllow(lp_playernumber, "AlarakHighTemplarPsionicOrbTravelDistance", false);
        TechTreeUpgradeAllow(lp_playernumber, "VoidHighTemplarMindBlast", false);
        TechTreeUpgradeAllow(lp_playernumber, "AlarakHighTemplarImprovedSacrifice", false);
    }
    if ((lp_faction == "0002")) {
    }

    TechTreeUpgradeAllow(lp_playernumber, "DarkTemplarResearchShadowDash", false);
    if ((lp_faction == "0001")) {
    }

    if ((lp_faction == "0003")) {
        TechTreeUpgradeAllow(lp_playernumber, "DarkTemplarResearchShadowFury", true);
        TechTreeUpgradeAllow(lp_playernumber, "DarkTemplarResearchShadowDash", true);
    }
    else {
        TechTreeUpgradeAllow(lp_playernumber, "DarkTemplarResearchShadowFury", false);
    }
    if ((lp_faction == "0004")) {
        TechTreeUpgradeAllow(lp_playernumber, "DarkTemplarResearchVoidStasis", true);
    }
    else {
        TechTreeUpgradeAllow(lp_playernumber, "DarkTemplarResearchVoidStasis", false);
    }
    if ((lp_faction == "0002")) {
    }

    if ((lp_faction == "0001")) {
        TechTreeUpgradeAllow(lp_playernumber, "ImmortalResearchBarrierAdvanced", true);
        TechTreeUpgradeAllow(lp_playernumber, "ImmortalResearchShadowCannon", true);
        TechTreeUpgradeAllow(lp_playernumber, "ExtendedThermalLance", true);
        TechTreeUpgradeAllow(lp_playernumber, "ColossusFireBeam", true);
        TechTreeUpgradeAllow(lp_playernumber, "ReaverIncreasedScarabCount", true);
        TechTreeUpgradeAllow(lp_playernumber, "ReaverIncreasedScarabSplashRadius", true);
        TechTreeUpgradeAllow(lp_playernumber, "ObserverGraviticBooster", true);
    }
    else {
        TechTreeUpgradeAllow(lp_playernumber, "ImmortalResearchBarrierAdvanced", false);
        TechTreeUpgradeAllow(lp_playernumber, "ImmortalResearchShadowCannon", false);
        TechTreeUpgradeAllow(lp_playernumber, "ExtendedThermalLance", false);
        TechTreeUpgradeAllow(lp_playernumber, "ColossusFireBeam", false);
        TechTreeUpgradeAllow(lp_playernumber, "ReaverIncreasedScarabCount", false);
        TechTreeUpgradeAllow(lp_playernumber, "ReaverIncreasedScarabSplashRadius", false);
        TechTreeUpgradeAllow(lp_playernumber, "ObserverGraviticBooster", false);
    }
    if ((lp_faction == "0003")) {
    }

    if ((lp_faction == "0004")) {
        TechTreeUpgradeAllow(lp_playernumber, "AlarakColossusChargedBlastAirAttack", true);
        TechTreeUpgradeAllow(lp_playernumber, "AlarakColossusChargedBlastChargeTime", true);
        TechTreeUpgradeAllow(lp_playernumber, "VanguardArmoredDamage", true);
        TechTreeUpgradeAllow(lp_playernumber, "AlarakVanguardIncreaseSplashArea", true);
        TechTreeUpgradeAllow(lp_playernumber, "ImprovedScatterCannon", true);
        TechTreeUpgradeAllow(lp_playernumber, "GraviticDrive", true);
    }
    else {
        TechTreeUpgradeAllow(lp_playernumber, "AlarakColossusChargedBlastAirAttack", false);
        TechTreeUpgradeAllow(lp_playernumber, "AlarakColossusChargedBlastChargeTime", false);
        TechTreeUpgradeAllow(lp_playernumber, "VanguardArmoredDamage", false);
        TechTreeUpgradeAllow(lp_playernumber, "AlarakVanguardIncreaseSplashArea", false);
        TechTreeUpgradeAllow(lp_playernumber, "ImprovedScatterCannon", false);
        TechTreeUpgradeAllow(lp_playernumber, "GraviticDrive", false);
    }
    if ((lp_faction == "0002")) {
    }

    TechTreeUpgradeAllow(lp_playernumber, "CarrierPhotonBombs", false);
    TechTreeUpgradeAllow(lp_playernumber, "PhoenixDestructionBeam", false);
    TechTreeUpgradeAllow(lp_playernumber, "VoidRaySpeedUpgrade", false);
    TechTreeUpgradeAllow(lp_playernumber, "OracleWormhole", true);
    if ((lp_faction == "0001")) {
        TechTreeUpgradeAllow(lp_playernumber, "CarrierLaunchSpeedUpgrade", true);
        TechTreeUpgradeAllow(lp_playernumber, "TempestDisintegration", true);
        TechTreeUpgradeAllow(lp_playernumber, "VoidPhoenixDoubleGraviton", true);
        TechTreeUpgradeAllow(lp_playernumber, "CarrierRepairDrones", true);
        TechTreeUpgradeAllow(lp_playernumber, "AnionPulseCrystals", true);
    }
    else {
        TechTreeUpgradeAllow(lp_playernumber, "CarrierLaunchSpeedUpgrade", false);
        TechTreeUpgradeAllow(lp_playernumber, "TempestDisintegration", false);
        TechTreeUpgradeAllow(lp_playernumber, "VoidPhoenixDoubleGraviton", false);
        TechTreeUpgradeAllow(lp_playernumber, "CarrierRepairDrones", false);
        TechTreeUpgradeAllow(lp_playernumber, "AnionPulseCrystals", false);
    }
    if ((lp_faction == "0003")) {
        TechTreeUpgradeAllow(lp_playernumber, "VoidRayPrismaticRange", true);
        TechTreeUpgradeAllow(lp_playernumber, "CorsairPermanentCloak", true);
        TechTreeUpgradeAllow(lp_playernumber, "OracleStasisWardUpgrade", true);
        TechTreeUpgradeAllow(lp_playernumber, "CorsairDisruptionWeb", true);
        TechTreeUpgradeAllow(lp_playernumber, "VoidRaySpeedUpgrade", true);
        TechTreeAbilityAllow(lp_playernumber, AbilityCommand("OracleCloakingFieldTargeted", 0), true);
    }
    else {
        TechTreeUpgradeAllow(lp_playernumber, "VoidRayPrismaticRange", false);
        TechTreeUpgradeAllow(lp_playernumber, "CorsairPermanentCloak", false);
        TechTreeUpgradeAllow(lp_playernumber, "OracleStasisWardUpgrade", false);
        TechTreeUpgradeAllow(lp_playernumber, "CorsairDisruptionWeb", false);
        TechTreeAbilityAllow(lp_playernumber, AbilityCommand("OracleCloakingFieldTargeted", 0), false);
    }
    if ((lp_faction == "0004")) {
        TechTreeUpgradeAllow(lp_playernumber, "VoidRaySpeedUpgrade", true);
        TechTreeAbilityAllow(lp_playernumber, AbilityCommand("OraclePhaseShift", 0), true);
        TechTreeAbilityAllow(lp_playernumber, AbilityCommand("VoidOracleFutureSelf", 0), true);
    }
    else {
        TechTreeAbilityAllow(lp_playernumber, AbilityCommand("OraclePhaseShift", 0), false);
        TechTreeAbilityAllow(lp_playernumber, AbilityCommand("VoidOracleFutureSelf", 0), false);
    }
    if ((lp_faction == "0002")) {
        TechTreeUpgradeAllow(lp_playernumber, "MiragePhaseArmor", true);
        TechTreeUpgradeAllow(lp_playernumber, "TempestRangeUpgrade", true);
        TechTreeUpgradeAllow(lp_playernumber, "FenixChampionCarrierBombers", true);
        TechTreeUpgradeAllow(lp_playernumber, "FenixArbiterDetection", true);
        TechTreeUpgradeAllow(lp_playernumber, "FenixChampionScoutAOEMissiles", true);
        TechTreeAbilityAllow(lp_playernumber, AbilityCommand("FleetBeaconResearch", 21), true);
    }
    else {
        TechTreeUpgradeAllow(lp_playernumber, "MiragePhaseArmor", false);
        TechTreeUpgradeAllow(lp_playernumber, "TempestRangeUpgrade", false);
        TechTreeUpgradeAllow(lp_playernumber, "FenixChampionCarrierBombers", false);
        TechTreeUpgradeAllow(lp_playernumber, "FenixArbiterDetection", false);
        TechTreeUpgradeAllow(lp_playernumber, "FenixChampionScoutAOEMissiles", false);
        TechTreeAbilityAllow(lp_playernumber, AbilityCommand("FleetBeaconResearch", 21), false);
    }
    if ((lp_faction == "0001")) {
        TechTreeAbilityAllow(lp_playernumber, AbilityCommand("UpgradeToStargateWarp", 0), true);
        TechTreeAbilityAllow(lp_playernumber, AbilityCommand("UpgradeToRoboticsFacilityWarp", 0), true);
    }
    else {
        TechTreeAbilityAllow(lp_playernumber, AbilityCommand("UpgradeToStargateWarp", 0), false);
        TechTreeAbilityAllow(lp_playernumber, AbilityCommand("UpgradeToRoboticsFacilityWarp", 0), false);
    }
    if ((lp_faction == "0003")) {
    }

    if ((lp_faction == "0004")) {
    }

    if ((lp_faction == "0002")) {
    }

    TechTreeUpgradeAllow(lv_pLAYER, "SolarEfficiencyLevel3", true);
    TechTreeUpgradeAllow(lv_pLAYER, "SolarEfficiencyLevel2", true);
    TechTreeUpgradeAllow(lv_pLAYER, "SolarEfficiencyLevel1", true);
    if ((lp_faction == "0001")) {
        TechTreeUpgradeAllow(lp_playernumber, "SOAOrbitalStrikeUpgrade", true);
    }
    else {
        TechTreeUpgradeAllow(lp_playernumber, "SOAOrbitalStrikeUpgrade", false);
    }
    if ((lp_faction == "0003")) {
    }

    if ((lp_faction == "0004")) {
    }

    if ((lp_faction == "0002")) {
        TechTreeUpgradeAllow(lp_playernumber, "SOARepairBeamExtraTarget", true);
    }
    else {
        TechTreeUpgradeAllow(lp_playernumber, "SOARepairBeamExtraTarget", false);
    }
    libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "CommanderLevel", 15);
    if ((lp_faction == "0001")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "ArtanisCommander", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOAPylonPower", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOAHeroicShield", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOAHeroicShield", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOAHeroicShield", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOAMatrixOverload", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOAHarvestingBeam", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOAWarpInReinforcements", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOASuperShield", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOAOrbitalStrike", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SuperiorWarpGates", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOAWarpGateCharges", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOAWarpTech", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOAStrafeAttack", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOASuperShieldUpgrade", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOAStrafeAttackUpgrade", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "ArtanisStartingSupply", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "KaraxCommander", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOAOrbitalStrike", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "KaraxInstantStructureWarp", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "KaraxUnitSpawnBarrier", 1);
    }

    if ((lp_faction == "0003")) {
        gf_NerazimSkin(lv_pLAYER);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "ZeratulCommander", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "VorazunCommander", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "ZeratulArtifactUpgradeTier3A", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "ZeratulArtifactUpgradeTier3B", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "ZeratulArtifactUpgradeTier3C", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "ZeratulArtifactUpgradeTier1C", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "ZeratulArtifactUpgradeTier1B", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "ZeratulArtifactUpgradeTier1A", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "ZeratulArtifactUpgradeTier0C", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "ZeratulArtifactUpgradeTier0B", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "ZeratulArtifactUpgradeTier0A", 1);
        TechTreeUpgradeAllow(lv_pLAYER, "ZeratulTalentUltimatePurity", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "ZeratulTalentUltimatePurity", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOAAutoAssimilator", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "ShadowGuardSpawnCount", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "VorazunUnlockCenturion", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "VoidZealotShadowCharge", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "ZeratulArtifactUpgradeTier3B", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "VorazunUnlockDarkArchon", 1);
        TechTreeUnitAllow(lp_playernumber, "DarkArchon", false);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "VoidDarkTemplarShadowFury", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "VorazunCloakShieldRegen", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "VorazunImprovedBlackHole", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOATimeFreeze", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "VoidPylonRecall", 1);
        TechTreeAbilityAllow(lv_pLAYER, AbilityCommand("DarkPylonRecall", 0), false);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "VorazunDarkTemplarRecallPassiveButtonDisplayUpgrade", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOARecallonDeath", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOATimeFreezeUpgrade", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "VorazunCloakDamageBoost", 1);
    }

    if ((lp_faction == "0004")) {
        gf_TaldarimSkin(lv_pLAYER);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "AlarakCommander", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "DarkProtoss", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "AlarakStructureImprovedOvercharge", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "AlarakImprovedDeadlyCharge", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "AlarakForkedLightning", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "AlarakImprovedDeathFleet", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "AlarakImprovedSoulSteal", 1);
        TechTreeAbilityAllow(lv_pLAYER, AbilityCommand("AlarakEmpower", 0), true);
        TechTreeAbilityAllow(lp_playernumber, AbilityCommand("AlarakACSummonDeathfleetTarget", 0), true);
    }

    if ((lp_faction == "0002")) {
        gf_PurifierSkin(lv_pLAYER);
        TechTreeAbilityAllow(lv_pLAYER, AbilityCommand("SOAPurifierBeam", 0), true);
        TechTreeBehaviorAllow(1, "SOARepairBeam", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOAThermalLance", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "KaraxSOAChronoPassive", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOAMapWideChrono", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOASuperChrono", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOARepairBeam", 1);
        TechTreeUpgradeAllow(lp_playernumber, "SOASolarLanceUpgrade", true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOAPurifierBeam", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOAPurifierBeamUpgrade", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOAGravitonBomb", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "SOAProxyPylon", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "MasteryKaraxRepairBeamHeal", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "KaraxRepairBeamLimit", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "FenixCommander", 15);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_pLAYER, "KaraxCommander", 15);
    }

}

void gf_TaldarimSkin (int lp_playernumber) {
    // Variable Declarations
    int lv_pLAYER;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_pLAYER = lp_playernumber;
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "TaldarimSkin", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "AssimilatorTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "FleetBeaconTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "ForgeTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "GatewayTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "PhotonCannonTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "PylonTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "RoboticsFacilityTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "RoboticsSupportBayTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "StargateTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "DarkShrineForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "AdeptTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "CarrierTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "ColossusTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "DarkTemplarTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "DisruptorTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "HighTemplarTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "ImmortalTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "MothershipTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "ObserverTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "OracleTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "PhoenixTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "ProbeTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "SentryTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "StalkerTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "TempestTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "VoidRayTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "WarpPrismTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "ZealotTaldarim", true);
    PlayerSetColorIndex(lv_pLAYER, 14, true);
    PlayerSetRace(lv_pLAYER, "Terr");
    PlayerSetCommander(lv_pLAYER, "UIForged");
    PlayerSetRace(lv_pLAYER, "Prot");
}

void gf_PurifierSkin (int lp_playernumber) {
    // Variable Declarations
    int lv_pLAYER;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_pLAYER = lp_playernumber;
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "Fenix_Purifier_COOP", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "WarpPrismPurifier", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "VoidRayPurifier", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "OraclePurifier", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "StalkerPurifier", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "DarkTemplarPurifier", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "HighTemplarPurifier", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "SentryPurifier", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "AdeptPurifier", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "ZealotPurifier", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "ProbePurifier", true);
    PlayerSetRace(lv_pLAYER, "Terr");
    PlayerSetCommander(lv_pLAYER, "UIPurifier");
    PlayerSetColorIndex(lv_pLAYER, 6, true);
    PlayerSetRace(lv_pLAYER, "Prot");
}

void gf_NerazimSkin (int lp_playernumber) {
    // Variable Declarations
    int lv_pLAYER;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_pLAYER = lp_playernumber;
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "FleetBeaconIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "HighTemplarIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "CarrierIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "ColossusIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "AssimilatorIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "ZealotIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "WarpPrismIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "VoidRayIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "PylonIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "StalkerIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "SentryIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "ProbeIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "DarkTemplarIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "PhoenixIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "OracleIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "DisruptorIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "ObserverIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "MothershipIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "ImmortalIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "FleetBeaconIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "TempestIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "RoboticsFacilityIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "GatewayIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "ShieldBatteryIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "CyberneticsCoreIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "ForgeIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "RoboticsBayIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "TwilightCouncilIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "NexusIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "StargateIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "PhotonCannonIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "DarkShrineIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_pLAYER, "TemplarArchiveIhanrii", true);
    PlayerSetColorIndex(lv_pLAYER, 7, true);
    PlayerSetRace(lv_pLAYER, "Terr");
    PlayerSetCommander(lv_pLAYER, "UIZeratul");
    PlayerSetRace(lv_pLAYER, "Prot");
}

trigger auto_gf_SetPlayerRole_Trigger = null;
string auto_gf_SetPlayerRole_lp_role;
int auto_gf_SetPlayerRole_lp_playernumber;
bool auto_gf_SetPlayerRole_lp_ownership;

void gf_SetPlayerRole (string lp_role, int lp_playernumber, bool lp_ownership) {
    auto_gf_SetPlayerRole_lp_role = lp_role;
    auto_gf_SetPlayerRole_lp_playernumber = lp_playernumber;
    auto_gf_SetPlayerRole_lp_ownership = lp_ownership;

    if (auto_gf_SetPlayerRole_Trigger == null) {
        auto_gf_SetPlayerRole_Trigger = TriggerCreate("auto_gf_SetPlayerRole_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetPlayerRole_Trigger, false, false);
}

bool auto_gf_SetPlayerRole_TriggerFunc (bool testConds, bool runActions) {
    string lp_role = auto_gf_SetPlayerRole_lp_role;
    int lp_playernumber = auto_gf_SetPlayerRole_lp_playernumber;
    bool lp_ownership = auto_gf_SetPlayerRole_lp_ownership;

    // Variable Declarations
    unitgroup lv_factionUnits;
    int lv_sWAPPLAYER;
    int lv_pLAYER;
    camerainfo lv_sTARTPOINT;

    // Automatic Variable Declarations
    string autoB7D64D37_val;
    unitgroup auto3BFED40E_g;
    int auto3BFED40E_u;
    unit auto3BFED40E_var;

    // Variable Initialization
    lv_factionUnits = UnitGroupEmpty();

    // Implementation
    lv_pLAYER = lp_playernumber;
    autoB7D64D37_val = lp_role;
    if (autoB7D64D37_val == "0001") {
        PlayerGroupAdd(gv_friendlyPlayerGroup, lv_pLAYER);
        gf_SetProtossFaction(lp_playernumber, "0001");
        lv_sWAPPLAYER = gv_aI_ALLY_KHALAI;
        lv_sTARTPOINT = CameraInfoFromId(385);
        PlayerSetRace(lp_playernumber, "Prot");
        gv_rOLE_KHALAI = lp_playernumber;
    }
    else if (autoB7D64D37_val == "0003") {
        PlayerGroupAdd(gv_friendlyPlayerGroup, lv_pLAYER);
        gf_SetProtossFaction(lp_playernumber, "0003");
        lv_sWAPPLAYER = gv_aI_ALLY_NERAZIM;
        lv_sTARTPOINT = CameraInfoFromId(1117091597);
        PlayerSetRace(lp_playernumber, "Prot");
        gv_rOLE_NERAZIM = lp_playernumber;
    }
    else if (autoB7D64D37_val == "0004") {
        PlayerGroupAdd(gv_friendlyPlayerGroup, lv_pLAYER);
        gf_SetProtossFaction(lp_playernumber, "0004");
        lv_sWAPPLAYER = gv_aI_ALLY_TALDARIM;
        lv_sTARTPOINT = CameraInfoFromId(1101989262);
        PlayerSetRace(lp_playernumber, "Prot");
        gv_rOLE_TALDARIM = lp_playernumber;
    }
    else if (autoB7D64D37_val == "0002") {
        PlayerGroupAdd(gv_friendlyPlayerGroup, lv_pLAYER);
        gf_SetProtossFaction(lp_playernumber, "0002");
        lv_sWAPPLAYER = gv_aI_ALLY_PURIFIER;
        lv_sTARTPOINT = CameraInfoFromId(1532988065);
        PlayerSetRace(lp_playernumber, "Prot");
        gv_rOLE_PURIFIER = lp_playernumber;
    }
    else if (autoB7D64D37_val == "0005") {
        PlayerGroupAdd(gv_friendlyPlayerGroup, lv_pLAYER);
        gf_SetTerranFaction(lv_pLAYER);
        lv_sWAPPLAYER = gv_aI_ALLY_TERRAN;
        lv_sTARTPOINT = CameraInfoFromId(473337770);
        PlayerSetRace(lp_playernumber, "Terr");
        gv_rOLE_TERRAN = lp_playernumber;
    }
    else if (autoB7D64D37_val == "0009") {
        PlayerGroupAdd(gv_enemyPlayerGroup, lv_pLAYER);
        gf_SetProtossFaction(lp_playernumber, "0001");
        lv_sWAPPLAYER = gv_aI_AMON_PROTOSS;
        lv_sTARTPOINT = CameraInfoFromId(218818903);
        PlayerSetRace(lp_playernumber, "Prot");
    }
    else if (autoB7D64D37_val == "0008") {
        PlayerGroupAdd(gv_enemyPlayerGroup, lv_pLAYER);
        gf_SetTerranFaction(lv_pLAYER);
        lv_sWAPPLAYER = gv_aI_AMON_TERRAN;
        lv_sTARTPOINT = CameraInfoFromId(218818903);
        PlayerSetRace(lp_playernumber, "Terr");
    }
    else if (autoB7D64D37_val == "0007") {
        PlayerGroupAdd(gv_enemyPlayerGroup, lv_pLAYER);
        gf_SetZergFaction(lv_pLAYER);
        lv_sWAPPLAYER = gv_aI_AMON_ZERG;
        lv_sTARTPOINT = CameraInfoFromId(218818903);
        PlayerSetRace(lp_playernumber, "Zerg");
    }
    else {
    }
    lv_factionUnits = UnitGroup(null, lv_sWAPPLAYER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((lp_ownership == true)) {
        auto3BFED40E_g = lv_factionUnits;
        auto3BFED40E_u = UnitGroupCount(auto3BFED40E_g, c_unitCountAll);
        for (;; auto3BFED40E_u -= 1) {
            auto3BFED40E_var = UnitGroupUnitFromEnd(auto3BFED40E_g, auto3BFED40E_u);
            if (auto3BFED40E_var == null) { break; }
            UnitSetOwner(auto3BFED40E_var, lp_playernumber, true);
        }
    }

    CameraApplyInfo(lv_pLAYER, lv_sTARTPOINT, 2.0, -1, 10.0, true);
    return true;
}

trigger auto_gf_GlobalPowers_Trigger = null;
int auto_gf_GlobalPowers_lp_player;

void gf_GlobalPowers (int lp_player) {
    auto_gf_GlobalPowers_lp_player = lp_player;

    if (auto_gf_GlobalPowers_Trigger == null) {
        auto_gf_GlobalPowers_Trigger = TriggerCreate("auto_gf_GlobalPowers_TriggerFunc");
    }

    TriggerExecute(auto_gf_GlobalPowers_Trigger, false, false);
}

bool auto_gf_GlobalPowers_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_GlobalPowers_lp_player;

    // Automatic Variable Declarations
    string auto8FDF3228_val;

    // Implementation
    auto8FDF3228_val = GameAttributePlayerValue("2", lp_player);
    if (auto8FDF3228_val == "0001") {
        gf_CU_GPInit(lp_player);
        gf_CU_GPInitProtoss(lp_player);
        gf_CU_GPSetUnit(gv_casterArtanis, lp_player);
        gf_CU_GPVisibilitySet(true, lp_player, c_transitionDurationDefault);
    }
    else if (auto8FDF3228_val == "0003") {
        gf_CU_GPInit(lp_player);
        gf_CU_GPInitProtoss(lp_player);
        gf_CU_GPSetUnit(gv_casterVorazun, lp_player);
        gf_CU_GPVisibilitySet(true, lp_player, lp_player);
    }
    else if (auto8FDF3228_val == "0002") {
        gf_CU_GPInit(lp_player);
        gf_CU_GPInitProtoss(lp_player);
        gf_CU_GPSetUnit(gv_casterPurifier, lp_player);
        gf_CU_GPVisibilitySet(true, lp_player, c_transitionDurationDefault);
    }
    else if (auto8FDF3228_val == "0004") {
        gf_CU_GPInit(lp_player);
        gf_CU_GPInitAlarak(lp_player);
        gf_CU_GPSetUnit(gv_casterAlarak, lp_player);
        gf_CU_GPVisibilitySet(true, lp_player, c_transitionDurationDefault);
    }
    else if (auto8FDF3228_val == "0005") {
        gf_CU_GPInit(lp_player);
        gf_CU_GPInitSwann(lp_player);
        gf_CU_GPSetUnit(gv_casterRaynor, lp_player);
        gf_CU_GPVisibilitySet(true, lp_player, c_transitionDurationDefault);
    }
    else {
    }
    return true;
}

trigger auto_gf_MovingRevealers_Trigger = null;
region auto_gf_MovingRevealers_lp_movingRegion;

void gf_MovingRevealers (region lp_movingRegion) {
    auto_gf_MovingRevealers_lp_movingRegion = lp_movingRegion;

    if (auto_gf_MovingRevealers_Trigger == null) {
        auto_gf_MovingRevealers_Trigger = TriggerCreate("auto_gf_MovingRevealers_TriggerFunc");
    }

    TriggerExecute(auto_gf_MovingRevealers_Trigger, false, false);
}

bool auto_gf_MovingRevealers_TriggerFunc (bool testConds, bool runActions) {
    region lp_movingRegion = auto_gf_MovingRevealers_lp_movingRegion;

    // Variable Declarations
    revealer lv_movingRevealer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    VisRevealerCreate(gv_aI_ALLY_KEYSTONE, lp_movingRegion);
    lv_movingRevealer = VisRevealerLastCreated();
    Wait(600.0, c_timeAI);
    while (true) {
        if ((DistanceBetweenPoints(RegionGetCenter(lp_movingRegion), RegionGetCenter(RegionEntireMap())) <= 1)) {
            VisRevealerDestroy(lv_movingRevealer);
            break;
        }
        else {
            RegionSetCenter(lp_movingRegion, libNtve_gf_PointOffsetTowardsPoint(RegionGetCenter(lp_movingRegion), 0.01, RegionGetCenter(RegionEntireMap())));
            VisRevealerUpdate(lv_movingRevealer);
            Wait(0.25, c_timeGame);
        }
    }
    return true;
}

fixed gf_KeystoneChargePercent () {
    // Automatic Variable Declarations
    // Implementation
    return (100.0 * (gv_keystoneChargeCurrent / gv_keystoneChargeMax));
}

trigger auto_gf_TurnWarpedInUnit_Trigger = null;
unit auto_gf_TurnWarpedInUnit_lp_unit;

void gf_TurnWarpedInUnit (unit lp_unit) {
    auto_gf_TurnWarpedInUnit_lp_unit = lp_unit;

    if (auto_gf_TurnWarpedInUnit_Trigger == null) {
        auto_gf_TurnWarpedInUnit_Trigger = TriggerCreate("auto_gf_TurnWarpedInUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_TurnWarpedInUnit_Trigger, false, false);
}

bool auto_gf_TurnWarpedInUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_TurnWarpedInUnit_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    UnitGroupAdd(gv_introWarpedInPlayerUnits, lp_unit);
    Wait(5.1, c_timeGame);
    if ((UnitGetType(lp_unit) != libVoiC_gf_EnabledUnitTypeforArmyCategory("Immortal"))) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_casterKeystone)), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_unit), 1.0, 45.0)), c_orderQueueReplace);
    }
    return true;
}

void gf_AIWarpPrism (int lp_owner, unit lp_warpPrism, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    int lv_deployIndex;

    // Automatic Variable Declarations
    const int auto9A25BDBE_ae = 7;
    const int auto9A25BDBE_ai = 1;

    // Variable Initialization

    // Implementation
    if ((UnitCountAlliance(UnitGetOwner(lp_warpPrism), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_warpPrism), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1) == 1) && (PointPathingPassable(UnitGetPosition(lp_warpPrism)) == true)) {
        UnitIssueOrder(lp_warpPrism, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueReplace);
    }
    else {
        lv_deployIndex = 1;
        for ( ; ( (auto9A25BDBE_ai >= 0 && lv_deployIndex <= auto9A25BDBE_ae) || (auto9A25BDBE_ai < 0 && lv_deployIndex >= auto9A25BDBE_ae) ) ; lv_deployIndex += auto9A25BDBE_ai ) {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_warpPrism), gv_prismDeployPoints[lv_deployIndex]) <= 15.0)) {
                UnitIssueOrder(lp_warpPrism, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(gv_prismDeployPoints[lv_deployIndex], 1.5))), c_orderQueueReplace);
                UnitIssueOrder(lp_warpPrism, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
                return ;
            }

        }
        libNtve_gf_AICast(lp_warpPrism, Order(AbilityCommand("TransportMode", 0)));
    }
}

void gf_AINerazimStalker (int lp_owner, unit lp_blinkStalker, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    int lv_deployIndex;
    point lv_targetPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitGetPropertyFixed(lp_blinkStalker, c_unitPropShields, c_unitPropCurrent) == 0.0) && (UnitCheckAbilCmdState(lp_blinkStalker, AbilityCommand("BlinkShieldRestore", 0), c_cmdStateCooldown) == false)) {
        lv_targetPoint = PointWithOffsetPolar(UnitGetPosition(lp_blinkStalker), -2.0, UnitGetFacing(lp_blinkStalker));
        libNtve_gf_AICast(lp_blinkStalker, OrderTargetingPoint(AbilityCommand("BlinkShieldRestore", 0), lv_targetPoint));
    }

}

void gf_AIOverseer (int lp_owner, unit lp_overseer, unitgroup lp_nearbyUnits) {
    // Automatic Variable Declarations
    int autoBB1BD4E0_val;

    // Implementation
    if ((UnitCountAlliance(UnitGetOwner(lp_overseer), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_overseer), 15.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterHasEnergy - 32))), 0) == 0)) {
        AISetUnitScriptControlled(lp_overseer, true);
        autoBB1BD4E0_val = UnitGetOwner(lp_overseer);
        if (autoBB1BD4E0_val == gv_aI_AMON_FORCES_ZERG_1) {
            UnitIssueOrder(lp_overseer, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(54))), c_orderQueueReplace);
        }
        else if (autoBB1BD4E0_val == gv_aI_AMON_FORCES_ZERG_2) {
            UnitIssueOrder(lp_overseer, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(55))), c_orderQueueReplace);
        }
        else if (autoBB1BD4E0_val == gv_aI_AMON_FORCES_ZERG_3) {
            UnitIssueOrder(lp_overseer, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(56))), c_orderQueueReplace);
        }
        else {
        }
    }

}

void gf_AIKarax (int lp_owner, unit lp_karax, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyGroup10;
    point lv_targetPoint;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup auto70237CCA_g;
    int auto70237CCA_u;

    // Variable Initialization
    lv_enemyGroup10 = UnitGroupEmpty();

    // Implementation
    lv_enemyGroup10 = libVCMI_gf_AITacticalEnemiesWithinRange(lp_karax, 10.0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
    if ((UnitGroupCount(lv_enemyGroup10, c_unitCountAlive) > 0)) {
        if ((UnitCheckAbilCmdState(lp_karax, AbilityCommand("PhaseCannon", 0), c_cmdStateCooldown) == false)) {
            lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_karax), 4.0, UnitGetPosition(UnitGroupRandomUnit(lv_enemyGroup10, c_unitCountAlive)));
            libNtve_gf_AICast(lp_karax, OrderTargetingPoint(AbilityCommand("PhaseCannon", 0), lv_targetPoint));
        }
        else if ((UnitCheckAbilCmdState(lp_karax, AbilityCommand("Reclamation", 0), c_cmdStateCooldown) == false)) {
            auto70237CCA_g = lv_enemyGroup10;
            auto70237CCA_u = UnitGroupCount(auto70237CCA_g, c_unitCountAll);
            for (;; auto70237CCA_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(auto70237CCA_g, auto70237CCA_u);
                if (lv_currentUnit == null) { break; }
                if (((UnitGetType(lv_currentUnit) == "Sentry") || (UnitGetType(lv_currentUnit) == "Immortal") || (UnitGetType(lv_currentUnit) == "Colossus") || (UnitGetType(lv_currentUnit) == "Reaver"))) {
                    libNtve_gf_AICast(lp_karax, OrderTargetingUnit(AbilityCommand("Reclamation", 0), lv_currentUnit));
                    break;
                }

            }
        }
    }

}

void gf_AIAlarak (int lp_owner, unit lp_alarak, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyGroup8;
    point lv_targetPoint;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup autoB06CCC77_g;
    int autoB06CCC77_u;

    // Variable Initialization
    lv_enemyGroup8 = UnitGroupEmpty();

    // Implementation
    lv_enemyGroup8 = libVCMI_gf_AITacticalEnemiesWithinRange(lp_alarak, 8.0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
    autoB06CCC77_g = lv_enemyGroup8;
    autoB06CCC77_u = UnitGroupCount(autoB06CCC77_g, c_unitCountAll);
    for (;; autoB06CCC77_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoB06CCC77_g, autoB06CCC77_u);
        if (lv_currentUnit == null) { break; }
        if ((UnitGetType(lv_currentUnit) == "Interceptor")) {
            UnitGroupRemove(lv_enemyGroup8, lv_currentUnit);
        }

    }
    if ((UnitGroupCount(lv_enemyGroup8, c_unitCountAlive) > 0)) {
        if ((UnitHasBehavior2(lp_alarak, "AlarakDeadlyCharging") == false) && (UnitCheckAbilCmdState(lp_alarak, AbilityCommand("AlarakKnockback", 0), c_cmdStateCooldown) == false)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_alarak), UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup8, UnitGetPosition(lp_alarak)))) <= 4.0)) {
                lv_targetPoint = UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup8, UnitGetPosition(lp_alarak)));
            }
            else {
                lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_alarak), 4.0, UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup8, UnitGetPosition(lp_alarak))));
            }
            libNtve_gf_AICast(lp_alarak, OrderTargetingPoint(AbilityCommand("AlarakKnockback", 0), lv_targetPoint));
        }

    }

}

void gf_AIVorazun (int lp_owner, unit lp_vorazun, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyGroup8;
    point lv_targetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup8 = UnitGroupEmpty();

    // Implementation
    lv_enemyGroup8 = libVCMI_gf_AITacticalEnemiesWithinRange(lp_vorazun, 8.0, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
    if ((UnitGroupCount(lv_enemyGroup8, c_unitCountAlive) > 0)) {
        if ((UnitCheckAbilCmdState(lp_vorazun, AbilityCommand("VorazunShadowFury", 0), c_cmdStateCooldown) == true) && (UnitCheckAbilCmdState(lp_vorazun, AbilityCommand("VorazunShadowDash", 0), c_cmdStateCooldown) == false)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_vorazun), UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup8, UnitGetPosition(lp_vorazun)))) <= 5.0)) {
                lv_targetPoint = UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup8, UnitGetPosition(lp_vorazun)));
            }
            else {
                lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_vorazun), 5.0, UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup8, UnitGetPosition(lp_vorazun))));
            }
            libNtve_gf_AICast(lp_vorazun, OrderTargetingPoint(AbilityCommand("VorazunShadowDash", 0), lv_targetPoint));
        }

    }

}

void gf_DisableSpearPowerQ (int lp_index) {
    // Automatic Variable Declarations
    int autoB0B0CB21_val;
    playergroup auto0DC73119_g;
    int auto0DC73119_var;
    const int autoF130F3D0_ae = 10;
    int autoF130F3D0_var;
    int auto0AC234E3_val;

    // Implementation
    while (!((TriggerQueueIsEmpty() == true))) {
        Wait(0.5, c_timeGame);
    }
    if ((gv_spearTierState[lp_index] == false)) {
        return ;
    }

    autoB0B0CB21_val = lp_index;
    if (autoB0B0CB21_val == 1) {
        gf_EnableDisableTier1Power(false);
    }
    else if (autoB0B0CB21_val == 2) {
        gf_EnableDisableTier2Power(false);
    }
    else if (autoB0B0CB21_val == 3) {
        gf_EnableDisableTier3Power(false);
    }
    else if (autoB0B0CB21_val == 4) {
        gf_EnableDisableTier4Power(false);
    }
    else {
        return ;
    }
    gv_spearTierState[lp_index] = false;
    TriggerQueueEnter();
    SoundPlayForPlayer(SoundLink("Event_SoA_Damage", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto0DC73119_g = libCOMI_gf_HumanPlayers();
    auto0DC73119_var = -1;
    while (true) {
        auto0DC73119_var = PlayerGroupNextPlayer(auto0DC73119_g, auto0DC73119_var);
        if (auto0DC73119_var < 0) { break; }
        CameraShake(auto0DC73119_var, "Heavy", "Earthquake", 0.0, 0.75, 2.25);
    }
    autoF130F3D0_var = 1;
    for ( ; autoF130F3D0_var <= autoF130F3D0_ae; autoF130F3D0_var += 1 ) {
        libNtve_gf_CreateActorAtPoint("Aiur_CrashingDebris", PointWithOffsetPolar(CameraGetTarget(gv_rOLE_KHALAI), RandomFixed(5.0, 10.0), libNtve_gf_RandomAngle()));
        libNtve_gf_MakeModelFaceAngle(libNtve_gf_ActorLastCreated(), 225.0);
        Wait(RandomFixed(0.25, 0.75), c_timeReal);
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 18.0, 0.25);
    auto0AC234E3_val = lp_index;
    if (auto0AC234E3_val == 1) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00120", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        SoundPlayForPlayer(SoundLink("Alarm_SoA_Protoss", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00114", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto0AC234E3_val == 2) {
        SoundPlayForPlayer(SoundLink("Alarm_SoA_Protoss", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00115", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto0AC234E3_val == 3) {
        SoundPlayForPlayer(SoundLink("Alarm_SoA_Protoss", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00116", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto0AC234E3_val == 4) {
        SoundPlayForPlayer(SoundLink("Alarm_SoA_Protoss", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00121", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00122", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
}

void gf_EnableDisableTier1Power (bool lp_enableDisable) {
    // Automatic Variable Declarations
    playergroup auto94475F7E_g;
    int auto94475F7E_var;

    // Implementation
    gf_EnableDisableSpearTier(lp_enableDisable, "GPType1");
    if ((lp_enableDisable == false)) {
        if ((gv_disableDialog[1] == c_invalidDialogId)) {
            auto94475F7E_g = gv_friendlyPlayerGroup;
            auto94475F7E_var = -1;
            while (true) {
                auto94475F7E_var = PlayerGroupNextPlayer(auto94475F7E_g, auto94475F7E_var);
                if (auto94475F7E_var < 0) { break; }
                TechTreeUpgradeAddLevel(auto94475F7E_var, "SOADisabled1", 1);
            }
            gv_disableDialog[1] = DialogLastCreated();
        }

    }
    else {
        DialogDestroy(gv_disableDialog[1]);
    }
}

void gf_EnableDisableTier2Power (bool lp_enableDisable) {
    // Automatic Variable Declarations
    playergroup autoDB39E77D_g;
    int autoDB39E77D_var;

    // Implementation
    gf_EnableDisableSpearTier(lp_enableDisable, "GPType2");
    if ((lp_enableDisable == false)) {
        if ((gv_disableDialog[2] == c_invalidDialogId)) {
            autoDB39E77D_g = gv_friendlyPlayerGroup;
            autoDB39E77D_var = -1;
            while (true) {
                autoDB39E77D_var = PlayerGroupNextPlayer(autoDB39E77D_g, autoDB39E77D_var);
                if (autoDB39E77D_var < 0) { break; }
                TechTreeUpgradeAddLevel(autoDB39E77D_var, "SOADisabled2", 1);
            }
            gv_disableDialog[2] = DialogLastCreated();
        }

    }
    else {
        DialogDestroy(gv_disableDialog[2]);
    }
}

void gf_EnableDisableTier3Power (bool lp_enableDisable) {
    // Automatic Variable Declarations
    playergroup autoDC14EDB1_g;
    int autoDC14EDB1_var;

    // Implementation
    gf_EnableDisableSpearTier(lp_enableDisable, "GPType4");
    if ((lp_enableDisable == false)) {
        if ((gv_disableDialog[3] == c_invalidDialogId)) {
            autoDC14EDB1_g = gv_friendlyPlayerGroup;
            autoDC14EDB1_var = -1;
            while (true) {
                autoDC14EDB1_var = PlayerGroupNextPlayer(autoDC14EDB1_g, autoDC14EDB1_var);
                if (autoDC14EDB1_var < 0) { break; }
                TechTreeUpgradeAddLevel(autoDC14EDB1_var, "SOADisabled3", 1);
            }
            gv_disableDialog[3] = DialogLastCreated();
        }

    }
    else {
        DialogDestroy(gv_disableDialog[3]);
    }
    Wait(10.0, c_timeAI);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/932A5AE8"));
}

void gf_EnableDisableTier4Power (bool lp_enableDisable) {
    // Automatic Variable Declarations
    playergroup auto9472EBCC_g;
    int auto9472EBCC_var;

    // Implementation
    gf_EnableDisableSpearTier(lp_enableDisable, "GPType6");
    if ((lp_enableDisable == false)) {
        if ((gv_disableDialog[4] == c_invalidDialogId)) {
            auto9472EBCC_g = gv_friendlyPlayerGroup;
            auto9472EBCC_var = -1;
            while (true) {
                auto9472EBCC_var = PlayerGroupNextPlayer(auto9472EBCC_g, auto9472EBCC_var);
                if (auto9472EBCC_var < 0) { break; }
                TechTreeUpgradeAddLevel(auto9472EBCC_var, "SOADisabled4", 1);
            }
            gv_disableDialog[4] = DialogLastCreated();
        }

    }
    else {
        DialogDestroy(gv_disableDialog[4]);
    }
}

void gf_EnableDisableSpearTier (bool lp_enableDisable, string lp_powerSlot) {
    // Variable Declarations
    string lv_indexPower;

    // Automatic Variable Declarations
    int autoB586D847_ai;
    int autoB586D847_ae;

    // Variable Initialization

    // Implementation
    autoB586D847_ai = 1;
    autoB586D847_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (autoB586D847_ai < autoB586D847_ae) {    
        lv_indexPower = UserDataInstance("CampaignPerk", autoB586D847_ai);
        autoB586D847_ai = autoB586D847_ai+1;
        if( libVoiC_gf_PC_PerkGroupOfPerk(lv_indexPower) == lp_powerSlot ) {
            if ((libVoiC_gf_PC_PerkStateCheck(lv_indexPower, libVoiC_ge_PC_PerkState_Active) == true)) {
                libVoiC_gf_EnableDisableSpearofAdunAbility(lp_enableDisable, lv_indexPower);
            }

        }    
    }
}

void gf_CreateDisableImage (int lp_dialog) {
    // Variable Declarations
    int lv_backgroundPanel;
    int lv_label;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_backgroundPanel = c_invalidDialogControlId;
    lv_label = c_invalidDialogControlId;

    // Implementation
    DialogSetVisible(lp_dialog, PlayerGroupAll(), true);
    DialogControlCreate(lp_dialog, c_triggerControlTypePanel);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    lv_backgroundPanel = DialogControlLastCreated();
    DialogControlCreateInPanel(lv_backgroundPanel, c_triggerControlTypeImage);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\static1.dds", PlayerGroupAll());
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlCreateInPanel(lv_backgroundPanel, c_triggerControlTypeLabel);
    lv_label = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/69571204"), PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
}

void gf_DisableAllActiveSpearPowers () {
    // Variable Declarations
    string lv_indexType;

    // Automatic Variable Declarations
    int auto85715C34_ai;
    int auto85715C34_ae;

    // Variable Initialization

    // Implementation
    auto85715C34_ai = 1;
    auto85715C34_ae = UserDataInstanceCount("CampaignPerkGroup")+1;
    while (auto85715C34_ai < auto85715C34_ae) {
        lv_indexType = UserDataInstance("CampaignPerkGroup", auto85715C34_ai);
        auto85715C34_ai = auto85715C34_ai+1;
        if ((lv_indexType != "GPType3") && (lv_indexType != "GPType5")) {
            gf_EnableDisableSpearTier(false, lv_indexType);
        }

    }
}

void gf_SpawnStreamingWaveUnit (int lp_count, string lp_unitType, int lp_player, point lp_spawnPoint, fixed lp_delay) {
    // Automatic Variable Declarations
    unitgroup auto0FB03E72_g;
    int auto0FB03E72_u;
    unit auto0FB03E72_var;

    // Implementation
    if ((libVCMI_gf_GameIsOver() == false)) {
        libNtve_gf_CreateUnitsAtPoint2(lp_count, lp_unitType, 0, lp_player, lp_spawnPoint);
        auto0FB03E72_g = UnitLastCreatedGroup();
        auto0FB03E72_u = UnitGroupCount(auto0FB03E72_g, c_unitCountAll);
        for (;; auto0FB03E72_u -= 1) {
            auto0FB03E72_var = UnitGroupUnitFromEnd(auto0FB03E72_g, auto0FB03E72_u);
            if (auto0FB03E72_var == null) { break; }
            AISetUnitScriptControlled(auto0FB03E72_var, false);
            libNtve_gf_AICast(auto0FB03E72_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_casterKeystone)));
        }
        AISetGroupSuicide(UnitLastCreatedGroup(), true);
        Wait(lp_delay, c_timeAI);
    }

}

trigger auto_gf_SuperWarpGateLogic_Trigger = null;
unit auto_gf_SuperWarpGateLogic_lp_transport;

void gf_SuperWarpGateLogic (unit lp_transport) {
    auto_gf_SuperWarpGateLogic_lp_transport = lp_transport;

    if (auto_gf_SuperWarpGateLogic_Trigger == null) {
        auto_gf_SuperWarpGateLogic_Trigger = TriggerCreate("auto_gf_SuperWarpGateLogic_TriggerFunc");
    }

    TriggerExecute(auto_gf_SuperWarpGateLogic_Trigger, false, false);
}

bool auto_gf_SuperWarpGateLogic_TriggerFunc (bool testConds, bool runActions) {
    unit lp_transport = auto_gf_SuperWarpGateLogic_lp_transport;

    // Automatic Variable Declarations
    int auto6ED1AF62_n;
    int auto6ED1AF62_i;
    int auto7B206701_val;

    // Implementation
    while ((UnitIsAlive(lp_transport) == true) && (UnitGetOwner(lp_transport) == gv_aI_AMON_FORCES_ARMADA)) {
        if ((UnitGetType(lp_transport) == "WarpPrismPhasing")) {
            Wait(2.0, c_timeAI);
            auto6ED1AF62_n = libLotv_gf_DifficultyValueInt2(1, 1, 1, 2);
            for (auto6ED1AF62_i = 1; auto6ED1AF62_i <= auto6ED1AF62_n; auto6ED1AF62_i += 1) {
                if ((UnitIsAlive(lp_transport) == true) && (UnitGetOwner(lp_transport) == gv_aI_AMON_FORCES_ARMADA)) {
                    auto7B206701_val = gv_armadaUpgradeCounter;
                    if (auto7B206701_val == 0) {
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 5), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
                            UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        }

                    }
                    else if (auto7B206701_val == 1) {
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 5), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
                            UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        }

                    }
                    else if (auto7B206701_val == 2) {
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 5), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
                            UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                            UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        }

                    }
                    else if (auto7B206701_val == 3) {
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 5), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
                            UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        }

                    }
                    else if (auto7B206701_val == 4) {
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 5), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
                            UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 15), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        }

                    }
                    else if (auto7B206701_val == 5) {
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
                            UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                            UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 15), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        }

                    }
                    else {
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(223), OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 3), UnitGetPosition(lp_transport)), c_orderQueueReplace);
                    }
                }

                Wait(libLotv_gf_DifficultyValueFixed2(15.0, 15.0, 15.0, 15.0), c_timeAI);
            }
            if ((UnitIsAlive(lp_transport) == true) && (UnitGetOwner(lp_transport) == gv_aI_AMON_FORCES_ARMADA)) {
                UnitIssueOrder(lp_transport, Order(AbilityCommand("TransportMode", 0)), c_orderQueueReplace);
                libLbty_gf_OrderTransporttoUnloadAllthenDespawn(lp_transport, UnitGetPosition(lp_transport), PointFromId(41));
            }
            else {
                return true;
            }
        }
        else {
            Wait(2.0, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_GPVitalChangesP1
//--------------------------------------------------------------------------------------------------
bool gt_CU_GPVitalChangesP1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_CU_GPSoAUpdateVitals(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CU_GPVitalChangesP1_Init () {
    gt_CU_GPVitalChangesP1 = TriggerCreate("gt_CU_GPVitalChangesP1_Func");
    TriggerEnable(gt_CU_GPVitalChangesP1, false);
    TriggerAddEventUnitProperty(gt_CU_GPVitalChangesP1, UnitRefFromVariable("gv_cU_GPUnit[1]"), c_unitPropEnergy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_GPVitalChangesP2
//--------------------------------------------------------------------------------------------------
bool gt_CU_GPVitalChangesP2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_CU_GPSoAUpdateVitals(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CU_GPVitalChangesP2_Init () {
    gt_CU_GPVitalChangesP2 = TriggerCreate("gt_CU_GPVitalChangesP2_Func");
    TriggerEnable(gt_CU_GPVitalChangesP2, false);
    TriggerAddEventUnitProperty(gt_CU_GPVitalChangesP2, UnitRefFromVariable("gv_cU_GPUnit[2]"), c_unitPropEnergy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_GPBirthFinished
//--------------------------------------------------------------------------------------------------
bool gt_CU_GPBirthFinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_updatePlayers;
    int lv_indexPlayer;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    playergroup auto7B01B31F_g;
    const int auto8BDF72BF_ae = 4;
    const int auto8BDF72BF_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto7B01B31F_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto7B01B31F_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((gv_cU_GPCutscene[lv_indexPlayer] != c_invalidDialogControlId) && (EventCutsceneId() == CutsceneGetTriggerControl(gv_cU_GPCutscene[lv_indexPlayer]))) {
            lv_updatePlayers = PlayerGroupSingle(lv_indexPlayer);
            lv_buttonIndex = 1;
            for ( ; ( (auto8BDF72BF_ai >= 0 && lv_buttonIndex <= auto8BDF72BF_ae) || (auto8BDF72BF_ai < 0 && lv_buttonIndex >= auto8BDF72BF_ae) ) ; lv_buttonIndex += auto8BDF72BF_ai ) {
                if ((gv_cU_GPButtonHighlighted[lv_buttonIndex][lv_indexPlayer] == true) && (gv_cU_GPCmdButtonArrows[lv_buttonIndex][lv_indexPlayer] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(gv_cU_GPCmdButtonArrows[lv_buttonIndex][lv_indexPlayer], lv_updatePlayers, true);
                }

            }
            if ((gv_cU_GPEnergyLabel[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_cU_GPEnergyLabel[lv_indexPlayer], lv_updatePlayers, true);
            }

            if ((gv_cU_GPEnergyTooltip[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_cU_GPEnergyTooltip[lv_indexPlayer], lv_updatePlayers, true);
            }

            if ((gv_cU_GPAlarakButton[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_cU_GPAlarakButton[lv_indexPlayer], lv_updatePlayers, true);
            }

            DialogControlSetVisible(gv_cU_GPCmdPanel[lv_indexPlayer], lv_updatePlayers, true);
            gf_CU_GPCheckForEnergyHighlight(lv_indexPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CU_GPBirthFinished_Init () {
    gt_CU_GPBirthFinished = TriggerCreate("gt_CU_GPBirthFinished_Func");
    TriggerAddEventCutsceneBookmarkFired(gt_CU_GPBirthFinished, c_cutsceneNone, "2DBirth");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_GPDeathRemove2D
//--------------------------------------------------------------------------------------------------
bool gt_CU_GPDeathRemove2D_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    playergroup lv_updatePlayers;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    playergroup autoA17F38A4_g;
    const int auto57B6F7B7_ae = 4;
    const int auto57B6F7B7_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoA17F38A4_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoA17F38A4_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((gv_cU_GPCutscene[lv_indexPlayer] != c_invalidDialogControlId) && (EventCutsceneId() == CutsceneGetTriggerControl(gv_cU_GPCutscene[lv_indexPlayer]))) {
            lv_updatePlayers = PlayerGroupSingle(lv_indexPlayer);
            lv_buttonIndex = 1;
            for ( ; ( (auto57B6F7B7_ai >= 0 && lv_buttonIndex <= auto57B6F7B7_ae) || (auto57B6F7B7_ai < 0 && lv_buttonIndex >= auto57B6F7B7_ae) ) ; lv_buttonIndex += auto57B6F7B7_ai ) {
                if ((gv_cU_GPCmdButtonArrows[lv_buttonIndex][lv_indexPlayer] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(gv_cU_GPCmdButtonArrows[lv_buttonIndex][lv_indexPlayer], lv_updatePlayers, false);
                }

            }
            DialogControlSetVisible(gv_cU_GPCmdPanel[lv_indexPlayer], lv_updatePlayers, false);
            if ((gv_cU_GPEnergyLabel[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_cU_GPEnergyLabel[lv_indexPlayer], lv_updatePlayers, false);
            }

            if ((gv_cU_GPEnergyTooltip[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_cU_GPEnergyTooltip[lv_indexPlayer], lv_updatePlayers, false);
            }

            if ((gv_cU_GPAlarakButton[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_cU_GPAlarakButton[lv_indexPlayer], lv_updatePlayers, false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CU_GPDeathRemove2D_Init () {
    gt_CU_GPDeathRemove2D = TriggerCreate("gt_CU_GPDeathRemove2D_Func");
    TriggerAddEventCutsceneBookmarkFired(gt_CU_GPDeathRemove2D, c_cutsceneNone, "2DDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_GPAlarakGemPress
//--------------------------------------------------------------------------------------------------
bool gt_CU_GPAlarakGemPress_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto765D727D_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto765D727D_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto765D727D_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((EventDialogControl() == gv_cU_GPAlarakButton[lv_indexPlayer])) {
            gv_cU_GPAlarakGemClickCount += 1;
            if ((ModI(gv_cU_GPAlarakGemClickCount, 2) == 1)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(gv_cU_GPCutscene[lv_indexPlayer]), "WorkStart");
                SoundPlayForPlayer(SoundLink("AlarakGemActivate", 0), c_maxPlayers, PlayerGroupSingle(lv_indexPlayer), 100.0, 0.0);
            }
            else {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(gv_cU_GPCutscene[lv_indexPlayer]), "WorkEnd");
                SoundPlayForPlayer(SoundLink("AlarakGemDeactivate", 0), c_maxPlayers, PlayerGroupSingle(lv_indexPlayer), 100.0, 0.0);
            }
            if ((gv_cU_GPAlarakGemClickCount == 7)) {
                libCOMI_gf_CM_CommanderVOSend(lv_indexPlayer, SoundLink("AlarakCommander_TopBarLines", 0), PlayerGroupSingle(lv_indexPlayer));
            }
            else if ((gv_cU_GPAlarakGemClickCount == 9)) {
                libCOMI_gf_CM_CommanderVOSend(lv_indexPlayer, SoundLink("AlarakCommander_TopBarLines", 1), PlayerGroupSingle(lv_indexPlayer));
            }
            else if ((gv_cU_GPAlarakGemClickCount == 11)) {
                libCOMI_gf_CM_CommanderVOSend(lv_indexPlayer, SoundLink("AlarakCommander_TopBarLines", 2), PlayerGroupSingle(lv_indexPlayer));
            }
            else if ((gv_cU_GPAlarakGemClickCount == 13)) {
                libCOMI_gf_CM_CommanderVOSend(lv_indexPlayer, SoundLink("AlarakCommander_TopBarLines", 3), PlayerGroupSingle(lv_indexPlayer));
            }
            else if ((gv_cU_GPAlarakGemClickCount == 15)) {
                libCOMI_gf_CM_CommanderVOSend(lv_indexPlayer, SoundLink("AlarakCommander_TopBarLines", 4), PlayerGroupSingle(lv_indexPlayer));
            }
            else if ((gv_cU_GPAlarakGemClickCount == 17)) {
                libCOMI_gf_CM_CommanderVOSend(lv_indexPlayer, SoundLink("AlarakCommander_TopBarLines", 5), PlayerGroupSingle(lv_indexPlayer));
                gv_cU_GPAlarakGemClickCount = -1;
            }
            TriggerEnable(TriggerGetCurrent(), false);
            Wait(2.5, c_timeReal);
            TriggerEnable(TriggerGetCurrent(), true);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CU_GPAlarakGemPress_Init () {
    gt_CU_GPAlarakGemPress = TriggerCreate("gt_CU_GPAlarakGemPress_Func");
    TriggerEnable(gt_CU_GPAlarakGemPress, false);
    TriggerAddEventDialogControl(gt_CU_GPAlarakGemPress, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Track Global Caster Energy
//--------------------------------------------------------------------------------------------------
bool gt_TrackGlobalCasterEnergy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_globalCasterIndexsearch;
    int lv_globalCasterIndexfound;
    unit lv_globalCasterUnit;

    // Automatic Variable Declarations
    const int autoB2E43CB5_ae = 12;
    const int autoB2E43CB5_ai = 1;
    unit auto36FAF0D9_val;

    // Variable Initialization
    lv_globalCasterUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_globalCasterIndexsearch = 1;
    for ( ; ( (autoB2E43CB5_ai >= 0 && lv_globalCasterIndexsearch <= autoB2E43CB5_ae) || (autoB2E43CB5_ai < 0 && lv_globalCasterIndexsearch >= autoB2E43CB5_ae) ) ; lv_globalCasterIndexsearch += autoB2E43CB5_ai ) {
        if ((gv_globalCasterUnitArray[lv_globalCasterIndexsearch] == EventUnit())) {
            lv_globalCasterIndexfound = lv_globalCasterIndexsearch;
        }

    }
    auto36FAF0D9_val = EventUnit();
    if (auto36FAF0D9_val == gv_globalCasterUnitArray[1]) {
        libNtve_gf_SetDialogItemText(gv_casterUnitEnergyTracker[lv_globalCasterIndexfound], IntToText(FixedToInt(UnitGetPropertyFixed(lv_globalCasterUnit, c_unitPropEnergy, c_unitPropCurrent))), PlayerGroupAll());
        DialogControlSetSize(gv_casterUnitEnergyTracker_visual[lv_globalCasterIndexfound], PlayerGroupAll(), 114, FixedToInt((((UnitGetPropertyFixed(lv_globalCasterUnit, c_unitPropEnergyPercent, c_unitPropCurrent) / 100.0) * (77 - 3)) + 3.0)));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrackGlobalCasterEnergy_Init () {
    gt_TrackGlobalCasterEnergy = TriggerCreate("gt_TrackGlobalCasterEnergy_Func");
    TriggerAddEventUnitProperty(gt_TrackGlobalCasterEnergy, UnitRefFromVariable("gv_globalCasterUnitArray[0]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(gt_TrackGlobalCasterEnergy, UnitRefFromVariable("gv_globalCasterUnitArray[1]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(gt_TrackGlobalCasterEnergy, UnitRefFromVariable("gv_globalCasterUnitArray[2]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(gt_TrackGlobalCasterEnergy, UnitRefFromVariable("gv_globalCasterUnitArray[3]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(gt_TrackGlobalCasterEnergy, UnitRefFromVariable("gv_globalCasterUnitArray[4]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(gt_TrackGlobalCasterEnergy, UnitRefFromVariable("gv_globalCasterUnitArray[5]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(gt_TrackGlobalCasterEnergy, UnitRefFromVariable("gv_globalCasterUnitArray[6]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(gt_TrackGlobalCasterEnergy, UnitRefFromVariable("gv_globalCasterUnitArray[7]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(gt_TrackGlobalCasterEnergy, UnitRefFromVariable("gv_globalCasterUnitArray[8]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(gt_TrackGlobalCasterEnergy, UnitRefFromVariable("gv_globalCasterUnitArray[9]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(gt_TrackGlobalCasterEnergy, UnitRefFromVariable("gv_globalCasterUnitArray[10]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(gt_TrackGlobalCasterEnergy, UnitRefFromVariable("gv_globalCasterUnitArray[11]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(gt_TrackGlobalCasterEnergy, UnitRefFromVariable("gv_globalCasterUnitArray[12]"), c_unitPropEnergy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Guardian Shell Aura 2
//--------------------------------------------------------------------------------------------------
bool gt_GuardianShellAura2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_allyofArtanis2[UnitGetOwner(EventUnitCreatedUnit())] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitCreatedUnit(), "GuardianShellEligible", EventUnitCreatedUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GuardianShellAura2_Init () {
    gt_GuardianShellAura2 = TriggerCreate("gt_GuardianShellAura2_Func");
    TriggerEnable(gt_GuardianShellAura2, false);
    TriggerAddEventUnitCreated(gt_GuardianShellAura2, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoASuperShieldsActivated 3
//--------------------------------------------------------------------------------------------------
bool gt_PM_SoASuperShieldsActivated3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF7DFA24D_g;
    int autoF7DFA24D_var;
    unitgroup autoB4290549_g;
    int autoB4290549_u;
    unit autoB4290549_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF7DFA24D_g = PlayerGroupAlliance(c_playerGroupAlly, EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin));
    autoF7DFA24D_var = -1;
    while (true) {
        autoF7DFA24D_var = PlayerGroupNextPlayer(autoF7DFA24D_g, autoF7DFA24D_var);
        if (autoF7DFA24D_var < 0) { break; }
        autoB4290549_g = UnitGroup(null, autoF7DFA24D_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
        autoB4290549_u = UnitGroupCount(autoB4290549_g, c_unitCountAll);
        for (;; autoB4290549_u -= 1) {
            autoB4290549_var = UnitGroupUnitFromEnd(autoB4290549_g, autoB4290549_u);
            if (autoB4290549_var == null) { break; }
            if ((UnitGetType(autoB4290549_var) != "KerriganVoidCoopEconDropLT1") && (UnitGetType(autoB4290549_var) != "KerriganVoidCoopEconDrop1") && (UnitGetType(autoB4290549_var) != "KerriganVoidCoopEconDrop2") && (UnitGetType(autoB4290549_var) != "KerriganVoidCoopEconDrop3") && (UnitGetType(autoB4290549_var) != "KerriganVoidCoopEconDrop4") && (UnitGetType(autoB4290549_var) != "KerriganVoidCoopEconDrop5")) {
                UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SOASuperShieldApply", autoB4290549_var);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PM_SoASuperShieldsActivated3_Init () {
    gt_PM_SoASuperShieldsActivated3 = TriggerCreate("gt_PM_SoASuperShieldsActivated3_Func");
    TriggerAddEventPlayerEffectUsed(gt_PM_SoASuperShieldsActivated3, c_playerAny, "ShieldOverchargeset");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chrono Wave Effect 3
//--------------------------------------------------------------------------------------------------
bool gt_ChronoWaveEffect3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerCreateEffectPoint(UnitGetOwner(EventUnit()), "SOAMapWideChronoSearch", PlayerStartLocation(1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChronoWaveEffect3_Init () {
    gt_ChronoWaveEffect3 = TriggerCreate("gt_ChronoWaveEffect3_Func");
    TriggerAddEventUnitOrder(gt_ChronoWaveEffect3, null, AbilityCommand("SOAMapWideChrono", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: BFG beam 2
//--------------------------------------------------------------------------------------------------
bool gt_BFGbeam2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "DrakkenLaserDrillBFGSet", PointWithOffsetPolar(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 500.0, AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BFGbeam2_Init () {
    gt_BFGbeam2 = TriggerCreate("gt_BFGbeam2_Func");
    TriggerAddEventPlayerEffectUsed(gt_BFGbeam2, c_playerAny, "DrakkenLaserDrillBFGDelayCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swann Vespene Drone Trigger 2
//--------------------------------------------------------------------------------------------------
bool gt_SwannVespeneDroneTrigger2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playernumber;

    // Automatic Variable Declarations
    const int autoA49CE16D_ae = 12;
    const int autoA49CE16D_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playernumber = 1;
    for ( ; ( (autoA49CE16D_ai >= 0 && lv_playernumber <= autoA49CE16D_ae) || (autoA49CE16D_ai < 0 && lv_playernumber >= autoA49CE16D_ae) ) ; lv_playernumber += autoA49CE16D_ai ) {
        if ((libNtve_gf_PlayerIsEnemy(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), lv_playernumber, libNtve_ge_PlayerRelation_Ally) == true)) {
            PlayerCreateEffectPoint(lv_playernumber, "VespeneDroneGrantResourcesTrigger", PlayerStartLocation(lv_playernumber));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwannVespeneDroneTrigger2_Init () {
    gt_SwannVespeneDroneTrigger2 = TriggerCreate("gt_SwannVespeneDroneTrigger2_Func");
    TriggerAddEventPlayerEffectUsed(gt_SwannVespeneDroneTrigger2, c_playerAny, "VespeneDroneImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swann Siege Tank Rebuild Controller 2
//--------------------------------------------------------------------------------------------------
bool gt_SwannSiegeTankRebuildController2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_morphTime;
    fixed lv_upgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_morphTime = 8.0;

    // Actions
    if (!runActions) {
        return true;
    }

    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,Start");
    lv_upgradeCount = IntToFixed(TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "MasterySwannImmortalityProtocol", c_techCountCompleteOnly));
    lv_morphTime = ((lv_morphTime-(lv_morphTime*(lv_upgradeCount/50)))-3);
    Wait(1.0, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), (("AnimPlay Morph Morph 0 -1.000000 -1.000000 " + FixedToString(lv_morphTime, 2) + " AsDuration ")));
    Wait(lv_morphTime, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwannSiegeTankRebuildController2_Init () {
    gt_SwannSiegeTankRebuildController2 = TriggerCreate("gt_SwannSiegeTankRebuildController2_Func");
    TriggerAddEventUnitAbility(gt_SwannSiegeTankRebuildController2, null, AbilityCommand("SiegeTankReborn", 0), c_abilMorphStageActorStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swann Thor Rebuild Controller 2
//--------------------------------------------------------------------------------------------------
bool gt_SwannThorRebuildController2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_morphTime;
    fixed lv_upgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_morphTime = 12.0;

    // Actions
    if (!runActions) {
        return true;
    }

    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,Start");
    lv_upgradeCount = IntToFixed(TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "MasterySwannImmortalityProtocol", c_techCountCompleteOnly));
    lv_morphTime = ((lv_morphTime-(lv_morphTime*(lv_upgradeCount/50)))-3);
    Wait(1.0, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), (("AnimPlay Morph Morph 0 -1.000000 -1.000000 " + FixedToString(lv_morphTime, 2) + " AsDuration ")));
    Wait(lv_morphTime, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwannThorRebuildController2_Init () {
    gt_SwannThorRebuildController2 = TriggerCreate("gt_SwannThorRebuildController2_Func");
    TriggerAddEventUnitAbility(gt_SwannThorRebuildController2, null, AbilityCommand("ThorRebornSwann", 0), c_abilMorphStageActorStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Re-set Drakkum Drill Panel
//--------------------------------------------------------------------------------------------------
bool gt_ResetDrakkumDrillPanel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_coopcaster;
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_coopcaster = EventUnit();
    lv_casterPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "DrakkenLaserDrillCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_drakkumDrill = EventUnitCreatedUnit();
    libNtve_gf_SetDialogItemUnitGroup(gv_drakkum2ndaryPanel, libNtve_gf_ConvertUnitToUnitGroup(gv_drakkumDrill), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResetDrakkumDrillPanel_Init () {
    gt_ResetDrakkumDrillPanel = TriggerCreate("gt_ResetDrakkumDrillPanel_Func");
    TriggerAddEventUnitCreated(gt_ResetDrakkumDrillPanel, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BFG beam
//--------------------------------------------------------------------------------------------------
bool gt_BFGbeam_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "DrakkenLaserDrillBFGSet", PointWithOffsetPolar(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 500.0, AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BFGbeam_Init () {
    gt_BFGbeam = TriggerCreate("gt_BFGbeam_Func");
    TriggerAddEventPlayerEffectUsed(gt_BFGbeam, c_playerAny, "DrakkenLaserDrillBFGDelayCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swann Vespene Drone Trigger
//--------------------------------------------------------------------------------------------------
bool gt_SwannVespeneDroneTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playernumber;

    // Automatic Variable Declarations
    const int auto19C137B1_ae = 12;
    const int auto19C137B1_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playernumber = 1;
    for ( ; ( (auto19C137B1_ai >= 0 && lv_playernumber <= auto19C137B1_ae) || (auto19C137B1_ai < 0 && lv_playernumber >= auto19C137B1_ae) ) ; lv_playernumber += auto19C137B1_ai ) {
        if ((libNtve_gf_PlayerIsEnemy(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), lv_playernumber, libNtve_ge_PlayerRelation_Ally) == true)) {
            PlayerCreateEffectPoint(lv_playernumber, "VespeneDroneGrantResourcesTrigger", PlayerStartLocation(lv_playernumber));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwannVespeneDroneTrigger_Init () {
    gt_SwannVespeneDroneTrigger = TriggerCreate("gt_SwannVespeneDroneTrigger_Func");
    TriggerAddEventPlayerEffectUsed(gt_SwannVespeneDroneTrigger, c_playerAny, "VespeneDroneImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swann Siege Tank Rebuild Controller
//--------------------------------------------------------------------------------------------------
bool gt_SwannSiegeTankRebuildController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_morphTime;
    fixed lv_upgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_morphTime = 8.0;

    // Actions
    if (!runActions) {
        return true;
    }

    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,Start");
    lv_upgradeCount = IntToFixed(TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "MasterySwannImmortalityProtocol", c_techCountCompleteOnly));
    lv_morphTime = ((lv_morphTime-(lv_morphTime*(lv_upgradeCount/50)))-3);
    Wait(1.0, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), (("AnimPlay Morph Morph 0 -1.000000 -1.000000 " + FixedToString(lv_morphTime, 2) + " AsDuration ")));
    Wait(lv_morphTime, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwannSiegeTankRebuildController_Init () {
    gt_SwannSiegeTankRebuildController = TriggerCreate("gt_SwannSiegeTankRebuildController_Func");
    TriggerAddEventUnitAbility(gt_SwannSiegeTankRebuildController, null, AbilityCommand("SiegeTankReborn", 0), c_abilMorphStageActorStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swann Thor Rebuild Controller
//--------------------------------------------------------------------------------------------------
bool gt_SwannThorRebuildController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_morphTime;
    fixed lv_upgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_morphTime = 12.0;

    // Actions
    if (!runActions) {
        return true;
    }

    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,Start");
    lv_upgradeCount = IntToFixed(TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "MasterySwannImmortalityProtocol", c_techCountCompleteOnly));
    lv_morphTime = ((lv_morphTime-(lv_morphTime*(lv_upgradeCount/50)))-3);
    Wait(1.0, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), (("AnimPlay Morph Morph 0 -1.000000 -1.000000 " + FixedToString(lv_morphTime, 2) + " AsDuration ")));
    Wait(lv_morphTime, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwannThorRebuildController_Init () {
    gt_SwannThorRebuildController = TriggerCreate("gt_SwannThorRebuildController_Func");
    TriggerAddEventUnitAbility(gt_SwannThorRebuildController, null, AbilityCommand("ThorRebornSwann", 0), c_abilMorphStageActorStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Siege Mode Progressive Range Increase Apply
//--------------------------------------------------------------------------------------------------
bool gt_NovaSiegeModeProgressiveRangeIncreaseApply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_siegeTankUnitGroup;

    // Automatic Variable Declarations
    unitgroup autoA589DCE9_g;
    int autoA589DCE9_u;
    unit autoA589DCE9_var;

    // Variable Initialization
    lv_siegeTankUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_siegeTankUnitGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("SiegeTankSieged_BlackOps", "", "", UnitGetOwner(EventUnit()), -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA589DCE9_g = lv_siegeTankUnitGroup;
    autoA589DCE9_u = UnitGroupCount(autoA589DCE9_g, c_unitCountAll);
    for (;; autoA589DCE9_u -= 1) {
        autoA589DCE9_var = UnitGroupUnitFromEnd(autoA589DCE9_g, autoA589DCE9_u);
        if (autoA589DCE9_var == null) { break; }
        UnitBehaviorAdd(autoA589DCE9_var, "SiegeTankSiegeModeProgressiveRangeIncease", EventUnit(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaSiegeModeProgressiveRangeIncreaseApply_Init () {
    gt_NovaSiegeModeProgressiveRangeIncreaseApply = TriggerCreate("gt_NovaSiegeModeProgressiveRangeIncreaseApply_Func");
    TriggerAddEventUnitAbility(gt_NovaSiegeModeProgressiveRangeIncreaseApply, null, AbilityCommand("FactoryTechLabResearch", 18), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artanis Orbital Strike initial
//--------------------------------------------------------------------------------------------------
bool gt_ArtanisOrbitalStrikeinitial_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;
    unit lv_casterunit;
    unitgroup lv_casterunit2;
    playergroup lv_casterPlayer2;
    point lv_point;

    // Automatic Variable Declarations
    fixed auto99DFAADD_at;

    // Variable Initialization
    lv_casterunit2 = UnitGroupEmpty();
    lv_casterPlayer2 = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_globalCasterforplayer[EventPlayer()] = EventUnit();
    gv_globalCastergroupforplayer[EventPlayer()] = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
    lv_casterPlayer = UnitGetOwner(EventUnit());
    lv_casterPlayer2 = PlayerGroupSingle(UnitGetOwner(EventUnit()));
    lv_casterunit = EventUnit();
    lv_casterunit2 = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
    lv_point = UnitGetPosition(lv_casterunit);
    UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), gv_globalCastergroupforplayer[lv_casterPlayer], OrderTargetingPoint(AbilityCommand("SOAOrbitalStrikeTargetingDummy", 0), UnitGetPosition(gv_globalCasterforplayer[lv_casterPlayer])), false);
    auto99DFAADD_at = 0;
    while (!((gv_orbitalStrikeCharges[lv_casterPlayer] == 0)) && auto99DFAADD_at <= 20.0) {
        Wait(0.5, c_timeGame);
        auto99DFAADD_at = auto99DFAADD_at + 0.5;
    }
    UnitBehaviorRemove(EventUnit(), "SOAOrbitalStrikeActivate", 1);
    gv_thermalLanceCharges[lv_casterPlayer] = 5;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtanisOrbitalStrikeinitial_Init () {
    gt_ArtanisOrbitalStrikeinitial = TriggerCreate("gt_ArtanisOrbitalStrikeinitial_Func");
    TriggerAddEventUnitAbility(gt_ArtanisOrbitalStrikeinitial, UnitRefFromVariable("gv_globalCasterUnitArray[c_playerAny]"), AbilityCommand("SOAOrbitalStrikeActivate", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artanis Orbital Strike 2ndary Casts
//--------------------------------------------------------------------------------------------------
bool gt_ArtanisOrbitalStrike2ndaryCasts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_orbitalStrikeCharges[EventPlayer()] >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    gv_orbitalStrikeCharges[lv_casterPlayer] = (gv_orbitalStrikeCharges[lv_casterPlayer] - 1);
    lv_point = EventUnitTargetPoint();
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("SOAOrbitalStrikeExecute", 0), lv_point), c_orderQueueReplace);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/C5F578D2"));
    if ((gv_thermalLanceCharges[lv_casterPlayer] == 2)) {
        UnitBehaviorRemove(EventUnit(), "SOAOrbitalStrikeActivate", 1);
        UnitIssueOrder(gv_globalCasterforplayer[lv_casterPlayer], Order(AbilityCommand("SOAOrbitalStrikeActivate", 1)), c_orderQueueReplace);
        gv_thermalLanceCharges[lv_casterPlayer] = 5;
    }
    else {
        UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), gv_globalCastergroupforplayer[lv_casterPlayer], OrderTargetingPoint(AbilityCommand("SOAOrbitalStrikeTargetingDummy", 0), UnitGetPosition(gv_globalCasterforplayer[lv_casterPlayer])), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArtanisOrbitalStrike2ndaryCasts_Init () {
    gt_ArtanisOrbitalStrike2ndaryCasts = TriggerCreate("gt_ArtanisOrbitalStrike2ndaryCasts_Func");
    TriggerAddEventUnitAbility(gt_ArtanisOrbitalStrike2ndaryCasts, null, AbilityCommand("SOAOrbitalStrikeTargetingDummy", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Karax Orbital Strike Recast
//--------------------------------------------------------------------------------------------------
bool gt_KaraxOrbitalStrikeRecast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;
    unit lv_casterunit;
    unitgroup lv_casterunit2;
    playergroup lv_casterPlayer2;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_casterunit2 = UnitGroupEmpty();
    lv_casterPlayer2 = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "KaraxCommander", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_globalCasterforplayer[EventPlayer()] = EventUnit();
    gv_globalCastergroupforplayer[EventPlayer()] = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
    lv_casterPlayer = UnitGetOwner(EventUnit());
    lv_casterPlayer2 = PlayerGroupSingle(UnitGetOwner(EventUnit()));
    lv_casterunit = EventUnit();
    lv_casterunit2 = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
    lv_point = UnitGetPosition(lv_casterunit);
    UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), gv_globalCastergroupforplayer[lv_casterPlayer], OrderTargetingPoint(AbilityCommand("SOAOrbitalStrikeKarax", 0), UnitGetPosition(gv_globalCasterforplayer[lv_casterPlayer])), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KaraxOrbitalStrikeRecast_Init () {
    gt_KaraxOrbitalStrikeRecast = TriggerCreate("gt_KaraxOrbitalStrikeRecast_Func");
    TriggerAddEventUnitAbility(gt_KaraxOrbitalStrikeRecast, UnitRefFromVariable("gv_globalCasterUnitArray[c_playerAny]"), AbilityCommand("SOAOrbitalStrikeKarax", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thermal Lance initial activation
//--------------------------------------------------------------------------------------------------
bool gt_ThermalLanceinitialactivation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;
    playergroup lv_casterPlayer2;
    unit lv_thermallancecaster;
    unitgroup lv_thermallancecastergroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_casterPlayer2 = PlayerGroupEmpty();
    lv_thermallancecastergroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    lv_casterPlayer2 = PlayerGroupSingle(lv_casterPlayer);
    gv_globalCasterforplayer[EventPlayer()] = EventUnit();
    gv_globalCastergroupforplayer[EventPlayer()] = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
    UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), gv_globalCastergroupforplayer[lv_casterPlayer], OrderTargetingPoint(AbilityCommand("SOAThermalLanceTargetingDummy", 0), UnitGetPosition(gv_globalCasterforplayer[lv_casterPlayer])), false);
    TriggerWaitForTrigger(gt_ThermalLanceRefundIfCanceled, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThermalLanceinitialactivation_Init () {
    gt_ThermalLanceinitialactivation = TriggerCreate("gt_ThermalLanceinitialactivation_Func");
    TriggerAddEventUnitAbility(gt_ThermalLanceinitialactivation, null, AbilityCommand("SOAThermalLanceActivate", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thermal Lance target area
//--------------------------------------------------------------------------------------------------
bool gt_ThermalLancetargetarea_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;
    playergroup lv_casterPlayer2;
    unit lv_thermallancecaster;
    unitgroup lv_thermallancecastergroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_casterPlayer2 = PlayerGroupEmpty();
    lv_thermallancecastergroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_thermalLanceCharges[EventPlayer()] >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    lv_casterPlayer2 = PlayerGroupSingle(lv_casterPlayer);
    gv_globalCasterforplayer[EventPlayer()] = EventUnit();
    gv_globalCastergroupforplayer[EventPlayer()] = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SOAThermalLanceTargeter", 0, UnitGetOwner(EventUnit()), EventUnitTargetPoint());
    lv_thermallancecaster = UnitLastCreated();
    lv_thermallancecastergroup = libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated());
    UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(lv_thermallancecaster)), lv_thermallancecastergroup, OrderTargetingPoint(AbilityCommand("SOAThermalLanceExecute", 0), UnitGetPosition(lv_thermallancecaster)), false);
    gv_thermalLanceCharges[lv_casterPlayer] = (gv_thermalLanceCharges[lv_casterPlayer] - 1);
    TriggerWaitForTrigger(gt_ThermalLance2ndarycasts, true);
    UnitRemove(UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThermalLancetargetarea_Init () {
    gt_ThermalLancetargetarea = TriggerCreate("gt_ThermalLancetargetarea_Func");
    TriggerAddEventUnitAbility(gt_ThermalLancetargetarea, null, AbilityCommand("SOAThermalLanceTargetingDummy", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thermal Lance 2ndary casts
//--------------------------------------------------------------------------------------------------
bool gt_ThermalLance2ndarycasts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    if ((gv_thermalLanceCharges[EventPlayer()] == 0)) {
        UnitIssueOrder(gv_globalCasterforplayer[lv_casterPlayer], Order(AbilityCommand("SOAThermalLanceActivate", 1)), c_orderQueueAddToEnd);
        gv_thermalLanceCharges[lv_casterPlayer] = 3;
    }
    else {
        UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), gv_globalCastergroupforplayer[lv_casterPlayer], OrderTargetingPoint(AbilityCommand("SOAThermalLanceTargetingDummy", 0), UnitGetPosition(gv_globalCasterforplayer[lv_casterPlayer])), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThermalLance2ndarycasts_Init () {
    gt_ThermalLance2ndarycasts = TriggerCreate("gt_ThermalLance2ndarycasts_Func");
    TriggerAddEventUnitAbility(gt_ThermalLance2ndarycasts, null, AbilityCommand("SOAThermalLanceExecute", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thermal Lance RefundIfCanceled
//--------------------------------------------------------------------------------------------------
bool gt_ThermalLanceRefundIfCanceled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThermalLanceRefundIfCanceled_Init () {
    gt_ThermalLanceRefundIfCanceled = TriggerCreate("gt_ThermalLanceRefundIfCanceled_Func");
    TriggerEnable(gt_ThermalLanceRefundIfCanceled, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    string auto14DF68D9_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto14DF68D9_val = GameAttributeGameValue("1");
    if (auto14DF68D9_val == "0001") {
        SetNextMissionDifficulty(PlayerGroupAll(), 1);
    }
    else if (auto14DF68D9_val == "0002") {
        SetNextMissionDifficulty(PlayerGroupAll(), 2);
    }
    else if (auto14DF68D9_val == "0003") {
        SetNextMissionDifficulty(PlayerGroupAll(), 3);
    }
    else if (auto14DF68D9_val == "0004") {
        SetNextMissionDifficulty(PlayerGroupAll(), 4);
    }
    else {
    }
    TriggerExecute(gt_Init01Technology, true, false);
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    TriggerExecute(gt_StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoC78C157F_g;
    const int autoFBC6C2A6_ae = 10;
    const int autoFBC6C2A6_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(gv_aI_AMON_FORCES_ZERG_1, "overlordspeed", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_aI_AMON_FORCES_ZERG_2, "overlordspeed", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_aI_AMON_FORCES_ZERG_3, "overlordspeed", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_aI_AMON_FORCES_ZERG_1, "overlordtransport", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_aI_AMON_FORCES_ZERG_2, "overlordtransport", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_aI_AMON_FORCES_ZERG_3, "overlordtransport", 1);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libCOMI_gt_CM_ZeratulProphecyEventArtifactMissed, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulProphecyEventArtifactPickedUp, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulProphecyEventArtifactRevealed, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulProphecyEventArtifactUsed, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulProphecyEventProphecyCast, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulProphecyEventVision, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_ProphecyMiss, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_ProphecyCastStop, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_ProphecyArtifactPickedUp, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_ProphecyArtifactRevealed, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_ProphecyArtifactPathingSafety, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulArtifactTriggerUpgrades, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulTopBarWarpTrainStart, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulTopBarWarpTrainFinish, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulTopBarRallySet, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulTopBarRallyRedirect, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulTopBarRallyCancel, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_Trade, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_Trade_FullEnergyOn, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_Trade_FullEnergyOff, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_ReflectionShield, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_DarkTemplarRetreat, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_WarpPrismAutoUnload, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_WarpPrismAutoUnloadOff, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_WarpPrismSelectRift, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_WarpPrismMorphUnloadState, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_Projection_UnitLink, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_Projection_TimedLifeFate, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_Projection_Cancel, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_PurificationNova_Finale, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_PurificationNova_Create, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_PurificationNova_MainImpact, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_Entropic_Spawner, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulArtifactUpgrades, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_TransportDropOff, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_StasisDuration, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulStasisBeamIssueOrder, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulStasisBeam, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_Devolve, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_DevolveKills, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_ArtifactRush, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulAvatarMinimapIcon, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_RallySetToZeratul, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_TransportResetRally, true);
    TriggerEnable(libCOMI_gt_CM_KaraxUnitReviveBarrier, true);
    TriggerEnable(libCOMI_gt_CM_KaraxSolarForgeSOAEnergy, true);
    TriggerEnable(libCOMI_gt_CM_KaraxRepairBeamLimit, true);
    TriggerExecute(libCOMI_gt_CM_KaraxRepairBeamLimit, false, true);
    TriggerEnable(libCOMI_gt_CM_HyperionMinimapIconDynamicFacingDisplay, true);
    TriggerEnable(libCOMI_gt_CM_MasteryKerriganInstantReviveCooldown, true);
    TriggerEnable(libCOMI_gt_KerriganPsiStrike, true);
    TriggerEnable(libCOMI_gt_KerriganEconDrop, true);
    TriggerEnable(libCOMI_gt_BanelingScourgeEconDrop, true);
    TriggerEnable(libCOMI_gt_AdvancedConstructionAutoUser, true);
    TriggerEnable(libCOMI_gt_AdvancedConstructionAutoAutoCast, true);
    TriggerEnable(libCOMI_gt_SwannVespeneDroneTrigger, true);
    TriggerEnable(libCOMI_gt_SwannSiegeTankRebuildController, true);
    TriggerEnable(libCOMI_gt_SwannThorRebuildController, true);
    TriggerEnable(libCOMI_gt_SwannLaserDrillCallForHelp, true);
    TriggerEnable(libCOMI_gt_CM_LaserDrillBFGActivate, true);
    TriggerEnable(libCOMI_gt_CM_LaserDrillNukeActivate, true);
    TriggerEnable(libCOMI_gt_CM_LaserDrillBFG, true);
    TriggerEnable(libCOMI_gt_LaserDrillBeamSoundRegionClear, true);
    TriggerEnable(libCOMI_gt_LaserDrillBeamSoundFiring, true);
    TriggerEnable(libCOMI_gt_LaserDrillBFGBeamSoundFiring, true);
    TriggerEnable(libCOMI_gt_LaserDrillNukeBeamSoundFiring, true);
    TriggerEnable(libCOMI_gt_LaserDrillNukeBeamSoundRegionClear, true);
    TriggerEnable(libCOMI_gt_CM_Alarak_Sacrific_Scale, true);
    TriggerEnable(libCOMI_gt_CM_Alarak_Upgrade, true);
    TriggerEnable(libCOMI_gt_CM_AlarakLightningStrikes_FlashOn, true);
    TriggerEnable(libCOMI_gt_CM_AlarakLightningStrikes_FlashOff, true);
    TriggerEnable(libCOMI_gt_CM_AlarakLightningStrikes_Sacriface, true);
    TriggerEnable(libCOMI_gt_CM_Alarak_SoulAbsorption_Impact, true);
    TriggerEnable(libCOMI_gt_CM_Alarak_SoulAbsorption_Launch, true);
    TriggerEnable(libCOMI_gt_CM_Alarak_SoulAbsorption_PrestigeMechBuff, true);
    TriggerEnable(libCOMI_gt_CM_Alarak_EmpowerAdd, true);
    TriggerEnable(libCOMI_gt_CM_Alarak_EmpowerRemove, true);
    TriggerEnable(libCOMI_gt_CM_Alarak_EmpowerWorshiperAdd, true);
    TriggerEnable(libCOMI_gt_CM_Alarak_EmpowerWorshiperRemove, true);
    TriggerEnable(libCOMI_gt_CM_Alarak_EmpowerUpdate, true);
    TriggerEnable(libCOMI_gt_RoachDropScale, true);
    TriggerEnable(libCOMI_gt_CM_Zagara_WeaponSwap, true);
    TriggerEnable(libCOMI_gt__CM_TychusEventHook, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_CalldownOdinDeselect, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_HeroQueue, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_HeroCancel, true);
    TriggerEnable(libCOMI_gt_CM_TychusSpecialistTrainingAuraOn, true);
    TriggerEnable(libCOMI_gt_CM_TychusSpecialistTrainingAuraOff, true);
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportActived, true);
    TriggerEnable(libCOMI_gt_CM_TychusMedicTopBarButton, true);
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportTargetOn, true);
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportTargetOff, true);
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportStop, true);
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportTimeOut, true);
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportAirBehaviorApplied, true);
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportGroundBehaviorApplied, true);
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportTeleportUnload, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_WarhoundFearApply, true);
    TriggerEnable(libCOMI_gt_CM_TychusWarhound_Revive, true);
    TriggerEnable(libCOMI_gt_CM_TychusReaper_Revive, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_TrainMaxChargesRemove, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_CalldownOdinTychusSelect, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_CalldownOdinUpdateTarget, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_OdinSummon_Used, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_OdinSummon_CameraShake, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_Odin_Timeout, true);
    TriggerEnable(libCOMI_gt__CM_TychusEventHook, true);
    TriggerEnable(libCOMI_gt__CM_TychusStructureEventHook, true);
    TriggerEnable(libCOMI_gt_CM_TychusHERC_CriticalText, true);
    TriggerEnable(libCOMI_gt_CM_TychusHERC_ShieldCooldown, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_OilBombFireDamageResponse, true);
    TriggerEnable(libCOMI_gt_CM_TychusHeroPurchaseDummy, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_Hero_Charge_Timing, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_HeroReviveUsed, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_HeroReviveFailSafe, true);
    TriggerEnable(libCOMI_gt_CM_TychusReplaceResearchCenter, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_TriUnitSpeed_Upgrade, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_TriUnitHealth_Upgrade, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_UltimateAchievement, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_HealAchievement, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_SnareFailSafe, true);
    libCOMI_gf_CM_Tychus_InitHeroTechLimit(lv_player);
    libCOMI_gf_CM_Tychus_UpdateHeroTechTree(lv_player);
    libCOMI_gf_CM_Tychus_SetHeroCostMultiply(lv_player, 1.0, 1.0);
    autoC78C157F_g = libCOMI_gf_CommanderPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoC78C157F_g, lv_player);
        if (lv_player < 0) { break; }
        if ((PlayerCommander(lv_player) == "Tychus")) {
            lv_i = 0;
            for ( ; ( (autoFBC6C2A6_ai >= 0 && lv_i <= autoFBC6C2A6_ae) || (autoFBC6C2A6_ai < 0 && lv_i >= autoFBC6C2A6_ae) ) ; lv_i += autoFBC6C2A6_ai ) {
                libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusBarracksTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.CountMax", lv_player, 4.0);
                libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusFactoryTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.CountMax", lv_player, 4.0);
                libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusStarportTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.CountMax", lv_player, 4.0);
            }
        }

    }
    TriggerExecute(libCOMI_gt_CM_Tychus_Hero_Charge_Timing, true, false);
    TriggerEnable(libCOMI_gt_CM_Mengsk_GlobalAbilityCast, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_TopBarKills, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_DirtyBombSweetener, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_ArtilleryBombardmentTarget, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_ArtilleryBombardmentCargoChange, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_ArtilleryExperimentalStrikeTarget, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_ArtilleryExperimentalStrikeFearApply, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_ArtilleryGlobalExperimentalStrikeTarget, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_NuclearAnnihilationSmallNukes, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_RegisterVeteranUnit, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_RemoveVeteranUnit, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_VeteranDies, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_VeteranDing, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_RegisterPropagandaUnit, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_RemovePropagandaUnit, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_PropagandaUpgraded, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_VeterancyEarned, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_MedivacAirlift, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_MedivacAirliftDing, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_EnlistStart, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_EnlistStop, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_ReturnToWork, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_ZerglingMengskSpawn, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_HydraliskMengskSpawn, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_MutaliskMengskSpawn, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_UltraliskMengskSpawn, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_BunkerDepotDropFillCargo, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_ZergSeekDestroy, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_WeaponPickerUpperRegister, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_WeaponPickerUpperUnregister, true);
    TriggerEnable(libCOMI_gt_CM_Mengsk_WeaponPickupRegister, true);
    TriggerExecute(libCOMI_gt_CM_Mengsk_WeaponPickup, true, false);
    TriggerExecute(libCOMI_gt_NovaUnitNames_GenerateNameList, false, false);
    TriggerEnable(libCOMI_gt_NovaUnitNames_Assign, true);
    TriggerEnable(libCOMI_gt_NovaUnitNames_KillCountUpdate, true);
    TriggerEnable(libCOMI_gt_NovaUnitNames_KillCountUpdateLaserTurret, true);
    TriggerEnable(libCOMI_gt_CM_NovaGriffinTransportActived, true);
    TriggerEnable(libCOMI_gt_CM_NovaGriffinTransportStop, true);
    TriggerEnable(libCOMI_gt_CM_NovaGriffinTransportTimeOut, true);
    TriggerEnable(libCOMI_gt_CM_NovaGriffinTransportAirBehaviorApplied, true);
    TriggerEnable(libCOMI_gt_CM_NovaGriffinTransportGroundBehaviorApplied, true);
    TriggerEnable(libCOMI_gt_CM_NovaGriffinTransportTeleportUnload, true);
    TriggerEnable(libCOMI_gt_CM_NovaGriffinBombingRunActivated, true);
    TriggerEnable(libCOMI_gt_CM_NovaGriffinBombingRunFinish, true);
    TriggerEnable(libCOMI_gt_CM_NovaSiegeModeProgressiveRangeIncreaseApply, true);
    TriggerEnable(libCOMI_gt_CM_NovaPsiStrike, true);
    TriggerEnable(libCOMI_gt_CM_Nova_BuildingCompletedTrigger, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pickedPlayerA;

    // Automatic Variable Declarations
    playergroup autoAA327E87_g;
    int autoAA327E87_var;
    playergroup auto1AE167F5_g;
    int auto1AE167F5_var;
    playergroup autoC358BCAF_g;
    int autoC358BCAF_var;
    playergroup autoD5E82B79_g;
    int autoD5E82B79_var;
    playergroup auto14AD51F3_g;
    int auto14AD51F3_var;
    playergroup autoA1AEBC18_g;
    int autoA1AEBC18_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Prot", false);
    PlayerGroupAdd(gv_friendlyPlayerGroup, gv_aI_ALLY_KEYSTONE);
    gf_SetPlayerRole("0001", gv_aI_ALLY_KHALAI, false);
    gf_SetPlayerRole("0002", gv_aI_ALLY_PURIFIER, false);
    gf_SetPlayerRole("0003", gv_aI_ALLY_NERAZIM, false);
    gf_SetPlayerRole("0004", gv_aI_ALLY_TALDARIM, false);
    gf_SetPlayerRole("0005", gv_aI_ALLY_TERRAN, false);
    gf_SetPlayerRole("0007", gv_aI_AMON_ZERG, false);
    gf_SetPlayerRole("0008", gv_aI_AMON_TERRAN, false);
    gf_SetPlayerRole("0009", gv_aI_AMON_PROTOSS, false);
    autoAA327E87_g = libCOMI_gf_HumanPlayers();
    autoAA327E87_var = -1;
    while (true) {
        autoAA327E87_var = PlayerGroupNextPlayer(autoAA327E87_g, autoAA327E87_var);
        if (autoAA327E87_var < 0) { break; }
        if ((PlayerType(autoAA327E87_var) != c_playerTypeNone)) {
            TriggerDebugOutput(1, IntToText(autoAA327E87_var), true);
            gf_SetPlayerRole(GameAttributePlayerValue("2", autoAA327E87_var), autoAA327E87_var, true);
        }

    }
    libNtve_gf_SetPlayerGroupAlliance(gv_friendlyPlayerGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetPlayerGroupAlliance(gv_enemyPlayerGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_friendlyPlayerGroup, gv_enemyPlayerGroup, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_enemyPlayerGroup, gv_friendlyPlayerGroup, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_aI_AMON_PROTOSS, "HeroicShieldCleanUp", 1);
    auto1AE167F5_g = gv_friendlyPlayerGroup;
    auto1AE167F5_var = -1;
    while (true) {
        auto1AE167F5_var = PlayerGroupNextPlayer(auto1AE167F5_g, auto1AE167F5_var);
        if (auto1AE167F5_var < 0) { break; }
        PlayerModifyPropertyInt(auto1AE167F5_var, c_playerPropMinerals, c_playerPropOperSetTo, libLotv_gf_DifficultyValueInt2(1000, 500, 250, 50));
        PlayerModifyPropertyInt(auto1AE167F5_var, c_playerPropVespene, c_playerPropOperSetTo, libLotv_gf_DifficultyValueInt2(500, 250, 100, 0));
    }
    autoC358BCAF_g = gv_enemyPlayerGroup;
    autoC358BCAF_var = -1;
    while (true) {
        autoC358BCAF_var = PlayerGroupNextPlayer(autoC358BCAF_g, autoC358BCAF_var);
        if (autoC358BCAF_var < 0) { break; }
        PlayerSetState(autoC358BCAF_var, c_playerStateMineralCostIgnored, true);
        PlayerSetState(autoC358BCAF_var, c_playerStateVespeneCostIgnored, true);
        PlayerSetState(autoC358BCAF_var, c_playerStateFoodIgnored, true);
        PlayerSetColorIndex(autoC358BCAF_var, 1, true);
        AISetAPM(autoC358BCAF_var, 9001);
    }
    autoD5E82B79_g = gv_friendlyPlayerGroup;
    autoD5E82B79_var = -1;
    while (true) {
        autoD5E82B79_var = PlayerGroupNextPlayer(autoD5E82B79_g, autoD5E82B79_var);
        if (autoD5E82B79_var < 0) { break; }
        if ((PlayerType(autoD5E82B79_var) == c_playerTypeComputer)) {
            lv_pickedPlayerA = autoD5E82B79_var;
            auto14AD51F3_g = gv_friendlyPlayerGroup;
            auto14AD51F3_var = -1;
            while (true) {
                auto14AD51F3_var = PlayerGroupNextPlayer(auto14AD51F3_g, auto14AD51F3_var);
                if (auto14AD51F3_var < 0) { break; }
                if ((PlayerType(auto14AD51F3_var) == c_playerTypeUser)) {
                    PlayerSetAlliance(lv_pickedPlayerA, c_allianceIdControl, auto14AD51F3_var, true);
                    PlayerSetAlliance(lv_pickedPlayerA, c_allianceIdSpend, auto14AD51F3_var, true);
                }

            }
        }

    }
    autoA1AEBC18_g = libCOMI_gf_HumanPlayers();
    autoA1AEBC18_var = -1;
    while (true) {
        autoA1AEBC18_var = PlayerGroupNextPlayer(autoA1AEBC18_g, autoA1AEBC18_var);
        if (autoA1AEBC18_var < 0) { break; }
        PlayerOptionOverride(autoA1AEBC18_var, "simplecommandcard", "0");
        PlayerOptionOverride(autoA1AEBC18_var, "gametooltips", "1");
    }
    libVCMI_gf_PM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto2E61EF9C_ae = 7;
    int auto2E61EF9C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(gv_casterKeystone, true);
    UnitSetState(gv_casterKeystone, c_unitStateTargetable, false);
    auto2E61EF9C_var = 1;
    for ( ; auto2E61EF9C_var <= auto2E61EF9C_ae; auto2E61EF9C_var += 1 ) {
        gv_prismDeployPoints[auto2E61EF9C_var] = PointFromName(("Prism Deploy " + IntToString(auto2E61EF9C_var)));
    }
    UnitBehaviorAddPlayer(gv_alarak, "AlarakKnockbackTriggerOverride", gv_rOLE_TALDARIM, 1);
    libVCMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_rOLE_KHALAI);
    gv_theBrutalisk = UnitFromId(77);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF0CFB556_g;
    int autoF0CFB556_var;
    playergroup auto430AE95C_g;
    int auto430AE95C_var;
    playergroup auto0682DB5B_g;
    int auto0682DB5B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(gv_casterKeystone, c_unitPropLifeMax, libLotv_gf_DifficultyValueFixed2(6000.0, 6000.0, 3000.0, 3000.0));
    UnitSetPropertyFixed(gv_casterKeystone, c_unitPropLifePercent, 100.0);
    CatalogFieldValueSet(c_gameCatalogAbil, "ChampionWarpTrain", "InfoArray[" + IntToString(1) + "].Cooldown.TimeUse", gv_rOLE_NERAZIM, "10");
    CatalogFieldValueSet(c_gameCatalogAbil, "ChampionWarpTrain", "InfoArray[" + IntToString(3) + "].Cooldown.TimeUse", gv_rOLE_TALDARIM, "10");
    CatalogFieldValueSet(c_gameCatalogAbil, "ChampionWarpTrain", "InfoArray[" + IntToString(5) + "].Cooldown.TimeUse", gv_rOLE_PURIFIER, "10");
    autoF0CFB556_g = gv_friendlyPlayerGroup;
    autoF0CFB556_var = -1;
    while (true) {
        autoF0CFB556_var = PlayerGroupNextPlayer(autoF0CFB556_g, autoF0CFB556_var);
        if (autoF0CFB556_var < 0) { break; }
        AISetAPM(autoF0CFB556_var, 3000);
    }
    if (((GameAttributeGameValue("1") == "0003") || (GameAttributeGameValue("1") == "0004"))) {
        auto430AE95C_g = gv_enemyPlayerGroup;
        auto430AE95C_var = -1;
        while (true) {
            auto430AE95C_var = PlayerGroupNextPlayer(auto430AE95C_g, auto430AE95C_var);
            if (auto430AE95C_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto430AE95C_var, "zerglingmovementspeed", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "hydraliskspeed", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "ExtendedThermalLance", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "ProtossAirWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "ProtossGroundWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "ProtossAirArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "ProtossGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "ProtossShieldsLevel1", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "ZergGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto430AE95C_var, "ZergFlyerArmorsLevel1", 1);
        }
    }

    if ((GameAttributeGameValue("1") == "0004")) {
        auto0682DB5B_g = gv_enemyPlayerGroup;
        auto0682DB5B_var = -1;
        while (true) {
            auto0682DB5B_var = PlayerGroupNextPlayer(auto0682DB5B_g, auto0682DB5B_var);
            if (auto0682DB5B_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto0682DB5B_var, "zerglingattackspeed", 1);
            TechTreeUpgradeAddLevel(auto0682DB5B_var, "CarrierLaunchSpeedUpgrade", 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_AddMissionTipCampaign("AlliedProtoss");
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, gv_rOLE_KHALAI);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Dragoon", false, gv_rOLE_KHALAI);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Reaver", false, gv_rOLE_KHALAI);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, gv_rOLE_KHALAI);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Scout", false, gv_rOLE_KHALAI);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Phoenix", false, gv_rOLE_KHALAI);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Carrier", false, gv_rOLE_KHALAI);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("MothershipAiur06", false, gv_rOLE_KHALAI);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Observer", false, gv_rOLE_KHALAI);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Probe", false, gv_rOLE_KHALAI);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Zergling", false, gv_rOLE_KHALAI);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Baneling", false, gv_rOLE_KHALAI);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Roach", false, gv_rOLE_KHALAI);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", false, gv_rOLE_KHALAI);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Infestor", false, gv_rOLE_KHALAI);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", false, gv_rOLE_KHALAI);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("InfestedAbomination", false, gv_rOLE_KHALAI);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", false, gv_rOLE_KHALAI);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Guardian", false, gv_rOLE_KHALAI);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Overseer", false, gv_rOLE_KHALAI);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("Drone", false, gv_rOLE_KHALAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto80F9DE0E_ae = 9;
    const int auto80F9DE0E_ai = 1;
    const int auto924DEAB5_ae = 28;
    const int auto924DEAB5_ai = 1;
    playergroup auto030149D3_g;
    int auto030149D3_var;
    playergroup auto8A479868_g;
    int auto8A479868_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    gv_mapMusicTrack = "PAiur06_Music_Main";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    GameTimeOfDaySet("08:00:00");
    TriggerQueueEnter();
    VisRevealArea(gv_rOLE_KHALAI, RegionFromId(15), 0.0, false);
    VisRevealArea(gv_aI_ALLY_KEYSTONE, RegionFromId(65), 0.25, false);
    lv_i = 1;
    for ( ; ( (auto80F9DE0E_ai >= 0 && lv_i <= auto80F9DE0E_ae) || (auto80F9DE0E_ai < 0 && lv_i >= auto80F9DE0E_ae) ) ; lv_i += auto80F9DE0E_ai ) {
        gf_MovingRevealers(RegionFromName(("MoveRegion 0" + IntToString(lv_i))));
    }
    lv_i = 10;
    for ( ; ( (auto924DEAB5_ai >= 0 && lv_i <= auto924DEAB5_ae) || (auto924DEAB5_ai < 0 && lv_i >= auto924DEAB5_ae) ) ; lv_i += auto924DEAB5_ai ) {
        gf_MovingRevealers(RegionFromName(("MoveRegion " + IntToString(lv_i))));
    }
    UnitIssueOrder(UnitFromId(1612859572), Order(AbilityCommand("ParkColonistVehicle", 0)), c_orderQueueReplace);
    CampaignInitAI();
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_MultiPlayerIntro, true, false);
    TriggerExecute(gt_TipReadyQ, true, false);
    Wait(2.0, c_timeReal);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    auto030149D3_g = PlayerGroupAll();
    auto030149D3_var = -1;
    while (true) {
        auto030149D3_var = PlayerGroupNextPlayer(auto030149D3_g, auto030149D3_var);
        if (auto030149D3_var < 0) { break; }
        libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), auto030149D3_var);
    }
    gv_gameIsStarted = true;
    auto8A479868_g = libCOMI_gf_HumanPlayers();
    auto8A479868_var = -1;
    while (true) {
        auto8A479868_var = PlayerGroupNextPlayer(auto8A479868_g, auto8A479868_var);
        if (auto8A479868_var < 0) { break; }
        gf_GlobalPowers(auto8A479868_var);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MultiPlayerIntro
//--------------------------------------------------------------------------------------------------
bool gt_MultiPlayerIntro_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iter;

    // Automatic Variable Declarations
    unitgroup auto5C2C2260_g;
    int auto5C2C2260_u;
    unit auto5C2C2260_var;
    unitgroup autoFB486638_g;
    int autoFB486638_u;
    unit autoFB486638_var;
    unitgroup autoD64E327C_g;
    int autoD64E327C_u;
    unit autoD64E327C_var;
    const int auto0256F8DD_ae = 4;
    const int auto0256F8DD_ai = 1;
    const int auto267098E8_ae = 2;
    const int auto267098E8_ai = 1;
    const int autoF355B647_ae = 2;
    const int autoF355B647_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(10.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(gv_casterKeystone, "pMission_Aiur06|Line00001", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(5.0, c_timeGame);
    auto5C2C2260_g = gv_introNerazimUnits;
    auto5C2C2260_u = UnitGroupCount(auto5C2C2260_g, c_unitCountAll);
    for (;; auto5C2C2260_u -= 1) {
        auto5C2C2260_var = UnitGroupUnitFromEnd(auto5C2C2260_g, auto5C2C2260_u);
        if (auto5C2C2260_var == null) { break; }
        UnitSetPosition(auto5C2C2260_var, PointWithOffsetPolar(UnitGetPosition(auto5C2C2260_var), 3.0, 315.0), false);
        UnitSetPropertyFixed(auto5C2C2260_var, c_unitPropMovementSpeed, 1.7);
        UnitIssueOrder(auto5C2C2260_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto5C2C2260_var), 4.0, 135.0)), c_orderQueueReplace);
    }
    libVCMI_gf_SendTransmissionCampaign(gv_vorazun, "pMission_Aiur06|Line00059", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.0);
    autoFB486638_g = gv_introPurifierUnits;
    autoFB486638_u = UnitGroupCount(autoFB486638_g, c_unitCountAll);
    for (;; autoFB486638_u -= 1) {
        autoFB486638_var = UnitGroupUnitFromEnd(autoFB486638_g, autoFB486638_u);
        if (autoFB486638_var == null) { break; }
        UnitSetPosition(autoFB486638_var, PointWithOffsetPolar(UnitGetPosition(autoFB486638_var), 5.0, 135.0), false);
        UnitSetPropertyFixed(autoFB486638_var, c_unitPropMovementSpeed, 1.7);
        UnitIssueOrder(autoFB486638_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(autoFB486638_var), 4.0, 315.0)), c_orderQueueReplace);
    }
    Wait(5.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur06|Line00060", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.0);
    autoD64E327C_g = gv_introTaldarimUnits;
    autoD64E327C_u = UnitGroupCount(autoD64E327C_g, c_unitCountAll);
    for (;; autoD64E327C_u -= 1) {
        autoD64E327C_var = UnitGroupUnitFromEnd(autoD64E327C_g, autoD64E327C_u);
        if (autoD64E327C_var == null) { break; }
        UnitSetPosition(autoD64E327C_var, PointWithOffsetPolar(UnitGetPosition(autoD64E327C_var), 2.0, 45.0), false);
        if ((UnitGetType(autoD64E327C_var) != "AlarakChampion")) {
            UnitSetPropertyFixed(autoD64E327C_var, c_unitPropMovementSpeed, 1.7);
        }

        UnitIssueOrder(autoD64E327C_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(autoD64E327C_var), 8.0, 225.0)), c_orderQueueReplace);
    }
    Wait(5.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Aiur06|Line00061", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(5.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(gv_raynor, "Mission_Epilogue02|Line00046", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(5.0, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(gv_artanis, "pMission_Aiur06|Line00094", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.0);
    lv_iter = 1;
    for ( ; ( (auto0256F8DD_ai >= 0 && lv_iter <= auto0256F8DD_ae) || (auto0256F8DD_ai < 0 && lv_iter >= auto0256F8DD_ae) ) ; lv_iter += auto0256F8DD_ai ) {
        UnitIssueOrder(gv_introSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromName(("Intro Zealot " + IntToString(lv_iter)))), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    lv_iter = 1;
    for ( ; ( (auto267098E8_ai >= 0 && lv_iter <= auto267098E8_ae) || (auto267098E8_ai < 0 && lv_iter >= auto267098E8_ae) ) ; lv_iter += auto267098E8_ai ) {
        UnitIssueOrder(gv_introSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromName(("Intro Stalker " + IntToString(lv_iter)))), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    lv_iter = 1;
    for ( ; ( (autoF355B647_ai >= 0 && lv_iter <= autoF355B647_ae) || (autoF355B647_ai < 0 && lv_iter >= autoF355B647_ae) ) ; lv_iter += autoF355B647_ai ) {
        UnitIssueOrder(gv_introSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), PointFromName(("Intro Immortal " + IntToString(lv_iter)))), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    TransmissionWait(TransmissionLastSent(), 5.0);
    TriggerExecute(gt_ObjectiveKeystoneMustSurviveCreate, true, false);
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_KeystoneStatus, true, false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveKeystoneMustSurviveCreate, true, true);
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00064", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(2.0, c_timeReal);
    cai_runall();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MultiPlayerIntro_Init () {
    gt_MultiPlayerIntro = TriggerCreate("gt_MultiPlayerIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVCMI_gf_DisplayMissionTip();
    Wait(libVCMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Expansion 1 - Time Based
//--------------------------------------------------------------------------------------------------
bool gt_CreepExpansion1TimeBased_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_aI_AMON_FORCES, RegionFromId(5), true);
    AIToggleBulliesInRegion(gv_aI_AMON_FORCES, RegionFromId(26), true);
    Wait(60.0, c_timeAI);
    AIToggleBulliesInRegion(gv_aI_AMON_FORCES, RegionFromId(25), true);
    Wait(30.0, c_timeAI);
    AIToggleBulliesInRegion(gv_aI_AMON_FORCES, RegionFromId(27), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreepExpansion1TimeBased_Init () {
    gt_CreepExpansion1TimeBased = TriggerCreate("gt_CreepExpansion1TimeBased_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Expansion 2 - Allied Nexus Falls
//--------------------------------------------------------------------------------------------------
bool gt_CreepExpansion2AlliedNexusFalls_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unit autoA07A5437_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_alliedNexusesLost += 1;
    autoA07A5437_val = EventUnit();
    if (autoA07A5437_val == gv_nerazimNexus) {
        AIToggleBulliesInRegion(gv_aI_AMON_FORCES, RegionFromId(17), true);
    }
    else if (autoA07A5437_val == gv_taldarimNexus) {
        AIToggleBulliesInRegion(gv_aI_AMON_FORCES, RegionFromId(52), true);
    }
    else if (autoA07A5437_val == gv_purifierNexus) {
        AIToggleBulliesInRegion(gv_aI_AMON_FORCES, RegionFromId(53), true);
    }
    else {
    }
    if ((gv_alliedNexusesLost >= 3)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreepExpansion2AlliedNexusFalls_Init () {
    gt_CreepExpansion2AlliedNexusFalls = TriggerCreate("gt_CreepExpansion2AlliedNexusFalls_Func");
    TriggerAddEventUnitDied(gt_CreepExpansion2AlliedNexusFalls, UnitRefFromVariable("gv_nerazimNexus"));
    TriggerAddEventUnitDied(gt_CreepExpansion2AlliedNexusFalls, UnitRefFromVariable("gv_taldarimNexus"));
    TriggerAddEventUnitDied(gt_CreepExpansion2AlliedNexusFalls, UnitRefFromVariable("gv_purifierNexus"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Keystone Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKeystoneMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PAiur06Primary01");
    gv_objectiveDestroyZergBase2 = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKeystoneMustSurviveCreate_Init () {
    gt_ObjectiveKeystoneMustSurviveCreate = TriggerCreate("gt_ObjectiveKeystoneMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Keystone Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKeystoneMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveKeystoneMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur06Primary01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKeystoneMustSurviveComplete_Init () {
    gt_ObjectiveKeystoneMustSurviveComplete = TriggerCreate("gt_ObjectiveKeystoneMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Keystone Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKeystoneMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveKeystoneMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PAiur06Primary01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_DefeatKeystoneDestroyed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKeystoneMustSurviveFailed_Init () {
    gt_ObjectiveKeystoneMustSurviveFailed = TriggerCreate("gt_ObjectiveKeystoneMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Keystone Status
//--------------------------------------------------------------------------------------------------
bool gt_KeystoneStatus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_energyNovaButtonText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_KeystoneCharging, true, false);
    VisRevealerEnable(gv_keystoneRevealer, true);
    libVCUI_gf_DisplayProgressBar(StringExternal("Param/Value/059447A6"), 0, FixedToInt(gv_keystoneChargeMax));
    libVCUI_gf_SetProgressBarProgress(FixedToInt(gv_keystoneChargeCurrent));
    libVCUI_gf_SetProgressBarLabel((StringExternal("Param/Value/561E4317") + FixedToText(gf_KeystoneChargePercent(), 1) + StringExternal("Param/Value/E181E660")));
    SoundPlay(SoundLink("UI_DropdownListSelect", -1), PlayerGroupAll(), 100.0, 0.0);
    while (true) {
        Wait(1.0, c_timeGame);
        libVCUI_gf_SetProgressBarProgress(FixedToInt(gv_keystoneChargeCurrent));
        libVCUI_gf_SetProgressBarLabel((StringExternal("Param/Value/90F293FE") + FixedToText(gf_KeystoneChargePercent(), 1) + StringExternal("Param/Value/9D53264F")));
        if ((libVCMI_gf_GameIsOver() == true)) {
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KeystoneStatus_Init () {
    gt_KeystoneStatus = TriggerCreate("gt_KeystoneStatus_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Keystone Charging
//--------------------------------------------------------------------------------------------------
bool gt_KeystoneCharging_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv__80percentreached;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        if ((UnitIsAlive(gv_casterKeystone) == false)) {
            return true;
        }

        gv_keystoneChargeCurrent += gv_keystoneChargeIncrement;
        if ((gv_keystoneChargeCurrent >= gv_keystoneChargeMax)) {
            libNtve_gf_ChangeUnitDamage(gv_casterKeystone, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
            gv_keystoneChargeCurrent = gv_keystoneChargeMax;
            TransmissionClearAll();
            Wait(0.0625, c_timeAI);
            TriggerQueueClear(c_triggerQueueKill);
            TriggerExecute(gt_VictorySequence, true, false);
            return true;
        }

        if ((gv_keystoneChargeCurrent >= (gv_keystoneChargeMax * 0.95)) && (TriggerIsEnabled(gt_KeystoneAlmostDoneQ) == true)) {
            TriggerExecute(gt_KeystoneAlmostDoneQ, true, false);
        }

        if ((gv_keystoneChargeCurrent >= (gv_keystoneChargeMax * 0.8)) && (lv__80percentreached == false)) {
            lv__80percentreached = true;
            libNtve_gf_SendActorMessageToUnit(gv_casterKeystone, "AnimClear SpellA");
            libNtve_gf_SendActorMessageToUnit(gv_casterKeystone, "AnimPlay SpellB Stand,Work,B PlayForever");
            libNtve_gf_SendActorMessageToUnit(gv_casterKeystone, "Signal PlaySoundB");
        }

        if ((gv_keystoneChargeCurrent >= (gv_keystoneChargeMax * 0.5)) && (TriggerIsEnabled(gt_KeystoneHalfQ) == true)) {
            TriggerExecute(gt_KeystoneHalfQ, true, false);
            libNtve_gf_SendActorMessageToUnit(gv_casterKeystone, "AnimPlay SpellA Stand,Work,A PlayForever");
            libNtve_gf_SendActorMessageToUnit(gv_casterKeystone, "Signal PlaySoundA");
        }

        if ((gv_keystoneChargeCurrent >= (gv_keystoneChargeMax * 0.25)) && (TriggerIsEnabled(gt_KeystoneQuarterSave) == true)) {
            TriggerExecute(gt_KeystoneQuarterSave, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KeystoneCharging_Init () {
    gt_KeystoneCharging = TriggerCreate("gt_KeystoneCharging_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Keystone Quarter Save
//--------------------------------------------------------------------------------------------------
bool gt_KeystoneQuarterSave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/9DE3C2CB"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KeystoneQuarterSave_Init () {
    gt_KeystoneQuarterSave = TriggerCreate("gt_KeystoneQuarterSave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Keystone Half Q
//--------------------------------------------------------------------------------------------------
bool gt_KeystoneHalfQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/7FB81797"));
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00186", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KeystoneHalfQ_Init () {
    gt_KeystoneHalfQ = TriggerCreate("gt_KeystoneHalfQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Keystone Almost Done Q
//--------------------------------------------------------------------------------------------------
bool gt_KeystoneAlmostDoneQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/5F7689D9"));
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00187", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KeystoneAlmostDoneQ_Init () {
    gt_KeystoneAlmostDoneQ = TriggerCreate("gt_KeystoneAlmostDoneQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Building Death History Update
//--------------------------------------------------------------------------------------------------
bool gt_BuildingDeathHistoryUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoA3F62510_ae = 9;
    const int autoA3F62510_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_recentBuildingDeaths = (gv_recentBuildingDeaths - gv_recentBuildingDeathHistory[1]);
    gv_recentBuildingDeaths = MaxI(gv_recentBuildingDeaths, 0);
    lv_i = 1;
    for ( ; ( (autoA3F62510_ai >= 0 && lv_i <= autoA3F62510_ae) || (autoA3F62510_ai < 0 && lv_i >= autoA3F62510_ae) ) ; lv_i += autoA3F62510_ai ) {
        gv_recentBuildingDeathHistory[lv_i] = gv_recentBuildingDeathHistory[(lv_i + 1)];
    }
    gv_recentBuildingDeathHistory[10] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildingDeathHistoryUpdate_Init () {
    gt_BuildingDeathHistoryUpdate = TriggerCreate("gt_BuildingDeathHistoryUpdate_Func");
    TriggerAddEventTimePeriodic(gt_BuildingDeathHistoryUpdate, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iter;

    // Automatic Variable Declarations
    unitgroup auto30D5A131_g;
    int auto30D5A131_u;
    unit auto30D5A131_var;
    unitgroup autoBE4AF587_g;
    int autoBE4AF587_u;
    unit autoBE4AF587_var;
    unitgroup auto6DDEAFD4_g;
    int auto6DDEAFD4_u;
    unit auto6DDEAFD4_var;
    const int autoC364DAEF_ae = 4;
    const int autoC364DAEF_ai = 1;
    const int autoE12A7440_ae = 2;
    const int autoE12A7440_ai = 1;
    const int autoF04FA182_ae = 2;
    const int autoF04FA182_ai = 1;
    unitgroup auto4E71C6EA_g;
    int auto4E71C6EA_u;
    unit auto4E71C6EA_var;
    unitgroup auto832D4A48_g;
    int auto832D4A48_u;
    unit auto832D4A48_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueEnter();
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    if ((PlayerGroupCount(libCOMI_gf_HumanPlayers()) == 1)) {
    }
    else {
        libVCMI_gf_SendTransmissionCampaign(gv_introKarax, "pMission_Aiur06|Line00001", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        auto30D5A131_g = gv_introNerazimUnits;
        auto30D5A131_u = UnitGroupCount(auto30D5A131_g, c_unitCountAll);
        for (;; auto30D5A131_u -= 1) {
            auto30D5A131_var = UnitGroupUnitFromEnd(auto30D5A131_g, auto30D5A131_u);
            if (auto30D5A131_var == null) { break; }
            UnitSetPosition(auto30D5A131_var, PointWithOffsetPolar(UnitGetPosition(auto30D5A131_var), 3.0, 315.0), false);
            UnitSetPropertyFixed(auto30D5A131_var, c_unitPropMovementSpeed, 1.7);
            UnitIssueOrder(auto30D5A131_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto30D5A131_var), 4.0, 135.0)), c_orderQueueReplace);
        }
        libVCMI_gf_SendTransmissionCampaign(gv_introVorazun, "pMission_Aiur06|Line00059", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        TransmissionWait(TransmissionLastSent(), 0.0);
        autoBE4AF587_g = gv_introPurifierUnits;
        autoBE4AF587_u = UnitGroupCount(autoBE4AF587_g, c_unitCountAll);
        for (;; autoBE4AF587_u -= 1) {
            autoBE4AF587_var = UnitGroupUnitFromEnd(autoBE4AF587_g, autoBE4AF587_u);
            if (autoBE4AF587_var == null) { break; }
            UnitSetPosition(autoBE4AF587_var, PointWithOffsetPolar(UnitGetPosition(autoBE4AF587_var), 5.0, 135.0), false);
            UnitSetPropertyFixed(autoBE4AF587_var, c_unitPropMovementSpeed, 1.7);
            UnitIssueOrder(autoBE4AF587_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(autoBE4AF587_var), 4.0, 315.0)), c_orderQueueReplace);
        }
        libVCMI_gf_SendTransmissionCampaign(gv_introKarax, "pMission_Aiur06|Line00060", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        TransmissionWait(TransmissionLastSent(), 0.0);
        auto6DDEAFD4_g = gv_introTaldarimUnits;
        auto6DDEAFD4_u = UnitGroupCount(auto6DDEAFD4_g, c_unitCountAll);
        for (;; auto6DDEAFD4_u -= 1) {
            auto6DDEAFD4_var = UnitGroupUnitFromEnd(auto6DDEAFD4_g, auto6DDEAFD4_u);
            if (auto6DDEAFD4_var == null) { break; }
            UnitSetPosition(auto6DDEAFD4_var, PointWithOffsetPolar(UnitGetPosition(auto6DDEAFD4_var), 2.0, 45.0), false);
            if ((UnitGetType(auto6DDEAFD4_var) != "AlarakChampion")) {
                UnitSetPropertyFixed(auto6DDEAFD4_var, c_unitPropMovementSpeed, 1.7);
            }

            UnitIssueOrder(auto6DDEAFD4_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto6DDEAFD4_var), 8.0, 225.0)), c_orderQueueReplace);
        }
        libVCMI_gf_SendTransmissionCampaign(gv_introAlarak, "pMission_Aiur06|Line00061", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(gv_raynor, "Mission_Epilogue02|Line00046", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00094", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        TransmissionWait(TransmissionLastSent(), 0.0);
        lv_iter = 1;
        for ( ; ( (autoC364DAEF_ai >= 0 && lv_iter <= autoC364DAEF_ae) || (autoC364DAEF_ai < 0 && lv_iter >= autoC364DAEF_ae) ) ; lv_iter += autoC364DAEF_ai ) {
            UnitIssueOrder(gv_introSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromName(("Intro Zealot " + IntToString(lv_iter)))), c_orderQueueReplace);
            Wait(0.125, c_timeGame);
        }
        lv_iter = 1;
        for ( ; ( (autoE12A7440_ai >= 0 && lv_iter <= autoE12A7440_ae) || (autoE12A7440_ai < 0 && lv_iter >= autoE12A7440_ae) ) ; lv_iter += autoE12A7440_ai ) {
            UnitIssueOrder(gv_introSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromName(("Intro Stalker " + IntToString(lv_iter)))), c_orderQueueReplace);
            Wait(0.125, c_timeGame);
        }
        lv_iter = 1;
        for ( ; ( (autoF04FA182_ai >= 0 && lv_iter <= autoF04FA182_ae) || (autoF04FA182_ai < 0 && lv_iter >= autoF04FA182_ae) ) ; lv_iter += autoF04FA182_ai ) {
            UnitIssueOrder(gv_introSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), PointFromName(("Intro Immortal " + IntToString(lv_iter)))), c_orderQueueReplace);
            Wait(0.125, c_timeGame);
        }
        libVCMI_gf_SendTransmissionCampaign(gv_introKarax, "pMission_Aiur06|Line00095", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00005", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
        auto4E71C6EA_g = gv_introWarpedInPlayerUnits;
        auto4E71C6EA_u = UnitGroupCount(auto4E71C6EA_g, c_unitCountAll);
        for (;; auto4E71C6EA_u -= 1) {
            auto4E71C6EA_var = UnitGroupUnitFromEnd(auto4E71C6EA_g, auto4E71C6EA_u);
            if (auto4E71C6EA_var == null) { break; }
            UnitIssueOrder(auto4E71C6EA_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto4E71C6EA_var), 14.0, 45.0)), c_orderQueueReplace);
            UnitIssueOrder(auto4E71C6EA_var, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(auto4E71C6EA_var), 12.0, 45.0)), c_orderQueueAddToEnd);
        }
        TransmissionWait(TransmissionLastSent(), 0.0);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00143", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        auto832D4A48_g = gv_introWarpedInPlayerUnits;
        auto832D4A48_u = UnitGroupCount(auto832D4A48_g, c_unitCountAll);
        for (;; auto832D4A48_u -= 1) {
            auto832D4A48_var = UnitGroupUnitFromEnd(auto832D4A48_g, auto832D4A48_u);
            if (auto832D4A48_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto832D4A48_var, "AnimPlay StandVictory Stand,Victory");
        }
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00124", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        TransmissionWait(TransmissionLastSent(), 4.0);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9BE741BB_g;
    int auto9BE741BB_var;
    unitgroup autoA01A6EAC_g;
    int autoA01A6EAC_u;
    unit autoA01A6EAC_var;
    unitgroup auto9367951B_g;
    int auto9367951B_u;
    unit auto9367951B_var;
    unitgroup auto79C680B1_g;
    int auto79C680B1_u;
    unit auto79C680B1_var;
    unitgroup auto6A52A88F_g;
    int auto6A52A88F_u;
    unit auto6A52A88F_var;
    unitgroup auto077E54EA_g;
    int auto077E54EA_u;
    unit auto077E54EA_var;
    unitgroup auto0E2E7914_g;
    int auto0E2E7914_u;
    unit auto0E2E7914_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    auto9BE741BB_g = gv_friendlyPlayerGroup;
    auto9BE741BB_var = -1;
    while (true) {
        auto9BE741BB_var = PlayerGroupNextPlayer(auto9BE741BB_g, auto9BE741BB_var);
        if (auto9BE741BB_var < 0) { break; }
        PlayerSetState(auto9BE741BB_var, c_playerStateXPGain, false);
    }
    GameTimeOfDayPause(true);
    libNtve_gf_PauseUnit(UnitFromId(22), true);
    if ((libVoiC_gf_SpearofAdunAbilityIsEnabled("GPTier5Power1") == true)) {
        autoA01A6EAC_g = UnitGroup("Pylon", gv_rOLE_KHALAI, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA01A6EAC_u = UnitGroupCount(autoA01A6EAC_g, c_unitCountAll);
        for (;; autoA01A6EAC_u -= 1) {
            autoA01A6EAC_var = UnitGroupUnitFromEnd(autoA01A6EAC_g, autoA01A6EAC_u);
            if (autoA01A6EAC_var == null) { break; }
            UnitBehaviorRemove(autoA01A6EAC_var, "MatrixOverload", 1);
        }
    }

    auto9367951B_g = UnitGroup(null, gv_rOLE_NERAZIM, RegionCircle(PointFromId(293), 8.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9367951B_u = UnitGroupCount(auto9367951B_g, c_unitCountAll);
    for (;; auto9367951B_u -= 1) {
        auto9367951B_var = UnitGroupUnitFromEnd(auto9367951B_g, auto9367951B_u);
        if (auto9367951B_var == null) { break; }
        UnitGroupAdd(gv_cinematicHiddenUnits, auto9367951B_var);
        libNtve_gf_PauseUnit(auto9367951B_var, true);
        libNtve_gf_ShowHideUnit(auto9367951B_var, false);
        UnitCreate(1, UnitGetType(auto9367951B_var), c_unitCreateIgnorePlacement, UnitGetOwner(auto9367951B_var), UnitGetPosition(auto9367951B_var), UnitGetFacing(auto9367951B_var));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_introNerazimUnits, UnitLastCreated());
        if ((UnitGetType(UnitLastCreated()) == "VorazunChampion")) {
            gv_introVorazun = UnitLastCreated();
        }

    }
    auto79C680B1_g = UnitGroup(null, gv_rOLE_PURIFIER, RegionCircle(PointFromId(272), 8.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto79C680B1_u = UnitGroupCount(auto79C680B1_g, c_unitCountAll);
    for (;; auto79C680B1_u -= 1) {
        auto79C680B1_var = UnitGroupUnitFromEnd(auto79C680B1_g, auto79C680B1_u);
        if (auto79C680B1_var == null) { break; }
        UnitGroupAdd(gv_cinematicHiddenUnits, auto79C680B1_var);
        libNtve_gf_PauseUnit(auto79C680B1_var, true);
        libNtve_gf_ShowHideUnit(auto79C680B1_var, false);
        UnitCreate(1, UnitGetType(auto79C680B1_var), c_unitCreateIgnorePlacement, UnitGetOwner(auto79C680B1_var), UnitGetPosition(auto79C680B1_var), UnitGetFacing(auto79C680B1_var));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_introPurifierUnits, UnitLastCreated());
        if ((UnitGetType(UnitLastCreated()) == "KaraxChampion")) {
            gv_introKarax = UnitLastCreated();
        }

    }
    auto6A52A88F_g = UnitGroup(null, gv_rOLE_TALDARIM, RegionCircle(PointFromId(275), 8.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6A52A88F_u = UnitGroupCount(auto6A52A88F_g, c_unitCountAll);
    for (;; auto6A52A88F_u -= 1) {
        auto6A52A88F_var = UnitGroupUnitFromEnd(auto6A52A88F_g, auto6A52A88F_u);
        if (auto6A52A88F_var == null) { break; }
        UnitGroupAdd(gv_cinematicHiddenUnits, auto6A52A88F_var);
        libNtve_gf_PauseUnit(auto6A52A88F_var, true);
        libNtve_gf_ShowHideUnit(auto6A52A88F_var, false);
        UnitCreate(1, UnitGetType(auto6A52A88F_var), c_unitCreateIgnorePlacement, UnitGetOwner(auto6A52A88F_var), UnitGetPosition(auto6A52A88F_var), UnitGetFacing(auto6A52A88F_var));
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_introTaldarimUnits, UnitLastCreated());
        if ((UnitGetType(UnitLastCreated()) == "AlarakChampion")) {
            gv_introAlarak = UnitLastCreated();
        }

    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SuperWarpGate", c_unitCreateIgnorePlacement, gv_rOLE_KHALAI, Point(0.0, 0.0));
    gv_introSuperWarpGate = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, gv_introSuperWarpGate);
    libNtve_gf_ShowHideUnit(gv_introSuperWarpGate, false);
    UnitGroupAdd(gv_cinematicTempUnits, UnitFromId(1749));
    auto077E54EA_g = UnitGroup(null, gv_rOLE_KHALAI, RegionFromId(77), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto077E54EA_u = UnitGroupCount(auto077E54EA_g, c_unitCountAll);
    for (;; auto077E54EA_u -= 1) {
        auto077E54EA_var = UnitGroupUnitFromEnd(auto077E54EA_g, auto077E54EA_u);
        if (auto077E54EA_var == null) { break; }
        UnitGroupAdd(gv_introPrePlacedPlayerUnits, auto077E54EA_var);
        libNtve_gf_ShowHideUnit(auto077E54EA_var, false);
        libNtve_gf_PauseUnit(auto077E54EA_var, true);
    }
    auto0E2E7914_g = UnitGroup(null, 0, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto0E2E7914_u = UnitGroupCount(auto0E2E7914_g, c_unitCountAll);
    for (;; auto0E2E7914_u -= 1) {
        auto0E2E7914_var = UnitGroupUnitFromEnd(auto0E2E7914_g, auto0E2E7914_u);
        if (auto0E2E7914_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto0E2E7914_var, false);
        libNtve_gf_PauseUnit(auto0E2E7914_var, true);
        UnitGroupAdd(gv_cinematicTempUnits, auto0E2E7914_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iter;
    string lv_soundtrack;

    // Automatic Variable Declarations
    playergroup autoC6D15871_g;
    int autoC6D15871_var;
    playergroup autoCB8D96F5_g;
    int autoCB8D96F5_var;
    unitgroup autoA436463F_g;
    int autoA436463F_u;
    unit autoA436463F_var;
    unitgroup auto5D6E6D05_g;
    int auto5D6E6D05_u;
    unit auto5D6E6D05_var;
    playergroup auto4BD022A6_g;
    int auto4BD022A6_var;
    unitgroup autoA3749FB8_g;
    int autoA3749FB8_u;
    unit autoA3749FB8_var;
    playergroup auto0437C808_g;
    int auto0437C808_var;
    playergroup auto2E92FD3A_g;
    int auto2E92FD3A_var;
    playergroup autoCB5F7F7F_g;
    int autoCB5F7F7F_var;
    const int autoF762F12B_ae = 4;
    const int autoF762F12B_ai = 1;
    const int auto526998C0_ae = 2;
    const int auto526998C0_ai = 1;
    const int autoC2B6C56D_ae = 2;
    const int autoC2B6C56D_ai = 1;
    playergroup autoC8A82A8D_g;
    int autoC8A82A8D_var;
    unitgroup auto0937284E_g;
    int auto0937284E_u;
    unit auto0937284E_var;
    unitgroup autoE3B05A02_g;
    int autoE3B05A02_u;
    unit autoE3B05A02_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_IntroMusic, true, false);
    autoC6D15871_g = PlayerGroupAll();
    autoC6D15871_var = -1;
    while (true) {
        autoC6D15871_var = PlayerGroupNextPlayer(autoC6D15871_g, autoC6D15871_var);
        if (autoC6D15871_var < 0) { break; }
        CameraApplyInfo(autoC6D15871_var, CameraInfoFromId(1731), 0.0, -1, 10, true);
        CameraApplyInfo(autoC6D15871_var, CameraInfoFromId(490), SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur06|Line00001", true), c_soundIndexAny)), -1, 10, true);
    }
    gv_introMinerals[0] = PlayerGetPropertyInt(gv_rOLE_KHALAI, c_playerPropMinerals);
    gv_introMinerals[1] = FixedToInt(UnitGetPropertyFixed(UnitFromId(104), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[2] = FixedToInt(UnitGetPropertyFixed(UnitFromId(62), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[3] = FixedToInt(UnitGetPropertyFixed(UnitFromId(34), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[4] = FixedToInt(UnitGetPropertyFixed(UnitFromId(49), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[5] = FixedToInt(UnitGetPropertyFixed(UnitFromId(1), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[6] = FixedToInt(UnitGetPropertyFixed(UnitFromId(85), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[7] = FixedToInt(UnitGetPropertyFixed(UnitFromId(422), c_unitPropResources, c_unitPropCurrent));
    gv_introMinerals[8] = FixedToInt(UnitGetPropertyFixed(UnitFromId(2), c_unitPropResources, c_unitPropCurrent));
    gv_introGas[0] = PlayerGetPropertyInt(gv_rOLE_KHALAI, c_playerPropVespene);
    gv_introGas[1] = FixedToInt(UnitGetPropertyFixed(UnitFromId(12), c_unitPropResources, c_unitPropCurrent));
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    SoundPlayAtPointForPlayer(SoundLink("Event_PAiur06_KeystoneIntro", 0), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(418)), 0.0, 100.0, 0.0);
    Wait(1.5, c_timeGame);
    Wait(0.5, c_timeGame);
    libVCMI_gf_SendTransmissionCampaign(gv_introKarax, "pMission_Aiur06|Line00001", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    autoCB8D96F5_g = PlayerGroupAll();
    autoCB8D96F5_var = -1;
    while (true) {
        autoCB8D96F5_var = PlayerGroupNextPlayer(autoCB8D96F5_g, autoCB8D96F5_var);
        if (autoCB8D96F5_var < 0) { break; }
        CameraApplyInfo(autoCB8D96F5_var, CameraInfoFromId(310), 0.0, -1, 0.0, true);
        CameraApplyInfo(autoCB8D96F5_var, CameraInfoFromId(110), 4.0, -1, 10.0, true);
    }
    autoA436463F_g = gv_introNerazimUnits;
    autoA436463F_u = UnitGroupCount(autoA436463F_g, c_unitCountAll);
    for (;; autoA436463F_u -= 1) {
        autoA436463F_var = UnitGroupUnitFromEnd(autoA436463F_g, autoA436463F_u);
        if (autoA436463F_var == null) { break; }
        UnitSetPosition(autoA436463F_var, PointWithOffsetPolar(UnitGetPosition(autoA436463F_var), 3.0, 315.0), false);
        UnitSetPropertyFixed(autoA436463F_var, c_unitPropMovementSpeed, 1.7);
        UnitIssueOrder(autoA436463F_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(autoA436463F_var), 4.0, 135.0)), c_orderQueueReplace);
    }
    libVCMI_gf_SendTransmissionCampaign(gv_introVorazun, "pMission_Aiur06|Line00059", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.0);
    auto5D6E6D05_g = gv_introPurifierUnits;
    auto5D6E6D05_u = UnitGroupCount(auto5D6E6D05_g, c_unitCountAll);
    for (;; auto5D6E6D05_u -= 1) {
        auto5D6E6D05_var = UnitGroupUnitFromEnd(auto5D6E6D05_g, auto5D6E6D05_u);
        if (auto5D6E6D05_var == null) { break; }
        UnitSetPosition(auto5D6E6D05_var, PointWithOffsetPolar(UnitGetPosition(auto5D6E6D05_var), 5.0, 135.0), false);
        UnitSetPropertyFixed(auto5D6E6D05_var, c_unitPropMovementSpeed, 1.7);
        UnitIssueOrder(auto5D6E6D05_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto5D6E6D05_var), 4.0, 315.0)), c_orderQueueReplace);
    }
    auto4BD022A6_g = PlayerGroupAll();
    auto4BD022A6_var = -1;
    while (true) {
        auto4BD022A6_var = PlayerGroupNextPlayer(auto4BD022A6_g, auto4BD022A6_var);
        if (auto4BD022A6_var < 0) { break; }
        CameraApplyInfo(auto4BD022A6_var, CameraInfoFromId(209), 0.0, -1, 10, true);
        CameraApplyInfo(auto4BD022A6_var, CameraInfoFromId(312), 4.0, 100.0, 10.0, true);
    }
    libVCMI_gf_SendTransmissionCampaign(gv_introKarax, "pMission_Aiur06|Line00060", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.0);
    autoA3749FB8_g = gv_introTaldarimUnits;
    autoA3749FB8_u = UnitGroupCount(autoA3749FB8_g, c_unitCountAll);
    for (;; autoA3749FB8_u -= 1) {
        autoA3749FB8_var = UnitGroupUnitFromEnd(autoA3749FB8_g, autoA3749FB8_u);
        if (autoA3749FB8_var == null) { break; }
        UnitSetPosition(autoA3749FB8_var, PointWithOffsetPolar(UnitGetPosition(autoA3749FB8_var), 2.0, 45.0), false);
        if ((UnitGetType(autoA3749FB8_var) != "AlarakChampion")) {
            UnitSetPropertyFixed(autoA3749FB8_var, c_unitPropMovementSpeed, 1.7);
        }

        UnitIssueOrder(autoA3749FB8_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(autoA3749FB8_var), 8.0, 225.0)), c_orderQueueReplace);
    }
    auto0437C808_g = PlayerGroupAll();
    auto0437C808_var = -1;
    while (true) {
        auto0437C808_var = PlayerGroupNextPlayer(auto0437C808_g, auto0437C808_var);
        if (auto0437C808_var < 0) { break; }
        CameraApplyInfo(auto0437C808_var, CameraInfoFromId(157), 0.0, -1, 10, true);
        CameraApplyInfo(auto0437C808_var, CameraInfoFromId(319), 5.8, 100.0, 10.0, true);
    }
    libVCMI_gf_SendTransmissionCampaign(gv_introAlarak, "pMission_Aiur06|Line00061", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    auto2E92FD3A_g = PlayerGroupAll();
    auto2E92FD3A_var = -1;
    while (true) {
        auto2E92FD3A_var = PlayerGroupNextPlayer(auto2E92FD3A_g, auto2E92FD3A_var);
        if (auto2E92FD3A_var < 0) { break; }
        CameraApplyInfo(auto2E92FD3A_var, CameraInfoFromId(1469715556), 0.0, -1, 10, true);
        CameraApplyInfo(auto2E92FD3A_var, CameraInfoFromId(343333145), 5.8, 100.0, 10.0, true);
    }
    libVCMI_gf_SendTransmissionCampaign(gv_raynor, "Mission_Epilogue02|Line00046", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    autoCB5F7F7F_g = PlayerGroupAll();
    autoCB5F7F7F_var = -1;
    while (true) {
        autoCB5F7F7F_var = PlayerGroupNextPlayer(autoCB5F7F7F_g, autoCB5F7F7F_var);
        if (autoCB5F7F7F_var < 0) { break; }
        CameraApplyInfo(autoCB5F7F7F_var, CameraInfoFromId(458), 0.0, -1, 10, true);
        CameraApplyInfo(autoCB5F7F7F_var, CameraInfoFromId(251), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur06|Line00094", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur06|Line00095", true), c_soundIndexAny))), -1, 10, true);
    }
    SoundPlayAtPointForPlayer(SoundLink("Event_PAiur06_KeystoneIntro", 0), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(418)), 0.0, 100.0, 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00094", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    lv_iter = 1;
    for ( ; ( (autoF762F12B_ai >= 0 && lv_iter <= autoF762F12B_ae) || (autoF762F12B_ai < 0 && lv_iter >= autoF762F12B_ae) ) ; lv_iter += autoF762F12B_ai ) {
        UnitIssueOrder(gv_introSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 0), PointFromName(("Intro Zealot " + IntToString(lv_iter)))), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    lv_iter = 1;
    for ( ; ( (auto526998C0_ai >= 0 && lv_iter <= auto526998C0_ae) || (auto526998C0_ai < 0 && lv_iter >= auto526998C0_ae) ) ; lv_iter += auto526998C0_ai ) {
        UnitIssueOrder(gv_introSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 1), PointFromName(("Intro Stalker " + IntToString(lv_iter)))), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    lv_iter = 1;
    for ( ; ( (autoC2B6C56D_ai >= 0 && lv_iter <= autoC2B6C56D_ae) || (autoC2B6C56D_ai < 0 && lv_iter >= autoC2B6C56D_ae) ) ; lv_iter += autoC2B6C56D_ai ) {
        UnitIssueOrder(gv_introSuperWarpGate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrain", 2), PointFromName(("Intro Immortal " + IntToString(lv_iter)))), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(gv_introKarax, "pMission_Aiur06|Line00095", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_StoryMode(PlayerGroupAll(), true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00005", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_CampaignPlayCutscene2("Cutscenes\\Cutscene_MissionAiur06Intro.SC2Cutscene", true, true);
    libNtve_gf_StoryMode(PlayerGroupAll(), false);
    autoC8A82A8D_g = PlayerGroupAll();
    autoC8A82A8D_var = -1;
    while (true) {
        autoC8A82A8D_var = PlayerGroupNextPlayer(autoC8A82A8D_g, autoC8A82A8D_var);
        if (autoC8A82A8D_var < 0) { break; }
        CameraApplyInfo(autoC8A82A8D_var, CameraInfoFromId(1748), 0.0, -1, 0.0, true);
    }
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    CameraApplyInfo(gv_rOLE_KHALAI, CameraInfoFromId(1733), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur06|Line00143", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur06|Line00124", true), c_soundIndexAny))), -1, 10.0, true);
    CameraApplyInfo(gv_rOLE_NERAZIM, CameraInfoFromId(1403034055), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur06|Line00143", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur06|Line00124", true), c_soundIndexAny))), -1, 10.0, true);
    CameraApplyInfo(gv_rOLE_PURIFIER, CameraInfoFromId(597823576), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur06|Line00143", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur06|Line00124", true), c_soundIndexAny))), -1, 10.0, true);
    CameraApplyInfo(gv_rOLE_TALDARIM, CameraInfoFromId(54618769), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur06|Line00143", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur06|Line00124", true), c_soundIndexAny))), -1, 10.0, true);
    CameraApplyInfo(gv_rOLE_TERRAN, CameraInfoFromId(1812981023), (SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur06|Line00143", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("pMission_Aiur06|Line00124", true), c_soundIndexAny))), -1, 10.0, true);
    auto0937284E_g = gv_introWarpedInPlayerUnits;
    auto0937284E_u = UnitGroupCount(auto0937284E_g, c_unitCountAll);
    for (;; auto0937284E_u -= 1) {
        auto0937284E_var = UnitGroupUnitFromEnd(auto0937284E_g, auto0937284E_u);
        if (auto0937284E_var == null) { break; }
        UnitIssueOrder(auto0937284E_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto0937284E_var), 14.0, 45.0)), c_orderQueueReplace);
        UnitIssueOrder(auto0937284E_var, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(auto0937284E_var), 12.0, 45.0)), c_orderQueueAddToEnd);
    }
    TransmissionWait(TransmissionLastSent(), 0.0);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00143", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    autoE3B05A02_g = gv_introWarpedInPlayerUnits;
    autoE3B05A02_u = UnitGroupCount(autoE3B05A02_g, c_unitCountAll);
    for (;; autoE3B05A02_u -= 1) {
        autoE3B05A02_var = UnitGroupUnitFromEnd(autoE3B05A02_g, autoE3B05A02_u);
        if (autoE3B05A02_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoE3B05A02_var, "AnimPlay StandVictory Stand,Victory");
    }
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00124", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 4.0);
    CameraApplyInfo(gv_rOLE_KHALAI, CameraInfoFromId(385), 4.0, -1, 10.0, true);
    CameraApplyInfo(gv_rOLE_NERAZIM, CameraInfoFromId(1117091597), 4.0, -1, 10.0, true);
    CameraApplyInfo(gv_rOLE_PURIFIER, CameraInfoFromId(1532988065), 4.0, -1, 10.0, true);
    CameraApplyInfo(gv_rOLE_TALDARIM, CameraInfoFromId(1101989262), 4.0, -1, 10.0, true);
    CameraApplyInfo(gv_rOLE_TERRAN, CameraInfoFromId(473337770), 4.0, -1, 10.0, true);
    Wait(4.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
        CameraApplyInfo(gv_rOLE_KHALAI, CameraInfoFromId(385), 0.0, -1, 10.0, true);
        CameraApplyInfo(gv_rOLE_NERAZIM, CameraInfoFromId(1117091597), 0.0, -1, 10.0, true);
        CameraApplyInfo(gv_rOLE_PURIFIER, CameraInfoFromId(1532988065), 0.0, -1, 10.0, true);
        CameraApplyInfo(gv_rOLE_TALDARIM, CameraInfoFromId(1101989262), 0.0, -1, 10.0, true);
        CameraApplyInfo(gv_rOLE_TERRAN, CameraInfoFromId(473337770), 0.0, -1, 10.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto582C7F5D_g;
    int auto582C7F5D_u;
    unit auto582C7F5D_var;
    unitgroup autoF8EC7A0A_g;
    int autoF8EC7A0A_u;
    unit autoF8EC7A0A_var;
    unitgroup auto9D7B9CA7_g;
    int auto9D7B9CA7_u;
    unit auto9D7B9CA7_var;
    unitgroup autoE659AD67_g;
    int autoE659AD67_u;
    unit autoE659AD67_var;
    unitgroup auto1E5B383C_g;
    int auto1E5B383C_u;
    unit auto1E5B383C_var;
    unitgroup auto6D95DFAB_g;
    int auto6D95DFAB_u;
    unit auto6D95DFAB_var;
    unitgroup auto3BB9497E_g;
    int auto3BB9497E_u;
    unit auto3BB9497E_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    EnvironmentShow(c_environmentTerrain, true);
    EnvironmentShow(c_environmentWater, true);
    EnvironmentShow(c_environmentDoodads, true);
    GameSetBackground(c_backgroundFixed, "AiurSkybox", 100.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_AiurInfested_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UnitRemove(UnitFromId(1749));
    auto582C7F5D_g = gv_cinematicTempUnits;
    auto582C7F5D_u = UnitGroupCount(auto582C7F5D_g, c_unitCountAll);
    for (;; auto582C7F5D_u -= 1) {
        auto582C7F5D_var = UnitGroupUnitFromEnd(auto582C7F5D_g, auto582C7F5D_u);
        if (auto582C7F5D_var == null) { break; }
        UnitRemove(auto582C7F5D_var);
    }
    Wait(0.1, c_timeGame);
    autoF8EC7A0A_g = gv_cinematicHiddenUnits;
    autoF8EC7A0A_u = UnitGroupCount(autoF8EC7A0A_g, c_unitCountAll);
    for (;; autoF8EC7A0A_u -= 1) {
        autoF8EC7A0A_var = UnitGroupUnitFromEnd(autoF8EC7A0A_g, autoF8EC7A0A_u);
        if (autoF8EC7A0A_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoF8EC7A0A_var, true);
        libNtve_gf_PauseUnit(autoF8EC7A0A_var, false);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_rOLE_KHALAI, c_playerStateXPGain, true);
    UnitSetPropertyFixed(UnitFromId(104), c_unitPropResources, gv_introMinerals[1]);
    UnitSetPropertyFixed(UnitFromId(62), c_unitPropResources, gv_introMinerals[2]);
    UnitSetPropertyFixed(UnitFromId(34), c_unitPropResources, gv_introMinerals[3]);
    UnitSetPropertyFixed(UnitFromId(49), c_unitPropResources, gv_introMinerals[4]);
    UnitSetPropertyFixed(UnitFromId(1), c_unitPropResources, gv_introMinerals[5]);
    UnitSetPropertyFixed(UnitFromId(85), c_unitPropResources, gv_introMinerals[6]);
    UnitSetPropertyFixed(UnitFromId(422), c_unitPropResources, gv_introMinerals[7]);
    UnitSetPropertyFixed(UnitFromId(2), c_unitPropResources, gv_introMinerals[8]);
    UnitSetPropertyFixed(UnitFromId(12), c_unitPropResources, gv_introGas[1]);
    PlayerModifyPropertyInt(gv_rOLE_KHALAI, c_playerPropMinerals, c_playerPropOperSetTo, gv_introMinerals[0]);
    PlayerModifyPropertyInt(gv_rOLE_KHALAI, c_playerPropVespene, c_playerPropOperSetTo, gv_introGas[0]);
    VisExploreArea(gv_rOLE_KHALAI, RegionEntireMap(), false, false);
    libVCMI_gf_SetSpearofAdunEnergy(0.0, libVCMI_ge_SpearofAdunEnergyType_Percent);
    libNtve_gf_PauseUnit(UnitFromId(22), false);
    UnitSetPropertyFixed(UnitFromId(22), c_unitPropEnergyPercent, 0.0);
    if ((libVoiC_gf_SpearofAdunAbilityIsEnabled("GPTier5Power1") == true)) {
        auto9D7B9CA7_g = UnitGroup("Pylon", gv_rOLE_KHALAI, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9D7B9CA7_u = UnitGroupCount(auto9D7B9CA7_g, c_unitCountAll);
        for (;; auto9D7B9CA7_u -= 1) {
            auto9D7B9CA7_var = UnitGroupUnitFromEnd(auto9D7B9CA7_g, auto9D7B9CA7_u);
            if (auto9D7B9CA7_var == null) { break; }
            UnitBehaviorAdd(auto9D7B9CA7_var, "MatrixOverload", auto9D7B9CA7_var, 1);
        }
    }

    if ((gv_cinematicCompleted == false)) {
        auto1E5B383C_g = gv_introPrePlacedPlayerUnits;
        auto1E5B383C_u = UnitGroupCount(auto1E5B383C_g, c_unitCountAll);
        for (;; auto1E5B383C_u -= 1) {
            auto1E5B383C_var = UnitGroupUnitFromEnd(auto1E5B383C_g, auto1E5B383C_u);
            if (auto1E5B383C_var == null) { break; }
            libNtve_gf_ShowHideUnit(auto1E5B383C_var, true);
            libNtve_gf_PauseUnit(auto1E5B383C_var, false);
        }
        if ((gv_introWarpedInPlayerUnits != UnitGroupEmpty())) {
            auto6D95DFAB_g = gv_introWarpedInPlayerUnits;
            auto6D95DFAB_u = UnitGroupCount(auto6D95DFAB_g, c_unitCountAll);
            for (;; auto6D95DFAB_u -= 1) {
                auto6D95DFAB_var = UnitGroupUnitFromEnd(auto6D95DFAB_g, auto6D95DFAB_u);
                if (auto6D95DFAB_var == null) { break; }
                UnitRemove(auto6D95DFAB_var);
            }
        }

    }
    else {
        autoE659AD67_g = gv_introPrePlacedPlayerUnits;
        autoE659AD67_u = UnitGroupCount(autoE659AD67_g, c_unitCountAll);
        for (;; autoE659AD67_u -= 1) {
            autoE659AD67_var = UnitGroupUnitFromEnd(autoE659AD67_g, autoE659AD67_u);
            if (autoE659AD67_var == null) { break; }
            UnitRemove(autoE659AD67_var);
        }
    }
    TriggerStop(gt_IntroMusic);
    TriggerEnable(gt_IntroCatchWarpedUnits, false);
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        auto3BB9497E_g = gv_introWarpedInPlayerUnits;
        auto3BB9497E_u = UnitGroupCount(auto3BB9497E_g, c_unitCountAll);
        for (;; auto3BB9497E_u -= 1) {
            auto3BB9497E_var = UnitGroupUnitFromEnd(auto3BB9497E_g, auto3BB9497E_u);
            if (auto3BB9497E_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto3BB9497E_var, "AnimClear StandVictory");
            if ((UnitGetType(auto3BB9497E_var) != libVoiC_gf_EnabledUnitTypeforArmyCategory("Immortal"))) {
                UnitIssueOrder(auto3BB9497E_var, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_casterKeystone)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(auto3BB9497E_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto3BB9497E_var), 1.0, 225.0)), c_orderQueueReplace);
            }
        }
    }
    else {
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_rOLE_KHALAI, CameraInfoDefault(), 0.0, -1, 10, false);
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
        libNtve_gf_SwooshCamera(gv_rOLE_KHALAI, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), CameraInfoGetTarget(CameraInfoFromId(1733)), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Catch Warped Units
//--------------------------------------------------------------------------------------------------
bool gt_IntroCatchWarpedUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TurnWarpedInUnit(EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCatchWarpedUnits_Init () {
    gt_IntroCatchWarpedUnits = TriggerCreate("gt_IntroCatchWarpedUnits_Func");
    TriggerAddEventUnitConstructProgress(gt_IntroCatchWarpedUnits, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Music
//--------------------------------------------------------------------------------------------------
bool gt_IntroMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    lv_soundtrack = "PAiur06_Music_Intro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroMusic_Init () {
    gt_IntroMusic = TriggerCreate("gt_IntroMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    libVCMI_gf_EnableVoidCampaignAIBehaviorForAllPlayers();
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_AIUpgradesCasualNormal, true, false);
    }
    else {
        TriggerExecute(gt_AIUpgradesHardBrutal, true, false);
    }
    libNtve_gf_SetTacticalAIThink(gv_aI_AMON_FORCES, "WarpPrism", "AIWarpPrism", false);
    libNtve_gf_SetTacticalAIThink(gv_aI_AMON_FORCES, "Overseer", "AIOverseer", false);
    libNtve_gf_SetTacticalAIThink(gv_aI_ALLY_TALDARIM, "AlarakChampion", "AIAlarak", false);
    libNtve_gf_SetTacticalAIThink(gv_aI_ALLY_NERAZIM, "StalkerShakuras", "AINerazimStalker", false);
    libNtve_gf_SetTacticalAIThink(gv_aI_ALLY_NERAZIM, "VorazunChampion", "AIVorazun", false);
    libNtve_gf_SetTacticalAIThink(gv_aI_ALLY_PURIFIER, "KaraxChampion", "AIKarax", false);
    AISetDefenseRadii(gv_aI_ALLY_TALDARIM, 16.0, 22.0, 25.0);
    AISetDefenseRadii(gv_aI_ALLY_NERAZIM, 16.0, 22.0, 25.0);
    AISetDefenseRadii(gv_aI_ALLY_PURIFIER, 9.0, 13.0, 15.0);
    AISetDefenseRadii(gv_aI_ALLY_TERRAN, 9.0, 13.0, 15.0);
    AISetDefenseRadii(gv_aI_ALLY_KHALAI, 16.0, 20.0, 25.0);
    Wait(60.0, c_timeAI);
    AIToggleBulliesInRegion(gv_aI_ALLY_KHALAI, RegionFromId(65), true);
    AIToggleBulliesInRegion(gv_aI_ALLY_TALDARIM, RegionFromId(60), true);
    AIToggleBulliesInRegion(gv_aI_ALLY_NERAZIM, RegionFromId(1), true);
    AIToggleBulliesInRegion(gv_aI_ALLY_PURIFIER, RegionFromId(69), true);
    Wait(360.0, c_timeAI);
    AIToggleBulliesInRegion(gv_aI_ALLY_TALDARIM, RegionFromId(62), true);
    AIToggleBulliesInRegion(gv_aI_ALLY_NERAZIM, RegionFromId(9), true);
    AIToggleBulliesInRegion(gv_aI_ALLY_PURIFIER, RegionFromId(75), true);
    AIToggleBulliesInRegion(gv_aI_ALLY_TERRAN, RegionFromId(63), true);
    Wait(360.0, c_timeAI);
    AIToggleBulliesInRegion(gv_aI_ALLY_TALDARIM, RegionFromId(10), true);
    AIToggleBulliesInRegion(gv_aI_ALLY_NERAZIM, RegionFromId(11), true);
    AIToggleBulliesInRegion(gv_aI_ALLY_PURIFIER, RegionFromId(70), true);
    Wait(360.0, c_timeAI);
    AIToggleBulliesInRegion(gv_aI_ALLY_TALDARIM, RegionFromId(67), true);
    AIToggleBulliesInRegion(gv_aI_ALLY_NERAZIM, RegionFromId(18), true);
    AIToggleBulliesInRegion(gv_aI_ALLY_PURIFIER, RegionFromId(73), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades - Casual/Normal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesCasualNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto31A19415_g;
    int auto31A19415_var;
    playergroup autoAEA53353_g;
    int autoAEA53353_var;
    playergroup auto0BDBBC78_g;
    int auto0BDBBC78_var;
    playergroup auto7EB58F5A_g;
    int auto7EB58F5A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(600.0, c_timeAI);
    auto31A19415_g = PlayerGroupSingle(gv_aI_AMON_FORCES);
    auto31A19415_var = -1;
    while (true) {
        auto31A19415_var = PlayerGroupNextPlayer(auto31A19415_g, auto31A19415_var);
        if (auto31A19415_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto31A19415_var, "ProtossAirWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto31A19415_var, "ProtossGroundWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto31A19415_var, "ZergFlyerWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto31A19415_var, "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(auto31A19415_var, "ZergMissileWeaponsLevel1", 1);
    }
    autoAEA53353_g = gv_friendlyPlayerGroup;
    autoAEA53353_var = -1;
    while (true) {
        autoAEA53353_var = PlayerGroupNextPlayer(autoAEA53353_g, autoAEA53353_var);
        if (autoAEA53353_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoAEA53353_var, "ProtossAirWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(autoAEA53353_var, "ProtossGroundWeaponsLevel1", 1);
    }
    Wait(360.0, c_timeAI);
    auto0BDBBC78_g = PlayerGroupSingle(gv_aI_AMON_FORCES);
    auto0BDBBC78_var = -1;
    while (true) {
        auto0BDBBC78_var = PlayerGroupNextPlayer(auto0BDBBC78_g, auto0BDBBC78_var);
        if (auto0BDBBC78_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto0BDBBC78_var, "ProtossAirArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto0BDBBC78_var, "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto0BDBBC78_var, "ProtossShieldsLevel1", 1);
        TechTreeUpgradeAddLevel(auto0BDBBC78_var, "ZergGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto0BDBBC78_var, "ZergFlyerArmorsLevel1", 1);
    }
    auto7EB58F5A_g = gv_friendlyPlayerGroup;
    auto7EB58F5A_var = -1;
    while (true) {
        auto7EB58F5A_var = PlayerGroupNextPlayer(auto7EB58F5A_g, auto7EB58F5A_var);
        if (auto7EB58F5A_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto7EB58F5A_var, "ProtossAirArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto7EB58F5A_var, "ProtossGroundArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(auto7EB58F5A_var, "ProtossShieldsLevel1", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesCasualNormal_Init () {
    gt_AIUpgradesCasualNormal = TriggerCreate("gt_AIUpgradesCasualNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades - Hard/Brutal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesHardBrutal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto2C9B6E84_g;
    int auto2C9B6E84_var;
    playergroup auto0BF72C14_g;
    int auto0BF72C14_var;
    playergroup autoCCEB8D31_g;
    int autoCCEB8D31_var;
    playergroup auto648FB175_g;
    int auto648FB175_var;
    playergroup auto38F6C363_g;
    int auto38F6C363_var;
    playergroup auto6C6669A4_g;
    int auto6C6669A4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(600.0, c_timeAI);
    auto2C9B6E84_g = PlayerGroupSingle(gv_aI_AMON_FORCES);
    auto2C9B6E84_var = -1;
    while (true) {
        auto2C9B6E84_var = PlayerGroupNextPlayer(auto2C9B6E84_g, auto2C9B6E84_var);
        if (auto2C9B6E84_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto2C9B6E84_var, "ProtossAirWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto2C9B6E84_var, "ProtossGroundWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto2C9B6E84_var, "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto2C9B6E84_var, "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto2C9B6E84_var, "ZergMissileWeaponsLevel2", 1);
    }
    auto0BF72C14_g = gv_friendlyPlayerGroup;
    auto0BF72C14_var = -1;
    while (true) {
        auto0BF72C14_var = PlayerGroupNextPlayer(auto0BF72C14_g, auto0BF72C14_var);
        if (auto0BF72C14_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto0BF72C14_var, "ProtossAirWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(auto0BF72C14_var, "ProtossGroundWeaponsLevel2", 1);
    }
    Wait(360.0, c_timeAI);
    autoCCEB8D31_g = PlayerGroupSingle(gv_aI_AMON_FORCES);
    autoCCEB8D31_var = -1;
    while (true) {
        autoCCEB8D31_var = PlayerGroupNextPlayer(autoCCEB8D31_g, autoCCEB8D31_var);
        if (autoCCEB8D31_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoCCEB8D31_var, "ProtossAirArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoCCEB8D31_var, "ProtossGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoCCEB8D31_var, "ProtossShieldsLevel2", 1);
        TechTreeUpgradeAddLevel(autoCCEB8D31_var, "ZergGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(autoCCEB8D31_var, "ZergFlyerArmorsLevel2", 1);
    }
    auto648FB175_g = gv_friendlyPlayerGroup;
    auto648FB175_var = -1;
    while (true) {
        auto648FB175_var = PlayerGroupNextPlayer(auto648FB175_g, auto648FB175_var);
        if (auto648FB175_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto648FB175_var, "ProtossAirArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto648FB175_var, "ProtossGroundArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(auto648FB175_var, "ProtossShieldsLevel2", 1);
    }
    Wait(360.0, c_timeAI);
    auto38F6C363_g = PlayerGroupSingle(gv_aI_AMON_FORCES);
    auto38F6C363_var = -1;
    while (true) {
        auto38F6C363_var = PlayerGroupNextPlayer(auto38F6C363_g, auto38F6C363_var);
        if (auto38F6C363_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto38F6C363_var, "ProtossAirWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto38F6C363_var, "ProtossGroundWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto38F6C363_var, "ZergFlyerWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto38F6C363_var, "ZergMeleeWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto38F6C363_var, "ZergMissileWeaponsLevel3", 1);
    }
    auto6C6669A4_g = gv_friendlyPlayerGroup;
    auto6C6669A4_var = -1;
    while (true) {
        auto6C6669A4_var = PlayerGroupNextPlayer(auto6C6669A4_g, auto6C6669A4_var);
        if (auto6C6669A4_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto6C6669A4_var, "ProtossAirWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(auto6C6669A4_var, "ProtossGroundWeaponsLevel3", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesHardBrutal_Init () {
    gt_AIUpgradesHardBrutal = TriggerCreate("gt_AIUpgradesHardBrutal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Base Rebuild (Amon Forces Army)
//--------------------------------------------------------------------------------------------------
bool gt_ZergBaseRebuildAmonForcesArmy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    region lv_influenceRegion;

    // Automatic Variable Declarations
    const int auto7EC172A7_ae = 4;
    const int auto7EC172A7_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto7EC172A7_ai >= 0 && lv_i <= auto7EC172A7_ae) || (auto7EC172A7_ai < 0 && lv_i >= auto7EC172A7_ae) ) ; lv_i += auto7EC172A7_ai ) {
        lv_influenceRegion = RegionFromName(("AMON_FORCES_ZERG_REGION_" + IntToString(lv_i)));
        if ((UnitGroupCount(UnitGroup("Drone", gv_aI_AMON_FORCES, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Larva", gv_aI_AMON_FORCES, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, gv_aI_AMON_FORCES, PointFromName(("AMON_FORCES_ZERG_SPAWN_" + IntToString(lv_i))));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergBaseRebuildAmonForcesArmy_Init () {
    gt_ZergBaseRebuildAmonForcesArmy = TriggerCreate("gt_ZergBaseRebuildAmonForcesArmy_Func");
    TriggerAddEventTimePeriodic(gt_ZergBaseRebuildAmonForcesArmy, 15.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Allied Mind Control - Cancel Suicide
//--------------------------------------------------------------------------------------------------
bool gt_AlliedMindControlCancelSuicide_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitOwnerNew() == gv_aI_ALLY_NERAZIM))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AISetUnitScriptControlled(EventUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlliedMindControlCancelSuicide_Init () {
    gt_AlliedMindControlCancelSuicide = TriggerCreate("gt_AlliedMindControlCancelSuicide_Func");
    TriggerAddEventUnitChangeOwner(gt_AlliedMindControlCancelSuicide, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overseer Despawn
//--------------------------------------------------------------------------------------------------
bool gt_OverseerDespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Overseer"))) {
            return false;
        }

        if (!((AIIsScriptControlled(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_aI_AMON_FORCES)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverseerDespawn_Init () {
    gt_OverseerDespawn = TriggerCreate("gt_OverseerDespawn_Func");
    TriggerAddEventUnitRegion(gt_OverseerDespawn, null, RegionFromId(54), true);
    TriggerAddEventUnitRegion(gt_OverseerDespawn, null, RegionFromId(55), true);
    TriggerAddEventUnitRegion(gt_OverseerDespawn, null, RegionFromId(56), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Champion Revived
//--------------------------------------------------------------------------------------------------
bool gt_ProtossChampionRevived_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto2D817A2D_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitProgressUnit()) == gv_aI_ALLY_TALDARIM) || (UnitGetOwner(EventUnitProgressUnit()) == gv_aI_ALLY_NERAZIM) || (UnitGetOwner(EventUnitProgressUnit()) == gv_aI_ALLY_PURIFIER)))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitProgressUnit()) == "AlarakCoop") || (UnitGetType(EventUnitProgressUnit()) == "VorazunChampion") || (UnitGetType(EventUnitProgressUnit()) == "KaraxChampion")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2D817A2D_val = EventPlayer();
    if (auto2D817A2D_val == gv_aI_ALLY_TALDARIM) {
        gv_alarak = EventUnitProgressUnit();
        UnitBehaviorAddPlayer(gv_alarak, "AlarakKnockbackTriggerOverride", gv_aI_ALLY_TALDARIM, 1);
    }
    else if (auto2D817A2D_val == gv_aI_ALLY_NERAZIM) {
        gv_vorazun = EventUnitProgressUnit();
    }
    else if (auto2D817A2D_val == gv_aI_ALLY_PURIFIER) {
        gv_karax = EventUnitProgressUnit();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossChampionRevived_Init () {
    gt_ProtossChampionRevived = TriggerCreate("gt_ProtossChampionRevived_Func");
    TriggerAddEventUnitConstructProgress(gt_ProtossChampionRevived, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Report Karax - Armada Warning
//--------------------------------------------------------------------------------------------------
bool gt_ReportKaraxArmadaWarning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    TransmissionWait(TransmissionLastSent(), 15.0);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur06|Line00095", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_artanis, "pMission_Aiur06|Line00005", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_artanis, "pMission_Aiur06|Line00143", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_artanis, "pMission_Aiur06|Line00124", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReportKaraxArmadaWarning_Init () {
    gt_ReportKaraxArmadaWarning = TriggerCreate("gt_ReportKaraxArmadaWarning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Report Artanis - Armada initial attack
//--------------------------------------------------------------------------------------------------
bool gt_ReportArtanisArmadainitialattack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00069", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReportArtanisArmadainitialattack_Init () {
    gt_ReportArtanisArmadainitialattack = TriggerCreate("gt_ReportArtanisArmadainitialattack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Report Artanis - Armada another attack
//--------------------------------------------------------------------------------------------------
bool gt_ReportArtanisArmadaanotherattack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00070", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReportArtanisArmadaanotherattack_Init () {
    gt_ReportArtanisArmadaanotherattack = TriggerCreate("gt_ReportArtanisArmadaanotherattack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Report Karax - Armada larger attack
//--------------------------------------------------------------------------------------------------
bool gt_ReportKaraxArmadalargerattack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00071", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReportKaraxArmadalargerattack_Init () {
    gt_ReportKaraxArmadalargerattack = TriggerCreate("gt_ReportKaraxArmadalargerattack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Report Amon - Armada huge attack
//--------------------------------------------------------------------------------------------------
bool gt_ReportAmonArmadahugeattack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00072", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReportAmonArmadahugeattack_Init () {
    gt_ReportAmonArmadahugeattack = TriggerCreate("gt_ReportAmonArmadahugeattack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Report Karax - Massive protoss attacks
//--------------------------------------------------------------------------------------------------
bool gt_ReportKaraxMassiveprotossattacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00118", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00151", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00119", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReportKaraxMassiveprotossattacks_Init () {
    gt_ReportKaraxMassiveprotossattacks = TriggerCreate("gt_ReportKaraxMassiveprotossattacks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amon Transmission 1
//--------------------------------------------------------------------------------------------------
bool gt_AmonTransmission1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00076", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmonTransmission1_Init () {
    gt_AmonTransmission1 = TriggerCreate("gt_AmonTransmission1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amon Transmission 2
//--------------------------------------------------------------------------------------------------
bool gt_AmonTransmission2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00077", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmonTransmission2_Init () {
    gt_AmonTransmission2 = TriggerCreate("gt_AmonTransmission2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amon Transmission 3
//--------------------------------------------------------------------------------------------------
bool gt_AmonTransmission3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00078", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmonTransmission3_Init () {
    gt_AmonTransmission3 = TriggerCreate("gt_AmonTransmission3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Report Artanis - Zerg Streaming Attacks 3 entrances
//--------------------------------------------------------------------------------------------------
bool gt_ReportArtanisZergStreamingAttacks3entrances_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto8E66576A_g;
    int auto8E66576A_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    auto8E66576A_g = libCOMI_gf_HumanPlayers();
    auto8E66576A_var = -1;
    while (true) {
        auto8E66576A_var = PlayerGroupNextPlayer(auto8E66576A_g, auto8E66576A_var);
        if (auto8E66576A_var < 0) { break; }
        UIAlertPoint("Trigger", auto8E66576A_var, StringExternal("Param/Value/8BBABA07"), null, PointFromId(244));
        UIAlertPoint("Trigger", auto8E66576A_var, StringExternal("Param/Value/5827A97D"), null, PointFromId(245));
        UIAlertPoint("Trigger", auto8E66576A_var, StringExternal("Param/Value/CA184E46"), null, PointFromId(246));
    }
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(244), 6.0, Color(100.00, 0.00, 0.00));
    Wait(0.25, c_timeGame);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(245), 6.0, Color(100.00, 0.00, 0.00));
    Wait(0.25, c_timeGame);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(246), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00198", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReportArtanisZergStreamingAttacks3entrances_Init () {
    gt_ReportArtanisZergStreamingAttacks3entrances = TriggerCreate("gt_ReportArtanisZergStreamingAttacks3entrances_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Report Artanis - Zerg Streaming Attacks 2 entrances
//--------------------------------------------------------------------------------------------------
bool gt_ReportArtanisZergStreamingAttacks2entrances_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto2A879682_g;
    int auto2A879682_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    auto2A879682_g = libCOMI_gf_HumanPlayers();
    auto2A879682_var = -1;
    while (true) {
        auto2A879682_var = PlayerGroupNextPlayer(auto2A879682_g, auto2A879682_var);
        if (auto2A879682_var < 0) { break; }
        UIAlertPoint("Trigger", auto2A879682_var, StringExternal("Param/Value/FF53E780"), null, PointFromId(244));
        UIAlertPoint("Trigger", auto2A879682_var, StringExternal("Param/Value/C7FD0E7F"), null, PointFromId(246));
    }
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(244), 6.0, Color(100.00, 0.00, 0.00));
    Wait(0.25, c_timeGame);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(246), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00196", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReportArtanisZergStreamingAttacks2entrances_Init () {
    gt_ReportArtanisZergStreamingAttacks2entrances = TriggerCreate("gt_ReportArtanisZergStreamingAttacks2entrances_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Report Artanis - Zerg Streaming Attacks 1 entrance
//--------------------------------------------------------------------------------------------------
bool gt_ReportArtanisZergStreamingAttacks1entrance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto82ECB1EC_g;
    int auto82ECB1EC_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    auto82ECB1EC_g = libCOMI_gf_HumanPlayers();
    auto82ECB1EC_var = -1;
    while (true) {
        auto82ECB1EC_var = PlayerGroupNextPlayer(auto82ECB1EC_g, auto82ECB1EC_var);
        if (auto82ECB1EC_var < 0) { break; }
        UIAlertPoint("Trigger", auto82ECB1EC_var, StringExternal("Param/Value/EFFAA027"), null, PointFromId(245));
    }
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(245), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00195", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReportArtanisZergStreamingAttacks1entrance_Init () {
    gt_ReportArtanisZergStreamingAttacks1entrance = TriggerCreate("gt_ReportArtanisZergStreamingAttacks1entrance_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Report Raynor - Zerg Streaming Attacks 4 entrances
//--------------------------------------------------------------------------------------------------
bool gt_ReportRaynorZergStreamingAttacks4entrances_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9BA067CE_g;
    int auto9BA067CE_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    auto9BA067CE_g = libCOMI_gf_HumanPlayers();
    auto9BA067CE_var = -1;
    while (true) {
        auto9BA067CE_var = PlayerGroupNextPlayer(auto9BA067CE_g, auto9BA067CE_var);
        if (auto9BA067CE_var < 0) { break; }
        UIAlertPoint("Trigger", auto9BA067CE_var, StringExternal("Param/Value/69959276"), null, PointFromId(1865764243));
    }
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1865764243), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_raynor, "THanson02|Line00021", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_swann, "UnitVOHeroSwann|Line00016", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReportRaynorZergStreamingAttacks4entrances_Init () {
    gt_ReportRaynorZergStreamingAttacks4entrances = TriggerCreate("gt_ReportRaynorZergStreamingAttacks4entrances_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Report Artanis - Zerg Streaming Attack Alarak 
//--------------------------------------------------------------------------------------------------
bool gt_ReportArtanisZergStreamingAttackAlarak_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoEF78A340_g;
    int autoEF78A340_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    autoEF78A340_g = libCOMI_gf_HumanPlayers();
    autoEF78A340_var = -1;
    while (true) {
        autoEF78A340_var = PlayerGroupNextPlayer(autoEF78A340_g, autoEF78A340_var);
        if (autoEF78A340_var < 0) { break; }
        UIAlertPoint("Trigger", autoEF78A340_var, StringExternal("Param/Value/75D2940C"), null, PointFromId(245));
    }
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(245), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00098", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReportArtanisZergStreamingAttackAlarak_Init () {
    gt_ReportArtanisZergStreamingAttackAlarak = TriggerCreate("gt_ReportArtanisZergStreamingAttackAlarak_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Report Raynor - Zerg Streaming Attack Raynor
//--------------------------------------------------------------------------------------------------
bool gt_ReportRaynorZergStreamingAttackRaynor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto40E5E121_g;
    int auto40E5E121_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_raynorCommandCenter) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(20.0, c_timeAI);
    TriggerQueueEnter();
    auto40E5E121_g = libCOMI_gf_HumanPlayers();
    auto40E5E121_var = -1;
    while (true) {
        auto40E5E121_var = PlayerGroupNextPlayer(auto40E5E121_g, auto40E5E121_var);
        if (auto40E5E121_var < 0) { break; }
        UIAlertPoint("Trigger", auto40E5E121_var, StringExternal("Param/Value/DE0ADF50"), null, PointFromId(1865764243));
    }
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1865764243), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_raynorCommandCenter, "TRaynor03|Line00015", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(gv_raynor, "Mission_Epilogue01|Line00044", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReportRaynorZergStreamingAttackRaynor_Init () {
    gt_ReportRaynorZergStreamingAttackRaynor = TriggerCreate("gt_ReportRaynorZergStreamingAttackRaynor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Report Alarak - Initial Attack Alarak
//--------------------------------------------------------------------------------------------------
bool gt_ReportAlarakInitialAttackAlarak_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto002353F8_g;
    int auto002353F8_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_alarak) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(20.0, c_timeAI);
    TriggerQueueEnter();
    auto002353F8_g = libCOMI_gf_HumanPlayers();
    auto002353F8_var = -1;
    while (true) {
        auto002353F8_var = PlayerGroupNextPlayer(auto002353F8_g, auto002353F8_var);
        if (auto002353F8_var < 0) { break; }
        UIAlertPoint("Trigger", auto002353F8_var, StringExternal("Param/Value/D5C0115F"), null, PointFromId(245));
    }
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(245), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Aiur06|Line00105", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReportAlarakInitialAttackAlarak_Init () {
    gt_ReportAlarakInitialAttackAlarak = TriggerCreate("gt_ReportAlarakInitialAttackAlarak_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Report Karax - Initial Attack Karax
//--------------------------------------------------------------------------------------------------
bool gt_ReportKaraxInitialAttackKarax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF418647C_g;
    int autoF418647C_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_karax) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(20.0, c_timeAI);
    TriggerQueueEnter();
    autoF418647C_g = libCOMI_gf_HumanPlayers();
    autoF418647C_var = -1;
    while (true) {
        autoF418647C_var = PlayerGroupNextPlayer(autoF418647C_g, autoF418647C_var);
        if (autoF418647C_var < 0) { break; }
        UIAlertPoint("Trigger", autoF418647C_var, StringExternal("Param/Value/2BF699CB"), null, PointFromId(246));
    }
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(246), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur06|Line00104", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReportKaraxInitialAttackKarax_Init () {
    gt_ReportKaraxInitialAttackKarax = TriggerCreate("gt_ReportKaraxInitialAttackKarax_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Report Vorazun - Initial Attack Vorazun
//--------------------------------------------------------------------------------------------------
bool gt_ReportVorazunInitialAttackVorazun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto827D3751_g;
    int auto827D3751_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_vorazun) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(20.0, c_timeAI);
    TriggerQueueEnter();
    auto827D3751_g = libCOMI_gf_HumanPlayers();
    auto827D3751_var = -1;
    while (true) {
        auto827D3751_var = PlayerGroupNextPlayer(auto827D3751_g, auto827D3751_var);
        if (auto827D3751_var < 0) { break; }
        UIAlertPoint("Trigger", auto827D3751_var, StringExternal("Param/Value/304E5041"), null, PointFromId(244));
    }
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(244), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_vorazun, "pMission_Aiur06|Line00103", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReportVorazunInitialAttackVorazun_Init () {
    gt_ReportVorazunInitialAttackVorazun = TriggerCreate("gt_ReportVorazunInitialAttackVorazun_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vorazun Retreat Transmission
//--------------------------------------------------------------------------------------------------
bool gt_VorazunRetreatTransmission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_vorazun) == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_nerazimNexus) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_rOLE_KHALAI, StringExternal("Param/Value/B7E0B998"), null, PointFromId(280));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(280), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_vorazun, "pMission_Aiur06|Line00106", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SetHeroIsAliveStatus(false, "Vorazun");
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VorazunRetreatTransmission_Init () {
    gt_VorazunRetreatTransmission = TriggerCreate("gt_VorazunRetreatTransmission_Func");
    TriggerAddEventTimePeriodic(gt_VorazunRetreatTransmission, 5.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Karax Retreat Transmission
//--------------------------------------------------------------------------------------------------
bool gt_KaraxRetreatTransmission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_karax) == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierNexus) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_rOLE_KHALAI, StringExternal("Param/Value/F93A4566"), null, PointFromId(282));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(282), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur06|Line00107", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SetHeroIsAliveStatus(false, "Karax");
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KaraxRetreatTransmission_Init () {
    gt_KaraxRetreatTransmission = TriggerCreate("gt_KaraxRetreatTransmission_Func");
    TriggerAddEventTimePeriodic(gt_KaraxRetreatTransmission, 5.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alarak Retreat Transmission
//--------------------------------------------------------------------------------------------------
bool gt_AlarakRetreatTransmission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_alarak) == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_taldarimNexus) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_rOLE_KHALAI, StringExternal("Param/Value/2CAC789E"), null, PointFromId(279));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(279), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Aiur06|Line00108", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlarakRetreatTransmission_Init () {
    gt_AlarakRetreatTransmission = TriggerCreate("gt_AlarakRetreatTransmission_Func");
    TriggerAddEventTimePeriodic(gt_AlarakRetreatTransmission, 5.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Retreat Transmission
//--------------------------------------------------------------------------------------------------
bool gt_RaynorRetreatTransmission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_raynorCommandCenter) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_rOLE_KHALAI, StringExternal("Param/Value/E754749A"), null, PointFromId(776336359));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(776336359), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_raynor, "UnitVOHeroRaynor|Line00033", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorRetreatTransmission_Init () {
    gt_RaynorRetreatTransmission = TriggerCreate("gt_RaynorRetreatTransmission_Func");
    TriggerAddEventTimePeriodic(gt_RaynorRetreatTransmission, 5.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vorazun Nexus Transmission
//--------------------------------------------------------------------------------------------------
bool gt_VorazunNexusTransmission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_vorazun) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_nerazimNexus, c_unitPropShieldsPercent, c_unitPropCurrent) <= 10.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_rOLE_KHALAI, StringExternal("Param/Value/D3194A27"), null, PointFromId(280));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(280), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_vorazun, "pMission_Aiur06|Line00109", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VorazunNexusTransmission_Init () {
    gt_VorazunNexusTransmission = TriggerCreate("gt_VorazunNexusTransmission_Func");
    TriggerAddEventTimePeriodic(gt_VorazunNexusTransmission, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Karax Nexus Transmission
//--------------------------------------------------------------------------------------------------
bool gt_KaraxNexusTransmission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_karax) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_purifierNexus, c_unitPropShieldsPercent, c_unitPropCurrent) <= 10.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_rOLE_KHALAI, StringExternal("Param/Value/7ECE5A9A"), null, PointFromId(282));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(282), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_karax, "pMission_Aiur06|Line00110", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KaraxNexusTransmission_Init () {
    gt_KaraxNexusTransmission = TriggerCreate("gt_KaraxNexusTransmission_Func");
    TriggerAddEventTimePeriodic(gt_KaraxNexusTransmission, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alarak Nexus Transmission
//--------------------------------------------------------------------------------------------------
bool gt_AlarakNexusTransmission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_alarak) == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_taldarimNexus, c_unitPropShieldsPercent, c_unitPropCurrent) <= 10.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(26)), 2.0, Color(100.00, 0.00, 0.00));
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_rOLE_KHALAI, StringExternal("Param/Value/E861FE1B"), null, PointFromId(279));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(279), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(gv_alarak, "pMission_Aiur06|Line00111", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlarakNexusTransmission_Init () {
    gt_AlarakNexusTransmission = TriggerCreate("gt_AlarakNexusTransmission_Func");
    TriggerAddEventTimePeriodic(gt_AlarakNexusTransmission, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Nexus Transmission
//--------------------------------------------------------------------------------------------------
bool gt_RaynorNexusTransmission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_raynorCommandCenter, c_unitPropVitalityPercent, c_unitPropCurrent) <= 80.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(26)), 2.0, Color(100.00, 0.00, 0.00));
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_rOLE_KHALAI, StringExternal("Param/Value/A892E8EC"), null, PointFromId(776336359));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(776336359), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "TRaynor03|Line00001", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "Mission_Epilogue01|Line00045", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RaynorNexusTransmission_Init () {
    gt_RaynorNexusTransmission = TriggerCreate("gt_RaynorNexusTransmission_Func");
    TriggerAddEventTimePeriodic(gt_RaynorNexusTransmission, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alarak Tripwire Transmission
//--------------------------------------------------------------------------------------------------
bool gt_AlarakTripwireTransmission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_gameIsStarted == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_taldarimNexus) == true))) {
            return false;
        }

        if (!((UnitCount(null, gv_rOLE_TALDARIM, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerDebugOutput(1, StringExternal("Param/Value/76C70E76"), true);
    TriggerDebugOutput(1, IntToText(gv_rOLE_TALDARIM), true);
    TriggerDebugOutput(1, IntToText(UnitCount(null, gv_rOLE_TALDARIM, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), true);
    UIAlertPoint("Trigger", gv_pLAYER_USER_1, StringExternal("Param/Value/A3B825F2"), null, RegionGetCenter(RegionFromId(2)));
    UIAlertPoint("Trigger", gv_pLAYER_USER_2, StringExternal("Param/Value/AA525773"), null, RegionGetCenter(RegionFromId(2)));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(2)), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00099", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlarakTripwireTransmission_Init () {
    gt_AlarakTripwireTransmission = TriggerCreate("gt_AlarakTripwireTransmission_Func");
    TriggerAddEventTimePeriodic(gt_AlarakTripwireTransmission, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vorazun Tripwire Transmission
//--------------------------------------------------------------------------------------------------
bool gt_VorazunTripwireTransmission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_gameIsStarted == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_nerazimNexus) == true))) {
            return false;
        }

        if (!((UnitCount(null, gv_rOLE_NERAZIM, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_rOLE_KHALAI, StringExternal("Param/Value/804EA8CF"), null, RegionGetCenter(RegionFromId(3)));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(3)), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00100", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VorazunTripwireTransmission_Init () {
    gt_VorazunTripwireTransmission = TriggerCreate("gt_VorazunTripwireTransmission_Func");
    TriggerAddEventTimePeriodic(gt_VorazunTripwireTransmission, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Tripwire Transmission
//--------------------------------------------------------------------------------------------------
bool gt_PurifierTripwireTransmission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_gameIsStarted == true))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierNexus) == true))) {
            return false;
        }

        if (!((UnitCount(null, gv_rOLE_PURIFIER, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_rOLE_KHALAI, StringExternal("Param/Value/731B62E1"), null, RegionGetCenter(RegionFromId(4)));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(4)), 2.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00101", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierTripwireTransmission_Init () {
    gt_PurifierTripwireTransmission = TriggerCreate("gt_PurifierTripwireTransmission_Func");
    TriggerAddEventTimePeriodic(gt_PurifierTripwireTransmission, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Spear Power 1
//--------------------------------------------------------------------------------------------------
bool gt_DisableSpearPower1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_DisableSpearPowerQ(1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableSpearPower1_Init () {
    gt_DisableSpearPower1 = TriggerCreate("gt_DisableSpearPower1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Spear Power 2
//--------------------------------------------------------------------------------------------------
bool gt_DisableSpearPower2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_DisableSpearPowerQ(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableSpearPower2_Init () {
    gt_DisableSpearPower2 = TriggerCreate("gt_DisableSpearPower2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Spear Power 3
//--------------------------------------------------------------------------------------------------
bool gt_DisableSpearPower3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_SetSpearofAdunEnergy(-5.0, libVCMI_ge_SpearofAdunEnergyType_Regeneration);
    gf_DisableSpearPowerQ(3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableSpearPower3_Init () {
    gt_DisableSpearPower3 = TriggerCreate("gt_DisableSpearPower3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Spear Power 4
//--------------------------------------------------------------------------------------------------
bool gt_DisableSpearPower4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_DisableSpearPowerQ(4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableSpearPower4_Init () {
    gt_DisableSpearPower4 = TriggerCreate("gt_DisableSpearPower4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spear Attack Transmission 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_SpearAttackTransmission01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00102", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur06|Line00112", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpearAttackTransmission01Q_Init () {
    gt_SpearAttackTransmission01Q = TriggerCreate("gt_SpearAttackTransmission01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Wave 10 (PUR)
//--------------------------------------------------------------------------------------------------
bool gt_StreamingWave10PUR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 5.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 5.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 5.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Immortal", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 5.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Sentry", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Immortal", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Immortal", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Sentry", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Immortal", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Sentry", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Immortal", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Sentry", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Immortal", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 3.0);
    while ((libVCMI_gf_GameIsOver() == false) && (libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Dragoon", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 6.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Sentry", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Immortal", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 6.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 5), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Sentry", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Immortal", gv_aI_AMON_FORCES_ARMADA, PointFromId(294), 8.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingWave10PUR_Init () {
    gt_StreamingWave10PUR = TriggerCreate("gt_StreamingWave10PUR_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Wave 09 (TAL)
//--------------------------------------------------------------------------------------------------
bool gt_StreamingWave09TAL_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(6, 6, 7, 8), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 5.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(6, 6, 7, 8), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 5.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 5.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Oracle", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 5), "Immortal", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(6, 6, 7, 8), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Sentry", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 4, 4), "Scout", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(6, 6, 7, 8), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 5), "Immortal", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 4, 4), "Scout", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(6, 6, 7, 8), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Sentry", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(6, 6, 7, 8), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 4, 4), "Scout", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Oracle", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 5), "Immortal", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 3.0);
    while ((libVCMI_gf_GameIsOver() == false) && (libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 7, 7), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Immortal", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 6.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 7, 7), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 6.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 4, 4), "Scout", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Oracle", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Immortal", gv_aI_AMON_FORCES_ARMADA, PointFromId(513), 8.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingWave09TAL_Init () {
    gt_StreamingWave09TAL = TriggerCreate("gt_StreamingWave09TAL_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Wave 08 (NER)
//--------------------------------------------------------------------------------------------------
bool gt_StreamingWave08NER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ReportKaraxMassiveprotossattacks, true, false);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 5.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 5.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 5.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Oracle", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 5.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Scout", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Scout", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Oracle", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Scout", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 4.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 5, 6), "Dragoon", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 4), "Scout", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 6, 7), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Oracle", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 3.0);
    while ((libVCMI_gf_GameIsOver() == false) && (libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Scout", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 6.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Dragoon", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Zealot", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 6.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Scout", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 4, 4), "Dragoon", gv_aI_AMON_FORCES_ARMADA, PointFromId(512), 3.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingWave08NER_Init () {
    gt_StreamingWave08NER = TriggerCreate("gt_StreamingWave08NER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Wave 07 (TAL)
//--------------------------------------------------------------------------------------------------
bool gt_StreamingWave07TAL_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Roach", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Ultralisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Hydralisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Overseer", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Ultralisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Mutalisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Roach", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Mutalisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Overseer", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Ultralisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Roach", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Mutalisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 2.0);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Hydralisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Ultralisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Mutalisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Hydralisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Ultralisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingWave07TAL_Init () {
    gt_StreamingWave07TAL = TriggerCreate("gt_StreamingWave07TAL_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Wave 06 (NER)
//--------------------------------------------------------------------------------------------------
bool gt_StreamingWave06NER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Roach", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Hydralisk", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Guardian", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Overseer", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "InfestedAbomination", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Hydralisk", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Roach", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Overseer", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Roach", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Mutalisk", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Hydralisk", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Guardian", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Roach", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Mutalisk", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "InfestedAbomination", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Hydralisk", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingWave06NER_Init () {
    gt_StreamingWave06NER = TriggerCreate("gt_StreamingWave06NER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Wave 05 (PUR)
//--------------------------------------------------------------------------------------------------
bool gt_StreamingWave05PUR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ReportArtanisZergStreamingAttacks3entrances, true, false);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Roach", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Ultralisk", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Overseer", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Hydralisk", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Roach", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Mutalisk", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Guardian", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Ultralisk", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Overseer", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Mutalisk", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Roach", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Ultralisk", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Roach", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Ultralisk", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 3.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Mutalisk", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Hydralisk", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingWave05PUR_Init () {
    gt_StreamingWave05PUR = TriggerCreate("gt_StreamingWave05PUR_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Wave 04 (PUR)
//--------------------------------------------------------------------------------------------------
bool gt_StreamingWave04PUR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Roach", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "InfestedAbomination", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Hydralisk", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Overseer", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Mutalisk", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "InfestedAbomination", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Mutalisk", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Overseer", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Roach", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Hydralisk", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "InfestedAbomination", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 3.0);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Roach", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Mutalisk", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Hydralisk", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "InfestedAbomination", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(12, 12, 12, 12), "Zergling", gv_aI_AMON_FORCES_ZERG_3, PointFromId(294), 1.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingWave04PUR_Init () {
    gt_StreamingWave04PUR = TriggerCreate("gt_StreamingWave04PUR_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Wave 03 (NER)
//--------------------------------------------------------------------------------------------------
bool gt_StreamingWave03NER_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ReportArtanisZergStreamingAttacks2entrances, true, false);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Roach", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Hydralisk", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Overseer", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Roach", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Hydralisk", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Ultralisk", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Overseer", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Mutalisk", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Overseer", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 3.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Ultralisk", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Hydralisk", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Roach", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 3.0);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Mutalisk", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Hydralisk", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(14, 14, 14, 14), "Zergling", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Mutalisk", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 2.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Roach", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Ultralisk", gv_aI_AMON_FORCES_ZERG_1, PointFromId(512), 1.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingWave03NER_Init () {
    gt_StreamingWave03NER = TriggerCreate("gt_StreamingWave03NER_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Wave 02 (TAL)
//--------------------------------------------------------------------------------------------------
bool gt_StreamingWave02TAL_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ReportArtanisZergStreamingAttacks1entrance, true, false);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Ultralisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Hydralisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Roach", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "InfestedAbomination", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Hydralisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Guardian", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Ultralisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Roach", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Mutalisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Hydralisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Overseer", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 2.0);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 4), "Guardian", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Mutalisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Roach", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Mutalisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Ultralisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingWave02TAL_Init () {
    gt_StreamingWave02TAL = TriggerCreate("gt_StreamingWave02TAL_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaming Wave 01 (TAL)
//--------------------------------------------------------------------------------------------------
bool gt_StreamingWave01TAL_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ReportArtanisZergStreamingAttackAlarak, true, false);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "Ultralisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Roach", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Hydralisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Hydralisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(5, 5, 5, 5), "Roach", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Mutalisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Ultralisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Roach", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 2.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Mutalisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Ultralisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 2.0);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 3), "InfestedAbomination", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Roach", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(16, 16, 16, 16), "Zergling", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Mutalisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
        gf_SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 2), "Ultralisk", gv_aI_AMON_FORCES_ZERG_2, PointFromId(513), 1.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreamingWave01TAL_Init () {
    gt_StreamingWave01TAL = TriggerCreate("gt_StreamingWave01TAL_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 1 (Mid)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack1Mid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(41);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ReportArtanisArmadainitialattack, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_aI_AMON_FORCES_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 45.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 315.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, libLotv_gf_DifficultyValueFixed2(4.0, 4.0, 4.0, 3.0), libLotv_gf_DifficultyValueFixed2(105.0, 105.0, 105.0, 135.0));
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, libLotv_gf_DifficultyValueFixed2(4.0, 4.0, 4.0, 3.0), libLotv_gf_DifficultyValueFixed2(255.0, 255.0, 255.0, 225.0));
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phoenix", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 270.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phoenix", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 90.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.0, 180.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_aI_AMON_FORCES_ARMADA, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetPoint(gv_aI_AMON_FORCES_ARMADA, PointFromId(489));
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/BC4F7656"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_rOLE_KHALAI)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack1Mid_Init () {
    gt_ArmadaAttack1Mid = TriggerCreate("gt_ArmadaAttack1Mid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 2 (Top Mid)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack2TopMid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(778);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_armadaUpgradeCounter += 1;
    TriggerExecute(gt_ReportArtanisArmadaanotherattack, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_aI_AMON_FORCES_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 45.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 315.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, libLotv_gf_DifficultyValueFixed2(4.0, 4.0, 4.0, 3.0), libLotv_gf_DifficultyValueFixed2(105.0, 105.0, 105.0, 135.0));
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, libLotv_gf_DifficultyValueFixed2(4.0, 4.0, 4.0, 3.0), libLotv_gf_DifficultyValueFixed2(255.0, 255.0, 255.0, 225.0));
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 270.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 90.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 2.0, 180.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, libLotv_gf_DifficultyValueFixed2(3.0, 3.0, 3.0, 4.5), 180.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_aI_AMON_FORCES_ARMADA, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetPoint(gv_aI_AMON_FORCES_ARMADA, PointFromId(489));
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/F696110E"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_rOLE_KHALAI)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack2TopMid_Init () {
    gt_ArmadaAttack2TopMid = TriggerCreate("gt_ArmadaAttack2TopMid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 3 (Bot Mid)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack3BotMid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(779);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_aI_AMON_FORCES_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 45.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 315.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, libLotv_gf_DifficultyValueFixed2(4.0, 4.0, 4.0, 3.0), libLotv_gf_DifficultyValueFixed2(105.0, 105.0, 105.0, 135.0));
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, libLotv_gf_DifficultyValueFixed2(4.0, 4.0, 4.0, 3.0), libLotv_gf_DifficultyValueFixed2(255.0, 255.0, 255.0, 225.0));
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 270.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 90.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 2.0, 180.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, libLotv_gf_DifficultyValueFixed2(3.0, 3.0, 3.0, 4.5), 180.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_aI_AMON_FORCES_ARMADA, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetPoint(gv_aI_AMON_FORCES_ARMADA, PointFromId(489));
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/FB883A0A"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_rOLE_KHALAI)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack3BotMid_Init () {
    gt_ArmadaAttack3BotMid = TriggerCreate("gt_ArmadaAttack3BotMid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 4 (Bot)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack4Bot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(43);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_armadaUpgradeCounter += 1;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_aI_AMON_FORCES_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 45.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 315.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.0, 135.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.0, 225.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 270.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 90.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phoenix", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 270.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phoenix", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 90.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 2.0, 180.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 180.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_aI_AMON_FORCES_ARMADA, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetPoint(gv_aI_AMON_FORCES_ARMADA, PointFromId(489));
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/643CCFC8"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_rOLE_KHALAI)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    while (!((libNtve_gf_UnitGroupIsDead(gv_armadaUnitGroup) == true))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_AmonTransmission2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack4Bot_Init () {
    gt_ArmadaAttack4Bot = TriggerCreate("gt_ArmadaAttack4Bot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 5 (Mid)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack5Mid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(41);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_aI_AMON_FORCES_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 45.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 315.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.0, 135.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.0, 225.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 270.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 90.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phoenix", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 270.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phoenix", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 90.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 2.0, 180.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 180.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_aI_AMON_FORCES_ARMADA, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetPoint(gv_aI_AMON_FORCES_ARMADA, PointFromId(489));
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E7C1621C"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_rOLE_KHALAI)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack5Mid_Init () {
    gt_ArmadaAttack5Mid = TriggerCreate("gt_ArmadaAttack5Mid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 6 (Bot Mid)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack6BotMid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(779);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_armadaUpgradeCounter += 1;
    TriggerExecute(gt_ReportKaraxArmadalargerattack, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_aI_AMON_FORCES_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 15.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 345.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 45.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 315.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 80.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 280.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 90.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 270.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MothershipAiur06", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 180.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.0, 240.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_aI_AMON_FORCES_ARMADA, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetPoint(gv_aI_AMON_FORCES_ARMADA, PointFromId(489));
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/9FB21BAB"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_rOLE_KHALAI)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack6BotMid_Init () {
    gt_ArmadaAttack6BotMid = TriggerCreate("gt_ArmadaAttack6BotMid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 7 (Mid)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack7Mid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(41);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_aI_AMON_FORCES_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 15.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 345.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 45.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 315.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 80.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 280.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 90.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 270.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MothershipAiur06", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 180.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 240.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_aI_AMON_FORCES_ARMADA, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetPoint(gv_aI_AMON_FORCES_ARMADA, PointFromId(489));
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E25C730C"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_rOLE_KHALAI)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack7Mid_Init () {
    gt_ArmadaAttack7Mid = TriggerCreate("gt_ArmadaAttack7Mid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 8 (Top Mid)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack8TopMid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(778);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_aI_AMON_FORCES_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 15.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 345.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 45.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 315.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 80.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 280.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 90.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 270.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MothershipAiur06", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 180.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 240.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_aI_AMON_FORCES_ARMADA, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetPoint(gv_aI_AMON_FORCES_ARMADA, PointFromId(489));
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/37C81A02"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_rOLE_KHALAI)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack8TopMid_Init () {
    gt_ArmadaAttack8TopMid = TriggerCreate("gt_ArmadaAttack8TopMid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 9 (Top)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack9Top_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(40);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_armadaUpgradeCounter += 1;
    TriggerExecute(gt_ReportAmonArmadahugeattack, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_aI_AMON_FORCES_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 5.0, 15.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 5.0, 345.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 5.0, 45.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 5.0, 315.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.5, 30.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.5, 330.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 80.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 280.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 70.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 290.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 7.5, 135.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 7.5, 225.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MothershipAiur06", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 180.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 240.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_aI_AMON_FORCES_ARMADA, lv_lv_EscortTargetUnit);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        AIAttackWaveSetTargetPoint(gv_aI_AMON_FORCES_ARMADA, PointFromId(489));
    }
    else {
        AIAttackWaveSetTargetPoint(gv_aI_AMON_FORCES_ARMADA, PointFromId(122));
    }
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/1F08D578"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_rOLE_KHALAI)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack9Top_Init () {
    gt_ArmadaAttack9Top = TriggerCreate("gt_ArmadaAttack9Top_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 10 (Mid)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack10Mid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(41);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_aI_AMON_FORCES_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 5.0, 15.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 5.0, 345.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 5.0, 45.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 5.0, 315.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.5, 30.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.5, 330.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 80.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 280.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 70.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 290.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 7.5, 135.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 7.5, 225.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MothershipAiur06", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 180.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 4.5, 240.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_aI_AMON_FORCES_ARMADA, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetPoint(gv_aI_AMON_FORCES_ARMADA, PointFromId(489));
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/14BF079D"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_rOLE_KHALAI)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack10Mid_Init () {
    gt_ArmadaAttack10Mid = TriggerCreate("gt_ArmadaAttack10Mid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 11 (Top)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack11Top_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(40);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_armadaUpgradeCounter += 1;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_aI_AMON_FORCES_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 30.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 330.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 7.5, 135.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 7.5, 225.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 60.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 300.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 90.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 270.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 2.5, 180.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MothershipAiur06", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, libLotv_gf_DifficultyValueFixed2(4.5, 4.5, 4.5, 6.5), 180.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 5.0, 220.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_aI_AMON_FORCES_ARMADA, lv_lv_EscortTargetUnit);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        AIAttackWaveSetTargetPoint(gv_aI_AMON_FORCES_ARMADA, PointFromId(489));
    }
    else {
        AIAttackWaveSetTargetPoint(gv_aI_AMON_FORCES_ARMADA, PointFromId(122));
    }
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/29F476F2"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_rOLE_KHALAI)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack11Top_Init () {
    gt_ArmadaAttack11Top = TriggerCreate("gt_ArmadaAttack11Top_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 12 (Mid)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack12Mid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(41);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_aI_AMON_FORCES_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 30.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 330.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 7.5, 135.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 7.5, 225.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 60.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 300.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 90.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 270.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 2.5, 180.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MothershipAiur06", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, libLotv_gf_DifficultyValueFixed2(4.5, 4.5, 4.5, 6.5), 180.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 5.0, 220.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_aI_AMON_FORCES_ARMADA, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetPoint(gv_aI_AMON_FORCES_ARMADA, PointFromId(489));
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/C8ABA9C5"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_rOLE_KHALAI)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack12Mid_Init () {
    gt_ArmadaAttack12Mid = TriggerCreate("gt_ArmadaAttack12Mid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armada Attack 13 (Bot)
//--------------------------------------------------------------------------------------------------
bool gt_ArmadaAttack13Bot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lv_EscortTargetUnit;
    int lv_lv_BossPing;
    point lv_lv_SpawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lv_BossPing = c_invalidPingId;
    lv_lv_SpawnPoint = PointFromId(43);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    lv_lv_EscortTargetUnit = UnitLastCreated();
    UnitGroupAdd(gv_armadaUnitGroup, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetEscort(gv_aI_AMON_FORCES_ARMADA, libNtve_gf_ConvertUnitToUnitGroup(lv_lv_EscortTargetUnit), 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 30.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 330.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 7.5, 135.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tempest", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 7.5, 225.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 60.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 6.0, 300.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 90.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 3.5, 270.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Carrier", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
        AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 2.5, 180.0);
        UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MothershipAiur06", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, libLotv_gf_DifficultyValueFixed2(4.5, 4.5, 4.5, 6.5), 180.0);
    UnitGroupAdd(gv_armadaUnitGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_aI_AMON_FORCES_ARMADA, lv_lv_SpawnPoint);
    AIAttackWaveAddEscortUnit(gv_aI_AMON_FORCES_ARMADA, UnitLastCreated(), lv_lv_EscortTargetUnit, 5.0, 220.0);
    gf_SuperWarpGateLogic(UnitLastCreated());
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    AIAttackWaveUseUnit(gv_aI_AMON_FORCES_ARMADA, lv_lv_EscortTargetUnit);
    AIAttackWaveSetTargetPoint(gv_aI_AMON_FORCES_ARMADA, PointFromId(489));
    AIAttackWaveSend(gv_aI_AMON_FORCES_ARMADA, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_lv_EscortTargetUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/509CEEDD"));
    PingSetScale(PingLastCreated(), 0.8);
    lv_lv_BossPing = PingLastCreated();
    PingSetUnit(lv_lv_BossPing, lv_lv_EscortTargetUnit);
    while (!(((UnitIsAlive(lv_lv_EscortTargetUnit) == false) || (UnitGetOwner(lv_lv_EscortTargetUnit) == gv_rOLE_KHALAI)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmadaAttack13Bot_Init () {
    gt_ArmadaAttack13Bot = TriggerCreate("gt_ArmadaAttack13Bot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SuperWarpGateSpawns
//--------------------------------------------------------------------------------------------------
bool gt_SuperWarpGateSpawns_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_aI_AMON_FORCES_ARMADA))) {
            return false;
        }

        if (!((EventUnit() == UnitFromId(223)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AISetUnitSuicide(EventUnitProgressUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SuperWarpGateSpawns_Init () {
    gt_SuperWarpGateSpawns = TriggerCreate("gt_SuperWarpGateSpawns_Func");
    TriggerAddEventUnitConstructProgress(gt_SuperWarpGateSpawns, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_gameIsStarted == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_rOLE_KHALAI, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/7EAA217C"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Keystone Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatKeystoneDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_casterKeystone) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveKeystoneMustSurviveFailed, true, false);
    TriggerEnable(gt_ObjectiveKeystoneMustSurviveComplete, false);
    libVCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/EA0332E3"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatKeystoneDestroyed_Init () {
    gt_DefeatKeystoneDestroyed = TriggerCreate("gt_DefeatKeystoneDestroyed_Func");
    TriggerAddEventTimePeriodic(gt_DefeatKeystoneDestroyed, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClearAll();
    libNtve_gf_ChangeUnitDamage(gv_casterKeystone, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(gv_nerazimNexus, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(gv_taldarimNexus, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(gv_purifierNexus, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveKeystoneMustSurviveComplete, true, true);
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto57BCF2CC_g;
    int auto57BCF2CC_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto57BCF2CC_g = gv_friendlyPlayerGroup;
    auto57BCF2CC_var = -1;
    while (true) {
        auto57BCF2CC_var = PlayerGroupNextPlayer(auto57BCF2CC_g, auto57BCF2CC_var);
        if (auto57BCF2CC_var < 0) { break; }
        libVCMI_gf_EndCampaignMission(auto57BCF2CC_var, c_gameOverVictory);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9BCF5D38_g;
    int auto9BCF5D38_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto9BCF5D38_g = gv_friendlyPlayerGroup;
    auto9BCF5D38_var = -1;
    while (true) {
        auto9BCF5D38_var = PlayerGroupNextPlayer(auto9BCF5D38_g, auto9BCF5D38_var);
        if (auto9BCF5D38_var < 0) { break; }
        libVCMI_gf_EndCampaignMission(auto9BCF5D38_var, c_gameOverDefeat);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_rOLE_KHALAI, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_rOLE_KHALAI, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - SoA Hits on Golden Armada
//--------------------------------------------------------------------------------------------------
bool gt_StatSoAHitsonGoldenArmada_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetCustomValue(EventUnit(), 0) != 9.0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_aI_AMON_FORCES_ARMADA))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_aI_AMON_FORCES_ARMADA, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(EventUnit(), 0, 9.0);
    gv_armadaUnitsHitBySOA += 1;
    if ((gv_armadaUnitsHitBySOA >= 20)) {
        TriggerExecute(gt_AchievementSoAHitsonGoldenArmada, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatSoAHitsonGoldenArmada_Init () {
    gt_StatSoAHitsonGoldenArmada = TriggerCreate("gt_StatSoAHitsonGoldenArmada_Func");
    TriggerAddEventUnitDamaged(gt_StatSoAHitsonGoldenArmada, null, c_unitDamageTypeAny, c_unitDamageEither, "SOAOrbitalStrikeDamage");
    TriggerAddEventUnitDamaged(gt_StatSoAHitsonGoldenArmada, null, c_unitDamageTypeAny, c_unitDamageEither, "SOAThermalLanceDamage");
    TriggerAddEventUnitDamaged(gt_StatSoAHitsonGoldenArmada, null, c_unitDamageTypeAny, c_unitDamageEither, "SOAPurifierBeamDamage");
    TriggerAddEventUnitDamaged(gt_StatSoAHitsonGoldenArmada, null, c_unitDamageTypeAny, c_unitDamageEither, "SOAStrafeAttackDamage");
    TriggerAddEventUnitBehaviorChange(gt_StatSoAHitsonGoldenArmada, null, "SOAGravitonBomb", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_StatSoAHitsonGoldenArmada, null, "SOAGravitonBombHeroicUnit", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_StatSoAHitsonGoldenArmada, null, "SOATimeFreeze", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - SoA Hits on Golden Armada
//--------------------------------------------------------------------------------------------------
bool gt_AchievementSoAHitsonGoldenArmada_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("PAiur06_2", gv_rOLE_KHALAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementSoAHitsonGoldenArmada_Init () {
    gt_AchievementSoAHitsonGoldenArmada = TriggerCreate("gt_AchievementSoAHitsonGoldenArmada_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Victory without using Spear of Adun
//--------------------------------------------------------------------------------------------------
bool gt_AchievementVictorywithoutusingSpearofAdun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SoACaster"))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("SOARepairBeam", 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_achievement_UsedSpearofAdunAbilities = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementVictorywithoutusingSpearofAdun_Init () {
    gt_AchievementVictorywithoutusingSpearofAdun = TriggerCreate("gt_AchievementVictorywithoutusingSpearofAdun_Func");
    TriggerAddEventUnitAbility(gt_AchievementVictorywithoutusingSpearofAdun, null, null, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mastery - Kill the Brutalisk
//--------------------------------------------------------------------------------------------------
bool gt_MasteryKilltheBrutalisk_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("Mastery_Aiur06", gv_rOLE_KHALAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MasteryKilltheBrutalisk_Init () {
    gt_MasteryKilltheBrutalisk = TriggerCreate("gt_MasteryKilltheBrutalisk_Func");
    TriggerAddEventUnitDied(gt_MasteryKilltheBrutalisk, UnitRefFromVariable("gv_theBrutalisk"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    libVoiC_gf_PlayCinematic("Liberation", false);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_randomSpawnPoint;
    int lv_iter;

    // Automatic Variable Declarations
    unitgroup auto0105474F_g;
    int auto0105474F_u;
    unit auto0105474F_var;
    const int autoFCCE092D_ae = 4;
    const int autoFCCE092D_ai = 1;
    const int auto31C83641_ae = 3;
    const int auto31C83641_ai = 1;
    const int autoBFB2748D_ae = 4;
    const int autoBFB2748D_ai = 1;
    const int auto519066CB_ae = 4;
    const int auto519066CB_ai = 1;
    const int auto44905FFE_ae = 4;
    const int auto44905FFE_ai = 1;
    const int autoC799C311_ae = 4;
    const int autoC799C311_ai = 1;
    const int autoDC6FB2CD_ae = 4;
    const int autoDC6FB2CD_ai = 1;
    const int auto834E03B9_ae = 5;
    const int auto834E03B9_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_rOLE_KHALAI);
    PlayerSetState(gv_rOLE_KHALAI, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    auto0105474F_g = gv_cinematicHiddenUnits;
    auto0105474F_u = UnitGroupCount(auto0105474F_g, c_unitCountAll);
    for (;; auto0105474F_u -= 1) {
        auto0105474F_var = UnitGroupUnitFromEnd(auto0105474F_g, auto0105474F_u);
        if (auto0105474F_var == null) { break; }
        if ((auto0105474F_var != gv_casterKeystone)) {
            UnitRemove(auto0105474F_var);
        }

    }
    UnitPauseAll(true);
    libNtve_gf_SendActorMessageToUnit(gv_casterKeystone, "AnimClear SpellA");
    libNtve_gf_SendActorMessageToUnit(gv_casterKeystone, "AnimPlay SpellB Stand,Work,B PlayForever");
    libNtve_gf_SendActorMessageToUnit(gv_casterKeystone, "Signal PlaySoundB");
    libNtve_gf_CreateUnitsAtPoint2(1, "AlarakChampion", 0, gv_rOLE_KHALAI, PointFromId(2207));
    gv_victoryAlarak = UnitLastCreated();
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_aI_AMON_FORCES_ARMADA, PointWithOffsetPolar(PointFromId(2207), 2.0, PointGetFacing(PointFromId(2207))));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 0.0);
    UnitIssueOrder(gv_victoryAlarak, OrderTargetingUnit(AbilityCommand("attack", 0), UnitLastCreated()), c_orderQueueReplace);
    lv_iter = 1;
    for ( ; ( (autoFCCE092D_ai >= 0 && lv_iter <= autoFCCE092D_ae) || (autoFCCE092D_ai < 0 && lv_iter >= autoFCCE092D_ae) ) ; lv_iter += autoFCCE092D_ai ) {
        lv_randomSpawnPoint = RegionRandomPoint(RegionFromId(20));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkTemplarTaldarim", 0, gv_rOLE_TALDARIM, lv_randomSpawnPoint);
        UnitBehaviorAdd(UnitLastCreated(), "SuppressCloak", UnitLastCreated(), 1);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_aI_AMON_FORCES_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_aI_AMON_FORCES_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "ArtanisVoid", 0, gv_rOLE_KHALAI, PointFromId(2205));
    gv_victoryArtanis = UnitLastCreated();
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_aI_AMON_FORCES_ARMADA, PointWithOffsetPolar(PointFromId(2205), 2.0, PointGetFacing(PointFromId(2205))));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 0.0);
    UnitIssueOrder(gv_victoryArtanis, OrderTargetingUnit(AbilityCommand("attack", 0), UnitLastCreated()), c_orderQueueReplace);
    lv_iter = 1;
    for ( ; ( (auto31C83641_ai >= 0 && lv_iter <= auto31C83641_ae) || (auto31C83641_ai < 0 && lv_iter >= auto31C83641_ae) ) ; lv_iter += auto31C83641_ai ) {
        lv_randomSpawnPoint = RegionRandomPoint(RegionFromId(22));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotAiur", 0, gv_rOLE_KHALAI, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitAbilityEnable(UnitLastCreated(), "VoidZealotWhirlwind", false);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_aI_AMON_FORCES_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_aI_AMON_FORCES_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "FenixChampion", 0, gv_rOLE_KHALAI, PointFromId(2209));
    gv_victoryFenix = UnitLastCreated();
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_aI_AMON_FORCES_ARMADA, PointWithOffsetPolar(PointFromId(2209), 2.0, PointGetFacing(PointFromId(2209))));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 0.0);
    UnitIssueOrder(gv_victoryFenix, OrderTargetingUnit(AbilityCommand("attack", 0), UnitLastCreated()), c_orderQueueReplace);
    lv_iter = 1;
    for ( ; ( (autoBFB2748D_ai >= 0 && lv_iter <= autoBFB2748D_ae) || (autoBFB2748D_ai < 0 && lv_iter >= autoBFB2748D_ae) ) ; lv_iter += autoBFB2748D_ai ) {
        lv_randomSpawnPoint = RegionRandomPoint(RegionFromId(28));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotPurifier", 0, gv_rOLE_PURIFIER, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_aI_AMON_FORCES_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_aI_AMON_FORCES_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "KaraxChampion", 0, gv_rOLE_KHALAI, PointFromId(2208));
    gv_victoryFenix = UnitLastCreated();
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    lv_iter = 1;
    for ( ; ( (auto519066CB_ai >= 0 && lv_iter <= auto519066CB_ae) || (auto519066CB_ai < 0 && lv_iter >= auto519066CB_ae) ) ; lv_iter += auto519066CB_ai ) {
        lv_randomSpawnPoint = RegionRandomPoint(RegionFromId(19));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Adept", 0, gv_rOLE_PURIFIER, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_aI_AMON_FORCES_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_aI_AMON_FORCES_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "VorazunChampion", 0, gv_rOLE_KHALAI, PointFromId(2206));
    gv_victoryVorazun = UnitLastCreated();
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitBehaviorAdd(gv_victoryVorazun, "SuppressCloak", gv_victoryVorazun, 1);
    UnitAbilityEnable(gv_victoryVorazun, "VorazunShadowDash", false);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Zealot", 0, gv_aI_AMON_FORCES_ARMADA, PointWithOffsetPolar(PointFromId(2206), 2.0, PointGetFacing(PointFromId(2206))));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 0.0);
    UnitIssueOrder(gv_victoryVorazun, OrderTargetingUnit(AbilityCommand("attack", 0), UnitLastCreated()), c_orderQueueReplace);
    lv_iter = 1;
    for ( ; ( (auto44905FFE_ai >= 0 && lv_iter <= auto44905FFE_ae) || (auto44905FFE_ai < 0 && lv_iter >= auto44905FFE_ae) ) ; lv_iter += auto44905FFE_ai ) {
        lv_randomSpawnPoint = RegionRandomPoint(RegionFromId(16));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotShakuras", 0, gv_rOLE_NERAZIM, lv_randomSpawnPoint);
        UnitAbilityEnable(UnitLastCreated(), "ShadowCharge", false);
        UnitAbilityEnable(UnitLastCreated(), "ShadowChargeStun", false);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_aI_AMON_FORCES_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_aI_AMON_FORCES_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    lv_iter = 1;
    for ( ; ( (autoC799C311_ai >= 0 && lv_iter <= autoC799C311_ae) || (autoC799C311_ai < 0 && lv_iter >= autoC799C311_ae) ) ; lv_iter += autoC799C311_ai ) {
        lv_randomSpawnPoint = RegionRandomPoint(RegionFromId(21));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotAiur", 0, gv_rOLE_KHALAI, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitAbilityEnable(UnitLastCreated(), "VoidZealotWhirlwind", false);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_aI_AMON_FORCES_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_aI_AMON_FORCES_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    lv_iter = 1;
    for ( ; ( (autoDC6FB2CD_ai >= 0 && lv_iter <= autoDC6FB2CD_ae) || (autoDC6FB2CD_ai < 0 && lv_iter >= autoDC6FB2CD_ae) ) ; lv_iter += autoDC6FB2CD_ai ) {
        lv_randomSpawnPoint = RegionRandomPoint(RegionFromId(23));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotAiur", 0, gv_rOLE_KHALAI, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitAbilityEnable(UnitLastCreated(), "VoidZealotWhirlwind", false);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_aI_AMON_FORCES_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_aI_AMON_FORCES_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    lv_iter = 1;
    for ( ; ( (auto834E03B9_ai >= 0 && lv_iter <= auto834E03B9_ae) || (auto834E03B9_ai < 0 && lv_iter >= auto834E03B9_ae) ) ; lv_iter += auto834E03B9_ai ) {
        lv_randomSpawnPoint = RegionRandomPoint(RegionFromId(51));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotAiur", 0, gv_rOLE_KHALAI, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitAbilityEnable(UnitLastCreated(), "VoidZealotWhirlwind", false);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_aI_AMON_FORCES_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, gv_aI_AMON_FORCES_ARMADA, lv_randomSpawnPoint);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_rOLE_KHALAI, CameraInfoFromId(415), 0.0, -1, 10, true);
    CameraApplyInfo(gv_rOLE_KHALAI, CameraInfoFromId(391), 8.0, -1, 10, true);
    TriggerExecute(gt_VictoryMusic, true, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(gv_victoryFenix, "pMission_Aiur06|Line00185", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_SendActorMessageToUnit(gv_casterKeystone, "AnimClear SpellA");
    libNtve_gf_SendActorMessageToUnit(gv_casterKeystone, "AnimClear SpellB");
    libNtve_gf_SendActorMessageToUnit(gv_casterKeystone, "AnimPlay SpellC Stand,Work,C PlayForever,NonLooping");
    Wait(3.0, c_timeGame);
    CameraApplyInfo(gv_rOLE_KHALAI, CameraInfoFromId(753), 6.0, -1, 10, true);
    libVCMI_gf_SendTransmissionCampaign(gv_victoryArtanis, "pMission_Aiur06|Line00152", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_StopCinematicSounds();
    TriggerStop(gt_VictoryMusic);
    libVCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Music
//--------------------------------------------------------------------------------------------------
bool gt_VictoryMusic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_soundtrack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    lv_soundtrack = "PAiur06_Music_Outro";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_soundtrack, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait(lv_soundtrack);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryMusic_Init () {
    gt_VictoryMusic = TriggerCreate("gt_VictoryMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_CU_GPVitalChangesP1_Init();
    gt_CU_GPVitalChangesP2_Init();
    gt_CU_GPBirthFinished_Init();
    gt_CU_GPDeathRemove2D_Init();
    gt_CU_GPAlarakGemPress_Init();
    gt_TrackGlobalCasterEnergy_Init();
    gt_GuardianShellAura2_Init();
    gt_PM_SoASuperShieldsActivated3_Init();
    gt_ChronoWaveEffect3_Init();
    gt_BFGbeam2_Init();
    gt_SwannVespeneDroneTrigger2_Init();
    gt_SwannSiegeTankRebuildController2_Init();
    gt_SwannThorRebuildController2_Init();
    gt_ResetDrakkumDrillPanel_Init();
    gt_BFGbeam_Init();
    gt_SwannVespeneDroneTrigger_Init();
    gt_SwannSiegeTankRebuildController_Init();
    gt_SwannThorRebuildController_Init();
    gt_NovaSiegeModeProgressiveRangeIncreaseApply_Init();
    gt_ArtanisOrbitalStrikeinitial_Init();
    gt_ArtanisOrbitalStrike2ndaryCasts_Init();
    gt_KaraxOrbitalStrikeRecast_Init();
    gt_ThermalLanceinitialactivation_Init();
    gt_ThermalLancetargetarea_Init();
    gt_ThermalLance2ndarycasts_Init();
    gt_ThermalLanceRefundIfCanceled_Init();
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_StartGame_Init();
    gt_MultiPlayerIntro_Init();
    gt_TipReadyQ_Init();
    gt_CreepExpansion1TimeBased_Init();
    gt_CreepExpansion2AlliedNexusFalls_Init();
    gt_ObjectiveKeystoneMustSurviveCreate_Init();
    gt_ObjectiveKeystoneMustSurviveComplete_Init();
    gt_ObjectiveKeystoneMustSurviveFailed_Init();
    gt_KeystoneStatus_Init();
    gt_KeystoneCharging_Init();
    gt_KeystoneQuarterSave_Init();
    gt_KeystoneHalfQ_Init();
    gt_KeystoneAlmostDoneQ_Init();
    gt_BuildingDeathHistoryUpdate_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroCatchWarpedUnits_Init();
    gt_IntroMusic_Init();
    gt_StartAI_Init();
    gt_AIUpgradesCasualNormal_Init();
    gt_AIUpgradesHardBrutal_Init();
    gt_ZergBaseRebuildAmonForcesArmy_Init();
    gt_AlliedMindControlCancelSuicide_Init();
    gt_OverseerDespawn_Init();
    gt_ProtossChampionRevived_Init();
    gt_ReportKaraxArmadaWarning_Init();
    gt_ReportArtanisArmadainitialattack_Init();
    gt_ReportArtanisArmadaanotherattack_Init();
    gt_ReportKaraxArmadalargerattack_Init();
    gt_ReportAmonArmadahugeattack_Init();
    gt_ReportKaraxMassiveprotossattacks_Init();
    gt_AmonTransmission1_Init();
    gt_AmonTransmission2_Init();
    gt_AmonTransmission3_Init();
    gt_ReportArtanisZergStreamingAttacks3entrances_Init();
    gt_ReportArtanisZergStreamingAttacks2entrances_Init();
    gt_ReportArtanisZergStreamingAttacks1entrance_Init();
    gt_ReportRaynorZergStreamingAttacks4entrances_Init();
    gt_ReportArtanisZergStreamingAttackAlarak_Init();
    gt_ReportRaynorZergStreamingAttackRaynor_Init();
    gt_ReportAlarakInitialAttackAlarak_Init();
    gt_ReportKaraxInitialAttackKarax_Init();
    gt_ReportVorazunInitialAttackVorazun_Init();
    gt_VorazunRetreatTransmission_Init();
    gt_KaraxRetreatTransmission_Init();
    gt_AlarakRetreatTransmission_Init();
    gt_RaynorRetreatTransmission_Init();
    gt_VorazunNexusTransmission_Init();
    gt_KaraxNexusTransmission_Init();
    gt_AlarakNexusTransmission_Init();
    gt_RaynorNexusTransmission_Init();
    gt_AlarakTripwireTransmission_Init();
    gt_VorazunTripwireTransmission_Init();
    gt_PurifierTripwireTransmission_Init();
    gt_DisableSpearPower1_Init();
    gt_DisableSpearPower2_Init();
    gt_DisableSpearPower3_Init();
    gt_DisableSpearPower4_Init();
    gt_SpearAttackTransmission01Q_Init();
    gt_StreamingWave10PUR_Init();
    gt_StreamingWave09TAL_Init();
    gt_StreamingWave08NER_Init();
    gt_StreamingWave07TAL_Init();
    gt_StreamingWave06NER_Init();
    gt_StreamingWave05PUR_Init();
    gt_StreamingWave04PUR_Init();
    gt_StreamingWave03NER_Init();
    gt_StreamingWave02TAL_Init();
    gt_StreamingWave01TAL_Init();
    gt_ArmadaAttack1Mid_Init();
    gt_ArmadaAttack2TopMid_Init();
    gt_ArmadaAttack3BotMid_Init();
    gt_ArmadaAttack4Bot_Init();
    gt_ArmadaAttack5Mid_Init();
    gt_ArmadaAttack6BotMid_Init();
    gt_ArmadaAttack7Mid_Init();
    gt_ArmadaAttack8TopMid_Init();
    gt_ArmadaAttack9Top_Init();
    gt_ArmadaAttack10Mid_Init();
    gt_ArmadaAttack11Top_Init();
    gt_ArmadaAttack12Mid_Init();
    gt_ArmadaAttack13Bot_Init();
    gt_SuperWarpGateSpawns_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatKeystoneDestroyed_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_StatSoAHitsonGoldenArmada_Init();
    gt_AchievementSoAHitsonGoldenArmada_Init();
    gt_AchievementVictorywithoutusingSpearofAdun_Init();
    gt_MasteryKilltheBrutalisk_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
    gt_VictoryMusic_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
