//==================================================================================================
//  Minimal AI Functions, only those needed to link start calls
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
//  Melee Flags
//--------------------------------------------------------------------------------------------------
include "TriggerLibs/Green Tea Main/GTZVar"
include "TriggerLibs/Green Tea Main/GTZBoard"

static bool Opening = true;
const int e_mainState_Counter     	= -3;
const int e_mainState_Custom     	= -2;
const int c_waveTower   = 7;

const int e_flagsScouting       = 1;
const int e_flagsDiversion      = 2;
const int e_flagsTimeout        = 3;
const int e_flagsRunScared      = 4;
const int e_flagsDetect         = 5;
const int e_flagsZergStock      = 6;
const int e_flagsExpanded       = 7;
const int e_flagsLateScout      = 8;
const int e_flagsClearObs       = 9;
const int e_flagsEarlyDefScout  = 10;

// melee AI reserved user index values
// on low difficulty values 1-32 are used for army stock
const int c_numGroundStartLocs  = 128;
const int c_numAirStartLocs     = 129;
const int c_lateGameTimeIndex   = 130;
const int c_lateGameStateIndex  = 131;
const int c_harrassTimeIndex    = 132;
const int c_harrassStateIndex   = 133;
const int c_generalBuildType    = 134;
const int c_specificBuildIndex  = 135;
const int c_ldNextArmyRoll      = 136;
const int c_ldNextWaveTime      = 137;
const int c_ldNumLateLoops      = 138;
const int c_delayNextAttack     = 139;

string GTGreet () {
    int rnd = RandomInt(1, 7);
    if (rnd == 1){
    	return "----";
    }
	if (rnd == 2){
    	return "----";
    }
    if (rnd == 3){
    	return "----";
    }
    if (rnd == 4){
    	return "----";
    }
    if (rnd == 5){
    	return "----";
    }
    if (rnd == 6){
    	return "----";
    }
    return "----";
}

//--------------------------------------------------------------------------------------------------
//  AIDiffThreshold
//--------------------------------------------------------------------------------------------------
int AIDiffThreshold (int player, int defaultValue, int threshold, int alternateValue) {
    int diff = PlayerDifficulty(player);
    if (diff < threshold) {
        return defaultValue;
    }
    return alternateValue;
}

//--------------------------------------------------------------------------------------------------
//  AISetDefaultCombatFlags
//--------------------------------------------------------------------------------------------------
void AISetDefaultCombatFlags (int player, bool isMelee) {
    int group1;
    int group2;

    // I could condense these flags but speed doesn't matter and this way makes it easier to see & to change the settings
    if (isMelee) {
        AICombatDiffFlagCatSpecialHighPrio     (player, AIDiffThreshold(player, c_combatFlagDisable, c_skirMedium,   c_combatFlagEnable));
        AICombatDiffFlagCatSplashHighPrio      (player, AIDiffThreshold(player, c_combatFlagDisable, c_skirMedium,   c_combatFlagEnable));
        AICombatDiffFlagCatTimedLowPrio        (player, AIDiffThreshold(player, c_combatFlagDisable, c_skirMedium,   c_combatFlagEnable));
        AICombatDiffFlagCatWorkersNormalPrio   (player, AIDiffThreshold(player, c_combatFlagDisable, c_skirEasy  ,   c_combatFlagEnable));
        AICombatDiffFlagCatSortBuildingsPrio   (player, AIDiffThreshold(player, c_combatFlagDisable, c_skirEasy  ,   c_combatFlagEnable));
        AICombatDiffFlagTieBreakHealers        (player, AIDiffThreshold(player, c_combatFlagDisable, c_skirEasy  ,   c_combatFlagEnable));
        AICombatDiffFlagTieBreakBonusDamage    (player, AIDiffThreshold(player, c_combatFlagDisable, c_skirMedium,   c_combatFlagEnable));
        AICombatDiffFlagTieBreakLowHP          (player, AIDiffThreshold(player, c_combatFlagDisable, c_skirMedium,   c_combatFlagEnable));
        AICombatDiffFlagTieBreakInjured        (player, AIDiffThreshold(player, c_combatFlagDisable, c_skirMedium,   c_combatFlagEnable));
        AICombatDiffFlagTieBreakDetector       (player, AIDiffThreshold(player, c_combatFlagDisable, c_skirMedium,   c_combatFlagEnable));
        AICombatDiffFlagTieBreakRange          (player, AIDiffThreshold(player, c_combatFlagDisable, c_skirMedium,   c_combatFlagEnable));
    }
    else {
        AICombatDiffFlagCatSpecialHighPrio     (player, AIDiffThreshold(player, c_combatFlagDisable, c_campExpert,   c_combatFlagEnable));
        AICombatDiffFlagCatSplashHighPrio      (player, AIDiffThreshold(player, c_combatFlagDisable, c_campExpert,   c_combatFlagEnable));
        AICombatDiffFlagCatTimedLowPrio        (player, AIDiffThreshold(player, c_combatFlagDisable, c_campExpert,   c_combatFlagEnable));
        AICombatDiffFlagCatWorkersNormalPrio   (player, AIDiffThreshold(player, c_combatFlagDisable, c_campAdvanced, c_combatFlagEnable));
        AICombatDiffFlagCatSortBuildingsPrio   (player, AIDiffThreshold(player, c_combatFlagDisable, c_campAdvanced, c_combatFlagEnable));
        AICombatDiffFlagTieBreakHealers        (player, AIDiffThreshold(player, c_combatFlagDisable, c_campExpert,   c_combatFlagEnable));
        AICombatDiffFlagTieBreakLowHP          (player, AIDiffThreshold(player, c_combatFlagDisable, c_campExpert,   c_combatFlagEnable));
        AICombatDiffFlagTieBreakBonusDamage    (player, AIDiffThreshold(player, c_combatFlagDisable, c_campExpert,   c_combatFlagEnable));
        AICombatDiffFlagTieBreakInjured        (player, AIDiffThreshold(player, c_combatFlagDisable, c_campExpert,   c_combatFlagEnable));
        AICombatDiffFlagTieBreakDetector       (player, AIDiffThreshold(player, c_combatFlagDisable, c_campExpert,   c_combatFlagEnable));
        AICombatDiffFlagTieBreakRange          (player, AIDiffThreshold(player, c_combatFlagDisable, c_campExpert,   c_combatFlagEnable));
    }
}

//--------------------------------------------------------------------------------------------------
//  AISpecifiedHealers
//--------------------------------------------------------------------------------------------------
void AISpecifiedHealers (int player) {
    AIAddHealer(player, "SCV", "Repair", 0);
    AIAddHealer(player, "MULE", "MULERepair", 0);
    AIAddHealer(player, "Medivac", "MedivacHeal", 0);
    AIAddHealer(player, "Medic", "heal", 0);
    AIAddHealer(player, "ScienceVessel", "NanoRepair", 0);
}

//--------------------------------------------------------------------------------------------------
//  AIMeleeDiffSelect
//--------------------------------------------------------------------------------------------------
int AIMeleeDiffSelect (int player, int d0, int d1, int d2, int d3, int d4, int d5) {
    int diff = PlayerDifficulty(player);
    if (diff == c_skirVeryEasy) {
        return d0;
    }
    if (diff == c_skirEasy) {
        return d1;
    }
    if (diff == c_skirMedium) {
        return d2;
    }
    if (diff == c_skirMed_Hard) {
        return d3;
    }
    if (diff == c_skirHard) {
        return d4;
    }
    if (diff >= c_skirHard_VH) {
        return d5;
    }
    return 0;
}

//--------------------------------------------------------------------------------------------------
//  Melee default startup routine
//--------------------------------------------------------------------------------------------------
void AIMeleeStart (int player) {
	region R = RegionEmpty();
	int i = 0;
	string DI;
    point targDPoint;
    point targOPoint;
    wavetarget targD;
    wavetarget targO;

    AIStart(player, false, 50);
    if (PlayerDifficulty(player) >= c_skirHard_VH) {
        AIHarvestBonus(player, 1);
    }
//--------------
// Difficulty
//--------------
        if (PlayerDifficulty(player) == c_skirVeryEasy)
        {
         DI = "Very Easy";
        }
        else if
         (PlayerDifficulty(player) == c_skirEasy)
         {
          DI = "Easy";
         }
        else if
        (PlayerDifficulty(player) == c_skirMedium)
            {
             DI = "Medium";

           }
        else if
        ( PlayerDifficulty(player) == c_skirMed_Hard)
        {

        	DI = "Medium Hard";

         }
        else if
        ( PlayerDifficulty(player) == c_skirHard )
        {

        	DI = "Hard";
         }
        else
        {

        	DI = "Very Hard";

         }

     		{ AISetDifficulty(player, c_diffNormalVision, false); }

        AISetDifficulty(player, c_diffLimitAPM,  false);


    AISetDifficulty(player, c_diffSpotChangelings,   true);
    AISetDifficulty(player, c_diffWaveAvoidDanger,   true);
    AISetDifficulty(player, c_diffFleeDamage,        true);
    AISetDifficulty(player, c_diffEarlyDefenseScout, true);
    AISetDifficulty(player, c_diffUseExtraScouts,    true);
    AISetDifficulty(player, c_diffHoldAtIdleChokes,  true);
    AISetDifficulty(player, c_diffPressForward,      true);
    AISetDifficulty(player, c_diffFleeWorkers,       true);
    AISetDifficulty(player, c_diffFleeDanger,        true);
    AISetDifficulty(player, c_diffTargetSpawners,    true);
    AISetDifficulty(player, c_diffDelayAdvTargetting,false); // note <= intentional

    AISetDifficulty(player, c_diffRepairDamage, true);
    AISetDifficulty(player, c_diffOptimizeGas, true);
    AISetDifficulty(player, c_diffDefendWithPeons, true);
    AISetDifficulty(player, c_diffEnableDangerMap, true);
    AISetDifficulty(player, c_diffNormalTargetPrio, true);
    AISetDifficulty(player, c_diffAllowResourceReq, false);
//    AISetDifficulty(player, c_diffUseRetreatLogic, true);
    AISetDifficulty(player, c_diffSupportsBeacons, true);
    AISetDifficulty(player, c_diffAutoBuildPrereqs, true);
    AISetDifficulty(player, c_diffAllowBuildInDanger, true);
    AISetDifficulty(player, c_diffTimeoutMakeRequests, true);
    AISetDifficulty(player, c_diffSetRallyPoints, true);
    AISetDifficulty(player, c_diffAllowLongDistanceMining, true);
    AISetDifficulty(player, c_diffBalancePeonsAcrossBases, true);
    AISetDifficulty(player, c_diffWaveLeashing, true);

    AISetDifficulty(player, c_diffAutoLoadBunkers, true);
    AISetDifficulty(player, c_diffEarlyGameRepair, true);

    AISetFlag(player, e_flagsLateScout, true);
    AISetFlag(player, e_flagsClearObs, true);
    AISetFlag(player, e_flagsDiversion, true);
    AISetFlag(player, e_flagsTimeout, true);
    AISetFlag(player, e_flagsRunScared, true);
    AISetFlag(player, e_flagsDetect, true);
    AISetFlag(player, e_flagsZergStock, true);
    AISetFlag(player, e_flagsExpanded, true);

    AIDeclareTown(player, c_townOne, PlayerStartLocation(player));
    AISetMainTown(player, c_townOne);
    AIHarvest(player, c_townOne);
    AISetAllStates(player, 1);
    
    targDPoint = AIWaveTargetGatherDPoint(player, c_townMain);
    targOPoint = AIWaveTargetGatherOPoint(player, c_townMain);
    targD = AIWaveTargetGatherD(player, c_townMain);
    targO = AIWaveTargetGatherO(player, c_townMain);

    AIWaveSet(player, c_waveMain,       AIWaveCreate(AIWaveInfoCreate(), player, targOPoint));
    AIWaveSet(player, c_waveAttack,     AIWaveCreate(AIWaveInfoCreate(), player, targOPoint));
    AIWaveSet(player, c_waveDivert1,    AIWaveCreate(AIWaveInfoCreate(), player, targOPoint));
    AIWaveSet(player, c_waveDivert2,    AIWaveCreate(AIWaveInfoCreate(), player, targOPoint));
    AIWaveSet(player, c_waveClearObs,   AIWaveCreate(AIWaveInfoCreate(), player, targOPoint));
    AIWaveSet(player, c_waveHome,       AIWaveCreate(AIWaveInfoCreate(), player, targDPoint));
    AIWaveSet(player, c_waveDefend,     AIWaveCreate(AIWaveInfoCreate(), player, targDPoint));

    AIWaveSetType(AIWaveGet(player, c_waveMain),     c_waveStateIdle, targO);
    AIWaveSetType(AIWaveGet(player, c_waveAttack),   c_waveStateIdle, targO);
    AIWaveSetType(AIWaveGet(player, c_waveDivert1),  c_waveStateIdle, targO);
    AIWaveSetType(AIWaveGet(player, c_waveDivert2),  c_waveStateIdle, targO);
    AIWaveSetType(AIWaveGet(player, c_waveClearObs), c_waveStateIdle, targO);
    AIWaveSetType(AIWaveGet(player, c_waveHome),     c_waveStateIdle, targD);
    AIWaveSetType(AIWaveGet(player, c_waveDefend),   c_waveStateIdle, targD);

    AISetMaxBestAttackersLimit(player, AIMeleeDiffSelect(player, 1, 2, 4, 8, 16, 32));

    AITransportIgnore(player, "VikingAssault");
    AITransportSetPanic(player, 0.6);
    AITransportSetReturn(player, targDPoint);

    AISetDefenseRadii(player, 15.0, 10.0, 12.0);
	
    AIEarlyDefenseEnable(player, false, false);
    if (PlayerDifficulty(player) < c_skirVeryHard) {
        AIEarlyDefenseProps(player, 30, 20, 30);
        AISetNumScouts(player, 1);
        AIScout(player);
    } else {
        // let insane AI defend against further threats
        AIEarlyDefenseProps(player, 35, 35, 45);
        AISetNumScouts(player, 0);
    }

    AISetUserInt(player, c_numGroundStartLocs, AIGetGroundStartLocs(PlayerStartLocation(player)));
    AISetUserInt(player, c_numAirStartLocs, AIGetAirStartLocs(PlayerStartLocation(player)));

    AISpecifiedHealers(player);
    AISetDefaultCombatFlags(player, true);
    //    colors[0] = "ffffff"; // white
        //    colors[1] = "ff0000"; // red
        //    colors[2] = "0000ff"; // blue
        //    colors[3] = "33ccff"; // light blue
        //    colors[4] = "550088"; // purple
        //    colors[5] = "ffff00"; // yellow
        //    colors[6] = "ff9933"; // orange
        //   colors[7] = "00aa00"; // green
        //   colors[8] = "dd00ff"; // pink
        //   colors[9] = "2000bb"; // dark blue
        //   colors[10] = "bbbbbb"; // gray
        //   colors[11] = "007700"; // dark green
        //   colors[12] = "503000"; // brown
        //   colors[13] = "00ff00"; // light green
        //   colors[14] = "000000"; // black
        //   colors[15] = "aa55ff"; // light purple
        GInitComName();
        if(Opening)
    	{
       		TriggerDebugOutput(1, StringToText("<c val=\"00ff00\"> GT AI Pro Edition</c>"), true);
       		TriggerDebugOutput(1, StringToText("<c val=\"ffaa33\"> Founders: Ptanhkhoa & Nexxy </c>"), true);
			TriggerDebugOutput(1, StringToText("<c val=\"0000ff\"> Under development by IEGT Ronnie </c>"), true);
       		UnitGroupLoopBegin(UnitGroup(null, 0, RegionPlayableMap(), null, 0));
       		i = 0;
       		while (!UnitGroupLoopDone()) {
       	            GTNU[i].unitType = UnitGetType(UnitGroupLoopCurrent());
       	            GTNU[i].location = UnitGetPosition(UnitGroupLoopCurrent());
       	            GTNU[i].angle = UnitGetFacing(UnitGroupLoopCurrent());
       	            i = i + 1;
       	            UnitGroupLoopStep();
       	    }
       	    UnitGroupLoopEnd();


       	    // Default Setting
       	    if (BankSectionExists(GTBank, c_BS_OptionMenu)){

       	    	gttalk = (BankValueGetAsInt(GTBank, c_BS_OptionMenu, c_BK_Talk) == 1);
       	    	g_walling = (BankValueGetAsInt(GTBank, c_BS_OptionMenu, c_BK_Wall) == 1);
       	    	gtshowhr = (BankValueGetAsInt(GTBank, c_BS_OptionMenu, c_BK_Showhr) == 1);
       	    	gtFFA = (BankValueGetAsInt(GTBank, c_BS_OptionMenu, c_BK_FFA) == 1);
       	    	g_useNewAVS = (BankValueGetAsInt(GTBank, c_BS_OptionMenu, c_BK_newAVS) == 1);
       	    	g_limitAPM = (BankValueGetAsInt(GTBank, c_BS_OptionMenu, c_BK_limitAPM) == 1);
       	    	g_record = (BankValueGetAsInt(GTBank, c_BS_OptionMenu, c_BK_record) == 1);
       	    	g_truetime = (BankValueGetAsInt(GTBank, c_BS_OptionMenu, c_BK_truetime) == 1);
      	    	g_reminder = (BankValueGetAsInt(GTBank, c_BS_OptionMenu, c_BK_reminder) == 1);
       	    	g_start = BankValueGetAsInt(GTBank, c_BS_OptionMenu, c_GStartup);

       	    }
     //	   GAllBoard();
    	    //	PlayerModifyPropertyInt(player, c_playerPropSuppliesLimit, c_playerPropOperAdd, 200);
    //   	UnitGroupLoopBegin(UnitGroup("XelNagaTower", 0, RegionPlayableMap(),null, 0 ));
    //		while (!UnitGroupLoopDone()) {
    //   	            RegionAddCircle(R, true, UnitGetPosition(UnitGroupLoopCurrent()), 8);
    //   	            UnitGroupLoopStep();
    //
    //   	    }
    //		UnitGroupLoopEnd();
    //		DataTableSetRegion(true, "TowerRegion", R);

       	    //Pause At Start


       	    Opening = false;


    	}


    	TriggerDebugOutput(1, StringToText("[") + StringToText(IntToString(player)) + StringToText("]") + StringToText("[") + PlayerColorName(PlayerGetColorIndex(player, false)) + StringToText("] ") + StringToText(DI), true);

}

//--------------------------------------------------------------------------------------------------
//  AICampaignDiffSelect
//--------------------------------------------------------------------------------------------------
int AICampaignDiffSelect (int player, int d0, int d1, int d2, int d3) {
    int diff = PlayerDifficulty(player);
    if (diff == c_campBeginner) {
        return d0;
    }
    if (diff == c_campNormal) {
        return d1;
    }
    if (diff == c_campAdvanced) {
        return d2;
    }
    if (diff == c_campExpert) {
        return d3;
    }
    return 0;
}

//--------------------------------------------------------------------------------------------------
//  Campaign default startup routines
//--------------------------------------------------------------------------------------------------
void AICampaignStart (int player) {
    int diff = PlayerDifficulty(player);
    
    AIStart(player, true, DifficultyAPM(diff));
    AIDeclareTown(player, c_townOne, PlayerStartLocation(player));
    AISetMainTown(player, c_townOne);
    AIInitCampaignTowns(player);
    
    AIInitCampaignHarvest(player);
    AIHarvestRate(player, 1);
    AISetNumScouts(player, 0);
    AISetBullyAttackWavePercent(AICampaignDiffSelect(player, 100, 100, 50, 0), player);

    AIAttackWaveSetGatherPoint(player, AIGetGatherLocation(player, c_townMain));

    AISetDifficulty(player, c_diffPressForward, true);
    AISetDifficulty(player, c_diffFleeWorkers, false);

    AISetDifficulty(player, c_diffSpotChangelings,   (PlayerDifficulty(player) >= c_campExpert));
    AISetDifficulty(player, c_diffFleeDamage,        (PlayerDifficulty(player) >= c_campExpert));
    AISetDifficulty(player, c_diffRepairDamage,      (PlayerDifficulty(player) >= c_campAdvanced));
    AISetDifficulty(player, c_diffDefendWithPeons,   (PlayerDifficulty(player) >= c_campAdvanced));
    AISetDifficulty(player, c_diffNormalTargetPrio,  (PlayerDifficulty(player) >= c_campAdvanced));
    AISetDifficulty(player, c_diffFleeDanger,        (PlayerDifficulty(player) >= c_campAdvanced));
    AISetDifficulty(player, c_diffTargetSpawners,    (PlayerDifficulty(player) >= c_campNormal));
    
    AISetDifficulty(player, c_diffOptimizeGas, false);
    AISetDifficulty(player, c_diffNormalVision, false);
    AISetDifficulty(player, c_diffLimitAPM, false);
    AISetDifficulty(player, c_diffEarlyGameRepair, false);
    AISetDifficulty(player, c_diffEnableDangerMap, false);
    AISetDifficulty(player, c_diffWaveAvoidDanger, false);
    AISetDifficulty(player, c_diffEarlyDefenseScout, false);
    AISetDifficulty(player, c_diffUseExtraScouts, false);
    AISetDifficulty(player, c_diffHoldAtIdleChokes, false);
    AISetDifficulty(player, c_diffAllowResourceReq, false);
    AISetDifficulty(player, c_diffSupportsBeacons, false);
    AISetDifficulty(player, c_diffAutoBuildPrereqs, false);
    AISetDifficulty(player, c_diffAllowBuildInDanger, false);
    AISetDifficulty(player, c_diffTimeoutMakeRequests, false);
    AISetDifficulty(player, c_diffSetRallyPoints, false);
    AISetDifficulty(player, c_diffAllowLongDistanceMining, false);
    AISetDifficulty(player, c_diffBalancePeonsAcrossBases, false);
    AISetDifficulty(player, c_diffWaveLeashing, false);

    AISetDifficulty(player, c_diffDelayAdvTargetting, true);
    AISetDifficulty(player, c_diffAutoLoadBunkers, true);
  //  AISetDifficulty(player, c_diffUseRetreatLogic, true);

    AISetMaxBestAttackersLimit(player, AICampaignDiffSelect(player, 1, 2, 4, 6));

    AITransportIgnore(player, "InfestedCivilian");
    AITransportIgnore(player, "InfestedTerranCampaign");
    AITransportIgnore(player, "InfestedAbomination");
    AITransportIgnore(player, "VikingAssault");
    AITransportSetPanic(player, 0.6);
    AITransportSetReturn(player, PlayerStartLocation(player));

    AISetDefenseRadii(player, 6.0, 7.0, 9.0);

    AIReqCountAsBuiltObject(player, "Larva");
    AITechCountFixupSingle(player, "Spire", "GreaterSpire");
    AITechCountFixupInOrder(player, "Hatchery", "Lair", "Hive");
    AITechCountFixupEither(player, "CommandCenter", "OrbitalCommand", "PlanetaryFortress");
    AIReqAddSpecialMaker("Nuke", "GhostAcademy", "ArmSiloWithNuke", 0);
    AIReqAddSpecialMaker("CreepTumorBurrowed", "CreepTumor", "BurrowCreepTumorDown", 0);
    AIReqAddSpecialMaker("CreepTumorBurrowed", "Queen", "QueenBuild", 0);

    AISetSpawnerTargettingDelay(player, "SpawnerActive", AICampaignDiffSelect(player, 5, 3, 0, 0));

    AISpecifiedHealers(player);
    AISetDefaultCombatFlags(player, false);

}