

void GTInitCounterUnits()
{   
    // ALL ZERG COUNTER !    //////////////////////////////////////////////////////////////////////////////////
    // Zerg vs Protos Units !
    GTAddCounter(c_PU_Archon, 10, c_ZU_Zergling);
    GTAddCounter(c_PU_Archon, 4,  c_ZU_Roach);
    GTAddCounter(c_PU_Archon, 3,  c_ZU_Hydralisk);
    GTAddCounter(c_PU_Archon, 4,  c_ZU_Mutalisk);
    
    GTAddCounter(c_PU_Tempest, 2.5, c_ZU_Corruptor);
    GTAddCounter(c_PU_Tempest, 5, c_ZU_Hydralisk);
    GTAddCounter(c_PU_Tempest, 6, c_ZU_Mutalisk);
    GTAddCounter(c_PU_Tempest, 1, c_ZU_Infestor);
    
    GTAddCounter(c_PU_Colossus, 2, c_ZU_Corruptor);
    GTAddCounter(c_PU_Colossus, 10, c_ZU_Zergling);
    GTAddCounter(c_PU_Colossus, 4.5, c_ZU_Roach);
    GTAddCounter(c_PU_Colossus, 6, c_ZU_Hydralisk);    
    
    GTAddCounter(c_PU_DarkTemplar, 5, c_ZU_Zergling);    
    GTAddCounter(c_PU_DarkTemplar, 1.5, c_ZU_Roach);
    GTAddCounter(c_PU_DarkTemplar, 1.5, c_ZU_Hydralisk);
    
    GTAddCounter(c_PU_HighTemplar, 10, c_ZU_Zergling);
    GTAddCounter(c_PU_HighTemplar, 6, c_ZU_Hydralisk);
    GTAddCounter(c_PU_HighTemplar, 3, c_ZU_Roach);
    GTAddCounter(c_PU_HighTemplar, 2, c_ZU_Mutalisk);    
    
    GTAddCounter(c_PU_Immortal, 7, c_ZU_Zergling);
    GTAddCounter(c_PU_Immortal, 2.5, c_ZU_Hydralisk);
    GTAddCounter(c_PU_Immortal, 4.5, c_ZU_Roach);
    GTAddCounter(c_PU_Immortal, 0.001, c_ZU_Mutalisk);
    GTAddCounter(c_PU_Immortal, 0.001, c_ZU_BroodLord);
    
    // Mothership will affect army by + 30% !
    // GTAddCounter(c_PU_Mothership, 3, c_ZU_Corruptor);        
    // GTAddCounter(c_PU_Mothership, 5, c_ZU_Mutalisk);        
    // GTAddCounter(c_PU_Mothership, 8, c_ZU_Hydralisk);        
    
    GTAddCounter(c_PU_Phoenix, 1, c_ZU_Corruptor); 
    GTAddCounter(c_PU_Phoenix, 2.5, c_ZU_Mutalisk );    
    GTAddCounter(c_PU_Phoenix, 0.001, c_ZU_Hydralisk);    
    
    GTAddCounter(c_PU_Stalker, 1, c_ZU_Hydralisk);
    GTAddCounter(c_PU_Stalker, 3, c_ZU_Zergling);
    GTAddCounter(c_PU_Stalker, 1.25, c_ZU_Roach);        
    GTAddCounter(c_PU_Stalker, 1.5, c_ZU_Mutalisk);
	GTAddCounter(c_PU_Stalker, 0.001, c_ZU_BroodLord);
    
    GTAddCounter(c_PU_VoidRay, 1.5, c_ZU_Hydralisk);
    GTAddCounter(c_PU_VoidRay, 2.5, c_ZU_Mutalisk);
    GTAddCounter(c_PU_VoidRay, 2, c_ZU_Corruptor);
	GTAddCounter(c_PU_VoidRay, 1.5, c_ZU_Queen);
    
    GTAddCounter(c_PU_Zealot, 4, c_ZU_Zergling);
    GTAddCounter(c_PU_Zealot, 1.25, c_ZU_Roach);
    GTAddCounter(c_PU_Zealot, 1.25, c_ZU_Hydralisk);
    GTAddCounter(c_PU_Zealot, 5, c_ZU_Baneling);
    GTAddCounter(c_PU_Zealot, 0.001, c_ZU_Mutalisk);
	GTAddCounter(c_PU_Zealot, 0.001, c_ZU_BroodLord);
    
    GTAddCounter(c_PU_Sentry, 4, c_ZU_Zergling);
    GTAddCounter(c_PU_Sentry, 2, c_ZU_Roach);  
    GTAddCounter(c_PU_Sentry, 1, c_ZU_Hydralisk);
    GTAddCounter(c_PU_Sentry, 0.75, c_ZU_Mutalisk);
	GTAddCounter(c_PU_Sentry, 0.001, c_ZU_BroodLord);
    
    
    // Zerg vs Terran Units///////////////////////////////////////////////////////////////////////////////////
    
    GTAddCounter(c_TU_Banshee, 0.001, c_ZU_Corruptor);
	GTAddCounter(c_TU_Banshee, 1.5, c_ZU_Hydralisk);
    GTAddCounter(c_TU_Banshee, 0.001, c_ZU_Mutalisk);    
    
    GTAddCounter(c_TU_Battlecruiser, 5, c_ZU_Hydralisk);        
    GTAddCounter(c_TU_Battlecruiser, 7, c_ZU_Mutalisk);        
    GTAddCounter(c_TU_Battlecruiser, 2.5, c_ZU_Corruptor);   
	GTAddCounter(c_TU_Battlecruiser, 1, c_ZU_Infestor);	
    
    GTAddCounter(c_TU_Hellion, 6, c_ZU_Zergling);
	GTAddCounter(c_TU_Hellion, 2, c_ZU_Roach);
    GTAddCounter(c_TU_Hellion, 1, c_ZU_Hydralisk);
	GTAddCounter(c_TU_Hellion, 5, c_ZU_Ultralisk);
    GTAddCounter(c_TU_Hellion, 0.001, c_ZU_Mutalisk);
	GTAddCounter(c_TU_Hellion, 0.001, c_ZU_BroodLord); 
	
    
    GTAddCounter(c_TU_Marauder, 3, c_ZU_Zergling);
    GTAddCounter(c_TU_Marauder, 1.2, c_ZU_Roach );
    GTAddCounter(c_TU_Marauder, 1, c_ZU_Hydralisk);
	GTAddCounter(c_TU_Marauder, 0.25, c_ZU_Ultralisk);
	GTAddCounter(c_TU_Marauder, 0.001, c_ZU_Mutalisk);
	GTAddCounter(c_TU_Marauder, 0.001, c_ZU_BroodLord);
    
    GTAddCounter(c_TU_Marine, 1.7 , c_ZU_Zergling );    
    GTAddCounter(c_TU_Marine, 0.6, c_ZU_Roach);    
    GTAddCounter(c_TU_Marine, 0.6, c_ZU_Hydralisk); 
	GTAddCounter(c_TU_Marine, 0.125, c_ZU_Ultralisk);
	GTAddCounter(c_TU_Marine, 0.1, c_ZU_BroodLord);
    
    GTAddCounter(c_TU_Reaper, 4, c_ZU_Zergling);    
    GTAddCounter(c_TU_Reaper, 0.5, c_ZU_Roach);    
    GTAddCounter(c_TU_Reaper, 0.5, c_ZU_Hydralisk);    
	GTAddCounter(c_TU_Reaper, 0.001, c_ZU_Mutalisk);
	GTAddCounter(c_TU_Reaper, 0.001, c_ZU_BroodLord);
    
    GTAddCounter(c_TU_SiegeTank, 6, c_ZU_Zergling);    
    GTAddCounter(c_TU_SiegeTank, 4, c_ZU_Roach);    
    GTAddCounter(c_TU_SiegeTank, 4, c_ZU_Hydralisk);    
	GTAddCounter(c_TU_SiegeTank, 0.75, c_ZU_Ultralisk);
	GTAddCounter(c_TU_SiegeTank, 0.001, c_ZU_Mutalisk);
	GTAddCounter(c_TU_SiegeTank, 0.001, c_ZU_BroodLord);
	
	GTAddCounter(c_TU_SiegeTankSieged, 10, c_ZU_Zergling);   
    GTAddCounter(c_TU_SiegeTankSieged, 5, c_ZU_Roach);    
    GTAddCounter(c_TU_SiegeTankSieged, 6, c_ZU_Hydralisk);	
	GTAddCounter(c_TU_SiegeTankSieged, 1, c_ZU_Ultralisk);
	GTAddCounter(c_TU_SiegeTankSieged, 0.001, c_ZU_Mutalisk);
	GTAddCounter(c_TU_SiegeTankSieged, 0.001, c_ZU_BroodLord);	
    
    GTAddCounter(c_TU_Thor, 10, c_ZU_Zergling);
    GTAddCounter(c_TU_Thor, 5.5, c_ZU_Roach);
    GTAddCounter(c_TU_Thor, 5.5, c_ZU_Hydralisk);
	GTAddCounter(c_TU_Thor, 1, c_ZU_Ultralisk);
	GTAddCounter(c_TU_Thor, 5, c_ZU_Mutalisk);
	GTAddCounter(c_TU_Thor, 0.66, c_ZU_BroodLord);
    
    GTAddCounter(c_TU_Viking, 0.75, c_ZU_Corruptor);     
    GTAddCounter(c_TU_Viking, 1.5, c_ZU_Mutalisk);     
    GTAddCounter(c_TU_Viking, 0.001, c_ZU_Hydralisk);     
    
    // Zerg vs Zerg Units !/////////////////////////////////////////////////////////////////////////////
    
    GTAddCounter(c_ZU_Baneling, 3, c_ZU_Zergling);                   
	GTAddCounter(c_ZU_Baneling, 1, c_ZU_Baneling);                   
    GTAddCounter(c_ZU_Baneling, 0.5, c_ZU_Roach);                   
    GTAddCounter(c_ZU_Baneling, 2, c_ZU_Hydralisk);                   
    
    GTAddCounter(c_ZU_Corruptor, 2, c_ZU_Mutalisk); 
	GTAddCounter(c_ZU_Corruptor, 1, c_ZU_Corruptor);
    GTAddCounter(c_ZU_Corruptor, 0.001, c_ZU_Hydralisk);            
    
    GTAddCounter(c_ZU_Hydralisk, 3, c_ZU_Zergling);
	GTAddCounter(c_ZU_Hydralisk, 0.25, c_ZU_Ultralisk);
    GTAddCounter(c_ZU_Hydralisk, 1, c_ZU_Roach);
    GTAddCounter(c_ZU_Hydralisk, 1, c_ZU_Hydralisk);
	GTAddCounter(c_ZU_Hydralisk, 1.5, c_ZU_Mutalisk);
	GTAddCounter(c_ZU_Hydralisk, 0.2, c_ZU_BroodLord);                 
    
    GTAddCounter(c_ZU_Mutalisk, 0.5, c_ZU_Corruptor);        
    GTAddCounter(c_ZU_Mutalisk, 0.66, c_ZU_Hydralisk);        
    GTAddCounter(c_ZU_Mutalisk, 1, c_ZU_Mutalisk);        
    
    GTAddCounter(c_ZU_Roach, 3, c_ZU_Zergling);
	GTAddCounter(c_ZU_Roach, 0.16, c_ZU_Ultralisk);
    GTAddCounter(c_ZU_Roach, 1, c_ZU_Roach);
    GTAddCounter(c_ZU_Roach, 1, c_ZU_Hydralisk);
	GTAddCounter(c_ZU_Roach, 0.001, c_ZU_Mutalisk); 
	GTAddCounter(c_ZU_Roach, 0.001, c_ZU_BroodLord);
	
	GTAddCounter(c_ZU_Queen, 2, c_ZU_Zergling);
	GTAddCounter(c_ZU_Queen, 0.16, c_ZU_Ultralisk);
    GTAddCounter(c_ZU_Queen, 0.75, c_ZU_Roach);
    GTAddCounter(c_ZU_Queen, 1, c_ZU_Hydralisk);
	GTAddCounter(c_ZU_Queen, 1, c_ZU_Mutalisk); 
	GTAddCounter(c_ZU_Queen, 0.2, c_ZU_BroodLord);
    
    GTAddCounter(c_ZU_BroodLord, 5, c_ZU_Hydralisk);
    GTAddCounter(c_ZU_BroodLord, 0.001, c_ZU_Corruptor);
    GTAddCounter(c_ZU_BroodLord, 0.001, c_ZU_Mutalisk);
    
    GTAddCounter(c_ZU_Ultralisk, 11, c_ZU_Zergling);
	GTAddCounter(c_ZU_Ultralisk, 1, c_ZU_Ultralisk);    
    GTAddCounter(c_ZU_Ultralisk, 0.001, c_ZU_Corruptor);
    GTAddCounter(c_ZU_Ultralisk, 0.001, c_ZU_Mutalisk);
    
    GTAddCounter(c_ZU_Zergling, 1, c_ZU_Zergling);   
    GTAddCounter(c_ZU_Zergling, 0.34, c_ZU_Roach);   
    GTAddCounter(c_ZU_Zergling, 0.34, c_ZU_Hydralisk);       	
	GTAddCounter(c_ZU_Zergling, 0.09, c_ZU_Ultralisk); 
	GTAddCounter(c_ZU_Zergling, 0.001, c_ZU_Corruptor);
    GTAddCounter(c_ZU_Zergling, 0.001, c_ZU_Mutalisk);
    
    
    ///////////////////////////////////////////////////////////////////// ALL Protoss Counter ///////////////////////////////////////////////////////////////////////////////////    
    
    // Protoss vs Protoss Units !    
	GTAddCounter(c_PU_Archon, 2.5, c_PU_Zealot);    
	GTAddCounter(c_PU_Archon, 1,  c_PU_Archon);
    GTAddCounter(c_PU_Archon, 2.5,  c_PU_Stalker);
	GTAddCounter(c_PU_Archon, 0.8,  c_PU_Immortal);
	GTAddCounter(c_PU_Archon, 2,  c_PU_DarkTemplar);
	GTAddCounter(c_PU_Archon, 1.1,  c_PU_VoidRay);
	GTAddCounter(c_PU_Archon, 0.5,  c_PU_Tempest);
    
    GTAddCounter(c_PU_Tempest, 2, c_PU_Phoenix);
	GTAddCounter(c_PU_Tempest, 4, c_PU_Stalker);	
	GTAddCounter(c_PU_Tempest, 2, c_PU_Archon);	
	GTAddCounter(c_PU_Tempest, 1.5, c_PU_VoidRay);	
    GTAddCounter(c_PU_Tempest, 1, c_PU_Tempest);	
	    
    GTAddCounter(c_PU_Colossus, 4.5, c_PU_Zealot);
    GTAddCounter(c_PU_Colossus, 5, c_PU_Stalker);
    GTAddCounter(c_PU_Colossus, 1.5, c_PU_Immortal);
	GTAddCounter(c_PU_Colossus, 0.001, c_PU_VoidRay);	
    GTAddCounter(c_PU_Colossus, 0.001, c_PU_Tempest);	
	GTAddCounter(c_PU_Colossus, 0.001, c_PU_Phoenix);	
    
    GTAddCounter(c_PU_DarkTemplar, 1.5, c_PU_Zealot);
    GTAddCounter(c_PU_DarkTemplar, 1.2, c_PU_Stalker);
    GTAddCounter(c_PU_DarkTemplar, 0.25, c_PU_Immortal);
	GTAddCounter(c_PU_DarkTemplar, 0.001, c_PU_VoidRay);	
    GTAddCounter(c_PU_DarkTemplar, 0.001, c_PU_Tempest);	
	    
    GTAddCounter(c_PU_HighTemplar, 1, c_PU_HighTemplar);    
    
    GTAddCounter(c_PU_Immortal, 2, c_PU_Zealot);
    GTAddCounter(c_PU_Immortal, 3.2, c_PU_Stalker);
    GTAddCounter(c_PU_Immortal, 1, c_PU_Immortal);
	GTAddCounter(c_PU_Immortal, 0.001, c_PU_VoidRay);	
    GTAddCounter(c_PU_Immortal, 0.001, c_PU_Tempest);
    
    // GTAddCounter(c_PU_Mothership, 6, );        
    // GTAddCounter(c_PU_Mothership, 6, );        
    // GTAddCounter(c_PU_Mothership, 6, );        
    
    GTAddCounter(c_PU_Phoenix, 1, c_PU_Phoenix);    
	GTAddCounter(c_PU_Phoenix, 0.5, c_PU_Tempest);  
	GTAddCounter(c_PU_Phoenix, 0.66, c_PU_VoidRay);	
    GTAddCounter(c_PU_Phoenix, 0.001, c_PU_Stalker);    
	GTAddCounter(c_PU_Phoenix, 0.001, c_PU_Archon);    
    
    GTAddCounter(c_PU_Stalker, 1.5, c_PU_Zealot);    
    GTAddCounter(c_PU_Stalker, 0.34, c_PU_Immortal);
	GTAddCounter(c_PU_Stalker, 1, c_PU_Stalker);
	GTAddCounter(c_PU_Stalker, 0.2, c_PU_Colossus);
	GTAddCounter(c_PU_Stalker, 0.45, c_PU_VoidRay);
	GTAddCounter(c_PU_Stalker, 0.25, c_PU_Tempest);
    
    GTAddCounter(c_PU_VoidRay, 1.5, c_PU_Phoenix);
	GTAddCounter(c_PU_VoidRay, 2.2, c_PU_Stalker);
    GTAddCounter(c_PU_VoidRay, 1, c_PU_VoidRay);
	GTAddCounter(c_PU_VoidRay, 0.66, c_PU_Tempest);    
    
    GTAddCounter(c_PU_Zealot, 1, c_PU_Zealot);
    GTAddCounter(c_PU_Zealot, 0.66, c_PU_Stalker);
    GTAddCounter(c_PU_Zealot, 0.5, c_PU_Immortal);
	GTAddCounter(c_PU_Zealot, 0.2, c_PU_Colossus);
	GTAddCounter(c_PU_Zealot, 0.001, c_PU_VoidRay);
	GTAddCounter(c_PU_Zealot, 0.001, c_PU_Tempest);    
	
	GTAddCounter(c_PU_Sentry, 1,  c_PU_Sentry);				// not tested
	GTAddCounter(c_PU_Sentry, 1.5,  c_PU_Zealot);			// not tested
	GTAddCounter(c_PU_Sentry, 0.75,  c_PU_Stalker);			// not tested 
	GTAddCounter(c_PU_Sentry, 0.22,  c_PU_Archon);			// not tested
    
	// Protoss vs Terran Units    ////////////////////////////////////////////////////////////////////////////
	GTAddCounter(c_TU_Banshee, 0.001, c_PU_Phoenix);
	GTAddCounter(c_TU_Banshee, 2, c_PU_Stalker);
	GTAddCounter(c_TU_Banshee, 0.001, c_PU_VoidRay);
    GTAddCounter(c_TU_Banshee, 0.001, c_PU_Tempest);    
    GTAddCounter(c_TU_Banshee, 0.6, c_PU_Archon);	
	GTAddCounter(c_TU_Banshee, 2.5, c_PU_Sentry);
	
	
	GTAddCounter(c_TU_Battlecruiser, 1.5, c_PU_VoidRay);
	GTAddCounter(c_TU_Battlecruiser, 3.75, c_PU_Stalker);
    GTAddCounter(c_TU_Battlecruiser, 5, c_PU_Phoenix);        
    GTAddCounter(c_TU_Battlecruiser, 2.5, c_TU_Battlecruiser);        	        
    GTAddCounter(c_TU_Battlecruiser, 2, c_PU_Archon);        

    GTAddCounter(c_TU_Hellion, 2, c_PU_Zealot );
    GTAddCounter(c_TU_Hellion, 0.5, c_PU_Stalker );
    GTAddCounter(c_TU_Hellion, 0.25, c_PU_Immortal);
	GTAddCounter(c_TU_Hellion, 0.001, c_PU_VoidRay);
	GTAddCounter(c_TU_Hellion, 0.001, c_PU_Tempest);
	GTAddCounter(c_TU_Hellion, 1.5, c_PU_Sentry);
    
    GTAddCounter(c_TU_Marauder, 1, c_PU_Stalker);
    GTAddCounter(c_TU_Marauder, 1, c_PU_Zealot);
    GTAddCounter(c_TU_Marauder, 0.34, c_PU_Immortal);
	GTAddCounter(c_TU_Marauder, 2.5, c_PU_Sentry);
	GTAddCounter(c_TU_Marauder, 0.25, c_PU_Colossus);
	GTAddCounter(c_TU_Marauder, 0.001, c_PU_VoidRay);
	GTAddCounter(c_TU_Marauder, 0.001, c_PU_Tempest);
    
    GTAddCounter(c_TU_Marine, 0.4, c_PU_Zealot);    
    GTAddCounter(c_TU_Marine, 0.5, c_PU_Stalker);    
    GTAddCounter(c_TU_Marine, 0.09, c_PU_Colossus);    
	GTAddCounter(c_TU_Marine, 0.15, c_PU_Archon);
	GTAddCounter(c_TU_Marine, 0.3, c_PU_VoidRay);	
	GTAddCounter(c_TU_Marine, 0.34, c_PU_Immortal);
	GTAddCounter(c_TU_Marine, 0.15, c_PU_Tempest);	
	GTAddCounter(c_TU_Marine, 0.5, c_PU_Sentry);
    
    GTAddCounter(c_TU_Reaper, 0.5, c_PU_Zealot);    
    GTAddCounter(c_TU_Reaper, 0.5, c_PU_Stalker);    
	GTAddCounter(c_TU_Reaper, 0.09, c_PU_Colossus);
    GTAddCounter(c_TU_Reaper, 0.001, c_PU_VoidRay);
	GTAddCounter(c_TU_Reaper, 0.001, c_PU_Tempest); 
	
    
    GTAddCounter(c_TU_SiegeTank, 1.5, c_PU_Zealot);
	GTAddCounter(c_TU_SiegeTank, 0.5, c_PU_Immortal);    
    GTAddCounter(c_TU_SiegeTank, 2, c_PU_Stalker);    
    GTAddCounter(c_TU_SiegeTank, 0.001, c_PU_VoidRay);
	GTAddCounter(c_TU_SiegeTank, 0.001, c_PU_Tempest);   

	GTAddCounter(c_TU_SiegeTankSieged, 4, c_PU_Zealot);    
    GTAddCounter(c_TU_SiegeTankSieged, 4, c_PU_Stalker);    
    GTAddCounter(c_TU_SiegeTankSieged, 1.2, c_PU_Immortal);	
	GTAddCounter(c_TU_SiegeTankSieged, 0.001, c_PU_VoidRay);
	GTAddCounter(c_TU_SiegeTankSieged, 0.001, c_PU_Tempest);  	
    
    GTAddCounter(c_TU_Thor, 4.5, c_PU_Zealot);
    GTAddCounter(c_TU_Thor, 4, c_PU_Stalker);
    GTAddCounter(c_TU_Thor, 1, c_PU_Immortal);
	GTAddCounter(c_TU_Thor, 1, c_PU_Colossus);
	GTAddCounter(c_TU_Thor, 0.75, c_PU_VoidRay);
    GTAddCounter(c_TU_Thor, 0.5, c_PU_Tempest);        
        
    GTAddCounter(c_TU_Viking, 0.66, c_PU_VoidRay);    
	GTAddCounter(c_TU_Viking, 0.66, c_PU_Phoenix);
    GTAddCounter(c_TU_Viking, 0.34, c_PU_Tempest);     
	GTAddCounter(c_TU_Viking, 0.001, c_PU_Stalker); 
	GTAddCounter(c_TU_Viking, 0.001, c_PU_Sentry);
    
    // Protoss vs Zerg Units ! //////////////////////////////////////////////////////////////////////////
    
    // GTAddCounter(c_ZU_Baneling, 0, ???);                   
    // GTAddCounter(c_ZU_Baneling, 0, ???);                   
    // GTAddCounter(c_ZU_Baneling, 0, ???);                   
    
    GTAddCounter(c_ZU_Corruptor, 0.75, c_PU_VoidRay);    
    GTAddCounter(c_ZU_Corruptor, 0.1, c_PU_Stalker);    
    GTAddCounter(c_ZU_Corruptor, 1.5, c_PU_Phoenix);        
    
    GTAddCounter(c_ZU_Hydralisk, 1, c_PU_Zealot);
    GTAddCounter(c_ZU_Hydralisk, 1.25, c_PU_Stalker);
    GTAddCounter(c_ZU_Hydralisk, 0.2, c_PU_Colossus);
    GTAddCounter(c_ZU_Hydralisk, 0.5, c_PU_DarkTemplar);
    
    GTAddCounter(c_ZU_Infestor, 1, c_PU_HighTemplar);                    
    GTAddCounter(c_ZU_Infestor, 2, c_PU_Stalker);                    
    GTAddCounter(c_ZU_Infestor, 3, c_PU_Zealot);                    
    GTAddCounter(c_ZU_Infestor, 0, c_PU_VoidRay);
    
    GTAddCounter(c_ZU_Mutalisk, 1, c_PU_Stalker);        
    GTAddCounter(c_ZU_Mutalisk, 0.5, c_PU_Phoenix);        
    GTAddCounter(c_ZU_Mutalisk, 0.2, c_PU_Archon);        
    
    GTAddCounter(c_ZU_Queen, 0.5 , c_PU_VoidRay);
	GTAddCounter(c_ZU_Queen, 1.25 , c_PU_Zealot);
	GTAddCounter(c_ZU_Queen, 0.34 , c_PU_Stalker);
	GTAddCounter(c_ZU_Queen, 0.34 , c_PU_Immortal);
	GTAddCounter(c_ZU_Queen, 0.1 , c_PU_Colossus);
    
    GTAddCounter(c_ZU_Roach, 1, c_PU_Stalker);
    GTAddCounter(c_ZU_Roach, 0.75, c_PU_Zealot);
    GTAddCounter(c_ZU_Roach, 0.3, c_PU_Immortal);
    GTAddCounter(c_ZU_Roach, 0.25, c_PU_Colossus);
    GTAddCounter(c_ZU_Roach, 0.001, c_PU_VoidRay);
	GTAddCounter(c_ZU_Roach, 0.001, c_PU_Tempest);
    
    GTAddCounter(c_ZU_BroodLord, 3, c_PU_Stalker);
    GTAddCounter(c_ZU_BroodLord, 0.001, c_PU_VoidRay);
    GTAddCounter(c_ZU_BroodLord, 0.001, c_PU_Phoenix);    
    
    GTAddCounter(c_ZU_Ultralisk, 1.25, c_PU_Immortal);
    GTAddCounter(c_ZU_Ultralisk, 3.5, c_PU_Zealot);
    GTAddCounter(c_ZU_Ultralisk, 6, c_PU_Stalker);    
    GTAddCounter(c_ZU_Ultralisk, 0.001, c_PU_VoidRay);
    
    GTAddCounter(c_ZU_Zergling, 0.25, c_PU_Zealot);
    GTAddCounter(c_ZU_Zergling, 0.25, c_PU_Immortal);
    GTAddCounter(c_ZU_Zergling, 0.5, c_PU_Stalker);   
    GTAddCounter(c_ZU_Zergling, 0.15, c_PU_Colossus);       
    GTAddCounter(c_ZU_Zergling, 0.15, c_PU_Archon);       
    GTAddCounter(c_ZU_Zergling, 0.001, c_PU_VoidRay); 
	
    ///////////////////////////////////////////////////////////////////// ALL Terran Counter ///////////////////////////////////////////////////////////////////////////////////    
    //********************
    // Terran vs Protos Units !
    GTAddCounter(c_PU_Archon, 5, c_TU_Marine);
    GTAddCounter(c_PU_Archon, 2, c_TU_Marauder);
    GTAddCounter(c_PU_Archon, 0.5, c_TU_Ghost);
    
    GTAddCounter(c_PU_Tempest, 9, c_TU_Marine );
    GTAddCounter(c_PU_Tempest, 3.5, c_TU_Viking);
    GTAddCounter(c_PU_Tempest, 2.5, c_TU_Thor);    	 
	 
    GTAddCounter(c_PU_Colossus, 11, c_TU_Marine);
	GTAddCounter(c_PU_Colossus, 0.001, c_TU_Viking);
    GTAddCounter(c_PU_Colossus, 4, c_TU_Marauder);
	GTAddCounter(c_PU_Colossus, 0.001, c_TU_Banshee);    
    
    GTAddCounter(c_PU_DarkTemplar, 3, c_TU_Marine);
    GTAddCounter(c_PU_DarkTemplar, 2, c_TU_Marauder);
    GTAddCounter(c_PU_DarkTemplar, 0.25, c_TU_Thor);
	GTAddCounter(c_PU_DarkTemplar, 1, c_TU_SiegeTank);
    
    GTAddCounter(c_PU_HighTemplar, 1, c_TU_Ghost);    
    
    GTAddCounter(c_PU_Immortal, 4.5, c_TU_Marine);
    GTAddCounter(c_PU_Immortal, 3.5, c_TU_Marauder);
	GTAddCounter(c_PU_Immortal, 3, c_TU_SiegeTank);
	GTAddCounter(c_PU_Immortal, 3, c_TU_SiegeTankSieged);    
	GTAddCounter(c_PU_Immortal, 0.001, c_TU_Banshee);
	GTAddCounter(c_PU_Immortal, 0.001, c_TU_Battlecruiser);
    
	GTAddCounter(c_PU_Mothership, 10, c_TU_Marine);
    GTAddCounter(c_PU_Mothership, 4.5, c_TU_Viking);        
	GTAddCounter(c_PU_Mothership, 1, c_TU_Battlecruiser);
	GTAddCounter(c_PU_Mothership, 2, c_TU_Thor);     
    
    GTAddCounter(c_PU_Phoenix, 1.5, c_TU_Viking);          
    GTAddCounter(c_PU_Phoenix, 2, c_TU_Marine );    
	GTAddCounter(c_PU_Phoenix, 0.15, c_TU_Battlecruiser);
	GTAddCounter(c_PU_Phoenix, 0.001, c_TU_Thor);	
    
    GTAddCounter(c_PU_Stalker, 2, c_TU_Marine);
    GTAddCounter(c_PU_Stalker, 1, c_TU_Marauder);
    GTAddCounter(c_PU_Stalker, 0.22, c_TU_Thor);
	GTAddCounter(c_PU_Stalker, 1, c_TU_Hellion);
	GTAddCounter(c_PU_Stalker, 0.75, c_TU_Banshee);
	GTAddCounter(c_PU_Stalker, 0.5, c_TU_SiegeTank);
	GTAddCounter(c_PU_Stalker, 0.3, c_TU_SiegeTankSieged);
	GTAddCounter(c_PU_Stalker, 0.3, c_TU_Battlecruiser);
    
    GTAddCounter(c_PU_VoidRay, 1.5, c_TU_Viking);
	GTAddCounter(c_PU_VoidRay, 3, c_TU_Marine);    
    GTAddCounter(c_PU_VoidRay, 1.5, c_TU_Thor);
	GTAddCounter(c_PU_VoidRay, 0.66, c_TU_Battlecruiser);
    
    GTAddCounter(c_PU_Zealot, 2.5, c_TU_Marine);
    GTAddCounter(c_PU_Zealot, 1.5, c_TU_Marauder);
    GTAddCounter(c_PU_Zealot, 0.5, c_TU_Hellion);
	GTAddCounter(c_PU_Zealot, 0.4, c_TU_SiegeTank);
	GTAddCounter(c_PU_Zealot, 0.34, c_TU_SiegeTankSieged);
	GTAddCounter(c_PU_Zealot, 0.001, c_TU_Banshee);
	GTAddCounter(c_PU_Zealot, 0.001, c_TU_Battlecruiser);
	
	GTAddCounter(c_PU_Sentry, 3, c_TU_Marine);
    GTAddCounter(c_PU_Sentry, 2, c_TU_Marauder);     
	GTAddCounter(c_PU_Sentry, 0.5, c_TU_Hellion);
    
    // Terran vs Terran Units /////////////////////////////////////////////////////////////////////////////
    
    GTAddCounter(c_TU_Banshee, 1, c_TU_Banshee);
    GTAddCounter(c_TU_Banshee, 0.34, c_TU_Thor);    
	GTAddCounter(c_TU_Banshee, 0.001, c_TU_Viking);
    
    GTAddCounter(c_TU_Battlecruiser, 1, c_TU_Battlecruiser);              
    
	GTAddCounter(c_TU_Viking, 1, c_TU_Viking);    	
	GTAddCounter(c_TU_Viking, 0.2, c_TU_Battlecruiser);
	GTAddCounter(c_TU_Viking, 0.001, c_TU_Marine);
	GTAddCounter(c_TU_Viking, 0.001, c_TU_Thor);
	
    GTAddCounter(c_TU_Ghost, 1, c_TU_Ghost);
    
    GTAddCounter(c_TU_Hellion, 1, c_TU_Hellion);
	GTAddCounter(c_TU_Hellion, 1.5, c_TU_Marine);
	GTAddCounter(c_TU_Hellion, 1, c_TU_Marauder);
	GTAddCounter(c_TU_Hellion, 0.1, c_TU_Thor);
	GTAddCounter(c_TU_Hellion, 0.07, c_TU_SiegeTank);
	GTAddCounter(c_TU_Hellion, 0.05, c_TU_SiegeTankSieged);
	GTAddCounter(c_TU_Hellion, 0.001, c_TU_Battlecruiser);
	GTAddCounter(c_TU_Hellion, 0.001, c_TU_Banshee);
    
    GTAddCounter(c_TU_Marauder, 1, c_TU_Marauder);
	GTAddCounter(c_TU_Marauder, 1.75, c_TU_Marine);
	GTAddCounter(c_TU_Marauder, 0.34, c_TU_Thor);
	GTAddCounter(c_TU_Marauder, 0.67, c_TU_SiegeTank);
	GTAddCounter(c_TU_Marauder, 0.2, c_TU_SiegeTankSieged);
	GTAddCounter(c_TU_Marauder, 0.001, c_TU_Banshee);
	GTAddCounter(c_TU_Marauder, 0.001, c_TU_Battlecruiser);
	
    
    GTAddCounter(c_TU_Marine, 1, c_TU_Marine );    
	GTAddCounter(c_TU_Marine, 1.5, c_TU_Reaper );
	GTAddCounter(c_TU_Marine, 0.5, c_TU_Marauder );
	GTAddCounter(c_TU_Marine, 0.09, c_TU_Thor );    
	GTAddCounter(c_TU_Marine, 0.67, c_TU_Hellion);
	GTAddCounter(c_TU_Marine, 0.2, c_TU_SiegeTank);
	GTAddCounter(c_TU_Marine, 0.09, c_TU_SiegeTankSieged);
	GTAddCounter(c_TU_Marine, 0.33, c_TU_Banshee);
	GTAddCounter(c_TU_Marine, 0.09, c_TU_Battlecruiser);
    
    GTAddCounter(c_TU_Raven, 1, c_TU_Raven );
    
    GTAddCounter(c_TU_Reaper, 1, c_TU_Reaper);    
	GTAddCounter(c_TU_Reaper, 0.67, c_TU_Marine);    
	GTAddCounter(c_TU_Reaper, 0.5, c_TU_Marauder); 
	GTAddCounter(c_TU_Reaper, 0.5, c_TU_Hellion);
    
    GTAddCounter(c_TU_SiegeTank, 1, c_TU_SiegeTank);
	GTAddCounter(c_TU_SiegeTank, 0.8, c_TU_SiegeTankSieged);
	GTAddCounter(c_TU_SiegeTank, 0.001, c_TU_Banshee);
	GTAddCounter(c_TU_SiegeTank, 0.001, c_TU_Battlecruiser);
	
	
	
	GTAddCounter(c_TU_SiegeTankSieged, 1, c_TU_SiegeTankSieged); 	
	GTAddCounter(c_TU_SiegeTankSieged, 0.001, c_TU_Banshee);
	GTAddCounter(c_TU_SiegeTankSieged, 0.001, c_TU_Battlecruiser);
	
   GTAddCounter(c_TU_Thor, 1, c_TU_Thor);
   GTAddCounter(c_TU_Thor, 1, c_TU_SiegeTank);
   GTAddCounter(c_TU_Thor, 4, c_TU_Marauder);    
   GTAddCounter(c_TU_Thor, 0.3, c_TU_Battlecruiser);    
      
    
    // Terran vs Zerg Units !//////////////////////////////////////////////////////////////
    
    GTAddCounter(c_ZU_Baneling, 0.15, c_TU_SiegeTankSieged);
	GTAddCounter(c_ZU_Baneling, 0.2, c_TU_SiegeTank);
	GTAddCounter(c_ZU_Baneling, 1.5, c_TU_Marine);
	GTAddCounter(c_ZU_Baneling, 0.5, c_TU_Marine);						// reduce banelings-count in group somehow with this line
    // GTAddCounter(c_ZU_Baneling, 0, ???);                   
    // GTAddCounter(c_ZU_Baneling, 0, ???);                   
    
    GTAddCounter(c_ZU_Corruptor, 1.5, c_TU_Viking);    
	GTAddCounter(c_ZU_Corruptor, 0.4, c_TU_Battlecruiser);    
    GTAddCounter(c_ZU_Corruptor, 0.001, c_TU_Marine);    
	GTAddCounter(c_ZU_Corruptor, 0.001, c_TU_Thor);
	GTAddCounter(c_ZU_Corruptor, 0.001, c_TU_Ghost);    
    
    GTAddCounter(c_ZU_Hydralisk, 1.66, c_TU_Marine);
    GTAddCounter(c_ZU_Hydralisk, 1, c_TU_Marauder);	
    GTAddCounter(c_ZU_Hydralisk, 2, c_TU_Reaper);	
	GTAddCounter(c_ZU_Hydralisk, 0.2, c_TU_SiegeTank);
	GTAddCounter(c_ZU_Hydralisk, 0.17, c_TU_SiegeTankSieged);
	GTAddCounter(c_ZU_Hydralisk, 1, c_TU_Hellion);
	GTAddCounter(c_ZU_Hydralisk, 0.19, c_TU_Thor);
	
    GTAddCounter(c_ZU_Infestor, 1, c_TU_Ghost);                                          
    
    GTAddCounter(c_ZU_Mutalisk, 1, c_TU_Marine);        
    GTAddCounter(c_ZU_Mutalisk, 0.2, c_TU_Thor);        
    GTAddCounter(c_ZU_Mutalisk, 0.67, c_TU_Viking);                	
	GTAddCounter(c_ZU_Mutalisk, 0.5, c_TU_Ghost); 
	GTAddCounter(c_ZU_Mutalisk, 0.15, c_TU_Battlecruiser);
    
    GTAddCounter(c_ZU_Roach, 1.67, c_TU_Marine);
    GTAddCounter(c_ZU_Roach, 0.84, c_TU_Marauder);
    GTAddCounter(c_ZU_Roach, 0.18, c_TU_Thor);
	GTAddCounter(c_ZU_Roach, 0.25, c_TU_SiegeTank);
	GTAddCounter(c_ZU_Roach, 0.2, c_TU_SiegeTankSieged);	
	GTAddCounter(c_ZU_Roach, 0.001, c_TU_Battlecruiser);
	GTAddCounter(c_ZU_Roach, 0.001, c_TU_Banshee);
	    
    GTAddCounter(c_ZU_BroodLord, 10, c_TU_Marine);
    GTAddCounter(c_ZU_BroodLord, 1.5, c_TU_Thor);
	GTAddCounter(c_ZU_BroodLord, 2, c_TU_Ghost);
    GTAddCounter(c_ZU_BroodLord, 0.001, c_TU_Battlecruiser);
	GTAddCounter(c_ZU_BroodLord, 0.001, c_TU_Viking);
    
    GTAddCounter(c_ZU_Ultralisk, 9, c_TU_Marine);
    GTAddCounter(c_ZU_Ultralisk, 4, c_TU_Marauder);
    GTAddCounter(c_ZU_Ultralisk, 1, c_TU_Thor);    
	GTAddCounter(c_ZU_Ultralisk, 1.5, c_TU_SiegeTank);   
	GTAddCounter(c_ZU_Ultralisk, 1, c_TU_SiegeTankSieged);   
	GTAddCounter(c_ZU_Ultralisk, 0.001, c_TU_Battlecruiser);
	GTAddCounter(c_ZU_Ultralisk, 0.001, c_TU_Banshee);
    
    GTAddCounter(c_ZU_Zergling, 0.58, c_TU_Marine);   
    GTAddCounter(c_ZU_Zergling, 0.33, c_TU_Marauder);   
    GTAddCounter(c_ZU_Zergling, 0.1, c_TU_Thor);       
    GTAddCounter(c_ZU_Zergling, 0.17, c_TU_SiegeTank);   
	GTAddCounter(c_ZU_Zergling, 0.1, c_TU_SiegeTankSieged);
	GTAddCounter(c_ZU_Zergling, 0.001, c_TU_Battlecruiser);
	GTAddCounter(c_ZU_Zergling, 0.001, c_TU_Viking);	
	
	GTAddCounter(c_ZU_Queen, 1.67, c_TU_Marine);
    GTAddCounter(c_ZU_Queen, 0.84, c_TU_Marauder);
    GTAddCounter(c_ZU_Queen, 0.18, c_TU_Thor);
	GTAddCounter(c_ZU_Queen, 0.25, c_TU_SiegeTank);
	GTAddCounter(c_ZU_Queen, 0.2, c_TU_SiegeTankSieged);	
	GTAddCounter(c_ZU_Queen, 0.2, c_TU_Battlecruiser);
	GTAddCounter(c_ZU_Queen, 1, c_TU_Banshee);
}


//************************************************************************************************************************************************************
// writing info into fixed[] GTEnemyArmy
void GTRefreshEArmy(int player)
{   
    int index = 0;
    int counter;    
    int EnemyPlayerID = GTEnemyID(player);
    string EnemyRace = GTEnemyRace(player);

    // clear Array
    while (index < g_UnitsToCounter)
    {
        GTEnemyArmy[index] = 0;
        index = index + 1;
    }  
    
    if (EnemyRace == "Prot")
    {    
        // Protoss Units
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_PU_Archon);
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_Archon)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_Archon)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_PU_Tempest);
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_Tempest)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_Tempest)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_PU_Colossus);
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_Colossus)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_Colossus)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_PU_DarkTemplar);
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_DarkTemplar)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_DarkTemplar)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_PU_HighTemplar);
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_HighTemplar)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_HighTemplar)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_PU_Immortal);
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_Immortal)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_Immortal)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_PU_Mothership);        
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_Mothership)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_Mothership)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_PU_Phoenix);    
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_Phoenix)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_Phoenix)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_PU_Stalker);
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_Stalker)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_Stalker)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_PU_VoidRay);
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_VoidRay)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_VoidRay)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_PU_Zealot);
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_Zealot)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_Zealot)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_PU_Sentry);    
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_Sentry)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_PU_Sentry)] = 0; }
    }
    else if (EnemyRace == "Terr")
    {
        // //  Terran Units
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_TU_Banshee);    
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_TU_Banshee)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_TU_Banshee)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_TU_Battlecruiser);        
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_TU_Battlecruiser)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_TU_Battlecruiser)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_TU_Ghost);
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_TU_Ghost)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_TU_Ghost)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_TU_Hellion);
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_TU_Hellion)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_TU_Hellion)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_TU_Marauder);
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_TU_Marauder)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_TU_Marauder)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_TU_Marine);    
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_TU_Marine)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_TU_Marine)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_TU_Raven);
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_TU_Raven)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_TU_Raven)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_TU_Reaper);    
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_TU_Reaper)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_TU_Reaper)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_TU_SiegeTank);    
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_TU_SiegeTank)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_TU_SiegeTank)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_TU_Thor);
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_TU_Thor)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_TU_Thor)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_TU_Viking);        
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_TU_Viking)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_TU_Viking)] = 0; }
            
    }
    // //  Zerg Units
    else
    {
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_ZU_Baneling);                   
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_ZU_Baneling)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_ZU_Baneling)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_ZU_Corruptor);    
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_ZU_Corruptor)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_ZU_Corruptor)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_ZU_Hydralisk);
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_ZU_Hydralisk)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_ZU_Hydralisk)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_ZU_Infestor);                    
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_ZU_Infestor)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_ZU_Infestor)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_ZU_Mutalisk);        
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_ZU_Mutalisk)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_ZU_Mutalisk)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_ZU_Queen);
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_ZU_Queen)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_ZU_Queen)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_ZU_Roach);
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_ZU_Roach)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_ZU_Roach)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_ZU_BroodLord);
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_ZU_BroodLord)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_ZU_BroodLord)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_ZU_Ultralisk);
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_ZU_Ultralisk)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_ZU_Ultralisk)] = 0; }
            
        counter = AIKnownUnitCount(player, EnemyPlayerID, c_ZU_Zergling);    
        if (counter > 0) 
            { GTEnemyArmy[GTUnittypeToInt(c_ZU_Zergling)] = counter; }
        else 
            { GTEnemyArmy[GTUnittypeToInt(c_ZU_Zergling)] = 0; }            
    }
}

// translate wave into Array
void GTRefreshOArmyFromWave(int player, int waveNum)
{
	unitgroup waveUnitGroup;
	unitgroup armyGroup;
	point p;
	unit currentUnit;
	int index;

	// first search for mid-point of wave ! and build a group 
	waveUnitGroup = AIWaveGetUnits(AIWaveGet(player, waveNum));
	// get nearest (to enemybase) unit of this wave
	currentUnit = UnitGroupNearestUnit(waveUnitGroup, PlayerStartLocation(GTEnemyID(player)));	
	// create group
	p = UnitGetPosition(currentUnit);
	armyGroup = UnitGroup(null, player, RegionCircle(p,15), null, 0);
	
	// first reset GTOurArmy Array
	index = 0;
    while (index < g_UnitsToCounter)
    {
        GTOurArmy[index] = 0;
        index = index + 1;
    }

	index = 1;
	currentUnit = UnitGroupUnit(armyGroup, index);
	while (currentUnit != null){
		GTOurArmy[GTUnitToInt(currentUnit)] += 1;

		// update unit and index ++
		index += 1;
		currentUnit = UnitGroupUnit(armyGroup, index);
	}
}

void GTRefreshOArmy(int player)
{   
    int index = 0;
    int counter;    
    string OurRace = PlayerRace(player);		
    
    // clear Array
    while (index < g_UnitsToCounter)
    {
        GTOurArmy[index] = 0;
        index = index + 1;
    }
	
    if (OurRace == "Prot")
    {
        // Protoss Units
        counter = AIKnownUnitCount(player, player, c_PU_Archon);
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_PU_Archon)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_PU_Archon)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_PU_Tempest);
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_PU_Tempest)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_PU_Tempest)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_PU_Colossus);
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_PU_Colossus)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_PU_Colossus)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_PU_DarkTemplar);
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_PU_DarkTemplar)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_PU_DarkTemplar)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_PU_HighTemplar);
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_PU_HighTemplar)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_PU_HighTemplar)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_PU_Immortal);
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_PU_Immortal)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_PU_Immortal)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_PU_Mothership);        
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_PU_Mothership)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_PU_Mothership)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_PU_Phoenix);    
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_PU_Phoenix)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_PU_Phoenix)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_PU_Stalker);		
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_PU_Stalker)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_PU_Stalker)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_PU_VoidRay);
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_PU_VoidRay)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_PU_VoidRay)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_PU_Zealot);
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_PU_Zealot)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_PU_Zealot)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_PU_Sentry);    
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_PU_Sentry)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_PU_Sentry)] = 0; }
    }
    else if (OurRace == "Terr")
    {
        // //  Terran Units
        counter = AIKnownUnitCount(player, player, c_TU_Banshee);    
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_TU_Banshee)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_TU_Banshee)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_TU_Battlecruiser);        
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_TU_Battlecruiser)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_TU_Battlecruiser)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_TU_Ghost);
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_TU_Ghost)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_TU_Ghost)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_TU_Hellion);
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_TU_Hellion)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_TU_Hellion)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_TU_Marauder);
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_TU_Marauder)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_TU_Marauder)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_TU_Marine);    
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_TU_Marine)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_TU_Marine)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_TU_Raven);
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_TU_Raven)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_TU_Raven)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_TU_Reaper);    
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_TU_Reaper)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_TU_Reaper)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_TU_SiegeTank);    
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_TU_SiegeTank)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_TU_SiegeTank)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_TU_Thor);
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_TU_Thor)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_TU_Thor)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_TU_Viking);        
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_TU_Viking)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_TU_Viking)] = 0; }
            
    }
    // //  Zerg Units
    else
    {
        counter = AIKnownUnitCount(player, player, c_ZU_Baneling);                   
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_ZU_Baneling)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_ZU_Baneling)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_ZU_Corruptor);    
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_ZU_Corruptor)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_ZU_Corruptor)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_ZU_Hydralisk);
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_ZU_Hydralisk)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_ZU_Hydralisk)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_ZU_Infestor);                    
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_ZU_Infestor)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_ZU_Infestor)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_ZU_Mutalisk);        
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_ZU_Mutalisk)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_ZU_Mutalisk)] = 0; }
            
        // counter = AIKnownUnitCount(player, player, c_ZU_Queen);
        // if (counter > 0) 
            // { GTOurArmy[GTUnittypeToInt(c_ZU_Queen)] = counter; }
        // else 
            // { GTOurArmy[GTUnittypeToInt(c_ZU_Queen)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_ZU_Roach);
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_ZU_Roach)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_ZU_Roach)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_ZU_BroodLord);
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_ZU_BroodLord)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_ZU_BroodLord)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_ZU_Ultralisk);
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_ZU_Ultralisk)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_ZU_Ultralisk)] = 0; }
            
        counter = AIKnownUnitCount(player, player, c_ZU_Zergling);    
        if (counter > 0) 
            { GTOurArmy[GTUnittypeToInt(c_ZU_Zergling)] = counter; }
        else 
            { GTOurArmy[GTUnittypeToInt(c_ZU_Zergling)] = 0; }            
    }
}

void GTDataTableAddCounterUnit(string UnitType)
{
	DataTableSetInt(true, UnitType, g_TempCounter);
	DataTableSetString(true, "IntToType_" + IntToString(GTGetRaceFromUnitType(UnitType)) + "_" + IntToString(g_TempCounter), UnitType);
	g_TempCounter += 1;
}

// Load all Info into DataTable
void GTUnitMatchingInit()
{
	g_TempCounter = 0;
    // Protoss Units
    GTDataTableAddCounterUnit(c_PU_VoidRay);
    GTDataTableAddCounterUnit(c_PU_Zealot);
    GTDataTableAddCounterUnit(c_PU_Stalker);
    GTDataTableAddCounterUnit(c_PU_Immortal);  
    GTDataTableAddCounterUnit(c_PU_Sentry);
    GTDataTableAddCounterUnit(c_PU_Archon);    
    GTDataTableAddCounterUnit(c_PU_HighTemplar);
    GTDataTableAddCounterUnit(c_PU_DarkTemplar);  
	GTDataTableAddCounterUnit(c_PU_Colossus);
    GTDataTableAddCounterUnit(c_PU_Tempest);  
    GTDataTableAddCounterUnit(c_PU_Phoenix);  
    GTDataTableAddCounterUnit(c_PU_Mothership);

//--------------------------------------------------------------------------
//  Terran Units
//--------------------------------------------------------------------------

	g_TempCounter = 0;
    GTDataTableAddCounterUnit(c_TU_Banshee);
    GTDataTableAddCounterUnit(c_TU_Marine);
    GTDataTableAddCounterUnit(c_TU_Marauder);
    GTDataTableAddCounterUnit(c_TU_Reaper);
    GTDataTableAddCounterUnit(c_TU_Hellion);
	GTDataTableAddCounterUnit(c_TU_Viking);
    GTDataTableAddCounterUnit(c_TU_SiegeTankSieged);
    GTDataTableAddCounterUnit(c_TU_SiegeTank);
    GTDataTableAddCounterUnit(c_TU_Thor);
    GTDataTableAddCounterUnit(c_TU_Ghost);    
    GTDataTableAddCounterUnit(c_TU_Raven);
    GTDataTableAddCounterUnit(c_TU_Battlecruiser);

//--------------------------------------------------------------------------
//  Zerg Units
//--------------------------------------------------------------------------
	g_TempCounter = 0;
    GTDataTableAddCounterUnit(c_ZU_Mutalisk);
    GTDataTableAddCounterUnit(c_ZU_Zergling);
    GTDataTableAddCounterUnit(c_ZU_Roach);
    GTDataTableAddCounterUnit(c_ZU_Baneling);
    GTDataTableAddCounterUnit(c_ZU_Ultralisk);
    GTDataTableAddCounterUnit(c_ZU_Infestor);
    GTDataTableAddCounterUnit(c_ZU_Hydralisk); 
    GTDataTableAddCounterUnit(c_ZU_Corruptor);
    GTDataTableAddCounterUnit(c_ZU_BroodLord);
    GTDataTableAddCounterUnit(c_ZU_Queen);
}
