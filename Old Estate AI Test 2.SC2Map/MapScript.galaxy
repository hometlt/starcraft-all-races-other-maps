//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Old Estate
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibARMP"

//--------------------------------------------------------------------------------------------------
// Library: Tangor AI Lib
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int lib1_ge_UT_Camera_Keys_Q = 0;
const int lib1_ge_UT_Camera_Keys_W = 1;
const int lib1_ge_UT_Camera_Keys_E = 2;
const int lib1_ge_UT_Camera_Keys_A = 3;
const int lib1_ge_UT_Camera_Keys_S = 4;
const int lib1_ge_UT_Camera_Keys_D = 5;
const int lib1_ge_UT_DevCommandTypes_Visual = 0;
const int lib1_ge_UT_DevCommandTypes_Gamealtering = 1;
const int lib1_ge_UT_DevCommandTypes_No = 2;
const int lib1_ge_TgAIIncludeAlias_DontIncludeAlias = 0;
const int lib1_ge_TgAIIncludeAlias_IncludeFirstAlias = 1;
const int lib1_ge_TgAIIncludeAlias_IncludeLastAlias = 2;
const int lib1_ge_MonobattleUnitGroup_Disabled = 0;
const int lib1_ge_MonobattleUnitGroup_Pacific = 1;
const int lib1_ge_MonobattleUnitGroup_Danger = 2;
const int lib1_ge_SearchMode_Units = 0;
const int lib1_ge_SearchMode_Agressive = 1;
const int lib1_ge_SearchMode_Detection = 2;
const int lib1_ge_SearchMode_Ability = 3;

// Constants
const int lib1_gv_uT_HotkeyStoreLength = 10;
const int lib1_gv_uT_TextTagPositionNormal = 6;
const int lib1_gv_uT_TextTagPositionHidden = 7;
const int lib1_gv_uT_MAXEMOTES = 50;
const int lib1_gv_uT_DummyCustomValue = 35;
const int lib1_gv_uT_DPS_MaxUnits = 100;
const int lib1_gv_uT_DPS_CustomValueIndex = 34;
const int lib1_gv_uT_DL_MaxUnits = 50;
const fixed lib1_gv_tacticalDistanceFromDamage = 0.2;
const int lib1_gv_townInvalid = -2;
const int lib1_gv_townMain = -1;
const int lib1_gv_townMax = 32;
const int lib1_gv_realSelfThreat = 1;
const int lib1_gv_realThreat = 1 | 2;
const int lib1_gv_anySelfThreat = 1 | 4 | 8;
const int lib1_gv_anyThreat = 1 | 2 | 4 | 8;
const int lib1_gv_standard = 0;
const int lib1_gv_townHall = 0x00040000;
const int lib1_gv_creep = 0x00000001 | 0x00000010 | 0x00200000;
const int lib1_gv_power = 0x00000001 | 0x00000010 | 0x00008000 | 0x00200000;
const int lib1_gv_expandPower = 0x00000001 | 0x00000800 | 0x00008000 | 0x00040000;
const int lib1_gv_darkPower = 0x00000800 | 0x00008000 | 0x00040000;
const int lib1_gv_collector = 0x00000800 | 0x00008000 | 0x10000000;
const int lib1_gv_defense = 0x00000004 | 0x00001000 | 0x00002000 | 0x00008000 | 0x00040000 | 0x00080000;
const int lib1_gv_resourceDefense = 0x00000004 | 0x00040000;
const int lib1_gv_lowerableSupplyDepot = 0x08000000;
const int lib1_gv_wall = 0x00080000 | 0x0c000000;
const int lib1_gv_default = -1;
const int lib1_gv_techTg = 0x00000002 | 0x00000008 | 0x00000020 | 0x00000080 | 0x00010000 | 0x00020000;
const int lib1_gv_productionTg = 0x00000002 | 0x00000008 | 0x00010000 | 0x00020000 | 0x00100000;
const int lib1_gv_pLAYERS = 15;
const int lib1_gv_cONST_CACHE_SIZE = 1000;
const int lib1_gv_e_flagsScouting = 1;
const int lib1_gv_e_flagsDiversion = 2;
const int lib1_gv_e_flagsTimeout = 3;
const int lib1_gv_e_flagsRunScared = 4;
const int lib1_gv_e_flagsDetect = 5;
const int lib1_gv_e_flagsZergStock = 6;
const int lib1_gv_e_flagsExpanded = 7;
const int lib1_gv_e_flagsLateScout = 8;
const int lib1_gv_e_flagsClearObs = 9;
const int lib1_gv_e_flagsEarlyDefScout = 10;
const int lib1_gv_e_flagsAllowRetreat = 11;
const int lib1_gv_e_flagsAllowDropAttack = 12;

// Structures
struct lib1_gs_UT_DL_DamageFormat {
    fixed lv_real;
    int lv_integer;
    string lv_unitType;
};

// Variable Declarations
int lib1_gv_uT_InfoDialog;
int lib1_gv_uT_InfoButton;
playergroup lib1_gv_uT_UI_Hidden;
playergroup lib1_gv_uT_ButtonUsagePlayerGroup;
string[lib1_gv_uT_HotkeyStoreLength + 1][3] lib1_gv_uT_HotkeyToStoreButton;
string[lib1_gv_uT_HotkeyStoreLength + 1][3] lib1_gv_uT_HotkeyToStoreValue;
bool lib1_gv_uT_GodMode;
bool lib1_gv_uT_FastBuildCheat;
bool lib1_gv_uT_EconomyTest;
string[lib1_gv_uT_MAXEMOTES + 1] lib1_gv_uT_SC_Emoticons;
string[lib1_gv_uT_MAXEMOTES + 1] lib1_gv_uT_CS_Emoticons;
int lib1_gv_uT_Emote_Dialog;
int lib1_gv_uT_Emote_CloseButton;
timer lib1_gv_uT_SoundEmoteTimer;
fixed lib1_gv_uT_SoundEmoteCooldownLength;
int lib1_gv_uT_LighIndex;
int lib1_gv_mIssilePlayer;
unitgroup lib1_gv_uT_MissileCreators;
bool lib1_gv_uT_Camera_CameraActive;
bool[7][3] lib1_gv_uT_Camera_ActiveKeys;
fixed[3] lib1_gv_uT_Camera_Rotation;
fixed[3] lib1_gv_uT_Camera_AngleofAttack;
unit[21] lib1_gv_uT_DummyUnits;
unitgroup lib1_gv_uT_Dummies;
fixed[21][2] lib1_gv_uT_DummyDamage;
timer[21][2] lib1_gv_uT_DummyTimer;
unitgroup lib1_gv_uT_DPS_UG;
unitgroup lib1_gv_uT_DPS_UG_Summoned;
unit[lib1_gv_uT_DPS_MaxUnits + 1] lib1_gv_uT_DPS_Units;
fixed[lib1_gv_uT_DPS_MaxUnits + 1][3] lib1_gv_uT_DPS_Damage;
timer[lib1_gv_uT_DPS_MaxUnits + 1][3] lib1_gv_uT_DPS_Timer;
fixed[lib1_gv_uT_DPS_MaxUnits + 1] lib1_gv_uT_DPS_Avg;
revealer lib1_gv_uT_Revealer;
bool lib1_gv_uT_Revealed;
playergroup lib1_gv_uT_PlayersWithNumbers;
playergroup lib1_gv_uT_DL_LoggingPlayers;
int lib1_gv_uT_DL_LogDialog;
int lib1_gv_uT_DL_LogDialogItem;
int[3] lib1_gv_uT_DL_PlayerData;
lib1_gs_UT_DL_DamageFormat[lib1_gv_uT_DL_MaxUnits + 1][2][3] lib1_gv_uT_DL_Data;
int[21] lib1_gv_uT_DevCommands;
bool lib1_gv_uT_CheatUsed;
bool lib1_gv_unitToActorInitDone;
bool lib1_gv_aliasDataInitDone;
int lib1_gv_createdLists;
int lib1_gv_cAbilityArmMagazine;
int lib1_gv_cAbilityAugment;
int lib1_gv_cAbilityBehavior;
int lib1_gv_cAbilityBuild;
int lib1_gv_cAbilityEffectInstant;
int lib1_gv_cAbilityEffectTarget;
int lib1_gv_cAbilityMorph;
int lib1_gv_cAbilityRally;
int lib1_gv_cAbilityStop;
int lib1_gv_cAbilityAttack;
int lib1_gv_cAbilityMove;
int lib1_gv_cAbilityQueue;
int lib1_gv_cAbilityMerge;
int lib1_gv_cAbilityTrain;
int lib1_gv_cAbilityTransport;
int lib1_gv_cEffectApplyBehavior;
int lib1_gv_cEffectCreateHealer;
int lib1_gv_cEffectCreatePersistent;
int lib1_gv_cEffectCreateUnit;
int lib1_gv_cEffectDamage;
int lib1_gv_cEffectModifyUnit;
int lib1_gv_cEffectLaunchMissile;
int lib1_gv_cEffectSearchArea;
int lib1_gv_cEffectSet;
int lib1_gv_cEffectTeleport;
int lib1_gv_cEffectIssueOrder;
int lib1_gv_cEffectSwitch;
int lib1_gv_cValidatorCombine;
int lib1_gv_cValidatorPlayerReqirement;
int lib1_gv_cRequirementAnd;
int lib1_gv_cRequirementEq;
int lib1_gv_cRequirementOr;
int lib1_gv_cRequirementGTE;
int lib1_gv_cRequirementGT;
int lib1_gv_cRequirementCountUnit;
int lib1_gv_cRequirementCountUpgrade;
int lib1_gv_cBehaviorSpawn;
int lib1_gv_cBehaviorBuff;
int lib1_gv_cACHE_TMPEFFECTS_SIZE;
string[1001] lib1_gv_cACHE_TMPEFFECTS;
int lib1_gv_cACHESIZE_WEAPONS;
int lib1_gv_cACHESIZE_UPGRADES;
int lib1_gv_cACHESIZE_EFFECTS;
int lib1_gv_cACHESIZE_BEHAVIORS;
int lib1_gv_cACHESIZE_ABILITIES;
int lib1_gv_cACHESIZE_UNITS;
int lib1_gv_cACHESIZE_REQUIREMENT;
string[lib1_gv_cONST_CACHE_SIZE + 1] lib1_gv_cACHE_WEAPONS;
string[lib1_gv_cONST_CACHE_SIZE + 1] lib1_gv_cACHE_REQUIREMENT;
string[lib1_gv_cONST_CACHE_SIZE + 1] lib1_gv_cACHE_UPGRADES;
string[lib1_gv_cONST_CACHE_SIZE + 1] lib1_gv_cACHE_BEHAVIORS;
string[lib1_gv_cONST_CACHE_SIZE + 1] lib1_gv_cACHE_EFFECTS;
string[lib1_gv_cONST_CACHE_SIZE + 1] lib1_gv_cACHE_ABILITIES;
string[lib1_gv_cONST_CACHE_SIZE + 1] lib1_gv_cACHE_UNITS;
playergroup lib1_gv_startactiveplayers;
string[lib1_gv_pLAYERS + 1] lib1_gv_unitSelection;
string[lib1_gv_pLAYERS + 1] lib1_gv_profiles;
string[lib1_gv_pLAYERS + 1] lib1_gv_atpuabinihtsneew;
abilcmd lib1_gv_bYPASS_SEARCH_ABILITY_COMMAND;
int lib1_gv_sEARCHMODE;
string[lib1_gv_pLAYERS + 1] lib1_gv_cACHE_DISARMED;
string[lib1_gv_pLAYERS + 1] lib1_gv_cACHE_ARMED;
string lib1_gv_cACHE_DANGER_UNITS;
string lib1_gv_cACHE_DANGER_ABILITIES;
string lib1_gv_cACHE_DANGER_BEHAVIOR;
string lib1_gv_cACHE_SAFE_UNITS;
string lib1_gv_cACHE_SAFE_ABILITIES;
string lib1_gv_cACHE_SAFE_BEHAVIOR;
string lib1_gv_byPassUnits;
timer[16] lib1_gv_aIExpandTimer;
int lib1_gv_pickedai;
wave[16] lib1_gv_aIWaves;
int[16] lib1_gv_aIStage;
fixed[16] lib1_gv_nextAttackWave;

// Function Declarations
bool lib1_gf_UT_HotkeyStore (bank lp_pBank, int lp_pPlayer);
void lib1_gf_UT_HotkeyLoad (bank lp_pBank, int lp_pPlayer);
void lib1_gf_UT_UpdateUnitInfo (unit lp_pUnit);
void lib1_gf_UT_RemoveUnitInfo (unit lp_pUnit);
void lib1_gf_UT_PostStringWithIcons (string lp_pString);
void lib1_gf_UT_Init_Emoticons ();
string lib1_gf_UT_ReplaceEmotes (string lp_pString);
void lib1_gf_UT_DL_DialogCreate ();
void lib1_gf_UT_DL_DialogUpdate (int lp_pPlayerData, int lp_pPlayerShow);
void lib1_gf_UT_DL_AddHealingDamage (int lp_pIndex, int lp_pDamageHeal, int lp_pPlayer, fixed lp_pAdd_Amount);
int lib1_gf_UT_DL_SumHealingDamage (int lp_pIndex, int lp_pDamageHeal, int lp_pPlayer);
void lib1_gf_UT_DL_LogClear (int lp_pPlayer);
bool lib1_gf_UT_DevCommandsActive (int lp_pDevCommandType, int lp_pPlayer);
void lib1_gf_UT_Cheat ();
point lib1_gf_UT_FindPointWithPathingTo (point lp_vInitPoint, point lp_vTargetPoint);
string lib1_gf_UT_PointXYToString (point lp_pPoint, string lp_pDelimiter, int lp_pPrecision);
string lib1_gf_UT_SeparatedSubstring (string lp_pString, int lp_pN, string lp_pSeparator);
void lib1_gf_UT_Rise (unit lp_pUnit);
color lib1_gf_UT_HexToColor (string lp_pString);
int lib1_gf_UT_HexToInt (string lp_pString);
int lib1_gf_UT_SingleHexToInt (string lp_pString);
void lib1_gf_UT_DialogCounting (int lp_pFrom, int lp_pTo, fixed lp_pTime, int lp_pDialogLabel, text lp_pTextBefore, text lp_pTextAfter, playergroup lp_pPlayers);
int lib1_gf_UT_1StringToInteger (string lp_pLetter);
int lib1_gf_UT_3StringsToInteger (string lp_pString);
string lib1_gf_UT_AddStringsInfront (int lp_pDigits, string lp_pString, fixed lp_pInputReal, int lp_pPrecision);
text lib1_gf_UT_AddStringsInfronttext (int lp_pDigits, string lp_pString, int lp_pInputNumber);
string lib1_gf_UT_FormatInteger (int lp_pNumber, string lp_pDividingSymbol);
text lib1_gf_UT_RealSecondsIntoTimeFormat (fixed lp_pTimeSeconds);
string lib1_gf_UT_StageToString (int lp_pStage);
string lib1_gf_unit_to_actorDataName (string lp_unitType);
void lib1_gf_InitUnitTypeToActorData ();
string lib1_gf_GetMainActorofUnitType (string lp_unitType);
string lib1_gf_aliasDataCountName (string lp_alias);
string lib1_gf_aliasDataIndexName (string lp_alias, int lp_index);
void lib1_gf_InitUnitAliasData ();
int lib1_gf_TechAliasCheck (string lp_aliasUnit, string lp_checkUnit);
string lib1_gf_GetUnitAlias (string lp_unittype, int lp_alias_index);
string lib1_gf_GetUnitAliasGameLink (string lp_unittype, int lp_alias_index);
int lib1_gf_GetNumberOfUnitsInGroupIncludeAlias (string lp_unitType, unitgroup lp_unitgroup);
unitgroup lib1_gf_FilterUnitGroupIncludeAlias (string lp_unitType, unitgroup lp_unitgroup);
bool lib1_gf_TechExistsInUnitGroupIncludeAlias (string lp_unitType, unitgroup lp_unitgroup);
void lib1_gf_KillUnitWithCustomDeath (int lp_killingplayer, unit lp_unit, string lp_deathtype);
int lib1_gf_ConvertBuildFlagsToInteger (int lp_flags);
void lib1_gf_TrainUnitIfNotInQueue (int lp_player, string lp_unitType, int lp_includeAlias, int lp_count, string lp_requiredTech, int lp_requiredTechAlias, int lp_town, int lp_maxqueue);
void lib1_gf_BuildIfNotInQueue (int lp_player, string lp_unitType, int lp_includeAlias, int lp_count, string lp_requiredTech, int lp_requiredTechAlias, int lp_town, int lp_buildFlags, int lp_maxqueue);
void lib1_gf_TgBuildIfNotInQueue (int lp_player, string lp_unitType, int lp_includeAlias, int lp_count, string lp_requiredTech, int lp_requiredTechAlias, int lp_town, int lp_buildFlags, int lp_maxqueue);
void lib1_gf_ResearchIfNotInQueue (int lp_player, string lp_upgrade, int lp_count, string lp_requiredTech, int lp_requiredTechAlias);
int lib1_gf_GetTownInRegion (int lp_player, region lp_region);
void lib1_gf_OrderUnitToAttackMove (unit lp_unit, point lp_target);
order lib1_gf_CreateOrderforAI (abilcmd lp_abilCmd, int lp_player);
void lib1_gf_AddAttackWaveUnitType (int lp_count, string lp_unitType);
unitgroup lib1_gf_CreateUnitsWithDefaultFacing (int lp_count, string lp_type, int lp_style, int lp_player, point lp_p);
unitgroup lib1_gf_CreateUnitsAtPoint2 (int lp_count, string lp_type, int lp_flags, int lp_player, point lp_p);
unitgroup lib1_gf_UnitCreateFacingPoint (int lp_count, string lp_type, int lp_flags, int lp_player, point lp_pos, point lp_facing);
string lib1_gf_ListCreate ();
void lib1_gf_ListCreateWithName (string lp_list);
void lib1_gf_ListDestroy (string lp_list);
void lib1_gf_ListClear (string lp_list);
void lib1_gf_ListPopBack (string lp_list);
int lib1_gf_ListSize (string lp_list);
bool lib1_gf_ListIsEmpty (string lp_list);
string lib1_gf_ListGetDatabaseName (string lp_arrayName, int lp_index);
void lib1_gf_ListCreateIfNotExists (string lp_list);
void lib1_gf_ListStringCopy (string lp_source, string lp_target);
string lib1_gf_ListStringGet (string lp_list, int lp_index);
int lib1_gf_ListStringIndexOf (string lp_list, string lp_value);
bool lib1_gf_ListStringIncludes (string lp_list, string lp_value);
void lib1_gf_ListStringSet (string lp_list, int lp_index, string lp_value);
void lib1_gf_ListStringPush (string lp_list, string lp_addedValue);
void lib1_gf_ListStringInclude (string lp_list, string lp_addedValue);
void lib1_gf_ListStringInsertAt (string lp_list, int lp_index, string lp_value);
void lib1_gf_ListStringRemoveAt (string lp_list, int lp_index);
void lib1_gf_ListStringExclude (string lp_list, string lp_value);
text lib1_gf_ListStringtoText (string lp_list);
void lib1_gf_MapStringSet (string lp_map, string lp_index, string lp_actor);
string lib1_gf_MapStringGet (string lp_map, string lp_index);
string lib1_gf_MapStringIndexes (string lp_unit);
bool lib1_gf_MapStringIncludes (string lp_unit, string lp_index);
void lib1_gf_TacticalAIFilterSortByLife (aifilter lp_filter, fixed lp_damage, fixed lp_distance);
void lib1_gf_ClearArmedCache (int lp_player);
void lib1_gf_Armunit (int lp_player, unit lp_unit);
void lib1_gf_Disarmunit (int lp_player, unit lp_unit);
void lib1_gf_ArmUnitType (int lp_player, string lp_unit);
void lib1_gf_Disarmunittype (int lp_player, string lp_unit);
bool lib1_gf_UnitTypeisArmed (int lp_player, string lp_unit);
bool lib1_gf_UnitTypeisDisArmed (int lp_player, string lp_unit);
bool lib1_gf_BehaviorisDetector (int lp_player, string lp_behavior);
bool lib1_gf_AbilityIsDetector (int lp_player, string lp_ability);
bool lib1_gf_UnitisDetector (int lp_player, string lp_unitType);
bool lib1_gf_FilterEnemyisExcluded (string lp_filter);
bool lib1_gf_UnitIsDanger (int lp_player, string lp_unit);
bool lib1_gf_AbilityIsDanger (int lp_player, string lp_ability);
bool lib1_gf_BehaviorisDanger (int lp_player, string lp_behavior);
void lib1_gf_ClearCache ();
void lib1_gf_CacheUnit (int lp_player, string lp_unit, bool lp_scan);
void lib1_gf_CheckAbilityCommand (int lp_player, string lp_ability, int lp_command);
void lib1_gf_CacheUpgrade (int lp_player, string lp_upgrade, bool lp_scan);
void lib1_gf_CacheAbility (int lp_player, string lp_ability, bool lp_scan);
void lib1_gf_CacheWeapon (int lp_player, string lp_weapon);
void lib1_gf_CacheBehavior (int lp_player, string lp_behavior);
void lib1_gf_CacheEffect (int lp_player, string lp_effect);
void lib1_gf_CacheValidator (int lp_player, string lp_validator);
void lib1_gf_CacheRequirement (int lp_player, string lp_requirement);
void lib1_gf_CacheRequirementNode (int lp_player, string lp_requirementNode);
bool lib1_gf_UnitIsAntiAir (string lp_unit, int lp_player);
bool lib1_gf_UnitIsAir (string lp_unit, int lp_player);
void lib1_gf_ResolveUnitAffectedUpgrades (int lp_player);
bool lib1_gf_UpgradeIsUseful (int lp_player, string lp_upgrade);
bool lib1_gf_AbilityIsIgnored (int lp_player, string lp_ability);
string lib1_gf_GetUnitRace (string lp_unit);
string lib1_gf_GetUpgradeRace (string lp_upgrade);
bool lib1_gf_BehaviorUsesAbilityCommand (int lp_player, string lp_behavior, abilcmd lp_abil);
bool lib1_gf_ByPassBehavior (int lp_player, string lp_behavior);
bool lib1_gf_ByPassEffect (int lp_player, string lp_effect);
bool lib1_gf_ByPassAbility (int lp_player, string lp_ability);
bool lib1_gf_StructureIsFlying (unit lp_unit);
bool lib1_gf_Canbebuilton (unit lp_unit, point lp_point);
bool lib1_gf_Canbebuiltonabranch (point lp_point, int lp_number);
point lib1_gf_Thenearestbuildablepointtothepoint (point lp_point, int lp_numberofscales);
unitgroup lib1_gf_UnitsInRegionWithSpecifiedTypes (int lp_player, string lp_units, region lp_region);
point lib1_gf_GetExpansionpoint (int lp_player);
void lib1_gf_SetupAIUnits (int lp_player);
void lib1_gf_SetupAIFlags (int lp_player);
void lib1_gf_AITechInfo (int lp_player);
void lib1_gf_CleanUp (int lp_player);
void lib1_gf_Attack (int lp_player);
void lib1_gf_AddStockIfAvailable (int lp_player, int lp_count, string lp_what);
void lib1_gf_AddEmergencyStockIfAvailable (int lp_player, int lp_count, string lp_what, bool lp_onlyIfTechInPlace);
bool lib1_gf_AIIsExpandingOrHasExpanded (int lp_player);
bool lib1_gf_AINeedsDefending (int lp_player);
void lib1_gf_StockWorkers (int lp_player, int lp_count, string lp_worker);
bool lib1_gf_MacroExpand (int lp_player);
void lib1_gf_BasicDefensesStock (int lp_player);
bool lib1_gf_UnitIsDropOff (int lp_player, string lp_unitType);

// Trigger Declarations
trigger lib1_gt_UT_InfoSave;
trigger lib1_gt_UT_Info;
trigger lib1_gt_UT_InfoButton;
trigger lib1_gt_UT_InfoCreate;
trigger lib1_gt_UT_UI;
trigger lib1_gt_UT_UI_CtrlH;
trigger lib1_gt_UT_ButtonMonitor;
trigger lib1_gt_UT_ButtonUsage;
trigger lib1_gt_UT_HotkeyChange;
trigger lib1_gt_UT_Godmode;
trigger lib1_gt_UT_Godmode_unit_created;
trigger lib1_gt_UT_UnitInfo;
trigger lib1_gt_UT_UnitInfoUpdate;
trigger lib1_gt_UT_FastConstruction;
trigger lib1_gt_UT_FastTrain;
trigger lib1_gt_UT_FastResearch;
trigger lib1_gt_UT_FastArrm;
trigger lib1_gt_UT_FastRevive;
trigger lib1_gt_UT_FastBuild;
trigger lib1_gt_UT_ToggleEco;
trigger lib1_gt_UT_EconomyValue;
trigger lib1_gt_UT_WorkerSaturation;
trigger lib1_gt_UT_ListEmotes;
trigger lib1_gt_UT_Emote_ButtonClicked;
trigger lib1_gt_UT_Debug;
trigger lib1_gt_AbilityUsed;
trigger lib1_gt_UnitCreated;
trigger lib1_gt_UnitDied;
trigger lib1_gt_UnitRevived;
trigger lib1_gt_EffectUsed;
trigger lib1_gt_BehaviorChanged;
trigger lib1_gt_EffectDealingDamage;
trigger lib1_gt_UT_Trace;
trigger lib1_gt_UT_Tracing;
trigger lib1_gt_UT_DeTracing;
trigger lib1_gt_UT_CopyPaste;
trigger lib1_gt_UT_CTRLC;
trigger lib1_gt_UT_CTRLV;
trigger lib1_gt_UT_PathCheck;
trigger lib1_gt_UT_PathCheckTAB;
trigger lib1_gt_UT_Light;
trigger lib1_gt_UT_Plus;
trigger lib1_gt_UT_Minus;
trigger lib1_gt_UT_MissileMovers;
trigger lib1_gt_UT_MissileCreated;
trigger lib1_gt_UT_Height;
trigger lib1_gt_UT_AttackSpeed;
trigger lib1_gt_UT_Life;
trigger lib1_gt_UT_Energy;
trigger lib1_gt_UT_MovementSpeed;
trigger lib1_gt_UT_Acceleration;
trigger lib1_gt_UT_Range;
trigger lib1_gt_UT_ARange;
trigger lib1_gt_UT_Armor;
trigger lib1_gt_UT_TintColor;
trigger lib1_gt_UT_Scale;
trigger lib1_gt_UT_TimeScale;
trigger lib1_gt_UT_ActorMsg;
trigger lib1_gt_UT_AirGround;
trigger lib1_gt_UT_Camera_TurnOnOff;
trigger lib1_gt_UT_Camera_Reset;
trigger lib1_gt_UT_Camera_Top;
trigger lib1_gt_UT_Camera_KeyUp;
trigger lib1_gt_UT_Camera_KeyDown;
trigger lib1_gt_UT_Camera_PeriodicUpdate;
trigger lib1_gt_UT_Dummy;
trigger lib1_gt_UT_DummyTakesDamage;
trigger lib1_gt_UT_DummyUpdate;
trigger lib1_gt_UT_DummyDestroyed;
trigger lib1_gt_UT_DPS;
trigger lib1_gt_UT_DPS_Stop;
trigger lib1_gt_UT_DPS_DealsDamage;
trigger lib1_gt_UT_DPS_Summon;
trigger lib1_gt_UT_DPS_Dies;
trigger lib1_gt_UT_DPS_PauseGlobal;
trigger lib1_gt_UT_Vision;
trigger lib1_gt_UT_Numberstoggle;
trigger lib1_gt_UT_NumbersDamage;
trigger lib1_gt_UT_NumbersHeal;
trigger lib1_gt_UT_DL_LogDisplay;
trigger lib1_gt_UT_DL_PeriodicUpdate;
trigger lib1_gt_UT_DL_DamageLogging;
trigger lib1_gt_UT_DL_HealLogging;
trigger lib1_gt_UT_EnableDevCommands;
trigger lib1_gt_UT_DisableDevCommandsforally;
trigger lib1_gt_UT_Rad;
trigger lib1_gt_UT_XP;
trigger lib1_gt_UT_ListDead;
trigger lib1_gt_UT_ListHidden;
trigger lib1_gt_UT_ListMissile;
trigger lib1_gt_UT_ListAll;
trigger lib1_gt_UT_Teleport;
trigger lib1_gt_UT_Restart;
trigger lib1_gt_UT_GetID;
trigger lib1_gt_UT_Restore;
trigger lib1_gt_UT_Pause;
trigger lib1_gt_UT_Money;
trigger lib1_gt_UT_Look;
trigger lib1_gt_UT_sight;
trigger lib1_gt_UT_KillUnits;
trigger lib1_gt_UT_Remove;
trigger lib1_gt_UT_PauseAI;
trigger lib1_gt_UT_Speed;
trigger lib1_gt_UT_Supply;
trigger lib1_gt_UT_Give;
trigger lib1_gt_UT_SwitchOwner;
trigger lib1_gt_UT_Cost;
trigger lib1_gt_UT_clearscreen;
trigger lib1_gt_UT_ClearEnemy;
trigger lib1_gt_UT_SpawnUnits;
trigger lib1_gt_UT_Control;
trigger lib1_gt_UT_Resource;
trigger lib1_gt_UpgradeChanged;
trigger lib1_gt_CM_DebugApplySkin;
trigger lib1_gt_DebugMode;
trigger lib1_gt_P4harvest;
trigger lib1_gt_P4rally;
trigger lib1_gt_OfflineDebug;
trigger lib1_gt_UEDAIController;
trigger lib1_gt_TerranAIController;
trigger lib1_gt_GenetronAIController;
trigger lib1_gt_ChildAIController;
trigger lib1_gt_ChildAIController2;
trigger lib1_gt_StockAIController;

// Library Initialization
void lib1_InitVariables ();

//--------------------------------------------------------------------------------------------------
// Library: Tangor AI Lib
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1_InitLibraries () {
    libNtve_InitVariables();
    libHots_InitVariables();
    libARMP_InitVariables();
}

// Variable Initialization
bool lib1_InitVariables_completed = false;

void lib1_InitVariables () {
    int init_i;
    int init_j;

    if (lib1_InitVariables_completed) {
        return;
    }

    lib1_InitVariables_completed = true;

    lib1_gv_uT_InfoDialog = c_invalidDialogId;
    lib1_gv_uT_InfoButton = c_invalidDialogControlId;
    lib1_gv_uT_UI_Hidden = PlayerGroupEmpty();
    lib1_gv_uT_ButtonUsagePlayerGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= lib1_gv_uT_HotkeyStoreLength; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            lib1_gv_uT_HotkeyToStoreButton[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= lib1_gv_uT_HotkeyStoreLength; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            lib1_gv_uT_HotkeyToStoreValue[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= lib1_gv_uT_MAXEMOTES; init_i += 1) {
        lib1_gv_uT_SC_Emoticons[init_i] = "";
    }
    for (init_i = 0; init_i <= lib1_gv_uT_MAXEMOTES; init_i += 1) {
        lib1_gv_uT_CS_Emoticons[init_i] = "";
    }
    lib1_gv_uT_Emote_Dialog = c_invalidDialogId;
    lib1_gv_uT_Emote_CloseButton = c_invalidDialogControlId;
    lib1_gv_uT_SoundEmoteTimer = TimerCreate();
    lib1_gv_uT_MissileCreators = UnitGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_uT_Camera_Rotation[init_i] = CameraInfoGetValue(CameraInfoDefault(), c_cameraValueYaw);
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_uT_Camera_AngleofAttack[init_i] = CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch);
    }
    lib1_gv_uT_Dummies = UnitGroupEmpty();
    for (init_i = 0; init_i <= 20; init_i += 1) {
        for (init_j = 0; init_j <= 1; init_j += 1) {
            lib1_gv_uT_DummyTimer[init_i][init_j] = TimerCreate();
        }
    }
    lib1_gv_uT_DPS_UG = UnitGroupEmpty();
    lib1_gv_uT_DPS_UG_Summoned = UnitGroupEmpty();
    for (init_i = 0; init_i <= lib1_gv_uT_DPS_MaxUnits; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            lib1_gv_uT_DPS_Timer[init_i][init_j] = TimerCreate();
        }
    }
    lib1_gv_uT_PlayersWithNumbers = PlayerGroupEmpty();
    lib1_gv_uT_DL_LoggingPlayers = PlayerGroupEmpty();
    lib1_gv_uT_DL_LogDialog = c_invalidDialogId;
    lib1_gv_uT_DL_LogDialogItem = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_uT_DL_PlayerData[init_i] = 1;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        lib1_gv_uT_DevCommands[init_i] = lib1_ge_UT_DevCommandTypes_Gamealtering;
    }
    lib1_gv_cAbilityArmMagazine = CatalogEntryClass(c_gameCatalogAbil, "CarrierHangar");
    lib1_gv_cAbilityAugment = CatalogEntryClass(c_gameCatalogBehavior, "SpawnLarva");
    lib1_gv_cAbilityBehavior = CatalogEntryClass(c_gameCatalogAbil, "BansheeCloak");
    lib1_gv_cAbilityBuild = CatalogEntryClass(c_gameCatalogAbil, "ProtossBuild");
    lib1_gv_cAbilityEffectInstant = CatalogEntryClass(c_gameCatalogAbil, "Overcharge");
    lib1_gv_cAbilityEffectTarget = CatalogEntryClass(c_gameCatalogAbil, "BlindingCloud");
    lib1_gv_cAbilityMorph = CatalogEntryClass(c_gameCatalogAbil, "VoidRaySwarmDamageBoost");
    lib1_gv_cAbilityRally = CatalogEntryClass(c_gameCatalogAbil, "RallyHatchery");
    lib1_gv_cAbilityStop = CatalogEntryClass(c_gameCatalogAbil, "stop2");
    lib1_gv_cAbilityAttack = CatalogEntryClass(c_gameCatalogAbil, "attack");
    lib1_gv_cAbilityMove = CatalogEntryClass(c_gameCatalogAbil, "move");
    lib1_gv_cAbilityQueue = CatalogEntryClass(c_gameCatalogAbil, "que5");
    lib1_gv_cAbilityMerge = CatalogEntryClass(c_gameCatalogAbil, "ArchonWarp");
    lib1_gv_cAbilityTrain = CatalogEntryClass(c_gameCatalogAbil, "StarportTrain");
    lib1_gv_cAbilityTransport = CatalogEntryClass(c_gameCatalogAbil, "WarpPrismTransport");
    lib1_gv_cEffectApplyBehavior = CatalogEntryClass(c_gameCatalogEffect, "CollapsibleRockTowerDiagonalCPMakeInvulnerable");
    lib1_gv_cEffectCreateHealer = CatalogEntryClass(c_gameCatalogEffect, "BatteryOverchargeCreateHealer");
    lib1_gv_cEffectCreatePersistent = CatalogEntryClass(c_gameCatalogEffect, "VortexCreatePersistent");
    lib1_gv_cEffectCreateUnit = CatalogEntryClass(c_gameCatalogEffect, "BroodlingEscortCU");
    lib1_gv_cEffectDamage = CatalogEntryClass(c_gameCatalogEffect, "VolatileBurstFriendlyBuildingDamage");
    lib1_gv_cEffectModifyUnit = CatalogEntryClass(c_gameCatalogEffect, "RescueModifyUnit");
    lib1_gv_cEffectLaunchMissile = CatalogEntryClass(c_gameCatalogEffect, "CorruptionBombLaunchMissile");
    lib1_gv_cEffectSearchArea = CatalogEntryClass(c_gameCatalogEffect, "CollapsibleRockTowerRampDiagonalConjoinedSearch");
    lib1_gv_cEffectSet = CatalogEntryClass(c_gameCatalogEffect, "VolatileBurst");
    lib1_gv_cEffectTeleport = CatalogEntryClass(c_gameCatalogEffect, "AdeptPhaseShiftTeleport");
    lib1_gv_cEffectIssueOrder = CatalogEntryClass(c_gameCatalogEffect, "PurifyIssueOrder");
    lib1_gv_cEffectSwitch = CatalogEntryClass(c_gameCatalogEffect, "BattlecruiserDamageSwitch");
    lib1_gv_cValidatorCombine = CatalogEntryClass(c_gameCatalogValidator, "250mmCannonValidators");
    lib1_gv_cValidatorPlayerReqirement = CatalogEntryClass(c_gameCatalogValidator, "BattlecruiserUpgraded");
    lib1_gv_cRequirementAnd = 7;
    lib1_gv_cRequirementEq = CatalogEntryClass(c_gameCatalogRequirementNode, "EqCountUpgradeZergMissileWeaponsLevel3QueuedOrBetter0");
    lib1_gv_cRequirementOr = CatalogEntryClass(c_gameCatalogRequirementNode, "OrBehaviorHurricaneMissileCompleteOnlyAtUnitBehaviorYamatoCompleteOnlyAtUnit");
    lib1_gv_cRequirementGTE = CatalogEntryClass(c_gameCatalogRequirementNode, "GTE3238024024CountBehaviorArmorpiercingModeCompleteOnlyAtUnit1");
    lib1_gv_cRequirementGT = CatalogEntryClass(c_gameCatalogRequirementNode, "GTCountBehaviorLocustSpawnDummyCompleteOnlyAtUnit0");
    lib1_gv_cRequirementCountUnit = 24;
    lib1_gv_cRequirementCountUpgrade = 25;
    lib1_gv_cBehaviorSpawn = CatalogEntryClass(c_gameCatalogBehavior, "SpawnLarva");
    lib1_gv_cBehaviorBuff = CatalogEntryClass(c_gameCatalogBehavior, "AdeptPhaseShiftCaster");
    lib1_gv_startactiveplayers = PlayerGroupActive();
    lib1_gv_sEARCHMODE = lib1_ge_SearchMode_Agressive;
    for (init_i = 0; init_i <= lib1_gv_pLAYERS; init_i += 1) {
        lib1_gv_cACHE_DISARMED[init_i] = " ";
    }
    for (init_i = 0; init_i <= lib1_gv_pLAYERS; init_i += 1) {
        lib1_gv_cACHE_ARMED[init_i] = " ";
    }
    lib1_gv_cACHE_DANGER_UNITS = " ";
    lib1_gv_cACHE_DANGER_ABILITIES = " ";
    lib1_gv_cACHE_DANGER_BEHAVIOR = " ";
    lib1_gv_cACHE_SAFE_UNITS = " ";
    lib1_gv_cACHE_SAFE_ABILITIES = " ";
    lib1_gv_cACHE_SAFE_BEHAVIOR = " ";
    lib1_gv_byPassUnits = "ByPassUnitsList";
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lib1_gv_aIExpandTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lib1_gv_aIStage[init_i] = 1;
    }
}

// Presets
// Functions
bool lib1_gf_UT_HotkeyStore (bank lp_pBank, int lp_pPlayer) {
    // Variable Declarations
    int lv_vIdx;
    bool lv_vStored;

    // Automatic Variable Declarations
    const int auto53CA4EDF_ae = lib1_gv_uT_HotkeyStoreLength;
    const int auto53CA4EDF_ai = 1;

    // Variable Initialization

    // Implementation
    lv_vIdx = 0;
    for ( ; ( (auto53CA4EDF_ai >= 0 && lv_vIdx <= auto53CA4EDF_ae) || (auto53CA4EDF_ai < 0 && lv_vIdx >= auto53CA4EDF_ae) ) ; lv_vIdx += auto53CA4EDF_ai ) {
        if ((lib1_gv_uT_HotkeyToStoreButton[lv_vIdx][lp_pPlayer] != "")) {
            BankValueSetFromString(lp_pBank, "ModifiedHotkeys", lib1_gv_uT_HotkeyToStoreButton[lv_vIdx][lp_pPlayer], lib1_gv_uT_HotkeyToStoreValue[lv_vIdx][lp_pPlayer]);
            lib1_gv_uT_HotkeyToStoreButton[lv_vIdx][lp_pPlayer] = "";
            lib1_gv_uT_HotkeyToStoreValue[lv_vIdx][lp_pPlayer] = "";
            lv_vStored = true;
        }

    }
    return lv_vStored;
}

void lib1_gf_UT_HotkeyLoad (bank lp_pBank, int lp_pPlayer) {
    // Variable Declarations
    string lv_vButtonName;
    string lv_vHotkeyValue;

    // Automatic Variable Declarations
    int autoEEF3E224_ae;
    int autoEEF3E224_var;

    // Variable Initialization
    lv_vButtonName = "";
    lv_vHotkeyValue = "";

    // Implementation
    autoEEF3E224_ae = BankKeyCount(lp_pBank, "ModifiedHotkeys");
    autoEEF3E224_var = 1;
    for ( ; autoEEF3E224_var <= autoEEF3E224_ae; autoEEF3E224_var += 1 ) {
        lv_vButtonName = BankKeyName(lp_pBank, "ModifiedHotkeys", (autoEEF3E224_var-1));
        lv_vHotkeyValue = BankValueGetAsString(lp_pBank, "ModifiedHotkeys", lv_vButtonName);
        TextExpressionSetToken("Param/Expression/lib_1_26177C85", "A", StringToText(lv_vButtonName));
        TextExpressionSetToken("Param/Expression/lib_1_26177C85", "B", StringToText(lv_vHotkeyValue));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_26177C85"), false);
        CatalogFieldValueSet(c_gameCatalogButton, (lv_vButtonName), "Hotkey", lp_pPlayer, ("Letter/" + lv_vHotkeyValue));
    }
}

void lib1_gf_UT_UpdateUnitInfo (unit lp_pUnit) {
    // Variable Declarations
    string lv_vBeh;
    text lv_vBehNumber;
    text lv_vText;
    int lv_vTextTagNormal;
    int lv_vTextTagHidden;
    text lv_vDuration;

    // Automatic Variable Declarations
    unit autoAABB3701_u;
    int autoAABB3701_i;

    // Variable Initialization
    lv_vTextTagNormal = libHots_gf_TextTagForUnit(lp_pUnit, lib1_gv_uT_TextTagPositionNormal);
    lv_vTextTagHidden = libHots_gf_TextTagForUnit(lp_pUnit, lib1_gv_uT_TextTagPositionHidden);

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_1_BDBCD62F", "A", StringToText((UnitGetType(lp_pUnit))));
    TextExpressionSetToken("Param/Expression/lib_1_BDBCD62F", "B", IntToText(UnitGetOwner(lp_pUnit)));
    TextExpressionSetToken("Param/Expression/lib_1_A0AA3032", "A", TextWithColor(TextExpressionAssemble("Param/Expression/lib_1_BDBCD62F"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lp_pUnit), false))));
    TextExpressionSetToken("Param/Expression/lib_1_A0AA3032", "B", FixedToText(PointGetX(UnitGetPosition(lp_pUnit)), 1));
    TextExpressionSetToken("Param/Expression/lib_1_A0AA3032", "C", FixedToText(PointGetY(UnitGetPosition(lp_pUnit)), 1));
    lv_vText = TextExpressionAssemble("Param/Expression/lib_1_A0AA3032");
    if ((UnitFilterMatch(lp_pUnit, 1, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), 0, 0)) == true)) {
        TextExpressionSetToken("Param/Expression/lib_1_2D13A06C", "B", lv_vText);
        lv_vText = TextExpressionAssemble("Param/Expression/lib_1_2D13A06C");
    }

    autoAABB3701_u = lp_pUnit;
    autoAABB3701_i = 1;
    for ( ; autoAABB3701_i <= UnitBehaviorCountAll(autoAABB3701_u) ; autoAABB3701_i += BoolToInt(lv_vBeh == UnitBehaviorGet(autoAABB3701_u, autoAABB3701_i)) ) {
        lv_vBeh = UnitBehaviorGet(autoAABB3701_u, autoAABB3701_i);
        if ((UnitBehaviorCount(lp_pUnit, lv_vBeh) > 1)) {
            TextExpressionSetToken("Param/Expression/lib_1_FE3922A3", "A", IntToText(UnitBehaviorCount(lp_pUnit, lv_vBeh)));
            lv_vBehNumber = TextExpressionAssemble("Param/Expression/lib_1_FE3922A3");
        }
        else {
            lv_vBehNumber = StringToText("");
        }
        if ((UnitBehaviorDuration(lp_pUnit, lv_vBeh) > 0.0) && (UnitBehaviorDuration(lp_pUnit, lv_vBeh) < 32000.0)) {
            TextExpressionSetToken("Param/Expression/lib_1_862025E1", "A", FixedToText(UnitBehaviorDuration(lp_pUnit, lv_vBeh), 0));
            lv_vDuration = TextExpressionAssemble("Param/Expression/lib_1_862025E1");
        }
        else {
            lv_vDuration = StringToText("");
        }
        if ((UnitBehaviorEnabled(lp_pUnit, lv_vBeh) == false)) {
            TextExpressionSetToken("Param/Expression/lib_1_5362D95D", "B", lv_vText);
            TextExpressionSetToken("Param/Expression/lib_1_5362D95D", "A", StringToText((lv_vBeh)));
            TextExpressionSetToken("Param/Expression/lib_1_5362D95D", "C", lv_vBehNumber);
            TextExpressionSetToken("Param/Expression/lib_1_5362D95D", "D", lv_vDuration);
            lv_vText = TextExpressionAssemble("Param/Expression/lib_1_5362D95D");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_1_ED426392", "B", lv_vText);
            TextExpressionSetToken("Param/Expression/lib_1_ED426392", "A", StringToText((lv_vBeh)));
            TextExpressionSetToken("Param/Expression/lib_1_ED426392", "C", lv_vBehNumber);
            TextExpressionSetToken("Param/Expression/lib_1_ED426392", "D", lv_vDuration);
            lv_vText = TextExpressionAssemble("Param/Expression/lib_1_ED426392");
        }
    }
    if ((UnitFilterMatch(lp_pUnit, 1, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), 0, 0)) == false)) {
        TextTagShow(lv_vTextTagHidden, PlayerGroupAll(), false);
        if ((lv_vTextTagNormal == c_textTagNone)) {
            TextTagCreate(lv_vText, 24, UnitGetPosition(lp_pUnit), 2.0, true, false, PlayerGroupAll());
            TextTagSetBackgroundImage(TextTagLastCreated(), "50Black.dds", false);
            TextTagShowBackground(TextTagLastCreated(), true);
            TextTagSetFontSize(TextTagLastCreated(), 16);
            TextTagSetAlignment(TextTagLastCreated(), c_alignLeft, c_alignCenter);
            TextTagSetBackgroundBorderSize(TextTagLastCreated(), 0.1, 0.1);
            TextTagSetTextShadow(TextTagLastCreated(), true);
            libHots_gf_StoreTextTagForUnit(lp_pUnit, lib1_gv_uT_TextTagPositionNormal, TextTagLastCreated());
            TextTagAttachToUnit(TextTagLastCreated(), lp_pUnit, 2.0);
        }
        else {
            TextTagShow(lv_vTextTagNormal, PlayerGroupAll(), true);
            TextTagSetText(lv_vTextTagNormal, lv_vText);
        }
    }
    else {
        TextTagShow(lv_vTextTagNormal, PlayerGroupAll(), false);
        if ((lv_vTextTagHidden == c_textTagNone)) {
            TextTagCreate(lv_vText, 24, UnitGetPosition(lp_pUnit), 2.0, true, false, PlayerGroupAll());
            TextTagSetBackgroundImage(TextTagLastCreated(), "50Black.dds", false);
            TextTagShowBackground(TextTagLastCreated(), true);
            TextTagSetFontSize(TextTagLastCreated(), 16);
            TextTagSetAlignment(TextTagLastCreated(), c_alignLeft, c_alignCenter);
            TextTagSetBackgroundBorderSize(TextTagLastCreated(), 0.1, 0.1);
            TextTagSetTextShadow(TextTagLastCreated(), true);
            libHots_gf_StoreTextTagForUnit(lp_pUnit, lib1_gv_uT_TextTagPositionHidden, TextTagLastCreated());
        }
        else {
            TextTagShow(lv_vTextTagHidden, PlayerGroupAll(), true);
            TextTagSetText(lv_vTextTagHidden, lv_vText);
            TextTagSetPosition(lv_vTextTagHidden, UnitGetPosition(lp_pUnit), 2.0);
        }
    }
}

void lib1_gf_UT_RemoveUnitInfo (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    TextTagShow(libHots_gf_TextTagForUnit(lp_pUnit, lib1_gv_uT_TextTagPositionHidden), PlayerGroupAll(), false);
    TextTagShow(libHots_gf_TextTagForUnit(lp_pUnit, lib1_gv_uT_TextTagPositionNormal), PlayerGroupAll(), false);
}

trigger auto_lib1_gf_UT_PostStringWithIcons_Trigger = null;
string auto_lib1_gf_UT_PostStringWithIcons_lp_pString;

void lib1_gf_UT_PostStringWithIcons (string lp_pString) {
    auto_lib1_gf_UT_PostStringWithIcons_lp_pString = lp_pString;

    if (auto_lib1_gf_UT_PostStringWithIcons_Trigger == null) {
        auto_lib1_gf_UT_PostStringWithIcons_Trigger = TriggerCreate("auto_lib1_gf_UT_PostStringWithIcons_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_UT_PostStringWithIcons_Trigger, false, false);
}

bool auto_lib1_gf_UT_PostStringWithIcons_TriggerFunc (bool testConds, bool runActions) {
    string lp_pString = auto_lib1_gf_UT_PostStringWithIcons_lp_pString;

    // Variable Declarations
    string lv_vString;
    string lv_vTempString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vString = lib1_gf_UT_ReplaceEmotes(lp_pString);
    lv_vTempString = lv_vString;

    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText(lv_vString));
    while (true) {
        if ((StringContains(lv_vTempString, "*honk*", c_stringAnywhere, c_stringNoCase) == true)) {
            if ((TimerGetRemaining(lib1_gv_uT_SoundEmoteTimer) > 0.0)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_4796EC99"));
                break;
            }

            Wait(RandomFixed(0.1, 0.5), c_timeGame);
            SoundPlayForPlayer(SoundLink("Honk", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            lv_vTempString = StringReplaceWord(lv_vTempString, "*honk*", "", 1, c_stringNoCase);
            if ((lib1_gv_uT_SoundEmoteCooldownLength > 0.0)) {
                TimerStart(lib1_gv_uT_SoundEmoteTimer, lib1_gv_uT_SoundEmoteCooldownLength, false, c_timeGame);
            }

            Wait(RandomFixed(0.1, 0.5), c_timeGame);
        }
        else {
            break;
        }
    }
    return true;
}

void lib1_gf_UT_Init_Emoticons () {
    int init_i;

    // Variable Declarations
    string[101] lv_vEmoticons;
    int lv_vIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 100; init_i += 1) {
        lv_vEmoticons[init_i] = "";
    }

    // Implementation
    lv_vIndex = 0;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "angry";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "baneling";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "brew";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "poo";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "cannon";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "cool";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "depot";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "drone";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "flex";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "gas";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "gg";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "glhf";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "gminerals";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "happy";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "infested";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "inlove";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "locust";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "minerals";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "mochi";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "nuke";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "overlord";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "pheart";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "bunker";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "probe";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "protoss";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "pylon";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "random";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "rofl";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "sad";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "sc2";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "scv";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "silly";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "skull";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "snipe";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "speechless";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "surprised";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "symbiote";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "terran";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "theart";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "thumbsdown";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "thumbsup";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "zerg";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "zheart";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "zipped";
    lv_vIndex = 0;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "BabyRage";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "BibleThump";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "BlessRNG";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "coronaS";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "DansGame";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "FailFish";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "FeelsBadMan";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "FeelsGoodMan";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "FeelsOkayMan";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "FrankerZ";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "GivePLZ";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "HYPERS";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "Kappa";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "LUL";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "monkaGun";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "monkaS";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "MrDestructoid";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "NotLikeThis";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "OhMyDog";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "OMEGALUL";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "PepeHands";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "PogChamp";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "POGGERS";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "ResidentSleeper";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "SeemsGood";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "TakeNRG";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "TheThing";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "Thonk";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "weSmart";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "BrokeBack";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "4Head";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "Catalisk";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "Kreygasm";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "OpieOP";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "WutFace";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "Rfrogdurr";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "peepopotat";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "rip";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "goose";
}

string lib1_gf_UT_ReplaceEmotes (string lp_pString) {
    // Variable Declarations
    string lv_vString;
    const string lv_cSCSTART = "<img path=\"Assets\\Textures\\ui_emoticons_";
    const string lv_cTWSTART = "<img path=\"TwitchEmotes\\";
    const string lv_cEND = ".dds\" alignment=\"absolutemiddle\" />";

    // Automatic Variable Declarations
    const int autoCDFFBDA9_ae = lib1_gv_uT_MAXEMOTES;
    int autoCDFFBDA9_var;
    const int autoD8691C08_ae = lib1_gv_uT_MAXEMOTES;
    int autoD8691C08_var;

    // Variable Initialization
    lv_vString = lp_pString;

    // Implementation
    autoCDFFBDA9_var = 0;
    for ( ; autoCDFFBDA9_var <= autoCDFFBDA9_ae; autoCDFFBDA9_var += 1 ) {
        if ((lib1_gv_uT_SC_Emoticons[autoCDFFBDA9_var] != "")) {
            lv_vString = StringReplaceWord(lv_vString, ("(" + lib1_gv_uT_SC_Emoticons[autoCDFFBDA9_var] + ")"), (lv_cSCSTART + lib1_gv_uT_SC_Emoticons[autoCDFFBDA9_var] + lv_cEND), c_stringReplaceAll, c_stringNoCase);
        }

    }
    autoD8691C08_var = 0;
    for ( ; autoD8691C08_var <= autoD8691C08_ae; autoD8691C08_var += 1 ) {
        if ((lib1_gv_uT_CS_Emoticons[autoD8691C08_var] != "")) {
            lv_vString = StringReplaceWord(lv_vString, (" " + lib1_gv_uT_CS_Emoticons[autoD8691C08_var]), (" " + lv_cTWSTART + lib1_gv_uT_CS_Emoticons[autoD8691C08_var] + lv_cEND), c_stringReplaceAll, c_stringCase);
        }

    }
    return lv_vString;
}

void lib1_gf_UT_DL_DialogCreate () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_uT_DL_LogDialog == c_invalidDialogId)) {
        DialogCreate(960, 1000, c_anchorTopLeft, 0, 250, true);
        DialogSetImageVisible(DialogLastCreated(), false);
        lib1_gv_uT_DL_LogDialog = DialogLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 960, 500, c_anchorTop, 20, 50, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
        lib1_gv_uT_DL_LogDialogItem = DialogControlLastCreated();
    }

}

void lib1_gf_UT_DL_DialogUpdate (int lp_pPlayerData, int lp_pPlayerShow) {
    // Variable Declarations
    text lv_vText;
    int lv_vTotalDamage;
    fixed lv_vTotalHeal;
    int lv_vLines;
    fixed lv_vPercent;

    // Automatic Variable Declarations
    const int auto05FEF00A_ae = lib1_gv_uT_DL_MaxUnits;
    int auto05FEF00A_var;
    const int auto0BDE3E9D_ae = lib1_gv_uT_DL_MaxUnits;
    int auto0BDE3E9D_var;
    const int autoE1B460BC_ae = lib1_gv_uT_DL_MaxUnits;
    int autoE1B460BC_var;

    // Variable Initialization
    lv_vText = StringExternal("Param/Value/lib_1_3CC2A1E6");
    lv_vTotalHeal = 1.0;
    lv_vLines = 1;

    // Implementation
    auto05FEF00A_var = 1;
    for ( ; auto05FEF00A_var <= auto05FEF00A_ae; auto05FEF00A_var += 1 ) {
        if ((lib1_gv_uT_DL_Data[auto05FEF00A_var][0][lp_pPlayerData].lv_unitType != null)) {
            lv_vTotalDamage += lib1_gf_UT_DL_SumHealingDamage(auto05FEF00A_var, 0, lp_pPlayerData);
        }

        if ((lib1_gv_uT_DL_Data[auto05FEF00A_var][1][lp_pPlayerData].lv_unitType != null)) {
            lv_vTotalHeal += lib1_gf_UT_DL_SumHealingDamage(auto05FEF00A_var, 1, lp_pPlayerData);
        }

    }
    lv_vText = (lv_vText + (StringToText(lib1_gf_UT_FormatInteger(lv_vTotalDamage, " ")) + StringExternal("Param/Value/lib_1_2E252F8A")));
    auto0BDE3E9D_var = 1;
    for ( ; auto0BDE3E9D_var <= auto0BDE3E9D_ae; auto0BDE3E9D_var += 1 ) {
        if ((lib1_gv_uT_DL_Data[auto0BDE3E9D_var][0][lp_pPlayerData].lv_unitType != null)) {
            if ((lib1_gf_UT_DL_SumHealingDamage(auto0BDE3E9D_var, 0, lp_pPlayerData) >= 524000)) {
                lv_vPercent = ((lib1_gf_UT_DL_SumHealingDamage(auto0BDE3E9D_var, 0, lp_pPlayerData) / 10)/(lv_vTotalDamage / 1000));
            }
            else {
                lv_vPercent = (lib1_gv_uT_DL_Data[auto0BDE3E9D_var][0][lp_pPlayerData].lv_real/IntToFixed((lv_vTotalDamage / 100)));
            }
            lv_vPercent = libNtve_gf_ArithmeticRealClamp(lv_vPercent, 0.0, 100.0);
            lv_vLines += 1;
        }
        else {
            break;
        }
    }
    if ((lib1_gv_uT_DL_Data[1][1][lp_pPlayerData].lv_unitType != null)) {
        lv_vText = (lv_vText + (StringExternal("Param/Value/lib_1_71FCD523") + (StringExternal("Param/Value/lib_1_2E4EFC70") + (FixedToText(lv_vTotalHeal, 0) + StringExternal("Param/Value/lib_1_B17E0AEB")))));
        lv_vLines += 2;
        autoE1B460BC_var = 1;
        for ( ; autoE1B460BC_var <= autoE1B460BC_ae; autoE1B460BC_var += 1 ) {
            if ((lib1_gv_uT_DL_Data[autoE1B460BC_var][1][lp_pPlayerData].lv_unitType != null)) {
                if ((lib1_gf_UT_DL_SumHealingDamage(autoE1B460BC_var, 1, lp_pPlayerData) >= 524000)) {
                    lv_vPercent = ((lib1_gf_UT_DL_SumHealingDamage(autoE1B460BC_var, 1, lp_pPlayerData) / 10)/(lv_vTotalDamage / 1000));
                }
                else {
                    lv_vPercent = (lib1_gv_uT_DL_Data[autoE1B460BC_var][1][lp_pPlayerData].lv_real/IntToFixed((lv_vTotalDamage / 100)));
                }
                lv_vPercent = libNtve_gf_ArithmeticRealClamp(lv_vPercent, 0.0, 100.0);
                TextExpressionSetToken("Param/Expression/lib_1_C80317AA", "A", UnitTypeGetName(lib1_gv_uT_DL_Data[autoE1B460BC_var][1][lp_pPlayerData].lv_unitType));
                TextExpressionSetToken("Param/Expression/lib_1_C80317AA", "D", FixedToText(lv_vPercent, 1));
                TextExpressionSetToken("Param/Expression/lib_1_C80317AA", "C", StringToText(lib1_gf_UT_FormatInteger(lib1_gf_UT_DL_SumHealingDamage(autoE1B460BC_var, 1, lp_pPlayerData), " ")));
                lv_vText = (lv_vText + TextExpressionAssemble("Param/Expression/lib_1_C80317AA"));
                lv_vLines += 1;
            }
            else {
                break;
            }
        }
    }

    libNtve_gf_SetDialogItemText(lib1_gv_uT_DL_LogDialogItem, lv_vText, PlayerGroupSingle(lp_pPlayerShow));
}

void lib1_gf_UT_DL_AddHealingDamage (int lp_pIndex, int lp_pDamageHeal, int lp_pPlayer, fixed lp_pAdd_Amount) {
    // Automatic Variable Declarations
    // Implementation
    if (((FixedToInt(lib1_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real) + FixedToInt(lp_pAdd_Amount)) >= 500000)) {
        lib1_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_integer += FixedToInt(lib1_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real);
        lib1_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real = lp_pAdd_Amount;
    }
    else {
        lib1_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real += lp_pAdd_Amount;
    }
}

int lib1_gf_UT_DL_SumHealingDamage (int lp_pIndex, int lp_pDamageHeal, int lp_pPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return (lib1_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_integer + FixedToInt(lib1_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real));
}

void lib1_gf_UT_DL_LogClear (int lp_pPlayer) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    const int auto6B068067_ae = lib1_gv_uT_DL_MaxUnits;
    int auto6B068067_var;

    // Variable Initialization

    // Implementation
    auto6B068067_var = 1;
    for ( ; auto6B068067_var <= auto6B068067_ae; auto6B068067_var += 1 ) {
        lib1_gv_uT_DL_Data[auto6B068067_var][0][lp_pPlayer].lv_integer = 0;
        lib1_gv_uT_DL_Data[auto6B068067_var][1][lp_pPlayer].lv_integer = 0;
        lib1_gv_uT_DL_Data[auto6B068067_var][0][lp_pPlayer].lv_real = 0;
        lib1_gv_uT_DL_Data[auto6B068067_var][1][lp_pPlayer].lv_real = 0;
        lib1_gv_uT_DL_Data[auto6B068067_var][0][lp_pPlayer].lv_unitType = null;
        lib1_gv_uT_DL_Data[auto6B068067_var][1][lp_pPlayer].lv_unitType = null;
    }
    UIDisplayMessage(PlayerGroupSingle(lp_pPlayer), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_9F371108"));
    lib1_gf_UT_DL_DialogUpdate(lib1_gv_uT_DL_PlayerData[lp_pPlayer], lp_pPlayer);
}

bool lib1_gf_UT_DevCommandsActive (int lp_pDevCommandType, int lp_pPlayer) {
    // Automatic Variable Declarations
    int auto1F4806C2_val;

    // Implementation
    auto1F4806C2_val = lp_pDevCommandType;
    if (auto1F4806C2_val == lib1_ge_UT_DevCommandTypes_Gamealtering) {
        if ((lib1_gv_uT_DevCommands[lp_pPlayer] == lib1_ge_UT_DevCommandTypes_Gamealtering)) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto1F4806C2_val == lib1_ge_UT_DevCommandTypes_Visual) {
        if (((lib1_gv_uT_DevCommands[lp_pPlayer] == lib1_ge_UT_DevCommandTypes_Gamealtering) || (lib1_gv_uT_DevCommands[lp_pPlayer] == lib1_ge_UT_DevCommandTypes_Visual))) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto1F4806C2_val == lib1_ge_UT_DevCommandTypes_No) {
        if ((lib1_gv_uT_DevCommands[lp_pPlayer] == lib1_ge_UT_DevCommandTypes_No)) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
}

void lib1_gf_UT_Cheat () {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_uT_CheatUsed = true;
    TriggerSendEvent("UT_CheatUsed");
}

point lib1_gf_UT_FindPointWithPathingTo (point lp_vInitPoint, point lp_vTargetPoint) {
    // Variable Declarations
    int lv_vRadius;
    int lv_vAngle;
    point lv_vPoint;

    // Automatic Variable Declarations
    const int autoFD9461C2_ae = 200;
    const int autoFD9461C2_ai = 3;
    const int autoCC058AA8_ae = 360;
    const int autoCC058AA8_ai = 30;

    // Variable Initialization

    // Implementation
    if ((PointPathingIsConnected(lp_vInitPoint, lp_vTargetPoint) == true)) {
        return lp_vInitPoint;
    }

    lv_vRadius = 1;
    for ( ; ( (autoFD9461C2_ai >= 0 && lv_vRadius <= autoFD9461C2_ae) || (autoFD9461C2_ai < 0 && lv_vRadius >= autoFD9461C2_ae) ) ; lv_vRadius += autoFD9461C2_ai ) {
        lv_vAngle = 1;
        for ( ; ( (autoCC058AA8_ai >= 0 && lv_vAngle <= autoCC058AA8_ae) || (autoCC058AA8_ai < 0 && lv_vAngle >= autoCC058AA8_ae) ) ; lv_vAngle += autoCC058AA8_ai ) {
            lv_vPoint = PointWithOffsetPolar(lp_vInitPoint, lv_vRadius, lv_vAngle);
            if ((RegionContainsPoint(RegionPlayableMap(), lv_vPoint) == true) && (PathingType(lv_vPoint) == c_pathingGround) && (PointPathingIsConnected(lv_vPoint, lp_vTargetPoint) == true)) {
                return lv_vPoint;
            }

        }
    }
    return lp_vInitPoint;
}

string lib1_gf_UT_PointXYToString (point lp_pPoint, string lp_pDelimiter, int lp_pPrecision) {
    // Automatic Variable Declarations
    // Implementation
    return (FixedToString(PointGetX(lp_pPoint), lp_pPrecision) + lp_pDelimiter + FixedToString(PointGetY(lp_pPoint), lp_pPrecision));
}

string lib1_gf_UT_SeparatedSubstring (string lp_pString, int lp_pN, string lp_pSeparator) {
    // Variable Declarations
    const string lv_vSEP = "SEP#";
    string lv_vString;
    int lv_vA;

    // Automatic Variable Declarations
    int auto5C7CFC6E_ae;
    const int auto5C7CFC6E_ai = 1;

    // Variable Initialization
    lv_vString = lp_pString;

    // Implementation
    auto5C7CFC6E_ae = lp_pN;
    lv_vA = 1;
    for ( ; ( (auto5C7CFC6E_ai >= 0 && lv_vA <= auto5C7CFC6E_ae) || (auto5C7CFC6E_ai < 0 && lv_vA >= auto5C7CFC6E_ae) ) ; lv_vA += auto5C7CFC6E_ai ) {
        lv_vString = StringReplaceWord(lv_vString, lp_pSeparator, (lv_vSEP + IntToString(lv_vA)), 1, c_stringCase);
    }
    if ((lp_pN == 1) && (StringFind(lv_vString, (lv_vSEP + IntToString(lp_pN)), c_stringCase) > 0)) {
        return StringSub(lv_vString, 1, (StringFind(lv_vString, (lv_vSEP + "1"), c_stringCase)-1));
    }
    else if ((lp_pN == 1) && (StringFind(lv_vString, (lv_vSEP + IntToString(lp_pN)), c_stringCase) == -1)) {
        return lv_vString;
    }
    else if ((StringFind(lv_vString, (lv_vSEP + IntToString(lp_pN)), c_stringCase) == -1)) {
        return StringSub(lv_vString, (StringFind(lv_vString, (lv_vSEP + IntToString((lp_pN-1))), c_stringCase)+1+StringLength(lv_vSEP)), StringLength(lv_vString));
    }
    return StringSub(lv_vString, (StringFind(lv_vString, (lv_vSEP + IntToString((lp_pN-1))), c_stringCase)+1+StringLength(lv_vSEP)), (StringFind(lv_vString, (lv_vSEP + IntToString(lp_pN)), c_stringCase)-1));
}

trigger auto_lib1_gf_UT_Rise_Trigger = null;
unit auto_lib1_gf_UT_Rise_lp_pUnit;

void lib1_gf_UT_Rise (unit lp_pUnit) {
    auto_lib1_gf_UT_Rise_lp_pUnit = lp_pUnit;

    if (auto_lib1_gf_UT_Rise_Trigger == null) {
        auto_lib1_gf_UT_Rise_Trigger = TriggerCreate("auto_lib1_gf_UT_Rise_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_UT_Rise_Trigger, false, false);
}

bool auto_lib1_gf_UT_Rise_TriggerFunc (bool testConds, bool runActions) {
    unit lp_pUnit = auto_lib1_gf_UT_Rise_lp_pUnit;

    // Variable Declarations
    int lv_vB;

    // Automatic Variable Declarations
    const int autoBCCB6F7A_n = 10;
    int autoBCCB6F7A_i;

    // Variable Initialization
    lv_vB = 10;

    // Implementation
    for (autoBCCB6F7A_i = 1; autoBCCB6F7A_i <= autoBCCB6F7A_n; autoBCCB6F7A_i += 1) {
        lv_vB -= 1;
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "SetHeight -0." +IntToString(lv_vB));
        Wait(0.0625, c_timeGame);
    }
    return true;
}

color lib1_gf_UT_HexToColor (string lp_pString) {
    // Automatic Variable Declarations
    // Implementation
    return Color((lib1_gf_UT_HexToInt(StringSub(lp_pString, 2, 3))/2.55), (lib1_gf_UT_HexToInt(StringSub(lp_pString, 4, 5))/2.55), (lib1_gf_UT_HexToInt(StringSub(lp_pString, 6, 7))/2.55));
}

int lib1_gf_UT_HexToInt (string lp_pString) {
    // Variable Declarations
    int lv_vOutput;
    int lv_vMult;
    int lv_vIter;

    // Automatic Variable Declarations
    const int auto6C77CB37_ae = 1;
    const int auto6C77CB37_ai = -1;

    // Variable Initialization
    lv_vMult = 1;

    // Implementation
    lv_vIter = StringLength(lp_pString);
    for ( ; ( (auto6C77CB37_ai >= 0 && lv_vIter <= auto6C77CB37_ae) || (auto6C77CB37_ai < 0 && lv_vIter >= auto6C77CB37_ae) ) ; lv_vIter += auto6C77CB37_ai ) {
        lv_vOutput += (lib1_gf_UT_SingleHexToInt(StringSub(lp_pString, lv_vIter, lv_vIter))*lv_vMult);
        lv_vMult *= 16;
    }
    return lv_vOutput;
}

int lib1_gf_UT_SingleHexToInt (string lp_pString) {
    // Variable Declarations
    int lv_vOutput;

    // Automatic Variable Declarations
    string autoE74E7368_val;

    // Variable Initialization

    // Implementation
    autoE74E7368_val = lp_pString;
    if (autoE74E7368_val == "A") {
        lv_vOutput += 10;
    }
    else if (autoE74E7368_val == "a") {
        lv_vOutput += 10;
    }
    else if (autoE74E7368_val == "B") {
        lv_vOutput += 11;
    }
    else if (autoE74E7368_val == "b") {
        lv_vOutput += 11;
    }
    else if (autoE74E7368_val == "C") {
        lv_vOutput += 12;
    }
    else if (autoE74E7368_val == "c") {
        lv_vOutput += 12;
    }
    else if (autoE74E7368_val == "D") {
        lv_vOutput += 13;
    }
    else if (autoE74E7368_val == "d") {
        lv_vOutput += 13;
    }
    else if (autoE74E7368_val == "E") {
        lv_vOutput += 14;
    }
    else if (autoE74E7368_val == "e") {
        lv_vOutput += 14;
    }
    else if (autoE74E7368_val == "F") {
        lv_vOutput += 15;
    }
    else if (autoE74E7368_val == "f") {
        lv_vOutput += 15;
    }
    else {
        lv_vOutput += StringToInt(lp_pString);
    }
    return lv_vOutput;
}

void lib1_gf_UT_DialogCounting (int lp_pFrom, int lp_pTo, fixed lp_pTime, int lp_pDialogLabel, text lp_pTextBefore, text lp_pTextAfter, playergroup lp_pPlayers) {
    // Variable Declarations
    const fixed lv_vTimeInterval = 0.125;
    int lv_vDiff;
    int lv_vCurrent;
    int lv_vSteps;
    int lv_vChange;

    // Automatic Variable Declarations
    int auto16100099_n;
    int auto16100099_i;

    // Variable Initialization
    lv_vDiff = AbsI((lp_pFrom - lp_pTo));
    lv_vCurrent = lp_pFrom;
    lv_vSteps = FixedToInt((lp_pTime / lv_vTimeInterval));
    lv_vChange = (lv_vDiff / lv_vSteps);

    // Implementation
    if ((lp_pTo == lp_pFrom)) {
        return ;
    }

    if ((lp_pTo < lp_pFrom)) {
        lv_vChange *= -1;
    }

    SoundPlayForPlayer(SoundLink("UI_BNet_ProgressionCounter_Loop1", -1), c_maxPlayers, lp_pPlayers, 100.0, 0.0);
    auto16100099_n = lv_vSteps;
    for (auto16100099_i = 1; auto16100099_i <= auto16100099_n; auto16100099_i += 1) {
        Wait(lv_vTimeInterval, c_timeGame);
        lv_vCurrent += lv_vChange;
        TextExpressionSetToken("Param/Expression/lib_1_66F2BF27", "A", lp_pTextBefore);
        TextExpressionSetToken("Param/Expression/lib_1_66F2BF27", "B", IntToText(lv_vCurrent));
        TextExpressionSetToken("Param/Expression/lib_1_66F2BF27", "C", lp_pTextAfter);
        libNtve_gf_SetDialogItemText(lp_pDialogLabel, TextExpressionAssemble("Param/Expression/lib_1_66F2BF27"), PlayerGroupAll());
    }
    SoundStop(SoundLastPlayed(), false);
    TextExpressionSetToken("Param/Expression/lib_1_C09CC38F", "A", lp_pTextBefore);
    TextExpressionSetToken("Param/Expression/lib_1_C09CC38F", "B", IntToText(lp_pTo));
    TextExpressionSetToken("Param/Expression/lib_1_C09CC38F", "C", lp_pTextAfter);
    libNtve_gf_SetDialogItemText(lp_pDialogLabel, TextExpressionAssemble("Param/Expression/lib_1_C09CC38F"), PlayerGroupAll());
}

int lib1_gf_UT_1StringToInteger (string lp_pLetter) {
    // Automatic Variable Declarations
    string autoFC7DFF6B_val;

    // Implementation
    autoFC7DFF6B_val = lp_pLetter;
    if (autoFC7DFF6B_val == "a") {
        return 10;
    }
    else if (autoFC7DFF6B_val == "b") {
        return 11;
    }
    else if (autoFC7DFF6B_val == "c") {
        return 12;
    }
    else if (autoFC7DFF6B_val == "d") {
        return 13;
    }
    else if (autoFC7DFF6B_val == "e") {
        return 14;
    }
    else if (autoFC7DFF6B_val == "f") {
        return 15;
    }
    else if (autoFC7DFF6B_val == "g") {
        return 16;
    }
    else if (autoFC7DFF6B_val == "h") {
        return 17;
    }
    else if (autoFC7DFF6B_val == "i") {
        return 18;
    }
    else if (autoFC7DFF6B_val == "j") {
        return 19;
    }
    else if (autoFC7DFF6B_val == "k") {
        return 20;
    }
    else if (autoFC7DFF6B_val == "l") {
        return 21;
    }
    else if (autoFC7DFF6B_val == "m") {
        return 22;
    }
    else if (autoFC7DFF6B_val == "n") {
        return 23;
    }
    else if (autoFC7DFF6B_val == "o") {
        return 24;
    }
    else if (autoFC7DFF6B_val == "p") {
        return 25;
    }
    else if (autoFC7DFF6B_val == "q") {
        return 26;
    }
    else if (autoFC7DFF6B_val == "r") {
        return 27;
    }
    else if (autoFC7DFF6B_val == "s") {
        return 28;
    }
    else if (autoFC7DFF6B_val == "t") {
        return 29;
    }
    else if (autoFC7DFF6B_val == "u") {
        return 30;
    }
    else if (autoFC7DFF6B_val == "v") {
        return 31;
    }
    else if (autoFC7DFF6B_val == "w") {
        return 32;
    }
    else if (autoFC7DFF6B_val == "x") {
        return 33;
    }
    else if (autoFC7DFF6B_val == "y") {
        return 34;
    }
    else if (autoFC7DFF6B_val == "z") {
        return 35;
    }
    else {
        return StringToInt(lp_pLetter);
    }
}

int lib1_gf_UT_3StringsToInteger (string lp_pString) {
    // Variable Declarations
    string lv_v1;
    string lv_v2;
    string lv_v3;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_v1 = StringSub(lp_pString, 1, 1);
    lv_v2 = StringSub(lp_pString, 2, 2);
    lv_v3 = StringSub(lp_pString, 3, 3);

    // Implementation
    return (lib1_gf_UT_1StringToInteger(lv_v1)*10000 + lib1_gf_UT_1StringToInteger(lv_v2)*100 + lib1_gf_UT_1StringToInteger(lv_v3));
}

string lib1_gf_UT_AddStringsInfront (int lp_pDigits, string lp_pString, fixed lp_pInputReal, int lp_pPrecision) {
    // Variable Declarations
    string lv_vString;

    // Automatic Variable Declarations
    int auto875C1192_n;
    int auto875C1192_i;

    // Variable Initialization
    lv_vString = FixedToString(lp_pInputReal, lp_pPrecision);

    // Implementation
    auto875C1192_n = (lp_pDigits - StringLength(lv_vString));
    for (auto875C1192_i = 1; auto875C1192_i <= auto875C1192_n; auto875C1192_i += 1) {
        lv_vString = (lp_pString + lv_vString);
    }
    return lv_vString;
}

text lib1_gf_UT_AddStringsInfronttext (int lp_pDigits, string lp_pString, int lp_pInputNumber) {
    // Variable Declarations
    string lv_vString;

    // Automatic Variable Declarations
    int auto0DAA8253_n;
    int auto0DAA8253_i;

    // Variable Initialization
    lv_vString = IntToString(lp_pInputNumber);

    // Implementation
    auto0DAA8253_n = (lp_pDigits - StringLength(lv_vString));
    for (auto0DAA8253_i = 1; auto0DAA8253_i <= auto0DAA8253_n; auto0DAA8253_i += 1) {
        lv_vString = (lp_pString + lv_vString);
    }
    return StringToText(lv_vString);
}

string lib1_gf_UT_FormatInteger (int lp_pNumber, string lp_pDividingSymbol) {
    int init_i;

    // Variable Declarations
    int lv_vNumber;
    int[4] lv_vINT;
    string[4] lv_vSTRING;
    string lv_vSign;
    string lv_vDivingSymbol;
    int lv_vA;
    bool lv_vFirst;

    // Automatic Variable Declarations
    const int auto24570997_ae = 3;
    const int auto24570997_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_vSTRING[init_i] = "";
    }
    lv_vSign = "";
    lv_vDivingSymbol = "";
    lv_vFirst = true;

    // Implementation
    lv_vNumber = AbsI(lp_pNumber);
    if ((lp_pNumber != lv_vNumber)) {
        lv_vSign = "-";
    }

    lv_vINT[0] = (lv_vNumber / 1000000000);
    lv_vNumber -= (lv_vINT[0] * 1000000000);
    lv_vINT[1] = (lv_vNumber / 1000000);
    lv_vNumber -= (lv_vINT[1] * 1000000);
    lv_vINT[2] = (lv_vNumber / 1000);
    lv_vNumber -= (lv_vINT[2] * 1000);
    lv_vINT[3] = lv_vNumber;
    lv_vDivingSymbol = lp_pDividingSymbol;
    lv_vA = 0;
    for ( ; ( (auto24570997_ai >= 0 && lv_vA <= auto24570997_ae) || (auto24570997_ai < 0 && lv_vA >= auto24570997_ae) ) ; lv_vA += auto24570997_ai ) {
        if ((lv_vA == 3)) {
            lv_vDivingSymbol = "";
        }

        if ((lv_vINT[lv_vA] != 0) && (lv_vFirst == true)) {
            lv_vFirst = false;
            lv_vSTRING[lv_vA] = (IntToString(lv_vINT[lv_vA]) + lv_vDivingSymbol);
        }
        else {
            if ((lv_vINT[lv_vA] >= 100)) {
                lv_vSTRING[lv_vA] = (IntToString(lv_vINT[lv_vA]) + lv_vDivingSymbol);
            }
            else {
                if ((lv_vINT[lv_vA] >= 10)) {
                    lv_vSTRING[lv_vA] = ("0" + IntToString(lv_vINT[lv_vA]) + lv_vDivingSymbol);
                }
                else {
                    if ((lv_vINT[lv_vA] == 0) && (lv_vFirst == true)) {
                        lv_vSTRING[lv_vA] = "";
                    }
                    else {
                        lv_vSTRING[lv_vA] = ("00" + IntToString(lv_vINT[lv_vA]) + lv_vDivingSymbol);
                    }
                }
            }
        }
    }
    return (lv_vSign + lv_vSTRING[0] + lv_vSTRING[1] + lv_vSTRING[2] + lv_vSTRING[3]);
}

text lib1_gf_UT_RealSecondsIntoTimeFormat (fixed lp_pTimeSeconds) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pTimeSeconds >= 3600.0)) {
        TextExpressionSetToken("Param/Expression/lib_1_2D82D98A", "C", IntToText(TruncI((lp_pTimeSeconds/3600))));
        TextExpressionSetToken("Param/Expression/lib_1_2D82D98A", "A", lib1_gf_UT_AddStringsInfronttext(2, "0", TruncI((ModF(lp_pTimeSeconds, 3600.0)/60))));
        TextExpressionSetToken("Param/Expression/lib_1_2D82D98A", "B", lib1_gf_UT_AddStringsInfronttext(2, "0", FixedToInt(ModF(lp_pTimeSeconds, 60.0))));
        return TextExpressionAssemble("Param/Expression/lib_1_2D82D98A");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_1_6BB8118A", "A", IntToText(TruncI((lp_pTimeSeconds/60))));
        TextExpressionSetToken("Param/Expression/lib_1_6BB8118A", "B", lib1_gf_UT_AddStringsInfronttext(2, "0", FixedToInt(ModF(lp_pTimeSeconds, 60.0))));
        return TextExpressionAssemble("Param/Expression/lib_1_6BB8118A");
    }
}

string lib1_gf_UT_StageToString (int lp_pStage) {
    // Variable Declarations
    string lv_vStage;

    // Automatic Variable Declarations
    int autoDD591005_val;

    // Variable Initialization
    lv_vStage = "";

    // Implementation
    autoDD591005_val = lp_pStage;
    if (autoDD591005_val == c_unitAbilStageAll) {
        lv_vStage = "Any";
    }
    else if (autoDD591005_val == c_unitAbilStageQueue) {
        lv_vStage = "Queue";
    }
    else if (autoDD591005_val == c_unitAbilStageExecute) {
        lv_vStage = "Execute";
    }
    else if (autoDD591005_val == c_unitAbilStageCancel) {
        lv_vStage = "Cancel";
    }
    else if (autoDD591005_val == c_unitAbilStagePreempt) {
        lv_vStage = "Preempt";
    }
    else if (autoDD591005_val == c_unitAbilStageComplete) {
        lv_vStage = "Complete";
    }
    else if (autoDD591005_val == c_unitAbilStagePause) {
        lv_vStage = "Pause";
    }
    else if (autoDD591005_val == c_unitAbilStageUnpause) {
        lv_vStage = "Unpause";
    }
    else {
        lv_vStage = "-";
    }
    return lv_vStage;
}

string lib1_gf_unit_to_actorDataName (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return ("tg_unit_to_actor." + (lp_unitType));
}

void lib1_gf_InitUnitTypeToActorData () {
    // Variable Declarations
    string lv_u;
    string lv_a_name;
    string lv_a;

    // Automatic Variable Declarations
    int autoB30E818C_catalog;
    int autoB30E818C_i;
    int auto52857CF3_catalog;
    int auto52857CF3_i;

    // Variable Initialization
    lv_a_name = "";

    // Implementation
    if ((lib1_gv_unitToActorInitDone == true)) {
        return ;
    }
    else {
        lib1_gv_unitToActorInitDone = true;
    }
    autoB30E818C_catalog = c_gameCatalogUnit;
    autoB30E818C_i = 1;
    for ( ; autoB30E818C_i <= CatalogEntryCount(c_gameCatalogUnit) ; autoB30E818C_i += 1 ) {
        lv_u = CatalogEntryGet(autoB30E818C_catalog, autoB30E818C_i);
        if ((CatalogEntryIsValid(c_gameCatalogActor, lv_u) == true) && (CatalogEntryClass(c_gameCatalogActor, lv_u) == c_classIdCActorUnit)) {
            DataTableSetString(true, lib1_gf_unit_to_actorDataName(lv_u), (lv_u));
        }
        else {
            auto52857CF3_catalog = c_gameCatalogActor;
            auto52857CF3_i = 1;
            for ( ; auto52857CF3_i <= CatalogEntryCount(c_gameCatalogActor) ; auto52857CF3_i += 1 ) {
                lv_a = CatalogEntryGet(auto52857CF3_catalog, auto52857CF3_i);
                if ((CatalogEntryClass(c_gameCatalogActor, lv_a) == c_classIdCActorUnit)) {
                    lv_a_name = CatalogFieldValueGet(c_gameCatalogActor, lv_a, "HighlightTooltip", c_playerAny);
                    if ((lv_a_name == ("Unit/Name/" + (lv_u)))) {
                        DataTableSetString(true, lib1_gf_unit_to_actorDataName(lv_u), (lv_a));
                        break;
                    }

                }

            }
        }
    }
}

string lib1_gf_GetMainActorofUnitType (string lp_unitType) {
    // Variable Declarations
    string lv_dataName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dataName = lib1_gf_unit_to_actorDataName(lp_unitType);

    // Implementation
    lib1_gf_InitUnitTypeToActorData();
    if ((DataTableValueExists(true, lv_dataName) == true) && (DataTableValueType(true, lv_dataName) == c_dataTypeString)) {
        return (DataTableGetString(true, lv_dataName));
    }
    else {
        return null;
    }
}

string lib1_gf_aliasDataCountName (string lp_alias) {
    // Automatic Variable Declarations
    // Implementation
    return ("tg_unit_alias_count." + lp_alias);
}

string lib1_gf_aliasDataIndexName (string lp_alias, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return ("tg_unit_alias." + lp_alias + "." + IntToString(lp_index));
}

void lib1_gf_InitUnitAliasData () {
    // Variable Declarations
    string lv_u;
    string lv_data_name;
    string lv_alias;
    int lv_a_cnt;
    int lv_a_idx;

    // Automatic Variable Declarations
    int auto08636769_catalog;
    int auto08636769_i;
    int autoED0E1D45_catalog;
    string autoED0E1D45_entry;
    string autoED0E1D45_fieldPath;
    int autoED0E1D45_player;
    int autoED0E1D45_i;

    // Variable Initialization
    lv_data_name = "";
    lv_alias = "";

    // Implementation
    if ((lib1_gv_aliasDataInitDone == true)) {
        return ;
    }
    else {
        lib1_gv_aliasDataInitDone = true;
    }
    auto08636769_catalog = c_gameCatalogUnit;
    auto08636769_i = 1;
    for ( ; auto08636769_i <= CatalogEntryCount(c_gameCatalogUnit) ; auto08636769_i += 1 ) {
        lv_u = CatalogEntryGet(auto08636769_catalog, auto08636769_i);
        autoED0E1D45_catalog = c_gameCatalogUnit;
        autoED0E1D45_entry = lv_u;
        autoED0E1D45_fieldPath = "TechAliasArray";
        autoED0E1D45_player = c_playerAny;
        autoED0E1D45_i = 0;
        for ( ; autoED0E1D45_i <= CatalogFieldValueCount(c_gameCatalogUnit,autoED0E1D45_entry,autoED0E1D45_fieldPath,autoED0E1D45_player)-1 ; autoED0E1D45_i += 1 ) {
            lv_alias = CatalogFieldValueGet(c_gameCatalogUnit,autoED0E1D45_entry,autoED0E1D45_fieldPath+"["+IntToString(autoED0E1D45_i)+"]",autoED0E1D45_player);
            lv_data_name = lib1_gf_aliasDataCountName(lv_alias);
            if ((DataTableValueExists(true, lv_data_name) == true)) {
                lv_a_idx = DataTableGetInt(true, lv_data_name);
                lv_a_cnt = (lv_a_idx + 1);
            }
            else {
                lv_a_cnt = 1;
                lv_a_idx = 0;
            }
            DataTableSetInt(true, lv_data_name, lv_a_cnt);
            DataTableSetString(true, lib1_gf_aliasDataIndexName(lv_alias, lv_a_idx), (lv_u));
        }
    }
}

int lib1_gf_TechAliasCheck (string lp_aliasUnit, string lp_checkUnit) {
    // Variable Declarations
    string lv_alias;
    int lv_a_cnt;
    int lv_a_idx;

    // Automatic Variable Declarations
    int autoE5CEED5F_catalog;
    string autoE5CEED5F_entry;
    string autoE5CEED5F_fieldPath;
    int autoE5CEED5F_player;
    int autoE5CEED5F_i;
    int autoF589F4F9_ae;
    const int autoF589F4F9_ai = 1;

    // Variable Initialization
    lv_alias = "";

    // Implementation
    if ((lib1_gv_aliasDataInitDone == false)) {
        lib1_gf_InitUnitAliasData();
    }

    autoE5CEED5F_catalog = c_gameCatalogUnit;
    autoE5CEED5F_entry = lp_aliasUnit;
    autoE5CEED5F_fieldPath = "TechAliasArray";
    autoE5CEED5F_player = c_playerAny;
    autoE5CEED5F_i = 0;
    for ( ; autoE5CEED5F_i <= CatalogFieldValueCount(c_gameCatalogUnit,autoE5CEED5F_entry,autoE5CEED5F_fieldPath,autoE5CEED5F_player)-1 ; autoE5CEED5F_i += 1 ) {
        lv_alias = CatalogFieldValueGet(c_gameCatalogUnit,autoE5CEED5F_entry,autoE5CEED5F_fieldPath+"["+IntToString(autoE5CEED5F_i)+"]",autoE5CEED5F_player);
        lv_a_cnt = DataTableGetInt(true, lib1_gf_aliasDataCountName(lv_alias));
        autoF589F4F9_ae = (lv_a_cnt - 1);
        lv_a_idx = 0;
        for ( ; ( (autoF589F4F9_ai >= 0 && lv_a_idx <= autoF589F4F9_ae) || (autoF589F4F9_ai < 0 && lv_a_idx >= autoF589F4F9_ae) ) ; lv_a_idx += autoF589F4F9_ai ) {
            if (((DataTableGetString(true, lib1_gf_aliasDataIndexName(lv_alias, lv_a_idx))) == lp_checkUnit)) {
                return 1;
            }

        }
    }
    return 0;
}

string lib1_gf_GetUnitAlias (string lp_unittype, int lp_alias_index) {
    // Variable Declarations
    string lv_alias;
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_alias = "";
    lv_count = CatalogFieldValueCount(c_gameCatalogUnit, lp_unittype, "TechAliasArray", c_playerAny);

    // Implementation
    if ((lv_count == 0)) {
        return (lp_unittype);
    }
    else {
        return CatalogFieldValueGet(c_gameCatalogUnit, lp_unittype, "TechAliasArray[" + IntToString(MinI((lv_count - 1), lp_alias_index)) + "]", c_playerAny);
    }
}

string lib1_gf_GetUnitAliasGameLink (string lp_unittype, int lp_alias_index) {
    // Variable Declarations
    string lv_alias;
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_alias = "";
    lv_count = CatalogFieldValueCount(c_gameCatalogUnit, lp_unittype, "TechAliasArray", c_playerAny);

    // Implementation
    if ((lv_count == 0)) {
        return lp_unittype;
    }
    else {
        return CatalogFieldValueGet(c_gameCatalogUnit, lp_unittype, "TechAliasArray[" + IntToString(MinI((lv_count - 1), lp_alias_index)) + "]", c_playerAny);
    }
}

int lib1_gf_GetNumberOfUnitsInGroupIncludeAlias (string lp_unitType, unitgroup lp_unitgroup) {
    // Variable Declarations
    int lv_count;
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup auto82747DFB_g;
    int auto82747DFB_u;

    // Variable Initialization

    // Implementation
    if ((lib1_gv_aliasDataInitDone == false)) {
        lib1_gf_InitUnitAliasData();
    }

    auto82747DFB_g = lp_unitgroup;
    auto82747DFB_u = UnitGroupCount(auto82747DFB_g, c_unitCountAll);
    for (;; auto82747DFB_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto82747DFB_g, auto82747DFB_u);
        if (lv_u == null) { break; }
        if ((UnitGetType(lv_u) == lp_unitType)) {
            lv_count += 1;
        }
        else {
            lv_count += lib1_gf_TechAliasCheck(lp_unitType, UnitGetType(lv_u));
        }
    }
    return lv_count;
}

unitgroup lib1_gf_FilterUnitGroupIncludeAlias (string lp_unitType, unitgroup lp_unitgroup) {
    // Variable Declarations
    unitgroup lv_ret;
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup auto56B34833_g;
    int auto56B34833_u;

    // Variable Initialization
    lv_ret = UnitGroupEmpty();

    // Implementation
    if ((lib1_gv_aliasDataInitDone == false)) {
        lib1_gf_InitUnitAliasData();
    }

    auto56B34833_g = lp_unitgroup;
    auto56B34833_u = UnitGroupCount(auto56B34833_g, c_unitCountAll);
    for (;; auto56B34833_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto56B34833_g, auto56B34833_u);
        if (lv_u == null) { break; }
        if (((UnitGetType(lv_u) == lp_unitType) || (lib1_gf_TechAliasCheck(lp_unitType, UnitGetType(lv_u)) == 1))) {
            UnitGroupAdd(lv_ret, lv_u);
        }

    }
    return lv_ret;
}

bool lib1_gf_TechExistsInUnitGroupIncludeAlias (string lp_unitType, unitgroup lp_unitgroup) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup auto5570A1BE_g;
    int auto5570A1BE_u;

    // Variable Initialization

    // Implementation
    if ((lib1_gv_aliasDataInitDone == false)) {
        lib1_gf_InitUnitAliasData();
    }

    auto5570A1BE_g = lp_unitgroup;
    auto5570A1BE_u = UnitGroupCount(auto5570A1BE_g, c_unitCountAll);
    for (;; auto5570A1BE_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto5570A1BE_g, auto5570A1BE_u);
        if (lv_u == null) { break; }
        if (((UnitGetType(lv_u) == lp_unitType) || (lib1_gf_TechAliasCheck(lp_unitType, UnitGetType(lv_u)) == 1))) {
            return true;
        }

    }
    return false;
}

void lib1_gf_KillUnitWithCustomDeath (int lp_killingplayer, unit lp_unit, string lp_deathtype) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "CustomDeathEffectKill", "Death", lp_killingplayer, (lp_deathtype));
    PlayerCreateEffectUnit(lp_killingplayer, "CustomDeathEffectKill", lp_unit);
}

int lib1_gf_ConvertBuildFlagsToInteger (int lp_flags) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_flags);
}

void lib1_gf_TrainUnitIfNotInQueue (int lp_player, string lp_unitType, int lp_includeAlias, int lp_count, string lp_requiredTech, int lp_requiredTechAlias, int lp_town, int lp_maxqueue) {
    // Variable Declarations
    int lv_progressCount;

    // Automatic Variable Declarations
    int auto151DF88B_val;
    int autoEE849BF0_val;

    // Variable Initialization

    // Implementation
    auto151DF88B_val = lp_includeAlias;
    if (auto151DF88B_val == lib1_ge_TgAIIncludeAlias_DontIncludeAlias) {
        lv_progressCount = AITechCount(lp_player, lp_unitType, c_techCountQueuedOrBetter);
    }
    else if (auto151DF88B_val == lib1_ge_TgAIIncludeAlias_IncludeFirstAlias) {
        lv_progressCount = AITechCount(lp_player, lib1_gf_GetUnitAliasGameLink(lp_unitType, 0), c_techCountQueuedOrBetter);
    }
    else {
        lv_progressCount = AITechCount(lp_player, lib1_gf_GetUnitAliasGameLink(lp_unitType, 255), c_techCountQueuedOrBetter);
    }
    if ((lp_requiredTech != null)) {
        autoEE849BF0_val = lp_requiredTechAlias;
        if (autoEE849BF0_val == lib1_ge_TgAIIncludeAlias_IncludeFirstAlias) {
            lp_requiredTech = lib1_gf_GetUnitAliasGameLink(lp_requiredTech, 0);
        }
        else if (autoEE849BF0_val == lib1_ge_TgAIIncludeAlias_IncludeLastAlias) {
            lp_requiredTech = lib1_gf_GetUnitAliasGameLink(lp_requiredTech, 255);
        }
        else {
        }
    }

    if (((lp_requiredTech == null) || (AITechCount(lp_player, lp_requiredTech, c_techCountCompleteOnly) != 0)) && (lv_progressCount < lp_count)) {
        AITrain(lp_player, 2, lp_town, lp_unitType, MinI((lp_count - lv_progressCount), lp_maxqueue));
    }

}

void lib1_gf_BuildIfNotInQueue (int lp_player, string lp_unitType, int lp_includeAlias, int lp_count, string lp_requiredTech, int lp_requiredTechAlias, int lp_town, int lp_buildFlags, int lp_maxqueue) {
    // Variable Declarations
    int lv_progressCount;

    // Automatic Variable Declarations
    int auto33C392E2_val;
    int autoFFF20AFC_val;

    // Variable Initialization

    // Implementation
    auto33C392E2_val = lp_includeAlias;
    if (auto33C392E2_val == lib1_ge_TgAIIncludeAlias_DontIncludeAlias) {
        lv_progressCount = AITechCount(lp_player, lp_unitType, c_techCountQueuedOrBetter);
    }
    else if (auto33C392E2_val == lib1_ge_TgAIIncludeAlias_IncludeFirstAlias) {
        lv_progressCount = AITechCount(lp_player, lib1_gf_GetUnitAliasGameLink(lp_unitType, 0), c_techCountQueuedOrBetter);
    }
    else {
        lv_progressCount = AITechCount(lp_player, lib1_gf_GetUnitAliasGameLink(lp_unitType, 255), c_techCountQueuedOrBetter);
    }
    if ((lp_requiredTech != null)) {
        autoFFF20AFC_val = lp_requiredTechAlias;
        if (autoFFF20AFC_val == lib1_ge_TgAIIncludeAlias_IncludeFirstAlias) {
            lp_requiredTech = lib1_gf_GetUnitAliasGameLink(lp_requiredTech, 0);
        }
        else if (autoFFF20AFC_val == lib1_ge_TgAIIncludeAlias_IncludeLastAlias) {
            lp_requiredTech = lib1_gf_GetUnitAliasGameLink(lp_requiredTech, 255);
        }
        else {
        }
    }

    if (((lp_requiredTech == null) || (AITechCount(lp_player, lp_requiredTech, c_techCountCompleteOnly) != 0)) && (lv_progressCount < lp_count)) {
        AIBuild(lp_player, 2, lp_town, lp_unitType, MinI((lp_count - lv_progressCount), lp_maxqueue), lp_buildFlags);
    }

}

void lib1_gf_TgBuildIfNotInQueue (int lp_player, string lp_unitType, int lp_includeAlias, int lp_count, string lp_requiredTech, int lp_requiredTechAlias, int lp_town, int lp_buildFlags, int lp_maxqueue) {
    // Variable Declarations
    int lv_progressCount;

    // Automatic Variable Declarations
    int auto0EC49736_val;
    int auto8105CB91_val;

    // Variable Initialization

    // Implementation
    auto0EC49736_val = lp_includeAlias;
    if (auto0EC49736_val == lib1_ge_TgAIIncludeAlias_DontIncludeAlias) {
        lv_progressCount = AITechCount(lp_player, lp_unitType, c_techCountQueuedOrBetter);
    }
    else if (auto0EC49736_val == lib1_ge_TgAIIncludeAlias_IncludeFirstAlias) {
        lv_progressCount = AITechCount(lp_player, lib1_gf_GetUnitAliasGameLink(lp_unitType, 0), c_techCountQueuedOrBetter);
    }
    else {
        lv_progressCount = AITechCount(lp_player, lib1_gf_GetUnitAliasGameLink(lp_unitType, 255), c_techCountQueuedOrBetter);
    }
    if ((lp_requiredTech != null)) {
        auto8105CB91_val = lp_requiredTechAlias;
        if (auto8105CB91_val == lib1_ge_TgAIIncludeAlias_IncludeFirstAlias) {
            lp_requiredTech = lib1_gf_GetUnitAliasGameLink(lp_requiredTech, 0);
        }
        else if (auto8105CB91_val == lib1_ge_TgAIIncludeAlias_IncludeLastAlias) {
            lp_requiredTech = lib1_gf_GetUnitAliasGameLink(lp_requiredTech, 255);
        }
        else {
        }
    }

    if (((lp_requiredTech == null) || (AITechCount(lp_player, lp_requiredTech, c_techCountCompleteOnly) != 0)) && (lv_progressCount < lp_count)) {
        AIBuild(lp_player, 2, lp_town, lp_unitType, MinI((lp_count - lv_progressCount), lp_maxqueue), lp_buildFlags);
    }

}

void lib1_gf_ResearchIfNotInQueue (int lp_player, string lp_upgrade, int lp_count, string lp_requiredTech, int lp_requiredTechAlias) {
    // Variable Declarations
    int lv_progressCount;

    // Automatic Variable Declarations
    int auto1C33ECF1_val;

    // Variable Initialization
    lv_progressCount = TechTreeUpgradeCount(lp_player, lp_upgrade, c_techCountQueuedOrBetter);

    // Implementation
    if ((lp_requiredTech != null)) {
        auto1C33ECF1_val = lp_requiredTechAlias;
        if (auto1C33ECF1_val == lib1_ge_TgAIIncludeAlias_IncludeFirstAlias) {
            lp_requiredTech = lib1_gf_GetUnitAliasGameLink(lp_requiredTech, 0);
        }
        else if (auto1C33ECF1_val == lib1_ge_TgAIIncludeAlias_IncludeLastAlias) {
            lp_requiredTech = lib1_gf_GetUnitAliasGameLink(lp_requiredTech, 255);
        }
        else {
        }
    }

    if (((lp_requiredTech == null) || (AITechCount(lp_player, lp_requiredTech, c_techCountCompleteOnly) != 0)) && (lv_progressCount < lp_count)) {
        AIResearch(lp_player, 0, -1, lp_upgrade);
    }

}

int lib1_gf_GetTownInRegion (int lp_player, region lp_region) {
    // Variable Declarations
    int lv_i;
    int lv_i_free;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i_free = AIGetNextUnusedTownSlot(lp_player);

    // Implementation
    while ((lib1_gv_townMax > lv_i)) {
        if ((AIGetTownState(lp_player, lv_i) != 0) && (AIGetTownState(lp_player, lv_i) != -1) && (RegionContainsPoint(lp_region, AIGetTownLocation(lp_player, lv_i)) == true)) {
            return lv_i;
        }
        else {
            lv_i += 1;
        }
    }
    AIDeclareTown(lp_player, lv_i_free, RegionGetCenter(lp_region));
    return lv_i_free;
}

void lib1_gf_OrderUnitToAttackMove (unit lp_unit, point lp_target) {
    // Variable Declarations
    order lv_ord;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ord = OrderTargetingPoint(AbilityCommand("attack", 0), lp_target);

    // Implementation
    if ((UnitOrderIsValid(lp_unit, lv_ord) == true)) {
        libNtve_gf_AICast(lp_unit, lv_ord);
        return ;
    }

    lv_ord = OrderTargetingPoint(AbilityCommand("move", 3), lp_target);
    if ((UnitOrderIsValid(lp_unit, lv_ord) == true)) {
        libNtve_gf_AICast(lp_unit, lv_ord);
        return ;
    }

    lv_ord = OrderTargetingPoint(AbilityCommand("move", 0), lp_target);
    if ((UnitOrderIsValid(lp_unit, lv_ord) == true)) {
        libNtve_gf_AICast(lp_unit, lv_ord);
        return ;
    }

}

order lib1_gf_CreateOrderforAI (abilcmd lp_abilCmd, int lp_player) {
    // Variable Declarations
    order lv_ord;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_abilCmd == null)) {
        return null;
    }

    lv_ord = Order(lp_abilCmd);
    OrderSetPlayer(lv_ord, lp_player);
    return lv_ord;
}

void lib1_gf_AddAttackWaveUnitType (int lp_count, string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    AIAttackWaveAddUnits(-1, lp_count, lp_unitType);
}

unitgroup lib1_gf_CreateUnitsWithDefaultFacing (int lp_count, string lp_type, int lp_style, int lp_player, point lp_p) {
    // Variable Declarations
    fixed lv_angle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((CatalogFieldValueGet(c_gameCatalogUnit, lp_type, "FlagArray", lp_player) == "1")) {
        lv_angle = libNtve_gf_RandomAngle();
    }
    else {
        lv_angle = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, lp_type, "Facing", lp_player));
        lv_angle -= 90.0;
    }
    return UnitCreate(lp_count, lp_type, lp_style, lp_player, lp_p, lv_angle);
}

unitgroup lib1_gf_CreateUnitsAtPoint2 (int lp_count, string lp_type, int lp_flags, int lp_player, point lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return UnitCreate(lp_count, lp_type, lp_flags, lp_player, lp_p, PointGetFacing(lp_p));
}

unitgroup lib1_gf_UnitCreateFacingPoint (int lp_count, string lp_type, int lp_flags, int lp_player, point lp_pos, point lp_facing) {
    // Automatic Variable Declarations
    // Implementation
    return UnitCreate(lp_count, lp_type, lp_flags, lp_player, lp_pos, AngleBetweenPoints(lp_pos, lp_facing));
}

string lib1_gf_ListCreate () {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = ("^" + IntToString(lib1_gv_createdLists));

    // Implementation
    lib1_gv_createdLists += 1;
    DataTableSetInt(true, lv_name, 0);
    return lv_name;
}

void lib1_gf_ListCreateWithName (string lp_list) {
    // Automatic Variable Declarations
    // Implementation
    if ((DataTableValueExists(true, lp_list) == false)) {
        DataTableSetInt(true, lp_list, 0);
    }

}

void lib1_gf_ListDestroy (string lp_list) {
    // Automatic Variable Declarations
    int autoD453C854_ae;
    int autoD453C854_var;

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    autoD453C854_ae = (lib1_gf_ListSize(lp_list) - 1);
    autoD453C854_var = 0;
    for ( ; autoD453C854_var <= autoD453C854_ae; autoD453C854_var += 1 ) {
        DataTableValueRemove(true, lib1_gf_ListGetDatabaseName(lp_list, autoD453C854_var));
    }
}

void lib1_gf_ListClear (string lp_list) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    while ((lib1_gf_ListSize(lp_list) > 0)) {
        lib1_gf_ListPopBack(lp_list);
    }
}

void lib1_gf_ListPopBack (string lp_list) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((DataTableGetInt(true, lp_list) > 0)) {
        DataTableSetInt(true, lp_list, (DataTableGetInt(true, lp_list) - 1));
        DataTableValueRemove(true, lib1_gf_ListGetDatabaseName(lp_list, DataTableGetInt(true, lp_list)));
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), StringExternal("Param/Value/lib_1_5CC7A239"), SoundLink("UI_GenericError", 0));
    }
}

int lib1_gf_ListSize (string lp_list) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    return DataTableGetInt(true, lp_list);
}

bool lib1_gf_ListIsEmpty (string lp_list) {
    // Variable Declarations
    bool lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lib1_gf_ListSize(lp_list) == 0)) {
        lv_result = true;
    }

    return lv_result;
}

string lib1_gf_ListGetDatabaseName (string lp_arrayName, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_arrayName + "[" + IntToString(lp_index) + "]");
}

void lib1_gf_ListCreateIfNotExists (string lp_list) {
    // Automatic Variable Declarations
    // Implementation
    if ((DataTableValueExists(true, lp_list) == false)) {
        DataTableSetInt(true, lp_list, 0);
    }

}

void lib1_gf_ListStringCopy (string lp_source, string lp_target) {
    // Automatic Variable Declarations
    int autoCCD7AAD7_ae;
    int autoCCD7AAD7_var;

    // Implementation
    if ((lib1_gf_ListSize(lp_source) == 0)) {
        return ;
    }

    lib1_gf_ListClear(lp_target);
    autoCCD7AAD7_ae = lib1_gf_ListSize(lp_source);
    autoCCD7AAD7_var = 1;
    for ( ; autoCCD7AAD7_var <= autoCCD7AAD7_ae; autoCCD7AAD7_var += 1 ) {
        lib1_gf_ListStringPush(lp_target, lib1_gf_ListStringGet(lp_source, autoCCD7AAD7_var));
    }
}

string lib1_gf_ListStringGet (string lp_list, int lp_index) {
    // Variable Declarations
    string lv_returnvalue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_returnvalue = "";

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        lv_returnvalue = DataTableGetString(true, lib1_gf_ListGetDatabaseName(lp_list, (lp_index - 1)));
    }

    return lv_returnvalue;
}

int lib1_gf_ListStringIndexOf (string lp_list, string lp_value) {
    // Automatic Variable Declarations
    int auto27A71848_ae;
    int auto27A71848_var;

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lib1_gf_ListIsEmpty(lp_list) == false)) {
        auto27A71848_ae = lib1_gf_ListSize(lp_list);
        auto27A71848_var = 1;
        for ( ; auto27A71848_var <= auto27A71848_ae; auto27A71848_var += 1 ) {
            if ((lib1_gf_ListStringGet(lp_list, auto27A71848_var) == lp_value)) {
                return auto27A71848_var;
            }

        }
    }

    return -1;
}

bool lib1_gf_ListStringIncludes (string lp_list, string lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lib1_gf_ListStringIndexOf(lp_list, lp_value) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void lib1_gf_ListStringSet (string lp_list, int lp_index, string lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        DataTableSetString(true, lib1_gf_ListGetDatabaseName(lp_list, (lp_index - 1)), lp_value);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_A5CDA3E5") + StringToText(lp_value) + StringExternal("Param/Value/lib_1_0B8E04FD") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_0F2089B5") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void lib1_gf_ListStringPush (string lp_list, string lp_addedValue) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    DataTableSetString(true, lib1_gf_ListGetDatabaseName(lp_list, lib1_gf_ListSize(lp_list)), lp_addedValue);
    DataTableSetInt(true, lp_list, (DataTableGetInt(true, lp_list) + 1));
}

void lib1_gf_ListStringInclude (string lp_list, string lp_addedValue) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lib1_gf_ListStringIncludes(lp_list, lp_addedValue) == false)) {
        lib1_gf_ListStringPush(lp_list, lp_addedValue);
    }

}

void lib1_gf_ListStringInsertAt (string lp_list, int lp_index, string lp_value) {
    // Variable Declarations
    int lv_start;
    int lv_end;

    // Automatic Variable Declarations
    int autoC809339E_ae;
    int autoC809339E_var;

    // Variable Initialization

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        lib1_gf_ListStringPush(lp_list, lib1_gf_ListStringGet(lp_list, lib1_gf_ListSize(lp_list)));
        lv_start = (lib1_gf_ListSize(lp_list) - 2);
        lv_end = (lp_index + 1);
        autoC809339E_ae = (lv_start - lv_end);
        autoC809339E_var = 0;
        for ( ; autoC809339E_var <= autoC809339E_ae; autoC809339E_var += 1 ) {
            DataTableSetString(true, lib1_gf_ListGetDatabaseName(lp_list, (lv_start - autoC809339E_var)), DataTableGetString(true, lib1_gf_ListGetDatabaseName(lp_list, (lv_start - autoC809339E_var - 1))));
        }
        lib1_gf_ListStringSet(lp_list, lp_index, lp_value);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_C5B22921") + StringToText(lp_value) + StringExternal("Param/Value/lib_1_BB3F723D") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_9DBE8CCE") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void lib1_gf_ListStringRemoveAt (string lp_list, int lp_index) {
    // Automatic Variable Declarations
    int auto7E959131_ae;
    int auto7E959131_var;

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        auto7E959131_ae = (lib1_gf_ListSize(lp_list) - 2);
        auto7E959131_var = (lp_index - 1);
        for ( ; auto7E959131_var <= auto7E959131_ae; auto7E959131_var += 1 ) {
            DataTableSetString(true, lib1_gf_ListGetDatabaseName(lp_list, auto7E959131_var), DataTableGetString(true, lib1_gf_ListGetDatabaseName(lp_list, (auto7E959131_var + 1))));
        }
        lib1_gf_ListPopBack(lp_list);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_F3530244") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_960A7916") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void lib1_gf_ListStringExclude (string lp_list, string lp_value) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    lv_index = lib1_gf_ListStringIndexOf(lp_list, lp_value);
    while ((lv_index > 0)) {
        lib1_gf_ListStringRemoveAt(lp_list, lv_index);
        lv_index = lib1_gf_ListStringIndexOf(lp_list, lp_value);
    }
}

text lib1_gf_ListStringtoText (string lp_list) {
    // Variable Declarations
    string lv_log_string;

    // Automatic Variable Declarations
    int auto03CB7E14_ae;
    int auto03CB7E14_var;

    // Variable Initialization
    lv_log_string = "";

    // Implementation
    if ((lp_list == null) && (DataTableValueExists(true, lp_list) == false)) {
        return StringToText("-");
    }
    else {
        auto03CB7E14_ae = lib1_gf_ListSize(lp_list);
        auto03CB7E14_var = 1;
        for ( ; auto03CB7E14_var <= auto03CB7E14_ae; auto03CB7E14_var += 1 ) {
            if ((auto03CB7E14_var > 1)) {
                lv_log_string = (lv_log_string + ",");
            }

            lv_log_string = (lv_log_string + lib1_gf_ListStringGet(lp_list, auto03CB7E14_var));
        }
        return StringToText(lv_log_string);
    }
}

void lib1_gf_MapStringSet (string lp_map, string lp_index, string lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetString(true, ("$S" + lp_map + "_" + lp_index), lp_actor);
    lib1_gf_ListStringInclude(("$S" + lp_map), lp_index);
}

string lib1_gf_MapStringGet (string lp_map, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetString(true, ("$S" + lp_map + "_" + lp_index));
}

string lib1_gf_MapStringIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$S" + lp_unit);
}

bool lib1_gf_MapStringIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_ListStringIncludes(lib1_gf_MapStringIndexes(lp_unit), lp_index);
}

void lib1_gf_TacticalAIFilterSortByLife (aifilter lp_filter, fixed lp_damage, fixed lp_distance) {
    // Automatic Variable Declarations
    // Implementation
    AISetFilterLifeSortReference(lp_filter, lp_damage, lp_distance);
}

void lib1_gf_ClearArmedCache (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = lp_player;

    // Implementation
    lib1_gv_cACHE_ARMED[lv_p] = " ";
    lib1_gv_cACHE_DISARMED[lv_p] = " ";
}

void lib1_gf_Armunit (int lp_player, unit lp_unit) {
    // Variable Declarations
    string lv_unitType;
    int lv_i;
    string lv_weapon;
    string lv_turret;
    string lv_aBILITY;
    string lv_behavior;

    // Automatic Variable Declarations
    int autoA494B858_ae;
    const int autoA494B858_ai = 1;
    int auto57F3C68A_ae;
    const int auto57F3C68A_ai = 1;

    // Variable Initialization
    lv_unitType = UnitGetType(lp_unit);

    // Implementation
    if ((UnitHasBehavior2(lp_unit, "Monobattle") == false)) {
        return ;
    }

    UnitBehaviorRemove(lp_unit, "Monobattle", 1);
    autoA494B858_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (autoA494B858_ai >= 0 && lv_i <= autoA494B858_ae) || (autoA494B858_ai < 0 && lv_i >= autoA494B858_ae) ) ; lv_i += autoA494B858_ai ) {
        lv_aBILITY = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny));
        if (((lib1_gf_AbilityIsDanger(lp_player, lv_aBILITY) == true))) {
            UnitAbilityAdd(lp_unit, lv_aBILITY);
        }

    }
    auto57F3C68A_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType, "BehaviorArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto57F3C68A_ai >= 0 && lv_i <= auto57F3C68A_ae) || (auto57F3C68A_ai < 0 && lv_i >= auto57F3C68A_ae) ) ; lv_i += auto57F3C68A_ai ) {
        lv_behavior = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "BehaviorArray[" + IntToString(lv_i) + "].Link", lp_player));
        if ((lib1_gf_BehaviorisDanger(lp_player, lv_behavior) == true)) {
            UnitBehaviorAdd(lp_unit, lv_behavior, lp_unit, 1);
        }

    }
}

void lib1_gf_Disarmunit (int lp_player, unit lp_unit) {
    // Variable Declarations
    string lv_unitType;
    int lv_i;
    string lv_weapon;
    string lv_turret;
    string lv_ability;
    int lv_cAbilityEffectAttack;
    string lv_behavior;

    // Automatic Variable Declarations
    int autoFAE0E202_ae;
    const int autoFAE0E202_ai = 1;
    int auto083E743E_ae;
    const int auto083E743E_ai = 1;

    // Variable Initialization
    lv_unitType = UnitGetType(lp_unit);
    lv_cAbilityEffectAttack = CatalogEntryClass(c_gameCatalogAbil, "attack");

    // Implementation
    if ((UnitHasBehavior2(lp_unit, "Monobattle") == true)) {
        return ;
    }

    UnitBehaviorAdd(lp_unit, "Monobattle", lp_unit, 1);
    autoFAE0E202_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (autoFAE0E202_ai >= 0 && lv_i <= autoFAE0E202_ae) || (autoFAE0E202_ai < 0 && lv_i >= autoFAE0E202_ae) ) ; lv_i += autoFAE0E202_ai ) {
        lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny));
        if (((lib1_gf_AbilityIsDanger(lp_player, lv_ability) == true))) {
            UnitAbilityRemove(lp_unit, lv_ability);
        }

    }
    auto083E743E_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType, "BehaviorArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto083E743E_ai >= 0 && lv_i <= auto083E743E_ae) || (auto083E743E_ai < 0 && lv_i >= auto083E743E_ae) ) ; lv_i += auto083E743E_ai ) {
        lv_behavior = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "BehaviorArray[" + IntToString(lv_i) + "].Link", lp_player));
        if ((lib1_gf_BehaviorisDanger(lp_player, lv_behavior) == true)) {
            UnitBehaviorRemove(lp_unit, lv_behavior, 1);
        }

    }
}

void lib1_gf_ArmUnitType (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_i;
    string lv_weapon;
    string lv_turret;
    string lv_ability;
    bool lv_danger;
    string lv_behavior;

    // Automatic Variable Declarations
    int autoC5228607_ae;
    const int autoC5228607_ai = 1;
    int auto2020F362_ae;
    const int auto2020F362_ai = 1;

    // Variable Initialization

    // Implementation
    if (((CatalogEntryIsValid(c_gameCatalogUnit, lp_unit) == false) || (lib1_gf_UnitTypeisArmed(lp_player, lp_unit) == true))) {
        return ;
    }

    if ((lib1_gf_UnitTypeisDisArmed(lp_player, lp_unit) == true)) {
        lib1_gv_cACHE_DISARMED[lp_player] = StringReplaceWord(lib1_gv_cACHE_DISARMED[lp_player], (" " + (lp_unit)), "", c_stringReplaceAll, c_stringCase);
    }

    autoC5228607_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "WeaponArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (autoC5228607_ai >= 0 && lv_i <= autoC5228607_ae) || (autoC5228607_ai < 0 && lv_i >= autoC5228607_ae) ) ; lv_i += autoC5228607_ai ) {
        lv_weapon = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Link", lp_player));
        lv_turret = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Turret", lp_player));
        lv_danger = true;
    }
    auto2020F362_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto2020F362_ai >= 0 && lv_i <= auto2020F362_ae) || (auto2020F362_ai < 0 && lv_i >= auto2020F362_ae) ) ; lv_i += auto2020F362_ai ) {
        lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_ability) == false)) {
            continue;
        }

        if (((CatalogEntryClass(c_gameCatalogAbil, lv_ability) == lib1_gv_cAbilityAttack) || (lib1_gf_AbilityIsDanger(lp_player, lv_ability) == true))) {
            lv_danger = true;
        }

    }
    if ((lv_danger == true)) {
        lib1_gv_cACHE_ARMED[lp_player] = (lib1_gv_cACHE_ARMED[lp_player] + (lp_unit) + " ");
    }

}

void lib1_gf_Disarmunittype (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_i;
    string lv_weapon;
    string lv_turret;
    string lv_ability;
    bool lv_danger;
    string lv_behavior;

    // Automatic Variable Declarations
    int auto02D27BD7_ae;
    const int auto02D27BD7_ai = 1;
    int autoD68059DD_ae;
    const int autoD68059DD_ai = 1;

    // Variable Initialization

    // Implementation
    if (((CatalogEntryIsValid(c_gameCatalogUnit, lp_unit) == false) || (lib1_gf_UnitTypeisDisArmed(lp_player, lp_unit) == true))) {
        return ;
    }

    if ((lib1_gf_UnitTypeisArmed(lp_player, lp_unit) == true)) {
        lib1_gv_cACHE_ARMED[lp_player] = StringReplaceWord(lib1_gv_cACHE_ARMED[lp_player], (" " + (lp_unit)), "", c_stringReplaceAll, c_stringCase);
    }

    auto02D27BD7_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "WeaponArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto02D27BD7_ai >= 0 && lv_i <= auto02D27BD7_ae) || (auto02D27BD7_ai < 0 && lv_i >= auto02D27BD7_ae) ) ; lv_i += auto02D27BD7_ai ) {
        lv_weapon = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Link", lp_player));
        lv_turret = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Turret", lp_player));
        lv_danger = true;
    }
    autoD68059DD_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (autoD68059DD_ai >= 0 && lv_i <= autoD68059DD_ae) || (autoD68059DD_ai < 0 && lv_i >= autoD68059DD_ae) ) ; lv_i += autoD68059DD_ai ) {
        lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_ability) == false)) {
            continue;
        }

        if (((CatalogEntryClass(c_gameCatalogAbil, lv_ability) == lib1_gv_cAbilityAttack) || (lib1_gf_AbilityIsDanger(lp_player, lv_ability) == true))) {
            lv_danger = true;
        }

    }
    if ((lv_danger == true)) {
        lib1_gv_cACHE_DISARMED[lp_player] = (lib1_gv_cACHE_DISARMED[lp_player] + (lp_unit) + " ");
    }

}

bool lib1_gf_UnitTypeisArmed (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((StringFind(lib1_gv_cACHE_ARMED[lp_player], (" " + (lp_unit) + " "), c_stringCase) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool lib1_gf_UnitTypeisDisArmed (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((StringFind(lib1_gv_cACHE_DISARMED[lp_player], (" " + (lp_unit) + " "), c_stringCase) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool lib1_gf_BehaviorisDetector (int lp_player, string lp_behavior) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_sEARCHMODE = lib1_ge_SearchMode_Detection;
    lib1_gv_cACHE_TMPEFFECTS_SIZE = 0;
    return lib1_gf_ByPassBehavior(lp_player, lp_behavior);
}

bool lib1_gf_AbilityIsDetector (int lp_player, string lp_ability) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_sEARCHMODE = lib1_ge_SearchMode_Detection;
    lib1_gv_cACHE_TMPEFFECTS_SIZE = 0;
    return lib1_gf_ByPassAbility(lp_player, lp_ability);
}

bool lib1_gf_UnitisDetector (int lp_player, string lp_unitType) {
    // Variable Declarations
    string lv_ability;
    string lv_behavior;

    // Automatic Variable Declarations
    int auto1B04ACCD_ae;
    int auto1B04ACCD_var;
    int auto493B5EA4_ae;
    int auto493B5EA4_var;

    // Variable Initialization

    // Implementation
    auto1B04ACCD_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unitType, "AbilArray", lp_player) - 1);
    auto1B04ACCD_var = 0;
    for ( ; auto1B04ACCD_var <= auto1B04ACCD_ae; auto1B04ACCD_var += 1 ) {
        lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "AbilArray[" + IntToString(auto1B04ACCD_var) + "].Link", lp_player));
        if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_ability) == true) && (lib1_gf_AbilityIsDetector(lp_player, lv_ability) == true)) {
            continue;
        }

    }
    auto493B5EA4_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unitType, "BehaviorArray", lp_player) - 1);
    auto493B5EA4_var = 0;
    for ( ; auto493B5EA4_var <= auto493B5EA4_ae; auto493B5EA4_var += 1 ) {
        lv_behavior = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "BehaviorArray[" + IntToString(auto493B5EA4_var) + "].Link", lp_player));
        if ((CatalogEntryIsValid(c_gameCatalogBehavior, lv_behavior) == true) && (lib1_gf_BehaviorisDetector(lp_player, lv_behavior) == true)) {
            return true;
        }

    }
    return false;
}

bool lib1_gf_FilterEnemyisExcluded (string lp_filter) {
    // Variable Declarations
    string lv_excludedString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_excludedString = "";

    // Implementation
    lv_excludedString = StringWord(StringReplaceWord(lp_filter, ";", " ", c_stringReplaceAll, c_stringCase), 2);
    if ((StringFind(lv_excludedString, "Enemy", c_stringCase) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool lib1_gf_UnitIsDanger (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_i;
    string lv_ability;
    string lv_behavior;
    bool lv_isDanger;

    // Automatic Variable Declarations
    int auto74A941B0_ae;
    const int auto74A941B0_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogUnit, lp_unit) == false)) {
        return false;
    }

    if ((StringFind(lib1_gv_cACHE_DANGER_UNITS, (" " + (lp_unit) + " "), c_stringCase) > 0)) {
        return true;
    }

    if ((StringFind(lib1_gv_cACHE_SAFE_UNITS, (" " + (lp_unit) + " "), c_stringCase) > 0)) {
        return false;
    }

    if ((CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "WeaponArray", lp_player) > 0)) {
        lib1_gv_cACHE_DANGER_UNITS = (lib1_gv_cACHE_DANGER_UNITS + (lp_unit) + " ");
        return true;
    }

    auto74A941B0_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto74A941B0_ai >= 0 && lv_i <= auto74A941B0_ae) || (auto74A941B0_ai < 0 && lv_i >= auto74A941B0_ae) ) ; lv_i += auto74A941B0_ai ) {
        lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "AbilArray[" + IntToString(lv_i) + "].Link", lp_player));
        if ((lib1_gf_AbilityIsDanger(lp_player, lv_ability) == true)) {
            lib1_gv_cACHE_DANGER_UNITS = (lib1_gv_cACHE_DANGER_UNITS + (lp_unit) + " ");
            return true;
        }

    }
    lib1_gv_cACHE_SAFE_UNITS = (lib1_gv_cACHE_SAFE_UNITS + (lp_unit) + " ");
    return false;
}

bool lib1_gf_AbilityIsDanger (int lp_player, string lp_ability) {
    // Variable Declarations
    bool lv_isDanger;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((StringFind(lib1_gv_cACHE_DANGER_ABILITIES, (" " + (lp_ability) + " "), c_stringCase) > 0)) {
        return true;
    }

    if ((StringFind(lib1_gv_cACHE_SAFE_ABILITIES, (" " + (lp_ability) + " "), c_stringCase) > 0)) {
        return false;
    }

    lib1_gv_sEARCHMODE = lib1_ge_SearchMode_Agressive;
    lib1_gv_cACHE_TMPEFFECTS_SIZE = 0;
    lv_isDanger = lib1_gf_ByPassAbility(lp_player, lp_ability);
    if ((lv_isDanger == true)) {
        lib1_gv_cACHE_DANGER_ABILITIES = (lib1_gv_cACHE_DANGER_ABILITIES + (lp_ability) + " ");
    }
    else {
        lib1_gv_cACHE_SAFE_ABILITIES = (lib1_gv_cACHE_SAFE_ABILITIES + (lp_ability) + " ");
    }
    return lv_isDanger;
}

bool lib1_gf_BehaviorisDanger (int lp_player, string lp_behavior) {
    // Variable Declarations
    bool lv_isDanger;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((StringFind(lib1_gv_cACHE_DANGER_BEHAVIOR, (" " + (lp_behavior) + " "), c_stringCase) > 0)) {
        return true;
    }

    if ((StringFind(lib1_gv_cACHE_SAFE_BEHAVIOR, (" " + (lp_behavior) + " "), c_stringCase) > 0)) {
        return false;
    }

    lib1_gv_sEARCHMODE = lib1_ge_SearchMode_Agressive;
    lib1_gv_cACHE_TMPEFFECTS_SIZE = 0;
    lv_isDanger = lib1_gf_ByPassBehavior(lp_player, lp_behavior);
    if ((lv_isDanger == true)) {
        lib1_gv_cACHE_DANGER_BEHAVIOR = (lib1_gv_cACHE_DANGER_BEHAVIOR + (lp_behavior) + " ");
    }
    else {
        lib1_gv_cACHE_SAFE_BEHAVIOR = (lib1_gv_cACHE_SAFE_BEHAVIOR + (lp_behavior) + " ");
    }
    return lv_isDanger;
}

void lib1_gf_ClearCache () {
    // Variable Declarations
    int lv_i;
    int lv_p;

    // Automatic Variable Declarations
    int auto15C60F0A_ae;
    const int auto15C60F0A_ai = 1;
    int autoFB3348ED_ae;
    const int autoFB3348ED_ai = 1;
    int auto11AEEADE_ae;
    const int auto11AEEADE_ai = 1;
    int auto1C213BE3_ae;
    const int auto1C213BE3_ai = 1;
    int auto0443105D_ae;
    const int auto0443105D_ai = 1;
    int auto47E63C28_ae;
    const int auto47E63C28_ai = 1;
    int auto4B1C6780_ae;
    const int auto4B1C6780_ai = 1;

    // Variable Initialization

    // Implementation
    lib1_gf_ListClear(lib1_gv_byPassUnits);
    auto15C60F0A_ae = lib1_gv_cACHESIZE_REQUIREMENT;
    lv_i = 1;
    for ( ; ( (auto15C60F0A_ai >= 0 && lv_i <= auto15C60F0A_ae) || (auto15C60F0A_ai < 0 && lv_i >= auto15C60F0A_ae) ) ; lv_i += auto15C60F0A_ai ) {
        lib1_gv_cACHE_REQUIREMENT[lv_i] = null;
    }
    lib1_gv_cACHESIZE_REQUIREMENT = 0;
    autoFB3348ED_ae = lib1_gv_cACHESIZE_UPGRADES;
    lv_i = 1;
    for ( ; ( (autoFB3348ED_ai >= 0 && lv_i <= autoFB3348ED_ae) || (autoFB3348ED_ai < 0 && lv_i >= autoFB3348ED_ae) ) ; lv_i += autoFB3348ED_ai ) {
        lib1_gv_cACHE_UPGRADES[lv_i] = null;
    }
    lib1_gv_cACHESIZE_UPGRADES = 0;
    auto11AEEADE_ae = lib1_gv_cACHESIZE_UNITS;
    lv_i = 1;
    for ( ; ( (auto11AEEADE_ai >= 0 && lv_i <= auto11AEEADE_ae) || (auto11AEEADE_ai < 0 && lv_i >= auto11AEEADE_ae) ) ; lv_i += auto11AEEADE_ai ) {
        lib1_gv_cACHE_UNITS[lv_i] = null;
    }
    lib1_gv_cACHESIZE_UNITS = 0;
    auto1C213BE3_ae = lib1_gv_cACHESIZE_BEHAVIORS;
    lv_i = 1;
    for ( ; ( (auto1C213BE3_ai >= 0 && lv_i <= auto1C213BE3_ae) || (auto1C213BE3_ai < 0 && lv_i >= auto1C213BE3_ae) ) ; lv_i += auto1C213BE3_ai ) {
        lib1_gv_cACHE_BEHAVIORS[lv_i] = null;
    }
    lib1_gv_cACHESIZE_BEHAVIORS = 0;
    auto0443105D_ae = lib1_gv_cACHESIZE_ABILITIES;
    lv_i = 1;
    for ( ; ( (auto0443105D_ai >= 0 && lv_i <= auto0443105D_ae) || (auto0443105D_ai < 0 && lv_i >= auto0443105D_ae) ) ; lv_i += auto0443105D_ai ) {
        lib1_gv_cACHE_ABILITIES[lv_i] = null;
    }
    lib1_gv_cACHESIZE_ABILITIES = 0;
    auto47E63C28_ae = lib1_gv_cACHESIZE_EFFECTS;
    lv_i = 1;
    for ( ; ( (auto47E63C28_ai >= 0 && lv_i <= auto47E63C28_ae) || (auto47E63C28_ai < 0 && lv_i >= auto47E63C28_ae) ) ; lv_i += auto47E63C28_ai ) {
        lib1_gv_cACHE_EFFECTS[lv_i] = null;
    }
    lib1_gv_cACHESIZE_EFFECTS = 0;
    auto4B1C6780_ae = lib1_gv_cACHESIZE_WEAPONS;
    lv_i = 1;
    for ( ; ( (auto4B1C6780_ai >= 0 && lv_i <= auto4B1C6780_ae) || (auto4B1C6780_ai < 0 && lv_i >= auto4B1C6780_ae) ) ; lv_i += auto4B1C6780_ai ) {
        lib1_gv_cACHE_WEAPONS[lv_i] = null;
    }
    lib1_gv_cACHESIZE_WEAPONS = 0;
}

void lib1_gf_CacheUnit (int lp_player, string lp_unit, bool lp_scan) {
    // Variable Declarations
    string lv_aBILITY;
    string lv_bEHAVIOR;
    string lv_uNIT;
    string lv_requirement;
    int lv_unitsCount;
    int lv_i;
    string lv_upgradeEntry;
    int lv_affectedUnitIndex;
    bool lv_hasDangerAbilities;
    bool lv_isDangerAbility;
    int lv_k;
    int lv_b;
    int lv_cl;
    int lv_lb;
    string lv_xqswdpoidupimlyw;

    // Automatic Variable Declarations
    int autoE92DC0D6_ae;
    const int autoE92DC0D6_ai = 1;
    int autoF04E0707_ae;
    const int autoF04E0707_ai = 1;
    int autoF485BF5D_ae;
    const int autoF485BF5D_ai = 1;
    int auto6A9BAC6A_ae;
    const int auto6A9BAC6A_ai = 1;
    int auto500C0836_ae;
    const int auto500C0836_ai = 1;
    int auto74CEFB57_ae;
    const int auto74CEFB57_ai = 1;
    int autoA3E599CB_catalog;
    int autoA3E599CB_i;
    int auto5EDA499F_ae;
    const int auto5EDA499F_ai = 1;
    int auto5B232F2F_ae;
    const int auto5B232F2F_ai = 1;
    int auto7A370D4F_ae;
    const int auto7A370D4F_ai = 1;
    int autoBA50935C_catalog;
    int autoBA50935C_i;
    int auto794CF4B8_ae;
    const int auto794CF4B8_ai = 1;
    int auto3317CDC9_catalog;
    int auto3317CDC9_i;
    int auto5A452240_ae;
    const int auto5A452240_ai = 1;

    // Variable Initialization
    lv_hasDangerAbilities = lib1_gf_UnitTypeisArmed(lp_player, lp_unit);
    lv_xqswdpoidupimlyw = ("Race:" + UserDataGetString("Rules", lib1_gv_atpuabinihtsneew[lp_player], "Category", 1));

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogUnit, lp_unit) == false)) {
        return ;
    }

    autoE92DC0D6_ae = lib1_gv_cACHESIZE_UNITS;
    lv_i = 1;
    for ( ; ( (autoE92DC0D6_ai >= 0 && lv_i <= autoE92DC0D6_ae) || (autoE92DC0D6_ai < 0 && lv_i >= autoE92DC0D6_ae) ) ; lv_i += autoE92DC0D6_ai ) {
        if ((lib1_gv_cACHE_UNITS[lv_i] == lp_unit)) {
            return ;
        }

    }
    lib1_gv_cACHESIZE_UNITS += 1;
    lib1_gv_cACHE_UNITS[lib1_gv_cACHESIZE_UNITS] = lp_unit;
    TechTreeUnitAllow(lp_player, lp_unit, true);
    if ((lib1_gf_UnitTypeisArmed(lp_player, lp_unit) == true)) {
        autoF04E0707_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "EquipmentArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoF04E0707_ai >= 0 && lv_i <= autoF04E0707_ae) || (autoF04E0707_ai < 0 && lv_i >= autoF04E0707_ae) ) ; lv_i += autoF04E0707_ai ) {
            lib1_gf_CacheWeapon(lp_player, (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "EquipmentArray[" + IntToString(lv_i) + "].Weapon", lp_player)));
            lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "EquipmentArray[" + IntToString(lv_i) + "].Effect", lp_player)));
        }
        autoF485BF5D_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "WeaponArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoF485BF5D_ai >= 0 && lv_i <= autoF485BF5D_ae) || (autoF485BF5D_ai < 0 && lv_i >= autoF485BF5D_ae) ) ; lv_i += autoF485BF5D_ai ) {
            lib1_gf_CacheWeapon(lp_player, (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Link", lp_player)));
        }
    }
    else {
        lib1_gf_Disarmunittype(lp_player, lp_unit);
    }
    auto6A9BAC6A_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "BehaviorArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto6A9BAC6A_ai >= 0 && lv_i <= auto6A9BAC6A_ae) || (auto6A9BAC6A_ai < 0 && lv_i >= auto6A9BAC6A_ae) ) ; lv_i += auto6A9BAC6A_ai ) {
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "BehaviorArray[" + IntToString(lv_i) + "].Link", lp_player)));
    }
    auto500C0836_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto500C0836_ai >= 0 && lv_i <= auto500C0836_ae) || (auto500C0836_ai < 0 && lv_i >= auto500C0836_ae) ) ; lv_i += auto500C0836_ai ) {
        lv_aBILITY = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_aBILITY) == false)) {
            continue;
        }
        else {
            if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMorph, "") == true) && (lib1_gf_UnitTypeisArmed(lp_player, lp_unit) == true)) {
                lv_unitsCount = CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player);
                if ((lv_unitsCount > 0)) {
                    lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString((lv_unitsCount - 1)) + "].Unit", lp_player));
                    lib1_gf_ArmUnitType(lp_player, lv_uNIT);
                }

            }

            if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilArmMagazine, "") == true)) {
                if ((lv_hasDangerAbilities == true)) {
                    auto74CEFB57_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player) - 1);
                    lv_i = 0;
                    for ( ; ( (auto74CEFB57_ai >= 0 && lv_i <= auto74CEFB57_ae) || (auto74CEFB57_ai < 0 && lv_i >= auto74CEFB57_ae) ) ; lv_i += auto74CEFB57_ai ) {
                        lib1_gf_ArmUnitType(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player)));
                        lib1_gf_CacheUnit(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player)), false);
                    }
                }
                else {
                    continue;
                }
            }

            if (((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMerge, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMorph, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilTrain, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilBuild, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilWarpable, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilWarpTrain, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMergeable, "") == true))) {
                continue;
            }

            lv_isDangerAbility = lib1_gf_AbilityIsDanger(lp_player, lv_aBILITY);
            if (((lv_hasDangerAbilities == true) || (lv_isDangerAbility == false))) {
                lib1_gf_CacheAbility(lp_player, lv_aBILITY, false);
                if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilEffectInstant, "") == true)) {
                    lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilEffectTarget, "") == true)) {
                    lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
                }
            }

        }
    }
    if ((lp_scan == true)) {
        autoA3E599CB_catalog = c_gameCatalogAbil;
        autoA3E599CB_i = 1;
        for ( ; autoA3E599CB_i <= CatalogEntryCount(c_gameCatalogAbil) ; autoA3E599CB_i += 1 ) {
            lv_aBILITY = CatalogEntryGet(autoA3E599CB_catalog, autoA3E599CB_i);
            if ((PlayerRace(lp_player) != "Neut") && (StringFind(CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "EditorCategories", lp_player), lv_xqswdpoidupimlyw, c_stringNoCase) == -1)) {
                continue;
            }
            else {
                if (((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilTrain, "") == true))) {
                    auto5EDA499F_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player) - 1);
                    lv_i = 0;
                    for ( ; ( (auto5EDA499F_ai >= 0 && lv_i <= auto5EDA499F_ae) || (auto5EDA499F_ai < 0 && lv_i >= auto5EDA499F_ae) ) ; lv_i += auto5EDA499F_ai ) {
                        lv_unitsCount = CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player);
                        if ((lv_unitsCount > 0)) {
                            lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit[" + IntToString(0) + "]", lp_player));
                            if ((lv_uNIT == lp_unit)) {
                                lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Button.Requirements", lp_player)));
                                lib1_gf_CacheAbility(lp_player, lv_aBILITY, true);
                                break;
                            }

                        }

                    }
                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilWarpTrain, "") == true)) {
                    auto5B232F2F_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player) - 1);
                    lv_i = 0;
                    for ( ; ( (auto5B232F2F_ai >= 0 && lv_i <= auto5B232F2F_ae) || (auto5B232F2F_ai < 0 && lv_i >= auto5B232F2F_ae) ) ; lv_i += auto5B232F2F_ai ) {
                        if ((lp_unit == (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player)))) {
                            lib1_gf_CheckAbilityCommand(lp_player, lv_aBILITY, lv_i);
                            break;
                        }

                    }
                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilBuild, "") == true)) {
                    auto7A370D4F_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player) - 1);
                    lv_i = 0;
                    for ( ; ( (auto7A370D4F_ai >= 0 && lv_i <= auto7A370D4F_ae) || (auto7A370D4F_ai < 0 && lv_i >= auto7A370D4F_ae) ) ; lv_i += auto7A370D4F_ai ) {
                        lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player));
                        if ((lv_uNIT == lp_unit)) {
                            lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Button.Requirements", lp_player)));
                            lib1_gf_CacheAbility(lp_player, lv_aBILITY, true);
                            break;
                        }

                    }
                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMorph, "") == true)) {
                    lv_unitsCount = CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player);
                    if ((lv_unitsCount > 0)) {
                        lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString((lv_unitsCount - 1)) + "].Unit", lp_player));
                        if ((lv_uNIT == lp_unit)) {
                            lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
                            lib1_gf_CacheAbility(lp_player, lv_aBILITY, true);
                        }

                    }

                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMerge, "") == true)) {
                    lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "Info.Unit", lp_player));
                    if ((lv_uNIT == lp_unit)) {
                        lib1_gf_CacheAbility(lp_player, lv_aBILITY, true);
                    }

                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilEffectTarget, "") == true)) {
                    lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "PlaceUnit", lp_player));
                    if ((lv_uNIT == lp_unit)) {
                        lib1_gf_CacheAbility(lp_player, lv_aBILITY, true);
                    }

                }
            }
        }
        autoBA50935C_catalog = c_gameCatalogBehavior;
        autoBA50935C_i = 1;
        for ( ; autoBA50935C_i <= CatalogEntryCount(c_gameCatalogBehavior) ; autoBA50935C_i += 1 ) {
            lv_bEHAVIOR = CatalogEntryGet(autoBA50935C_catalog, autoBA50935C_i);
            if ((PlayerRace(lp_player) != "Neut") && (StringFind(CatalogFieldValueGet(c_gameCatalogBehavior, lv_bEHAVIOR, "EditorCategories", lp_player), lv_xqswdpoidupimlyw, c_stringNoCase) == -1)) {
                continue;
            }
            else {
                if ((CatalogEntryClass(c_gameCatalogBehavior, lv_bEHAVIOR) == lib1_gv_cBehaviorSpawn)) {
                    lv_unitsCount = CatalogFieldValueCount(c_gameCatalogBehavior, lv_bEHAVIOR, "InfoArray", lp_player);
                    if ((lv_unitsCount > 0)) {
                        auto794CF4B8_ae = (lv_unitsCount - 1);
                        lv_i = 0;
                        for ( ; ( (auto794CF4B8_ai >= 0 && lv_i <= auto794CF4B8_ae) || (auto794CF4B8_ai < 0 && lv_i >= auto794CF4B8_ae) ) ; lv_i += auto794CF4B8_ai ) {
                            if (((CatalogFieldValueGet(c_gameCatalogBehavior, lv_bEHAVIOR, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player)) == lp_unit)) {
                                lv_requirement = (CatalogFieldValueGet(c_gameCatalogBehavior, lv_bEHAVIOR, "Requirements", lp_player));
                                lib1_gf_CacheRequirement(lp_player, lv_requirement);
                                lv_requirement = (CatalogFieldValueGet(c_gameCatalogBehavior, lv_bEHAVIOR, "InfoArray[" + IntToString(lv_i) + "].Requirements", lp_player));
                                lib1_gf_CacheRequirement(lp_player, lv_requirement);
                                lib1_gf_CacheBehavior(lp_player, lv_bEHAVIOR);
                                auto3317CDC9_catalog = c_gameCatalogUnit;
                                auto3317CDC9_i = 1;
                                for ( ; auto3317CDC9_i <= CatalogEntryCount(c_gameCatalogUnit) ; auto3317CDC9_i += 1 ) {
                                    lv_uNIT = CatalogEntryGet(auto3317CDC9_catalog, auto3317CDC9_i);
                                    if ((PlayerRace(lp_player) != "Neut") && (lib1_gf_GetUnitRace(lv_uNIT) != PlayerRace(lp_player))) {
                                        continue;
                                    }

                                    auto5A452240_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "BehaviorArray", lp_player) - 1);
                                    lv_k = 0;
                                    for ( ; ( (auto5A452240_ai >= 0 && lv_k <= auto5A452240_ae) || (auto5A452240_ai < 0 && lv_k >= auto5A452240_ae) ) ; lv_k += auto5A452240_ai ) {
                                        if ((lv_bEHAVIOR == (CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "BehaviorArray[" + IntToString(lv_k) + "].Link", c_playerAny)))) {
                                            lib1_gf_CacheUnit(lp_player, lv_uNIT, true);
                                        }

                                    }
                                }
                                break;
                            }

                        }
                    }

                }

            }
        }
    }

}

void lib1_gf_CheckAbilityCommand (int lp_player, string lp_ability, int lp_command) {
    // Variable Declarations
    string lv_bEHAVIOR;
    string lv_uNIT;
    int lv_k;
    int lv_b;
    int lv_cl;
    int lv_lb;

    // Automatic Variable Declarations
    int autoD8CDC7EE_catalog;
    int autoD8CDC7EE_i;
    int auto3AF6729A_ae;
    const int auto3AF6729A_ai = 1;
    int autoEDEF8FF9_ae;
    const int autoEDEF8FF9_ai = 1;
    int auto60DA1594_ae;
    const int auto60DA1594_ai = 1;
    int autoACA0736B_ae;
    const int autoACA0736B_ai = 1;

    // Variable Initialization

    // Implementation
    lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "InfoArray[" + IntToString(lp_command) + "].Button.Requirements", lp_player)));
    lib1_gf_CacheAbility(lp_player, lp_ability, false);
    autoD8CDC7EE_catalog = c_gameCatalogUnit;
    autoD8CDC7EE_i = 1;
    for ( ; autoD8CDC7EE_i <= CatalogEntryCount(c_gameCatalogUnit) ; autoD8CDC7EE_i += 1 ) {
        lv_uNIT = CatalogEntryGet(autoD8CDC7EE_catalog, autoD8CDC7EE_i);
        if ((PlayerRace(lp_player) != "Neut") && (lib1_gf_GetUnitRace(lv_uNIT) != PlayerRace(lp_player))) {
            continue;
        }

        auto3AF6729A_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "AbilArray", lp_player) - 1);
        lv_k = 0;
        for ( ; ( (auto3AF6729A_ai >= 0 && lv_k <= auto3AF6729A_ae) || (auto3AF6729A_ai < 0 && lv_k >= auto3AF6729A_ae) ) ; lv_k += auto3AF6729A_ai ) {
            if ((lp_ability == (CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "AbilArray[" + IntToString(lv_k) + "].Link", lp_player)))) {
                autoEDEF8FF9_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "BehaviorArray", lp_player) - 1);
                lv_b = 0;
                for ( ; ( (autoEDEF8FF9_ai >= 0 && lv_b <= autoEDEF8FF9_ae) || (autoEDEF8FF9_ai < 0 && lv_b >= autoEDEF8FF9_ae) ) ; lv_b += autoEDEF8FF9_ai ) {
                    lv_bEHAVIOR = (CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "BehaviorArray[" + IntToString(lv_b) + "].Link", lp_player));
                    if ((lib1_gf_BehaviorUsesAbilityCommand(lp_player, lv_bEHAVIOR, AbilityCommand(lp_ability, lp_command)) == true)) {
                        lib1_gf_CacheUnit(lp_player, lv_uNIT, true);
                        break;
                    }

                }
                auto60DA1594_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "CardLayouts", lp_player) - 1);
                lv_cl = 0;
                for ( ; ( (auto60DA1594_ai >= 0 && lv_cl <= auto60DA1594_ae) || (auto60DA1594_ai < 0 && lv_cl >= auto60DA1594_ae) ) ; lv_cl += auto60DA1594_ai ) {
                    autoACA0736B_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "CardLayouts[" + IntToString(lv_cl) + "].LayoutButtons", lp_player) - 1);
                    lv_lb = 0;
                    for ( ; ( (autoACA0736B_ai >= 0 && lv_lb <= autoACA0736B_ae) || (autoACA0736B_ai < 0 && lv_lb >= autoACA0736B_ae) ) ; lv_lb += autoACA0736B_ai ) {
                        if ((StringToAbilCmd(CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "CardLayouts[" + IntToString(lv_cl) + "].LayoutButtons[" + IntToString(lv_lb) + "].AbilCmd", lp_player)) == AbilityCommand(lp_ability, lp_command))) {
                            lib1_gf_CacheUnit(lp_player, lv_uNIT, true);
                            break;
                        }

                    }
                }
            }

        }
    }
}

void lib1_gf_CacheUpgrade (int lp_player, string lp_upgrade, bool lp_scan) {
    // Variable Declarations
    int lv_i;
    string lv_unitEntry;
    int lv_affectedUnitIndex;
    string lv_abilityIter;
    int lv_abilityIndex;
    string lv_aBILITY;
    string lv_uPGRADE;
    string lv_upgradeIter;
    int lv_abilityCommandIndex;
    int lv_effectArrayIndex;
    string lv_effeectArrayReference;
    string lv_qayhyrhvkaeghonr;

    // Automatic Variable Declarations
    int auto0B1C3E43_ae;
    const int auto0B1C3E43_ai = 1;
    int auto294C35C4_catalog;
    int auto294C35C4_i;
    int auto10198842_ae;
    const int auto10198842_ai = 1;

    // Variable Initialization
    lv_effeectArrayReference = "";
    lv_qayhyrhvkaeghonr = ("Race:" + UserDataGetString("Rules", lib1_gv_atpuabinihtsneew[lp_player], "Category", 1));

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogUpgrade, lp_upgrade) == false)) {
        return ;
    }

    auto0B1C3E43_ae = lib1_gv_cACHESIZE_UPGRADES;
    lv_i = 1;
    for ( ; ( (auto0B1C3E43_ai >= 0 && lv_i <= auto0B1C3E43_ae) || (auto0B1C3E43_ai < 0 && lv_i >= auto0B1C3E43_ae) ) ; lv_i += auto0B1C3E43_ai ) {
        if ((lib1_gv_cACHE_UPGRADES[lv_i] == lp_upgrade)) {
            return ;
        }

    }
    lib1_gv_cACHESIZE_UPGRADES += 1;
    lib1_gv_cACHE_UPGRADES[lib1_gv_cACHESIZE_UPGRADES] = lp_upgrade;
    TechTreeUpgradeAllow(lp_player, lp_upgrade, true);
    if ((lp_scan == true)) {
        auto294C35C4_catalog = c_gameCatalogAbil;
        auto294C35C4_i = 1;
        for ( ; auto294C35C4_i <= CatalogEntryCount(c_gameCatalogAbil) ; auto294C35C4_i += 1 ) {
            lv_aBILITY = CatalogEntryGet(auto294C35C4_catalog, auto294C35C4_i);
            if ((PlayerRace(lp_player) != "Neut") && (StringFind(CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "EditorCategories", lp_player), lv_qayhyrhvkaeghonr, c_stringNoCase) == -1)) {
                continue;
            }
            else {
                if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilResearch, "") == true)) {
                    auto10198842_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player) - 1);
                    lv_abilityCommandIndex = 0;
                    for ( ; ( (auto10198842_ai >= 0 && lv_abilityCommandIndex <= auto10198842_ae) || (auto10198842_ai < 0 && lv_abilityCommandIndex >= auto10198842_ae) ) ; lv_abilityCommandIndex += auto10198842_ai ) {
                        lv_upgradeIter = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_abilityCommandIndex) + "].Upgrade", lp_player));
                        if ((lv_upgradeIter == lp_upgrade)) {
                            lib1_gf_CheckAbilityCommand(lp_player, lv_aBILITY, lv_abilityCommandIndex);
                            break;
                        }

                    }
                }

            }
        }
    }

}

void lib1_gf_CacheAbility (int lp_player, string lp_ability, bool lp_scan) {
    // Variable Declarations
    string lv_uNIT;
    int lv_i;

    // Automatic Variable Declarations
    int auto95E5AD16_ae;
    const int auto95E5AD16_ai = 1;
    int autoBFBB778C_catalog;
    int autoBFBB778C_i;
    int auto63F4092F_ae;
    const int auto63F4092F_ai = 1;
    int auto71C6722E_val;
    int autoCE81887A_ae;
    const int autoCE81887A_ai = 1;
    int auto67D5A8A8_ae;
    const int auto67D5A8A8_ai = 1;
    int auto3E33423A_ae;
    const int auto3E33423A_ai = 1;
    int autoA5563D55_ae;
    const int autoA5563D55_ai = 1;
    int autoEA917132_ae;
    const int autoEA917132_ai = 1;
    int auto311D7519_ae;
    const int auto311D7519_ai = 1;
    int auto3E6EADC9_ae;
    const int auto3E6EADC9_ai = 1;
    int auto19E6F43A_ae;
    const int auto19E6F43A_ai = 1;
    int auto2573699F_ae;
    const int auto2573699F_ai = 1;
    int autoE9AE204E_ae;
    const int autoE9AE204E_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogAbil, lp_ability) == false)) {
        return ;
    }

    auto95E5AD16_ae = lib1_gv_cACHESIZE_ABILITIES;
    lv_i = 1;
    for ( ; ( (auto95E5AD16_ai >= 0 && lv_i <= auto95E5AD16_ae) || (auto95E5AD16_ai < 0 && lv_i >= auto95E5AD16_ae) ) ; lv_i += auto95E5AD16_ai ) {
        if ((lib1_gv_cACHE_ABILITIES[lv_i] == lp_ability)) {
            return ;
        }

    }
    if (((libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilRally, "") == true) || (libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilBuildable, "") == true) || (libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilStop, "") == true) || (libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilAttack, "") == true) || (libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilMove, "") == true) || (libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilQueue, "") == true))) {
        return ;
    }

    lib1_gv_cACHESIZE_ABILITIES += 1;
    lib1_gv_cACHE_ABILITIES[lib1_gv_cACHESIZE_ABILITIES] = lp_ability;
    if ((lp_scan == true)) {
        autoBFBB778C_catalog = c_gameCatalogUnit;
        autoBFBB778C_i = 1;
        for ( ; autoBFBB778C_i <= CatalogEntryCount(c_gameCatalogUnit) ; autoBFBB778C_i += 1 ) {
            lv_uNIT = CatalogEntryGet(autoBFBB778C_catalog, autoBFBB778C_i);
            if ((PlayerRace(lp_player) != "Neut") && (lib1_gf_GetUnitRace(lv_uNIT) != PlayerRace(lp_player))) {
                continue;
            }

            auto63F4092F_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "AbilArray", lp_player) - 1);
            lv_i = 0;
            for ( ; ( (auto63F4092F_ai >= 0 && lv_i <= auto63F4092F_ae) || (auto63F4092F_ai < 0 && lv_i >= auto63F4092F_ae) ) ; lv_i += auto63F4092F_ai ) {
                if ((lp_ability == (CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny)))) {
                    lib1_gf_CacheUnit(lp_player, lv_uNIT, true);
                }

            }
        }
    }

    auto71C6722E_val = CatalogEntryClass(c_gameCatalogAbil, lp_ability);
    if (auto71C6722E_val == lib1_gv_cAbilityAugment) {
        lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect", lp_player)));
    }
    else if (auto71C6722E_val == lib1_gv_cAbilityArmMagazine) {
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player)));
        autoCE81887A_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "EffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoCE81887A_ai >= 0 && lv_i <= autoCE81887A_ae) || (autoCE81887A_ai < 0 && lv_i >= autoCE81887A_ae) ) ; lv_i += autoCE81887A_ai ) {
            lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "EffectArray[" + IntToString(lv_i) + "]", lp_player)));
        }
        auto67D5A8A8_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "InfoArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto67D5A8A8_ai >= 0 && lv_i <= auto67D5A8A8_ae) || (auto67D5A8A8_ai < 0 && lv_i >= auto67D5A8A8_ae) ) ; lv_i += auto67D5A8A8_ai ) {
            lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "InfoArray[" + IntToString(lv_i) + "].Button.Requirements", lp_player)));
            lib1_gf_CacheUnit(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player)), false);
        }
    }
    else if (auto71C6722E_val == lib1_gv_cAbilityBehavior) {
        lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player)));
        auto3E33423A_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "BehaviorArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto3E33423A_ai >= 0 && lv_i <= auto3E33423A_ae) || (auto3E33423A_ai < 0 && lv_i >= auto3E33423A_ae) ) ; lv_i += auto3E33423A_ai ) {
            lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "BehaviorArray[" + IntToString(lv_i) + "]", lp_player)));
        }
    }
    else if (auto71C6722E_val == lib1_gv_cAbilityBuild) {
        lib1_gf_CacheAbility(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "BuildMorphAbil", lp_player)), false);
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player)));
    }
    else if (auto71C6722E_val == lib1_gv_cAbilityEffectInstant) {
        lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player)));
        autoA5563D55_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoA5563D55_ai >= 0 && lv_i <= autoA5563D55_ae) || (autoA5563D55_ai < 0 && lv_i >= autoA5563D55_ae) ) ; lv_i += autoA5563D55_ai ) {
            lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect[" + IntToString(lv_i) + "]", lp_player)));
        }
        autoEA917132_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "Effect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoEA917132_ai >= 0 && lv_i <= autoEA917132_ae) || (autoEA917132_ai < 0 && lv_i >= autoEA917132_ae) ) ; lv_i += autoEA917132_ai ) {
            lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect[" + IntToString(lv_i) + "]", lp_player)));
        }
        auto311D7519_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "PrepEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto311D7519_ai >= 0 && lv_i <= auto311D7519_ae) || (auto311D7519_ai < 0 && lv_i >= auto311D7519_ae) ) ; lv_i += auto311D7519_ai ) {
            lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PrepEffect[" + IntToString(lv_i) + "]", lp_player)));
        }
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PreEffectBehavior.Behavior", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PostEffectBehavior.Behavior", lp_player)));
    }
    else if (auto71C6722E_val == lib1_gv_cAbilityEffectTarget) {
        lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player)));
        auto3E6EADC9_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto3E6EADC9_ai >= 0 && lv_i <= auto3E6EADC9_ae) || (auto3E6EADC9_ai < 0 && lv_i >= auto3E6EADC9_ae) ) ; lv_i += auto3E6EADC9_ai ) {
            lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect[" + IntToString(lv_i) + "]", lp_player)));
        }
        auto19E6F43A_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "Effect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto19E6F43A_ai >= 0 && lv_i <= auto19E6F43A_ae) || (auto19E6F43A_ai < 0 && lv_i >= auto19E6F43A_ae) ) ; lv_i += auto19E6F43A_ai ) {
            lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect[" + IntToString(lv_i) + "]", lp_player)));
        }
        auto2573699F_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "PrepEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto2573699F_ai >= 0 && lv_i <= auto2573699F_ae) || (auto2573699F_ai < 0 && lv_i >= auto2573699F_ae) ) ; lv_i += auto2573699F_ai ) {
            lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PrepEffect[" + IntToString(lv_i) + "]", lp_player)));
        }
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PreEffectBehavior.Behavior", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PostEffectBehavior.Behavior", lp_player)));
    }
    else if (auto71C6722E_val == lib1_gv_cAbilityMorph) {
        lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "BehaviorOn", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "BehaviorOff", lp_player)));
    }
    else if (auto71C6722E_val == lib1_gv_cAbilityTransport) {
        autoE9AE204E_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "CmdButtonArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoE9AE204E_ai >= 0 && lv_i <= autoE9AE204E_ae) || (autoE9AE204E_ai < 0 && lv_i >= autoE9AE204E_ae) ) ; lv_i += autoE9AE204E_ai ) {
            lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(lv_i) + "].Requirements", lp_player)));
        }
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "LoadCargoEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "LoadTransportEffect", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "LoadCargoBehavior", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "LoadTransportBehavior", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "UnloadTransportBehavior", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "UnloadCargoBehavior", lp_player)));
    }
    else {
    }
}

void lib1_gf_CacheWeapon (int lp_player, string lp_weapon) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto2B21D748_ae;
    const int auto2B21D748_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogWeapon, lp_weapon) == false)) {
        return ;
    }

    auto2B21D748_ae = lib1_gv_cACHESIZE_WEAPONS;
    lv_i = 1;
    for ( ; ( (auto2B21D748_ai >= 0 && lv_i <= auto2B21D748_ae) || (auto2B21D748_ai < 0 && lv_i >= auto2B21D748_ae) ) ; lv_i += auto2B21D748_ai ) {
        if ((lib1_gv_cACHE_WEAPONS[lv_i] == lp_weapon)) {
            return ;
        }

    }
    lib1_gv_cACHESIZE_WEAPONS += 1;
    lib1_gv_cACHE_WEAPONS[lib1_gv_cACHESIZE_WEAPONS] = lp_weapon;
    lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "PostEffectBehavior.Behavior", lp_player)));
    lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "PreEffectBehavior.Behavior", lp_player)));
    lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "PreEffect", lp_player)));
    lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "Effect", lp_player)));
    lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "DisplayEffect", lp_player)));
    lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "CriticalEffect", lp_player)));
    lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "CriticalEffect", lp_player)));
}

void lib1_gf_CacheBehavior (int lp_player, string lp_behavior) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto295242B3_ae;
    const int auto295242B3_ai = 1;
    int autoA5BA57CA_val;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogBehavior, lp_behavior) == false)) {
        return ;
    }

    auto295242B3_ae = lib1_gv_cACHESIZE_BEHAVIORS;
    lv_i = 1;
    for ( ; ( (auto295242B3_ai >= 0 && lv_i <= auto295242B3_ae) || (auto295242B3_ai < 0 && lv_i >= auto295242B3_ae) ) ; lv_i += auto295242B3_ai ) {
        if ((lib1_gv_cACHE_BEHAVIORS[lv_i] == lp_behavior)) {
            return ;
        }

    }
    lib1_gv_cACHESIZE_BEHAVIORS += 1;
    lib1_gv_cACHE_BEHAVIORS[lib1_gv_cACHESIZE_BEHAVIORS] = lp_behavior;
    lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "Requirements", lp_player)));
    autoA5BA57CA_val = CatalogEntryClass(c_gameCatalogBehavior, lp_behavior);
    if (autoA5BA57CA_val == lib1_gv_cBehaviorBuff) {
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "ExpireEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "InitialEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "PeriodicEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "PeriodicEffect", lp_player)));
    }
    else {
    }
}

void lib1_gf_CacheEffect (int lp_player, string lp_effect) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoA9255706_ae;
    const int autoA9255706_ai = 1;
    int autoA4E85597_ae;
    const int autoA4E85597_ai = 1;
    int auto772A1EDB_val;
    int auto13FC5357_ae;
    const int auto13FC5357_ai = 1;
    int autoE9BC4BBB_ae;
    const int autoE9BC4BBB_ai = 1;
    int autoBEEE335B_ae;
    const int autoBEEE335B_ai = 1;
    int auto56190538_ae;
    const int auto56190538_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogEffect, lp_effect) == false)) {
        return ;
    }

    autoA9255706_ae = lib1_gv_cACHESIZE_EFFECTS;
    lv_i = 1;
    for ( ; ( (autoA9255706_ai >= 0 && lv_i <= autoA9255706_ae) || (autoA9255706_ai < 0 && lv_i >= autoA9255706_ae) ) ; lv_i += autoA9255706_ai ) {
        if ((lib1_gv_cACHE_EFFECTS[lv_i] == lp_effect)) {
            return ;
        }

    }
    lib1_gv_cACHESIZE_EFFECTS += 1;
    lib1_gv_cACHE_EFFECTS[lib1_gv_cACHESIZE_EFFECTS] = lp_effect;
    autoA4E85597_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "ValidatorArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (autoA4E85597_ai >= 0 && lv_i <= autoA4E85597_ae) || (autoA4E85597_ai < 0 && lv_i >= autoA4E85597_ae) ) ; lv_i += autoA4E85597_ai ) {
        lib1_gf_CacheValidator(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ValidatorArray[" + IntToString(lv_i) + "]", lp_player)));
    }
    auto772A1EDB_val = CatalogEntryClass(c_gameCatalogEffect, lp_effect);
    if (auto772A1EDB_val == lib1_gv_cEffectIssueOrder) {
        lib1_gf_CacheAbility(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Abil", lp_player)), false);
    }
    else if (auto772A1EDB_val == lib1_gv_cEffectApplyBehavior) {
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Behavior", lp_player)));
    }
    else if (auto772A1EDB_val == lib1_gv_cEffectCreateHealer) {
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ExpireEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinalEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InitialEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffect", lp_player)));
    }
    else if (auto772A1EDB_val == lib1_gv_cEffectCreatePersistent) {
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ExpireEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinalEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InitialEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InitialEffect", lp_player)));
        auto13FC5357_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "PeriodicEffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto13FC5357_ai >= 0 && lv_i <= auto13FC5357_ae) || (auto13FC5357_ai < 0 && lv_i >= auto13FC5357_ae) ) ; lv_i += auto13FC5357_ai ) {
            lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffectArray[" + IntToString(lv_i) + "]", lp_player)));
        }
    }
    else if (auto772A1EDB_val == lib1_gv_cEffectCreateUnit) {
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnEffect", lp_player)));
        autoE9BC4BBB_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "SpawnUnit", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoE9BC4BBB_ai >= 0 && lv_i <= autoE9BC4BBB_ae) || (autoE9BC4BBB_ai < 0 && lv_i >= autoE9BC4BBB_ae) ) ; lv_i += autoE9BC4BBB_ai ) {
            lib1_gf_ArmUnitType(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnUnit[" + IntToString(lv_i) + "]", lp_player)));
            lib1_gf_CacheUnit(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnUnit[" + IntToString(lv_i) + "]", lp_player)), false);
        }
    }
    else if (auto772A1EDB_val == lib1_gv_cEffectDamage) {
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "DamageInheritEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ImpactLocation.Effect", lp_player)));
    }
    else if (auto772A1EDB_val == lib1_gv_cEffectLaunchMissile) {
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinishEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ImpactEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InterruptEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "LaunchEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SearchEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SearchHitArriveEffect", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "TransferBehavior", lp_player)));
    }
    else if (auto772A1EDB_val == lib1_gv_cEffectSet) {
        autoBEEE335B_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "EffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoBEEE335B_ai >= 0 && lv_i <= autoBEEE335B_ae) || (autoBEEE335B_ai < 0 && lv_i >= autoBEEE335B_ae) ) ; lv_i += autoBEEE335B_ai ) {
            lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "EffectArray[" + IntToString(lv_i) + "]", lp_player)));
        }
    }
    else if (auto772A1EDB_val == lib1_gv_cEffectTeleport) {
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "TeleportEffect", lp_player)));
    }
    else if (auto772A1EDB_val == lib1_gv_cEffectModifyUnit) {
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ModifyTurret.AimCompleteEffect", lp_player)));
    }
    else if (auto772A1EDB_val == lib1_gv_cEffectSwitch) {
        auto56190538_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "CaseArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto56190538_ai >= 0 && lv_i <= auto56190538_ae) || (auto56190538_ai < 0 && lv_i >= auto56190538_ae) ) ; lv_i += auto56190538_ai ) {
            lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "CaseArray[" + IntToString(lv_i) + "].Effect", lp_player)));
            lib1_gf_CacheValidator(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "CaseArray[" + IntToString(lv_i) + "].Validator", lp_player)));
        }
    }
    else {
    }
}

void lib1_gf_CacheValidator (int lp_player, string lp_validator) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto0DC1B8E9_val;
    int autoF1B28487_ae;
    const int autoF1B28487_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogValidator, lp_validator) == false)) {
        return ;
    }

    auto0DC1B8E9_val = CatalogEntryClass(c_gameCatalogValidator, lp_validator);
    if (auto0DC1B8E9_val == lib1_gv_cValidatorCombine) {
        autoF1B28487_ae = (CatalogFieldValueCount(c_gameCatalogValidator, lp_validator, "CombineArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoF1B28487_ai >= 0 && lv_i <= autoF1B28487_ae) || (autoF1B28487_ai < 0 && lv_i >= autoF1B28487_ae) ) ; lv_i += autoF1B28487_ai ) {
            lib1_gf_CacheValidator(lp_player, (CatalogFieldValueGet(c_gameCatalogValidator, lp_validator, "CombineArray[" + IntToString(lv_i) + "]", lp_player)));
        }
    }
    else if (auto0DC1B8E9_val == lib1_gv_cValidatorPlayerReqirement) {
        lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogValidator, lp_validator, "Value", lp_player)));
    }
    else {
    }
}

void lib1_gf_CacheRequirement (int lp_player, string lp_requirement) {
    // Variable Declarations
    int lv_i;
    string lv_requirementNode;

    // Automatic Variable Declarations
    int autoC4EFB69B_ae;
    const int autoC4EFB69B_ai = 1;
    int auto571D6275_ae;
    const int auto571D6275_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogRequirement, lp_requirement) == false)) {
        return ;
    }

    autoC4EFB69B_ae = lib1_gv_cACHESIZE_REQUIREMENT;
    lv_i = 1;
    for ( ; ( (autoC4EFB69B_ai >= 0 && lv_i <= autoC4EFB69B_ae) || (autoC4EFB69B_ai < 0 && lv_i >= autoC4EFB69B_ae) ) ; lv_i += autoC4EFB69B_ai ) {
        if ((lib1_gv_cACHE_REQUIREMENT[lv_i] == lp_requirement)) {
            return ;
        }

    }
    lib1_gv_cACHESIZE_REQUIREMENT += 1;
    lib1_gv_cACHE_REQUIREMENT[lib1_gv_cACHESIZE_REQUIREMENT] = lp_requirement;
    auto571D6275_ae = (CatalogFieldValueCount(c_gameCatalogRequirement, lp_requirement, "NodeArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto571D6275_ai >= 0 && lv_i <= auto571D6275_ae) || (auto571D6275_ai < 0 && lv_i >= auto571D6275_ae) ) ; lv_i += auto571D6275_ai ) {
        lv_requirementNode = (CatalogFieldValueGet(c_gameCatalogRequirement, lp_requirement, "NodeArray[" + IntToString(lv_i) + "].Link", lp_player));
        lib1_gf_CacheRequirementNode(lp_player, lv_requirementNode);
    }
}

void lib1_gf_CacheRequirementNode (int lp_player, string lp_requirementNode) {
    // Variable Declarations
    string lv_uNIT;
    string lv_uPGRADE;
    string lv_requirementNode;
    string lv_requirementNodeIter;
    string lv_aLIAS;
    string lv_aliasIter;
    int lv_i;

    // Automatic Variable Declarations
    int auto98B74FE9_ae;
    const int auto98B74FE9_ai = 1;
    int auto314F82C2_catalog;
    int auto314F82C2_i;
    int autoF4D66613_ae;
    const int autoF4D66613_ai = 1;
    int auto836014F4_catalog;
    int auto836014F4_i;
    int auto29A6DB91_ae;
    const int auto29A6DB91_ai = 1;

    // Variable Initialization
    lv_requirementNode = lp_requirementNode;
    lv_aLIAS = "";
    lv_aliasIter = "";

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogRequirementNode, lp_requirementNode) == false)) {
        return ;
    }

    if (((CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == lib1_gv_cRequirementAnd) || (CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == lib1_gv_cRequirementOr) || (CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == lib1_gv_cRequirementEq) || (CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == lib1_gv_cRequirementGT) || (CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == lib1_gv_cRequirementGTE))) {
        auto98B74FE9_ae = (CatalogFieldValueCount(c_gameCatalogRequirementNode, lv_requirementNode, "OperandArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto98B74FE9_ai >= 0 && lv_i <= auto98B74FE9_ae) || (auto98B74FE9_ai < 0 && lv_i >= auto98B74FE9_ae) ) ; lv_i += auto98B74FE9_ai ) {
            lv_requirementNodeIter = (CatalogFieldValueGet(c_gameCatalogRequirementNode, lv_requirementNode, "OperandArray[" + IntToString(lv_i) + "]", lp_player));
            lib1_gf_CacheRequirementNode(lp_player, lv_requirementNodeIter);
        }
    }

    if ((CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == lib1_gv_cRequirementCountUnit)) {
        lv_aLIAS = CatalogFieldValueGet(c_gameCatalogRequirementNode, lv_requirementNode, "Count.Link", lp_player);
        auto314F82C2_catalog = c_gameCatalogUnit;
        auto314F82C2_i = 1;
        for ( ; auto314F82C2_i <= CatalogEntryCount(c_gameCatalogUnit) ; auto314F82C2_i += 1 ) {
            lv_uNIT = CatalogEntryGet(auto314F82C2_catalog, auto314F82C2_i);
            if ((PlayerRace(lp_player) != "Neut") && (lib1_gf_GetUnitRace(lv_uNIT) != PlayerRace(lp_player))) {
                continue;
            }

            if (((lv_uNIT) == lv_aLIAS)) {
                lib1_gf_CacheUnit(lp_player, lv_uNIT, true);
            }
            else {
                autoF4D66613_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "TechAliasArray", lp_player) - 1);
                lv_i = 0;
                for ( ; ( (autoF4D66613_ai >= 0 && lv_i <= autoF4D66613_ae) || (autoF4D66613_ai < 0 && lv_i >= autoF4D66613_ae) ) ; lv_i += autoF4D66613_ai ) {
                    lv_aliasIter = CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "TechAliasArray[" + IntToString(lv_i) + "]", lp_player);
                    if ((lv_aliasIter == lv_aLIAS)) {
                        lib1_gf_CacheUnit(lp_player, lv_uNIT, true);
                    }

                }
            }
        }
    }

    if ((CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == lib1_gv_cRequirementCountUpgrade)) {
        lv_aLIAS = CatalogFieldValueGet(c_gameCatalogRequirementNode, lv_requirementNode, "Count.Link", lp_player);
        auto836014F4_catalog = c_gameCatalogUpgrade;
        auto836014F4_i = 1;
        for ( ; auto836014F4_i <= CatalogEntryCount(c_gameCatalogUpgrade) ; auto836014F4_i += 1 ) {
            lv_uPGRADE = CatalogEntryGet(auto836014F4_catalog, auto836014F4_i);
            if ((PlayerRace(lp_player) != "Neut") && (lib1_gf_GetUpgradeRace(lv_uPGRADE) != PlayerRace(lp_player))) {
                continue;
            }

            if (((lv_uPGRADE) == lv_aLIAS)) {
                lib1_gf_CacheUpgrade(lp_player, lv_uPGRADE, true);
            }
            else {
                auto29A6DB91_ae = (CatalogFieldValueCount(c_gameCatalogUpgrade, lv_uPGRADE, "TechAliasArray", lp_player) - 1);
                lv_i = 0;
                for ( ; ( (auto29A6DB91_ai >= 0 && lv_i <= auto29A6DB91_ae) || (auto29A6DB91_ai < 0 && lv_i >= auto29A6DB91_ae) ) ; lv_i += auto29A6DB91_ai ) {
                    lv_aliasIter = CatalogFieldValueGet(c_gameCatalogUpgrade, lv_uPGRADE, "TechAliasArray[" + IntToString(lv_i) + "]", lp_player);
                    if ((lv_aliasIter == lv_aLIAS)) {
                        lib1_gf_CacheUpgrade(lp_player, lv_uPGRADE, true);
                    }

                }
            }
        }
    }

}

bool lib1_gf_UnitIsAntiAir (string lp_unit, int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_weapons;
    string lv_weapon;
    bool lv_isAntiAir;

    // Automatic Variable Declarations
    int auto2EB4630E_ae;
    const int auto2EB4630E_ai = 1;

    // Variable Initialization
    lv_weapons = CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "WeaponArray", lp_player);

    // Implementation
    if ((lv_weapons > 0)) {
        auto2EB4630E_ae = (lv_weapons - 1);
        lv_i = 0;
        for ( ; ( (auto2EB4630E_ai >= 0 && lv_i <= auto2EB4630E_ae) || (auto2EB4630E_ai < 0 && lv_i >= auto2EB4630E_ae) ) ; lv_i += auto2EB4630E_ai ) {
            lv_weapon = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Link", lp_player));
            if ((lv_weapon != null) && (UnitFilterGetState(libNtve_gf_ConvertTargetFilterStringToUnitFilter(CatalogFieldValueGet(c_gameCatalogWeapon, lv_weapon, "TargetFilters", lp_player)), c_targetFilterGround) != c_unitFilterRequired) && (UnitFilterGetState(libNtve_gf_ConvertTargetFilterStringToUnitFilter(CatalogFieldValueGet(c_gameCatalogWeapon, lv_weapon, "TargetFilters", lp_player)), c_targetFilterAir) != c_unitFilterExcluded)) {
                return true;
            }

        }
    }

    return false;
}

bool lib1_gf_UnitIsAir (string lp_unit, int lp_player) {
    // Variable Declarations
    const int lv_pLANE_AIR = 0;
    int lv_plane;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_plane = CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unit, "PlaneArray[" + IntToString(0) + "]", lp_player);

    // Implementation
    if ((lv_plane == lv_pLANE_AIR)) {
        return true;
    }
    else {
        return false;
    }
}

void lib1_gf_ResolveUnitAffectedUpgrades (int lp_player) {
    // Variable Declarations
    int lv_i;
    string lv_unitEntry;
    string lv_upgrade;
    string lv_behavior;
    int lv_affectedUnitIndex;
    int lv_effectArrayIndex;
    string lv_effectArrayReference;
    string lv_effectArrayType;
    string lv_effectArrayLink;

    // Automatic Variable Declarations
    int autoD5F213C0_catalog;
    int autoD5F213C0_i;

    // Variable Initialization
    lv_effectArrayReference = "";
    lv_effectArrayType = "";
    lv_effectArrayLink = "";

    // Implementation
    autoD5F213C0_catalog = c_gameCatalogUpgrade;
    autoD5F213C0_i = 1;
    for ( ; autoD5F213C0_i <= CatalogEntryCount(c_gameCatalogUpgrade) ; autoD5F213C0_i += 1 ) {
        lv_upgrade = CatalogEntryGet(autoD5F213C0_catalog, autoD5F213C0_i);
        if ((lib1_gf_UpgradeIsUseful(lp_player, lv_upgrade) == true)) {
            lib1_gf_CacheUpgrade(lp_player, lv_upgrade, true);
        }

    }
}

bool lib1_gf_UpgradeIsUseful (int lp_player, string lp_upgrade) {
    // Variable Declarations
    int lv_i;
    string lv_upgradeEntry;
    string lv_unitEntry;
    string lv_behavior;
    int lv_affectedUnitIndex;
    int lv_effectArrayIndex;
    string lv_effectArrayReference;
    string lv_effectArrayType;
    string lv_effectArrayLink;

    // Automatic Variable Declarations
    int auto6E77B2E1_ae;
    const int auto6E77B2E1_ai = 1;
    int auto62469B66_ae;
    const int auto62469B66_ai = 1;
    string autoA0E34538_val;
    int autoC2A34290_ae;
    const int autoC2A34290_ai = 1;
    int autoBCE85D78_ae;
    const int autoBCE85D78_ai = 1;
    int auto36549D7B_ae;
    const int auto36549D7B_ai = 1;
    int autoAA5556FA_ae;
    const int autoAA5556FA_ai = 1;
    int auto8A866CE1_ae;
    const int auto8A866CE1_ai = 1;

    // Variable Initialization
    lv_upgradeEntry = lp_upgrade;
    lv_effectArrayReference = "";
    lv_effectArrayType = "";
    lv_effectArrayLink = "";

    // Implementation
    auto6E77B2E1_ae = lib1_gv_cACHESIZE_UPGRADES;
    lv_i = 1;
    for ( ; ( (auto6E77B2E1_ai >= 0 && lv_i <= auto6E77B2E1_ae) || (auto6E77B2E1_ai < 0 && lv_i >= auto6E77B2E1_ae) ) ; lv_i += auto6E77B2E1_ai ) {
        if ((lib1_gv_cACHE_UPGRADES[lv_i] == lv_upgradeEntry)) {
            return false;
        }

    }
    if ((PlayerRace(lp_player) != "Neut") && (lib1_gf_GetUpgradeRace(lv_upgradeEntry) != PlayerRace(lp_player))) {
        return false;
    }

    auto62469B66_ae = (CatalogFieldValueCount(c_gameCatalogUpgrade, lv_upgradeEntry, "EffectArray", lp_player) - 1);
    lv_effectArrayIndex = 0;
    for ( ; ( (auto62469B66_ai >= 0 && lv_effectArrayIndex <= auto62469B66_ae) || (auto62469B66_ai < 0 && lv_effectArrayIndex >= auto62469B66_ae) ) ; lv_effectArrayIndex += auto62469B66_ai ) {
        lv_effectArrayReference = StringReplaceWord(CatalogFieldValueGet(c_gameCatalogUpgrade, lv_upgradeEntry, "EffectArray[" + IntToString(lv_effectArrayIndex) + "].Reference", lp_player), ",", " ", c_stringReplaceAll, c_stringCase);
        lv_effectArrayType = StringWord(lv_effectArrayReference, 1);
        lv_effectArrayLink = StringWord(lv_effectArrayReference, 2);
        autoA0E34538_val = lv_effectArrayType;
        if (autoA0E34538_val == "Behavior") {
            autoC2A34290_ae = lib1_gv_cACHESIZE_BEHAVIORS;
            lv_i = 1;
            for ( ; ( (autoC2A34290_ai >= 0 && lv_i <= autoC2A34290_ae) || (autoC2A34290_ai < 0 && lv_i >= autoC2A34290_ae) ) ; lv_i += autoC2A34290_ai ) {
                if ((lib1_gv_cACHE_BEHAVIORS[lv_i] == (lv_effectArrayLink))) {
                    return true;
                }

            }
        }
        else if (autoA0E34538_val == "Abil") {
            autoBCE85D78_ae = lib1_gv_cACHESIZE_ABILITIES;
            lv_i = 1;
            for ( ; ( (autoBCE85D78_ai >= 0 && lv_i <= autoBCE85D78_ae) || (autoBCE85D78_ai < 0 && lv_i >= autoBCE85D78_ae) ) ; lv_i += autoBCE85D78_ai ) {
                if ((lib1_gv_cACHE_ABILITIES[lv_i] == (lv_effectArrayLink))) {
                    return true;
                }

            }
        }
        else if (autoA0E34538_val == "Effect") {
            auto36549D7B_ae = lib1_gv_cACHESIZE_EFFECTS;
            lv_i = 1;
            for ( ; ( (auto36549D7B_ai >= 0 && lv_i <= auto36549D7B_ae) || (auto36549D7B_ai < 0 && lv_i >= auto36549D7B_ae) ) ; lv_i += auto36549D7B_ai ) {
                if ((lib1_gv_cACHE_EFFECTS[lv_i] == (lv_effectArrayLink))) {
                    return true;
                }

            }
        }
        else if (autoA0E34538_val == "Weapon") {
            autoAA5556FA_ae = lib1_gv_cACHESIZE_WEAPONS;
            lv_i = 1;
            for ( ; ( (autoAA5556FA_ai >= 0 && lv_i <= autoAA5556FA_ae) || (autoAA5556FA_ai < 0 && lv_i >= autoAA5556FA_ae) ) ; lv_i += autoAA5556FA_ai ) {
                if ((lib1_gv_cACHE_WEAPONS[lv_i] == (lv_effectArrayLink))) {
                    return true;
                }

            }
        }
        else if (autoA0E34538_val == "Unit") {
            auto8A866CE1_ae = lib1_gv_cACHESIZE_UNITS;
            lv_i = 1;
            for ( ; ( (auto8A866CE1_ai >= 0 && lv_i <= auto8A866CE1_ae) || (auto8A866CE1_ai < 0 && lv_i >= auto8A866CE1_ae) ) ; lv_i += auto8A866CE1_ai ) {
                if ((lib1_gv_cACHE_UNITS[lv_i] == (lv_effectArrayLink))) {
                    return true;
                }

            }
        }
        else {
        }
    }
    return false;
}

bool lib1_gf_AbilityIsIgnored (int lp_player, string lp_ability) {
    // Variable Declarations
    int lv_i;
    string lv_requirement;
    int lv_cAbilityArmMagazine;
    int lv_cAbilityAugment;
    int lv_cAbilityBehavior;
    int lv_cAbilityBuild;
    int lv_cAbilityEffectInstant;
    int lv_cAbilityEffectTarget;
    int lv_cAbilityEffectMorph;

    // Automatic Variable Declarations
    int autoC3BB6F22_ae;
    const int autoC3BB6F22_ai = 1;

    // Variable Initialization
    lv_cAbilityArmMagazine = CatalogEntryClass(c_gameCatalogAbil, "CarrierHangar");
    lv_cAbilityAugment = CatalogEntryClass(c_gameCatalogAbil, "TornadoMissile");
    lv_cAbilityBehavior = CatalogEntryClass(c_gameCatalogAbil, "BansheeCloak");
    lv_cAbilityBuild = CatalogEntryClass(c_gameCatalogAbil, "ProtossBuild");
    lv_cAbilityEffectInstant = CatalogEntryClass(c_gameCatalogAbil, "Overcharge");
    lv_cAbilityEffectTarget = CatalogEntryClass(c_gameCatalogAbil, "BlindingCloud");
    lv_cAbilityEffectMorph = CatalogEntryClass(c_gameCatalogAbil, "VoidRaySwarmDamageBoost");

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogAbil, lp_ability) == false)) {
        return false;
    }

    autoC3BB6F22_ae = UserDataInstanceCount("MonobattlesIgnore");
    lv_i = 1;
    for ( ; ( (autoC3BB6F22_ai >= 0 && lv_i <= autoC3BB6F22_ae) || (autoC3BB6F22_ai < 0 && lv_i >= autoC3BB6F22_ae) ) ; lv_i += autoC3BB6F22_ai ) {
        if ((UserDataGetGameLink("MonobattlesIgnore", UserDataInstance("MonobattlesIgnore", lv_i), "Ability", 1) == lp_ability)) {
            return true;
        }

    }
    return false;
}

string lib1_gf_GetUnitRace (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "Race", c_playerAny));
}

string lib1_gf_GetUpgradeRace (string lp_upgrade) {
    // Variable Declarations
    string lv_editorCategories;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_editorCategories = CatalogFieldValueGet(c_gameCatalogUpgrade, lp_upgrade, "Race", c_playerAny);

    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogUpgrade, lp_upgrade, "Race", c_playerAny));
}

bool lib1_gf_BehaviorUsesAbilityCommand (int lp_player, string lp_behavior, abilcmd lp_abil) {
    // Variable Declarations
    bool lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gv_sEARCHMODE = lib1_ge_SearchMode_Ability;
    lib1_gv_cACHE_TMPEFFECTS_SIZE = 0;
    lib1_gv_bYPASS_SEARCH_ABILITY_COMMAND = lp_abil;
    lv_value = lib1_gf_ByPassBehavior(lp_player, lp_behavior);
    lib1_gv_bYPASS_SEARCH_ABILITY_COMMAND = null;
    return lv_value;
}

bool lib1_gf_ByPassBehavior (int lp_player, string lp_behavior) {
    // Variable Declarations
    int lv_i;
    int lv_cBehaviorBuff;

    // Automatic Variable Declarations
    int auto04FCBBD1_val;

    // Variable Initialization
    lv_cBehaviorBuff = CatalogEntryClass(c_gameCatalogBehavior, "AdeptPhaseShiftCaster");

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogBehavior, lp_behavior) == false)) {
        return false;
    }

    auto04FCBBD1_val = CatalogEntryClass(c_gameCatalogBehavior, lp_behavior);
    if (auto04FCBBD1_val == lv_cBehaviorBuff) {
        if ((lib1_gv_sEARCHMODE == lib1_ge_SearchMode_Detection)) {
            if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lp_behavior, "Modification.Detect", lp_player) > 0.0)) {
                return true;
            }

        }

        if (((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "ExpireEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "InitialEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "PeriodicEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "PeriodicEffect", lp_player))) == true))) {
            return true;
        }

    }
    else {
    }
    return false;
}

bool lib1_gf_ByPassEffect (int lp_player, string lp_effect) {
    // Variable Declarations
    int lv_unitscount;
    int lv_i;

    // Automatic Variable Declarations
    int auto0C40CFE3_ae;
    const int auto0C40CFE3_ai = 1;
    int auto029EF134_val;
    int auto900843FE_ae;
    const int auto900843FE_ai = 1;
    int auto93546CF0_ae;
    const int auto93546CF0_ai = 1;
    int auto8902ECF0_ae;
    const int auto8902ECF0_ai = 1;
    int autoDB0EF4C6_ae;
    const int autoDB0EF4C6_ai = 1;
    int auto21351EC7_ae;
    const int auto21351EC7_ai = 1;
    int auto2E77095B_ae;
    const int auto2E77095B_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogEffect, lp_effect) == false)) {
        return false;
    }

    auto0C40CFE3_ae = lib1_gv_cACHE_TMPEFFECTS_SIZE;
    lv_i = 1;
    for ( ; ( (auto0C40CFE3_ai >= 0 && lv_i <= auto0C40CFE3_ae) || (auto0C40CFE3_ai < 0 && lv_i >= auto0C40CFE3_ae) ) ; lv_i += auto0C40CFE3_ai ) {
        if ((lib1_gv_cACHE_TMPEFFECTS[lv_i] == lp_effect)) {
            return false;
        }

    }
    lib1_gv_cACHE_TMPEFFECTS_SIZE += 1;
    lib1_gv_cACHE_TMPEFFECTS[lib1_gv_cACHE_TMPEFFECTS_SIZE] = lp_effect;
    auto029EF134_val = CatalogEntryClass(c_gameCatalogEffect, lp_effect);
    if (auto029EF134_val == lib1_gv_cEffectIssueOrder) {
        if ((lib1_gf_ByPassAbility(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Abil", lp_player))) == true)) {
            return true;
        }

    }
    else if (auto029EF134_val == lib1_gv_cEffectApplyBehavior) {
        if ((lib1_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Behavior", lp_player))) == true)) {
            return true;
        }

    }
    else if (auto029EF134_val == lib1_gv_cEffectCreateHealer) {
        if (((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ExpireEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinalEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InitialEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffect", lp_player))) == true))) {
            return true;
        }

    }
    else if (auto029EF134_val == lib1_gv_cEffectCreatePersistent) {
        auto900843FE_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "PeriodicEffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto900843FE_ai >= 0 && lv_i <= auto900843FE_ae) || (auto900843FE_ai < 0 && lv_i >= auto900843FE_ae) ) ; lv_i += auto900843FE_ai ) {
            if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffectArray[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        if (((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ExpireEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinalEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InitialEffect", lp_player))) == true))) {
            return true;
        }

    }
    else if (auto029EF134_val == lib1_gv_cEffectLaunchMissile) {
        if (((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinishEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ImpactEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InterruptEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "LaunchEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SearchEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SearchHitArriveEffect", lp_player))) == true) || (lib1_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "TransferBehavior", lp_player))) == true))) {
            return true;
        }

    }
    else if (auto029EF134_val == lib1_gv_cEffectSet) {
        auto93546CF0_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "EffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto93546CF0_ai >= 0 && lv_i <= auto93546CF0_ae) || (auto93546CF0_ai < 0 && lv_i >= auto93546CF0_ae) ) ; lv_i += auto93546CF0_ai ) {
            if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "EffectArray[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
    }
    else if (auto029EF134_val == lib1_gv_cEffectTeleport) {
        if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "TeleportEffect", lp_player))) == true)) {
            return true;
        }

    }
    else if (auto029EF134_val == lib1_gv_cEffectSearchArea) {
        auto8902ECF0_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "AreaArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto8902ECF0_ai >= 0 && lv_i <= auto8902ECF0_ae) || (auto8902ECF0_ai < 0 && lv_i >= auto8902ECF0_ae) ) ; lv_i += auto8902ECF0_ai ) {
            if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "AreaArray[" + IntToString(lv_i) + "].Effect", lp_player))) == true)) {
                return true;
            }

        }
        if ((lib1_gv_sEARCHMODE == lib1_ge_SearchMode_Agressive)) {
            if ((lib1_gf_FilterEnemyisExcluded(CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SearchFilters", lp_player)) == false)) {
                return true;
            }

        }

    }
    else if (auto029EF134_val == lib1_gv_cEffectModifyUnit) {
        if ((lib1_gv_sEARCHMODE == lib1_ge_SearchMode_Ability)) {
            autoDB0EF4C6_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "Cost", lp_player) - 1);
            lv_i = 0;
            for ( ; ( (autoDB0EF4C6_ai >= 0 && lv_i <= autoDB0EF4C6_ae) || (autoDB0EF4C6_ai < 0 && lv_i >= autoDB0EF4C6_ae) ) ; lv_i += autoDB0EF4C6_ai ) {
                if ((StringToAbilCmd(CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Cost[" + IntToString(lv_i) + "].Abil", lp_player)) == lib1_gv_bYPASS_SEARCH_ABILITY_COMMAND)) {
                    return true;
                }

            }
        }

    }
    else if (auto029EF134_val == lib1_gv_cEffectDamage) {
        if ((lib1_gv_sEARCHMODE == lib1_ge_SearchMode_Agressive)) {
            if (((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "Amount", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrent[" + IntToString(0) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrent[" + IntToString(1) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrent[" + IntToString(2) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrentRandom[" + IntToString(0) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrentRandom[" + IntToString(1) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrentRandom[" + IntToString(2) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "Random", lp_player) > 0.0))) {
                return true;
            }

        }

    }
    else if (auto029EF134_val == lib1_gv_cEffectCreateUnit) {
        if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnEffect", lp_player))) == true)) {
            return true;
        }

        if ((lib1_gv_sEARCHMODE == lib1_ge_SearchMode_Agressive)) {
            auto21351EC7_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "SpawnUnit", lp_player) - 1);
            lv_i = 0;
            for ( ; ( (auto21351EC7_ai >= 0 && lv_i <= auto21351EC7_ae) || (auto21351EC7_ai < 0 && lv_i >= auto21351EC7_ae) ) ; lv_i += auto21351EC7_ai ) {
                if ((lib1_gf_UnitIsDanger(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnUnit[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                    return true;
                }

            }
        }

        if ((lib1_gv_sEARCHMODE == lib1_ge_SearchMode_Units)) {
            lv_unitscount = CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "SpawnUnit", lp_player);
            if ((lv_unitscount > 0)) {
                auto2E77095B_ae = (lv_unitscount - 1);
                lv_i = 0;
                for ( ; ( (auto2E77095B_ai >= 0 && lv_i <= auto2E77095B_ae) || (auto2E77095B_ai < 0 && lv_i >= auto2E77095B_ae) ) ; lv_i += auto2E77095B_ai ) {
                    lib1_gf_ListStringInclude(lib1_gv_byPassUnits, CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnUnit[" + IntToString(lv_i) + "]", lp_player));
                }
                return true;
            }

        }

    }
    else {
    }
    return false;
}

bool lib1_gf_ByPassAbility (int lp_player, string lp_ability) {
    // Variable Declarations
    int lv_i;
    string lv_requirement;
    int lv_cAbilityArmMagazine;
    int lv_cAbilityAugment;
    int lv_cAbilityBehavior;
    int lv_cAbilityBuild;
    int lv_cAbilityEffectInstant;
    int lv_cAbilityEffectTarget;
    int lv_cAbilityEffectMorph;

    // Automatic Variable Declarations
    int auto634A54DE_val;
    int auto5B6C99D1_ae;
    const int auto5B6C99D1_ai = 1;
    int auto08BB31A9_ae;
    const int auto08BB31A9_ai = 1;
    int autoD232CA64_ae;
    const int autoD232CA64_ai = 1;
    int autoD75CD493_ae;
    const int autoD75CD493_ai = 1;
    int autoB11DAFBF_ae;
    const int autoB11DAFBF_ai = 1;
    int auto21D3FA62_ae;
    const int auto21D3FA62_ai = 1;
    int auto1B0EBC0A_ae;
    const int auto1B0EBC0A_ai = 1;
    int autoFA1547B1_ae;
    const int autoFA1547B1_ai = 1;

    // Variable Initialization
    lv_cAbilityArmMagazine = CatalogEntryClass(c_gameCatalogAbil, "CarrierHangar");
    lv_cAbilityAugment = CatalogEntryClass(c_gameCatalogAbil, "TornadoMissile");
    lv_cAbilityBehavior = CatalogEntryClass(c_gameCatalogAbil, "BansheeCloak");
    lv_cAbilityBuild = CatalogEntryClass(c_gameCatalogAbil, "ProtossBuild");
    lv_cAbilityEffectInstant = CatalogEntryClass(c_gameCatalogAbil, "Overcharge");
    lv_cAbilityEffectTarget = CatalogEntryClass(c_gameCatalogAbil, "BlindingCloud");
    lv_cAbilityEffectMorph = CatalogEntryClass(c_gameCatalogAbil, "VoidRaySwarmDamageBoost");

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogAbil, lp_ability) == false)) {
        return false;
    }

    auto634A54DE_val = CatalogEntryClass(c_gameCatalogAbil, lp_ability);
    if (auto634A54DE_val == lv_cAbilityAugment) {
        if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect", lp_player))) == true)) {
            return true;
        }

    }
    else if (auto634A54DE_val == lv_cAbilityArmMagazine) {
        if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player))) == true) && (lib1_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player))) == true)) {
            return true;
        }

        auto5B6C99D1_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "EffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto5B6C99D1_ai >= 0 && lv_i <= auto5B6C99D1_ae) || (auto5B6C99D1_ai < 0 && lv_i >= auto5B6C99D1_ae) ) ; lv_i += auto5B6C99D1_ai ) {
            if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "EffectArray[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
    }
    else if (auto634A54DE_val == lv_cAbilityBehavior) {
        if ((lib1_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player))) == true)) {
            return true;
        }

        auto08BB31A9_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "BehaviorArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto08BB31A9_ai >= 0 && lv_i <= auto08BB31A9_ae) || (auto08BB31A9_ai < 0 && lv_i >= auto08BB31A9_ae) ) ; lv_i += auto08BB31A9_ai ) {
            if ((lib1_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "BehaviorArray[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
    }
    else if (auto634A54DE_val == lv_cAbilityEffectInstant) {
        if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player))) == true)) {
            return true;
        }

        autoD232CA64_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoD232CA64_ai >= 0 && lv_i <= autoD232CA64_ae) || (autoD232CA64_ai < 0 && lv_i >= autoD232CA64_ae) ) ; lv_i += autoD232CA64_ai ) {
            if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        autoD75CD493_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "Effect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoD75CD493_ai >= 0 && lv_i <= autoD75CD493_ae) || (autoD75CD493_ai < 0 && lv_i >= autoD75CD493_ae) ) ; lv_i += autoD75CD493_ai ) {
            if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        autoB11DAFBF_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "PrepEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoB11DAFBF_ai >= 0 && lv_i <= autoB11DAFBF_ae) || (autoB11DAFBF_ai < 0 && lv_i >= autoB11DAFBF_ae) ) ; lv_i += autoB11DAFBF_ai ) {
            if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PrepEffect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        if (((lib1_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player))) == true) || (lib1_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PreEffectBehavior.Behavior", lp_player))) == true) || (lib1_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PostEffectBehavior.Behavior", lp_player))) == true))) {
            return true;
        }

    }
    else if (auto634A54DE_val == lv_cAbilityEffectTarget) {
        if ((lib1_gv_sEARCHMODE == lib1_ge_SearchMode_Agressive)) {
            if ((CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "TargetFilters", lp_player) > 0) && (lib1_gf_FilterEnemyisExcluded(CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "TargetFilters[" + IntToString(0) + "]", lp_player)) == false)) {
                return true;
            }

        }

        if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player))) == true)) {
            return true;
        }

        auto21D3FA62_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto21D3FA62_ai >= 0 && lv_i <= auto21D3FA62_ae) || (auto21D3FA62_ai < 0 && lv_i >= auto21D3FA62_ae) ) ; lv_i += auto21D3FA62_ai ) {
            if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        auto1B0EBC0A_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "Effect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto1B0EBC0A_ai >= 0 && lv_i <= auto1B0EBC0A_ae) || (auto1B0EBC0A_ai < 0 && lv_i >= auto1B0EBC0A_ae) ) ; lv_i += auto1B0EBC0A_ai ) {
            if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        autoFA1547B1_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "PrepEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoFA1547B1_ai >= 0 && lv_i <= autoFA1547B1_ae) || (autoFA1547B1_ai < 0 && lv_i >= autoFA1547B1_ae) ) ; lv_i += autoFA1547B1_ai ) {
            if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PrepEffect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        if (((lib1_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player))) == true) || (lib1_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PreEffectBehavior.Behavior", lp_player))) == true))) {
            return true;
        }

    }
    else {
    }
    return false;
}

bool lib1_gf_StructureIsFlying (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "CommandCenterFlying") || (UnitGetType(lp_unit) == "OrbitalCommandFlying") || (UnitGetType(lp_unit) == "BarracksFlying") || (UnitGetType(lp_unit) == "FactoryFlying") || (UnitGetType(lp_unit) == "StarportFlying"))) {
        return true;
    }
    else {
        return false;
    }
}

bool lib1_gf_Canbebuilton (unit lp_unit, point lp_point) {
    int init_i;

    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    fixed lv_r;
    int[16] lv_enemyDefenseBuildingTickCount;

    // Automatic Variable Declarations
    int auto5C623E14_ae;
    const fixed auto5C623E14_ai = 0.5;
    int auto6CCDB37B_ae;
    const fixed auto6CCDB37B_ai = 0.5;

    // Variable Initialization
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lv_enemyDefenseBuildingTickCount[init_i] = 2;
    }

    // Implementation
    if ((RegionContainsPoint(RegionPlayableMap(), lp_point) == false)) {
        return false;
    }

    auto5C623E14_ae = CeilingI((PointGetX(lp_point) + lv_r));
    lv_x = FloorI((PointGetX(lp_point) - lv_r));
    for ( ; ( (auto5C623E14_ai >= 0 && lv_x <= auto5C623E14_ae) || (auto5C623E14_ai < 0 && lv_x >= auto5C623E14_ae) ) ; lv_x += auto5C623E14_ai ) {
        auto6CCDB37B_ae = CeilingI((PointGetY(lp_point) + lv_r));
        lv_y = FloorI((PointGetY(lp_point) - lv_r));
        for ( ; ( (auto6CCDB37B_ai >= 0 && lv_y <= auto6CCDB37B_ae) || (auto6CCDB37B_ai < 0 && lv_y >= auto6CCDB37B_ae) ) ; lv_y += auto6CCDB37B_ai ) {
            if ((RegionContainsPoint(RegionPlayableMap(), Point(lv_x, lv_y)) == true) && (RegionContainsPoint(RegionCircle(lp_point, lv_r), Point(lv_x, lv_y)) == true) && (lib1_gf_Canbebuiltonabranch(Point(lv_x, lv_y), lv_enemyDefenseBuildingTickCount[UnitGetOwner(lp_unit)]) == true)) {
                return true;
            }

        }
    }
    return false;
}

bool lib1_gf_Canbebuiltonabranch (point lp_point, int lp_number) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    fixed autoDB4AF7C8_ae;
    const fixed autoDB4AF7C8_ai = 0.5;
    fixed autoDFEA0944_ae;
    const fixed autoDFEA0944_ai = 0.5;

    // Variable Initialization

    // Implementation
    autoDB4AF7C8_ae = (PointGetX(lp_point) + (lp_number / 2.0));
    lv_x = (PointGetX(lp_point) - (lp_number / 2.0));
    for ( ; ( (autoDB4AF7C8_ai >= 0 && lv_x <= autoDB4AF7C8_ae) || (autoDB4AF7C8_ai < 0 && lv_x >= autoDB4AF7C8_ae) ) ; lv_x += autoDB4AF7C8_ai ) {
        autoDFEA0944_ae = (PointGetY(lp_point) + (lp_number / 2.0));
        lv_y = (PointGetY(lp_point) - (lp_number / 2.0));
        for ( ; ( (autoDFEA0944_ai >= 0 && lv_y <= autoDFEA0944_ae) || (autoDFEA0944_ai < 0 && lv_y >= autoDFEA0944_ae) ) ; lv_y += autoDFEA0944_ai ) {
            if ((RegionContainsPoint(RegionPlayableMap(), Point(lv_x, lv_y)) == true) && (PathingType(Point(lv_x, lv_y)) != c_pathingUnpathable) && (PathingType(Point(lv_x, lv_y)) != c_pathingCliff)) {
            }
            else {
                return false;
            }
        }
    }
    return true;
}

point lib1_gf_Thenearestbuildablepointtothepoint (point lp_point, int lp_numberofscales) {
    // Variable Declarations
    fixed lv_distancebetweentwopoints;
    point lv_nearestbuildablepoint;
    point lv_pointtowhichpointcoordinatesareroundedoff;
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    int autoC2E54CF5_ae;
    int autoC2E54CF5_var;
    fixed auto685E8ADD_ae;
    const fixed auto685E8ADD_ai = 1.0;
    fixed autoB85EBF50_ae;
    const fixed autoB85EBF50_ai = 1.0;
    fixed autoD519F162_ae;
    const fixed autoD519F162_ai = -1.0;
    fixed autoE8F60C77_ae;
    const fixed autoE8F60C77_ai = -1.0;

    // Variable Initialization
    lv_distancebetweentwopoints = 500.0;
    lv_pointtowhichpointcoordinatesareroundedoff = Point(Round(PointGetX(lp_point)), Round(PointGetY(lp_point)));

    // Implementation
    if ((ModI(lp_numberofscales, 2) == 0)) {
        if ((lib1_gf_Canbebuiltonabranch(lv_pointtowhichpointcoordinatesareroundedoff, lp_numberofscales) == true)) {
            return lv_pointtowhichpointcoordinatesareroundedoff;
        }
        else {
            autoC2E54CF5_ae = CeilingI(MaxF(libNtve_gf_HeightOfRegion(RegionEntireMap()), libNtve_gf_WidthOfRegion(RegionEntireMap())));
            autoC2E54CF5_var = 1;
            for ( ; autoC2E54CF5_var <= autoC2E54CF5_ae; autoC2E54CF5_var += 1 ) {
                auto685E8ADD_ae = (PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + autoC2E54CF5_var);
                lv_x = (PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - autoC2E54CF5_var);
                for ( ; ( (auto685E8ADD_ai >= 0 && lv_x <= auto685E8ADD_ae) || (auto685E8ADD_ai < 0 && lv_x >= auto685E8ADD_ae) ) ; lv_x += auto685E8ADD_ai ) {
                    if ((DistanceBetweenPoints(lp_point, Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - autoC2E54CF5_var))) < lv_distancebetweentwopoints) && (lib1_gf_Canbebuiltonabranch(Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - autoC2E54CF5_var)), lp_numberofscales) == true)) {
                        lv_distancebetweentwopoints = DistanceBetweenPoints(lp_point, Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - autoC2E54CF5_var)));
                        lv_nearestbuildablepoint = Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - autoC2E54CF5_var));
                    }

                }
                autoB85EBF50_ae = (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + autoC2E54CF5_var);
                lv_y = (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - (autoC2E54CF5_var - 1));
                for ( ; ( (autoB85EBF50_ai >= 0 && lv_y <= autoB85EBF50_ae) || (autoB85EBF50_ai < 0 && lv_y >= autoB85EBF50_ae) ) ; lv_y += autoB85EBF50_ai ) {
                    if ((DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + autoC2E54CF5_var), lv_y)) < lv_distancebetweentwopoints) && (lib1_gf_Canbebuiltonabranch(Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + autoC2E54CF5_var), lv_y), lp_numberofscales) == true)) {
                        lv_distancebetweentwopoints = DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + autoC2E54CF5_var), lv_y));
                        lv_nearestbuildablepoint = Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + autoC2E54CF5_var), lv_y);
                    }

                }
                autoD519F162_ae = (PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - autoC2E54CF5_var);
                lv_x = (PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + (autoC2E54CF5_var - 1));
                for ( ; ( (autoD519F162_ai >= 0 && lv_x <= autoD519F162_ae) || (autoD519F162_ai < 0 && lv_x >= autoD519F162_ae) ) ; lv_x += autoD519F162_ai ) {
                    if ((DistanceBetweenPoints(lp_point, Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + autoC2E54CF5_var))) < lv_distancebetweentwopoints) && (lib1_gf_Canbebuiltonabranch(Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + autoC2E54CF5_var)), lp_numberofscales) == true)) {
                        lv_distancebetweentwopoints = DistanceBetweenPoints(lp_point, Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + autoC2E54CF5_var)));
                        lv_nearestbuildablepoint = Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + autoC2E54CF5_var));
                    }

                }
                autoE8F60C77_ae = (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - (autoC2E54CF5_var - 1));
                lv_y = (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + (autoC2E54CF5_var - 1));
                for ( ; ( (autoE8F60C77_ai >= 0 && lv_y <= autoE8F60C77_ae) || (autoE8F60C77_ai < 0 && lv_y >= autoE8F60C77_ae) ) ; lv_y += autoE8F60C77_ai ) {
                    if ((DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - autoC2E54CF5_var), lv_y)) < lv_distancebetweentwopoints) && (lib1_gf_Canbebuiltonabranch(Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - autoC2E54CF5_var), lv_y), lp_numberofscales) == true)) {
                        lv_distancebetweentwopoints = DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - autoC2E54CF5_var), lv_y));
                        lv_nearestbuildablepoint = Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - autoC2E54CF5_var), lv_y);
                    }

                }
                if ((lv_distancebetweentwopoints <= DistanceBetweenPoints(lp_point, Point(PointGetX(lv_pointtowhichpointcoordinatesareroundedoff), (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - (autoC2E54CF5_var + 1))))) && (lv_distancebetweentwopoints <= DistanceBetweenPoints(lp_point, Point(PointGetX(lv_pointtowhichpointcoordinatesareroundedoff), (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + (autoC2E54CF5_var + 1))))) && (lv_distancebetweentwopoints <= DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - (autoC2E54CF5_var + 1)), PointGetY(lv_pointtowhichpointcoordinatesareroundedoff)))) && (lv_distancebetweentwopoints <= DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + (autoC2E54CF5_var + 1)), PointGetY(lv_pointtowhichpointcoordinatesareroundedoff))))) {
                    return lv_nearestbuildablepoint;
                }

            }
        }
    }

    return lv_nearestbuildablepoint;
}

unitgroup lib1_gf_UnitsInRegionWithSpecifiedTypes (int lp_player, string lp_units, region lp_region) {
    // Variable Declarations
    string lv_compareUnitName;
    string lv_compareUnitType;
    unitgroup lv_resultGroup;

    // Automatic Variable Declarations
    int auto4A7AC7AF_ai;
    int auto4A7AC7AF_ae;

    // Variable Initialization
    lv_compareUnitName = "";
    lv_resultGroup = UnitGroupEmpty();

    // Implementation
    auto4A7AC7AF_ai = 1;
    auto4A7AC7AF_ae = lib1_gf_ListSize(lp_units);
    while (auto4A7AC7AF_ai <= auto4A7AC7AF_ae) {
        lv_compareUnitName = lib1_gf_ListStringGet(lp_units, auto4A7AC7AF_ai);
        auto4A7AC7AF_ai = auto4A7AC7AF_ai+1;
        lv_compareUnitType = UnitTypeFromString(lv_compareUnitName);
        UnitGroupAddUnitGroup(lv_resultGroup, UnitGroup(lv_compareUnitType, lp_player, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    return lv_resultGroup;
}

point lib1_gf_GetExpansionpoint (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
}

void lib1_gf_SetupAIUnits (int lp_player) {
    // Variable Declarations
    string lv_unitProduction;
    unit lv_unit;
    int lv_index;
    int lv_cardlayout;
    int lv_layoutbutton;
    string lv_unitName1;
    string lv_unitName2;
    string lv_unitName3;
    string lv_unitType;
    string lv_unitType2;
    string lv_abilCmdName;
    abilcmd lv_abilCmd;
    int lv_abilCmdIndex;
    string lv_ability;
    string lv_ability2;
    string lv_behavior;
    string lv_aiunits;
    string lv_aiupgrades;
    string lv_aiunitfood;
    string lv_aiunitsupport;
    string lv_aiunitcombat;
    string lv_aiunitworker;
    string lv_aiunittransport;
    string lv_aistructuretech;
    string lv_aistructureproduction;
    string lv_aistructuredefenses;
    string lv_aistructurepower;
    string lv_aistructuredropoff;
    string lv_aistructuremain;
    string lv_aistructurerefinery;
    string lv_aimorph;
    string lv_aiprojectiles;
    string lv_airequirements;
    bool lv_unitfood;
    bool lv_unitstructure;
    bool lv_unittech;
    bool lv_unitproduction;
    bool lv_unitdetection;
    bool lv_unitworker;
    bool lv_unitcombat;
    bool lv_unittransport;
    bool lv_unitdropoff;
    bool lv_unitdropoffmorph;
    bool lv_unitvespene;
    bool lv_isPhaseMorphAbility;

    // Automatic Variable Declarations
    unitgroup autoE43F794C_g;
    int autoE43F794C_u;
    int auto434CD587_ae;
    int auto434CD587_var;
    int auto6D636E86_ae;
    int auto6D636E86_var;
    int auto799DC3D6_ae;
    int auto799DC3D6_var;
    int auto6B050B41_ae;
    int auto6B050B41_var;
    int autoAF433373_ae;
    int autoAF433373_var;
    int autoDDD824FB_ae;
    int autoDDD824FB_var;
    int auto7C0CAD06_ae;
    int auto7C0CAD06_var;
    int auto6A77ACCE_ae;
    int auto6A77ACCE_var;
    int auto09DB0D2A_ae;
    int auto09DB0D2A_var;
    int auto4775DF66_ae;
    const int auto4775DF66_ai = 1;
    int auto039B9B04_ae;
    const int auto039B9B04_ai = 1;
    int auto38C3EA4B_val;
    int auto9443E169_ae;
    int auto9443E169_var;
    int auto23A19FBE_ae;
    int auto23A19FBE_var;
    int autoA940015D_ae;
    int autoA940015D_var;
    int auto302B636D_ae;
    int auto302B636D_var;

    // Variable Initialization
    lv_unitProduction = "";
    lv_index = 1;
    lv_unitName1 = "";
    lv_unitName2 = "";
    lv_unitName3 = "";
    lv_aiunits = ("^AI" + IntToString(lp_player) + "Units");
    lv_aiupgrades = ("^AI" + IntToString(lp_player) + "Upgrades");
    lv_aiunitfood = ("^AI" + IntToString(lp_player) + "StructureFood");
    lv_aiunitsupport = ("^AI" + IntToString(lp_player) + "UnitSupport");
    lv_aiunitcombat = ("^AI" + IntToString(lp_player) + "UnitCombat");
    lv_aiunitworker = ("^AI" + IntToString(lp_player) + "UnitWorker");
    lv_aiunittransport = ("^AI" + IntToString(lp_player) + "UnitTransport");
    lv_aistructuretech = ("^AI" + IntToString(lp_player) + "StructureTech");
    lv_aistructureproduction = ("^AI" + IntToString(lp_player) + "StructureProduction");
    lv_aistructuredefenses = ("^AI" + IntToString(lp_player) + "StructureDefense");
    lv_aistructurepower = ("^AI" + IntToString(lp_player) + "StructurePower");
    lv_aistructuredropoff = ("^AI" + IntToString(lp_player) + "StructureDropOff");
    lv_aistructuremain = ("^AI" + IntToString(lp_player) + "StructureMain");
    lv_aistructurerefinery = ("^AI" + IntToString(lp_player) + "StructureRefinery");
    lv_aimorph = ("^AI" + IntToString(lp_player) + "Morphs");
    lv_aiprojectiles = ("^AI" + IntToString(lp_player) + "Projectiles");
    lv_airequirements = ("^AI" + IntToString(lp_player) + "Requirements");

    // Implementation
    autoE43F794C_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE43F794C_u = UnitGroupCount(autoE43F794C_g, c_unitCountAll);
    for (;; autoE43F794C_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoE43F794C_g, autoE43F794C_u);
        if (lv_unit == null) { break; }
        lv_unitType = UnitGetType(lv_unit);
        lv_unitworker = UnitTypeTestFlag(lv_unitType, c_unitFlagWorker);
        lv_unitdropoff = lib1_gf_UnitIsDropOff(lp_player, lv_unitType);
        if (((lv_unitdropoff == true) || (lv_unitworker == true))) {
            lib1_gf_ListStringInclude(lv_aiunits, (lv_unitType));
        }

    }
    while ((lib1_gf_ListStringGet(lv_aiunits, lv_index) != null)) {
        lv_unitName1 = lib1_gf_ListStringGet(lv_aiunits, lv_index);
        lv_unitType = (lv_unitName1);
        if (((UnitTypeTestFlag(lv_unitType, c_unitFlagUnselectable) == true) || (UnitTypeTestFlag(lv_unitType, c_unitFlagUncommandable) == true) || (UnitTypeTestFlag(lv_unitType, c_unitFlagMissile) == true) || (UnitTypeTestFlag(lv_unitType, c_unitFlagNoDraw) == true))) {
            lv_index += 1;
            lib1_gf_ListStringInclude(lv_aiprojectiles, lv_unitName1);
            lib1_gf_ListStringExclude(lv_aiunits, lv_unitName1);
            continue;
        }

        lv_unitproduction = false;
        lv_unittech = false;
        lv_unittransport = false;
        lv_unitstructure = UnitTypeTestAttribute(lv_unitType, c_unitAttributeStructure);
        lv_unitworker = UnitTypeTestFlag(lv_unitType, c_unitFlagWorker);
        if ((CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType, "WeaponArray", lp_player) > 0)) {
            lv_unitcombat = true;
        }
        else {
            lv_unitcombat = false;
        }
        lv_unitdetection = lib1_gf_UnitisDetector(lp_player, lv_unitType);
        lib1_gf_ListStringExclude(lv_aimorph, lv_unitName1);
        auto434CD587_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitName1, "AbilArray", lp_player) - 1);
        auto434CD587_var = 0;
        for ( ; auto434CD587_var <= auto434CD587_ae; auto434CD587_var += 1 ) {
            lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitName1, "AbilArray[" + IntToString(auto434CD587_var) + "].Link", lp_player));
            if ((AbilityClass(lv_ability) == c_classIdCAbilMorph)) {
                auto6D636E86_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability, "InfoArray", lp_player) - 1);
                auto6D636E86_var = 0;
                for ( ; auto6D636E86_var <= auto6D636E86_ae; auto6D636E86_var += 1 ) {
                    lv_unitName2 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(auto6D636E86_var) + "].Unit", lp_player);
                    lv_unitType2 = (lv_unitName2);
                    lv_isPhaseMorphAbility = false;
                    auto799DC3D6_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitName2, "AbilArray", lp_player) - 1);
                    auto799DC3D6_var = 0;
                    for ( ; auto799DC3D6_var <= auto799DC3D6_ae; auto799DC3D6_var += 1 ) {
                        lv_ability2 = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitName2, "AbilArray[" + IntToString(auto799DC3D6_var) + "].Link", lp_player));
                        if ((AbilityClass(lv_ability2) == c_classIdCAbilMorph)) {
                            auto6B050B41_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability2, "InfoArray", lp_player) - 1);
                            auto6B050B41_var = 0;
                            for ( ; auto6B050B41_var <= auto6B050B41_ae; auto6B050B41_var += 1 ) {
                                lv_unitName3 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability2, "InfoArray[" + IntToString(auto6B050B41_var) + "].Unit", lp_player);
                                if ((lv_unitName3 == lv_unitName1)) {
                                    lv_isPhaseMorphAbility = true;
                                }

                            }
                        }

                        if ((AbilityClass(lv_ability2) == c_classIdCAbilMorphPlacement)) {
                            autoAF433373_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability2, "InfoArray", lp_player) - 1);
                            autoAF433373_var = 0;
                            for ( ; autoAF433373_var <= autoAF433373_ae; autoAF433373_var += 1 ) {
                                lv_unitName3 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability2, "InfoArray[" + IntToString(autoAF433373_var) + "].Unit", lp_player);
                                if ((lv_unitName3 == lv_unitName1)) {
                                    lv_isPhaseMorphAbility = true;
                                }

                            }
                        }

                    }
                    if ((lv_isPhaseMorphAbility == false)) {
                        lib1_gf_ListStringInclude(lv_aiunits, lv_unitName2);
                        if ((lv_unitdropoff == true)) {
                            lib1_gf_ListStringExclude(lv_aistructuremain, lv_unitName2);
                        }

                    }
                    else {
                        lib1_gf_ListStringInclude(lv_aimorph, lv_unitName2);
                        if ((CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType2, "WeaponArray", lp_player) > 0)) {
                            lv_unitcombat = true;
                        }
                        if ((lib1_gf_UnitisDetector(lp_player, lv_unitType2) == true)) {
                            lv_unitdetection = true;
                        }
                    }
                }
            }

            if ((AbilityClass(lv_ability) == c_classIdCAbilMorphPlacement)) {
                autoDDD824FB_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability, "InfoArray", lp_player) - 1);
                autoDDD824FB_var = 0;
                for ( ; autoDDD824FB_var <= autoDDD824FB_ae; autoDDD824FB_var += 1 ) {
                    lv_unitName2 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(autoDDD824FB_var) + "].Unit", lp_player);
                    lv_isPhaseMorphAbility = false;
                    auto7C0CAD06_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitName2, "AbilArray", lp_player) - 1);
                    auto7C0CAD06_var = 0;
                    for ( ; auto7C0CAD06_var <= auto7C0CAD06_ae; auto7C0CAD06_var += 1 ) {
                        lv_ability2 = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitName2, "AbilArray[" + IntToString(auto7C0CAD06_var) + "].Link", lp_player));
                        if ((AbilityClass(lv_ability2) == c_classIdCAbilMorph)) {
                            auto6A77ACCE_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability2, "InfoArray", lp_player) - 1);
                            auto6A77ACCE_var = 0;
                            for ( ; auto6A77ACCE_var <= auto6A77ACCE_ae; auto6A77ACCE_var += 1 ) {
                                lv_unitName3 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability2, "InfoArray[" + IntToString(auto6A77ACCE_var) + "].Unit", lp_player);
                                if ((lv_unitName3 == lv_unitName1)) {
                                    lv_isPhaseMorphAbility = true;
                                }

                            }
                        }

                        if ((AbilityClass(lv_ability2) == c_classIdCAbilMorphPlacement)) {
                            auto09DB0D2A_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability2, "InfoArray", lp_player) - 1);
                            auto09DB0D2A_var = 0;
                            for ( ; auto09DB0D2A_var <= auto09DB0D2A_ae; auto09DB0D2A_var += 1 ) {
                                lv_unitName3 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability2, "InfoArray[" + IntToString(auto09DB0D2A_var) + "].Unit", lp_player);
                                if ((lv_unitName3 == lv_unitName1)) {
                                    lv_isPhaseMorphAbility = true;
                                }

                            }
                        }

                    }
                    if ((lv_isPhaseMorphAbility == false)) {
                        lib1_gf_ListStringInclude(lv_aiunits, lv_unitName2);
                        if ((lv_unitdropoff == true)) {
                            lib1_gf_ListStringExclude(lv_aistructuremain, lv_unitName2);
                        }

                    }
                    else {
                        lib1_gf_ListStringInclude(lv_aimorph, lv_unitName2);
                        if ((CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType2, "WeaponArray", lp_player) > 0)) {
                            lv_unitcombat = true;
                        }
                        if ((lib1_gf_UnitisDetector(lp_player, lv_unitType2) == true)) {
                            lv_unitdetection = true;
                        }
                    }
                }
            }

        }
        lv_unitdropoff = lib1_gf_UnitIsDropOff(lp_player, lv_unitType);
        lv_unitdropoffmorph = lib1_gf_ListStringIncludes(lv_aistructuredropoff, lv_unitName1);
        if ((lv_unitdropoff == true)) {
            lib1_gf_ListStringInclude(lv_aistructuredropoff, lv_unitName1);
        }

        if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, lv_unitType, "Food", lp_player) > 0)) {
            lv_unitfood = true;
        }
        else {
            lv_unitfood = false;
        }
        if ((CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Footprint", lp_player) == "FootprintGeyserRoundedBuilt")) {
            lv_unitvespene = true;
        }
        else {
            lv_unitvespene = false;
        }
        auto4775DF66_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitName1, "CardLayouts", lp_player) - 1);
        lv_cardlayout = 0;
        for ( ; ( (auto4775DF66_ai >= 0 && lv_cardlayout <= auto4775DF66_ae) || (auto4775DF66_ai < 0 && lv_cardlayout >= auto4775DF66_ae) ) ; lv_cardlayout += auto4775DF66_ai ) {
            auto039B9B04_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitName1, "CardLayouts[" + IntToString(lv_cardlayout) + "].LayoutButtons", lp_player) - 1);
            lv_layoutbutton = 0;
            for ( ; ( (auto039B9B04_ai >= 0 && lv_layoutbutton <= auto039B9B04_ae) || (auto039B9B04_ai < 0 && lv_layoutbutton >= auto039B9B04_ae) ) ; lv_layoutbutton += auto039B9B04_ai ) {
                lv_abilCmdName = CatalogFieldValueGet(c_gameCatalogUnit, lv_unitName1, "CardLayouts[" + IntToString(lv_cardlayout) + "].LayoutButtons[" + IntToString(lv_layoutbutton) + "].AbilCmd", c_playerAny);
                if ((lv_abilCmdName != null)) {
                    lv_abilCmd = StringToAbilCmd(lv_abilCmdName);
                    lv_ability = AbilityCommandGetAbility(lv_abilCmd);
                    lv_abilCmdIndex = AbilityCommandGetCommand(lv_abilCmd);
                    if ((TechTreeAbilityIsAllowed(lp_player, lv_abilCmd) == false)) {
                        continue;
                    }

                    auto38C3EA4B_val = AbilityClass(lv_ability);
                    if (auto38C3EA4B_val == c_classIdCAbilTransport) {
                        if ((lv_unitstructure == false)) {
                            lv_unittransport = true;
                        }

                    }
                    else if (auto38C3EA4B_val == c_classIdCAbilBuild) {
                        if ((lv_abilCmdIndex < 30)) {
                            lv_unitName2 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Unit", c_playerAny);
                            if ((lv_unitName2 != null)) {
                                lib1_gf_ListStringInclude(lv_aiunits, lv_unitName2);
                            }

                        }

                    }
                    else if (auto38C3EA4B_val == c_classIdCAbilTrain) {
                        lv_unitproduction = true;
                        if ((lv_abilCmdIndex < 30)) {
                            auto23A19FBE_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Unit", lp_player) - 1);
                            auto23A19FBE_var = 0;
                            for ( ; auto23A19FBE_var <= auto23A19FBE_ae; auto23A19FBE_var += 1 ) {
                                lv_unitName2 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Unit[" + IntToString(auto23A19FBE_var) + "]", lp_player);
                                if ((lv_unitName2 != null)) {
                                    lib1_gf_ListStringInclude(lv_aiunits, lv_unitName2);
                                }

                            }
                        }

                    }
                    else if (auto38C3EA4B_val == c_classIdCAbilWarpTrain) {
                        lv_unitproduction = true;
                        if ((lv_abilCmdIndex < 30)) {
                            lv_unitName2 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Unit", lp_player);
                            if ((lv_unitName2 != null)) {
                                lib1_gf_ListStringInclude(lv_aiunits, lv_unitName2);
                            }

                        }

                    }
                    else if (auto38C3EA4B_val == c_classIdCAbilResearch) {
                        lv_unittech = true;
                        if ((lv_abilCmdIndex < 30)) {
                            lv_unitName2 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Upgrade", lp_player);
                            if ((lv_unitName2 != null)) {
                                lib1_gf_ListStringInclude(lv_aiupgrades, lv_unitName2);
                            }

                        }

                    }
                    else {
                        lib1_gf_ClearCache();
                        lib1_gv_sEARCHMODE = lib1_ge_SearchMode_Units;
                        if ((lib1_gf_ByPassAbility(lp_player, lv_ability) == true)) {
                            auto9443E169_ae = lib1_gf_ListSize(lib1_gv_byPassUnits);
                            auto9443E169_var = 1;
                            for ( ; auto9443E169_var <= auto9443E169_ae; auto9443E169_var += 1 ) {
                                lib1_gf_ListStringInclude(lv_aiunits, lib1_gf_ListStringGet(lib1_gv_byPassUnits, auto9443E169_var));
                            }
                        }

                    }
                }

            }
        }
        autoA940015D_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitName1, "BehaviorArray", lp_player) - 1);
        autoA940015D_var = 0;
        for ( ; autoA940015D_var <= autoA940015D_ae; autoA940015D_var += 1 ) {
            lv_behavior = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitName1, "BehaviorArray[" + IntToString(autoA940015D_var) + "].Link", lp_player));
            if ((CatalogEntryIsValid(c_gameCatalogBehavior, lv_behavior) == true) && (CatalogEntryClass(c_gameCatalogBehavior, lv_behavior) == CatalogEntryClass(c_gameCatalogBehavior, "SpawnLarva"))) {
                lv_unitproduction = true;
                auto302B636D_ae = (CatalogFieldValueCount(c_gameCatalogBehavior, lv_behavior, "InfoArray", lp_player) - 1);
                auto302B636D_var = 0;
                for ( ; auto302B636D_var <= auto302B636D_ae; auto302B636D_var += 1 ) {
                    lv_unitName2 = CatalogFieldValueGet(c_gameCatalogBehavior, lv_behavior, "InfoArray[" + IntToString(auto302B636D_var) + "].Unit", lp_player);
                    if ((lv_unitName2 != null)) {
                        lib1_gf_ListStringInclude(lv_aiunits, lv_unitName2);
                    }

                }
            }

        }
        if ((lv_unitvespene == true)) {
            lib1_gf_ListStringInclude(lv_aistructurerefinery, lv_unitName1);
        }
        else if ((lv_unitworker == true)) {
            lib1_gf_ListStringInclude(lv_aiunitworker, lv_unitName1);
        }
        else if ((lv_unitdropoff == true)) {
            if ((lv_unitdropoffmorph == false)) {
                lib1_gf_ListStringInclude(lv_aistructuremain, lv_unitName1);
            }
            else {
                if ((lv_unitcombat == false)) {
                    lib1_gf_ListStringInclude(lv_aistructuredefenses, lv_unitName1);
                }
                else {
                    lib1_gf_ListStringInclude(lv_aistructuretech, lv_unitName1);
                }
            }
        }
        else if ((lv_unitproduction == true)) {
            lib1_gf_ListStringInclude(lv_aistructureproduction, lv_unitName1);
        }
        else if ((lv_unitstructure == true) && ((lv_unitcombat == true) || (lv_unitdetection == true))) {
            lib1_gf_ListStringInclude(lv_aistructuredefenses, lv_unitName1);
        }
        else if ((lv_unitstructure == true) && (lv_unittech == true)) {
            lib1_gf_ListStringInclude(lv_aistructuretech, lv_unitName1);
        }
        else if ((lv_unitfood == true)) {
            lib1_gf_ListStringInclude(lv_aiunitfood, lv_unitName1);
        }
        else if ((lv_unitstructure == true)) {
            lib1_gf_ListStringInclude(lv_aistructuretech, lv_unitName1);
        }
        else if ((lv_unitcombat == true)) {
            lib1_gf_ListStringInclude(lv_aiunitcombat, lv_unitName1);
        }
        else if ((lv_unitdetection == true)) {
            lib1_gf_ListStringInclude(lv_aiunitsupport, lv_unitName1);
        }
        else if ((lv_unittransport == true)) {
            lib1_gf_ListStringInclude(lv_aiunittransport, lv_unitName1);
        }
        else if (true) {
            lib1_gf_ListStringInclude(lv_aiunitsupport, lv_unitName1);
        }
        lv_index += 1;
    }
}

void lib1_gf_SetupAIFlags (int lp_player) {
    // Variable Declarations
    int lv_aIPlayer;
    int lv_diff;
    point lv_targDPoint;
    point lv_targOPoint;
    wavetarget lv_targD;
    wavetarget lv_targO;
    int lv_townMain;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_aIPlayer = lp_player;
    lv_diff = AIPlayerDifficulty(lv_aIPlayer);

    // Implementation
    if ((lv_diff > 4)) {
        AIHarvestBonus(lv_aIPlayer, 1.2);
    }
    AISetDifficulty(lv_aIPlayer, c_diffAdvancedRetreatLogic, true);
    AISetDifficulty(lv_aIPlayer, c_diffPressForward, true);
    AISetDifficulty(lv_aIPlayer, c_diffAllowBuildInDanger, true);
    AISetDifficulty(lv_aIPlayer, c_diffAllowKiting, true);
    AISetDifficulty(lv_aIPlayer, c_diffAllowLongDistanceMining, true);
    AISetDifficulty(lv_aIPlayer, c_diffAllowResourceReq, true);
    AISetDifficulty(lv_aIPlayer, c_diffAllowTransportGather, true);
    AISetDifficulty(lv_aIPlayer, c_diffAutoBuildPrereqs, true);
    AISetDifficulty(lv_aIPlayer, c_diffAutoTransport, true);
    AISetDifficulty(lv_aIPlayer, c_diffAutoLoadBunkers, true);
    AISetDifficulty(lv_aIPlayer, c_diffAvoidMindControlled, true);
    AISetDifficulty(lv_aIPlayer, c_diffBalancePeonsAcrossBases, true);
    AISetDifficulty(lv_aIPlayer, c_diffDefendWithPeons, true);
    AISetDifficulty(lv_aIPlayer, c_diffDelayAdvTargetting, true);
    AISetDifficulty(lv_aIPlayer, c_diffEarlyDefenseScout, true);
    AISetDifficulty(lv_aIPlayer, c_diffRepairDamage, true);
    AISetDifficulty(lv_aIPlayer, c_diffFleeDamage, true);
    AISetDifficulty(lv_aIPlayer, c_diffEnableDangerMap, true);
    AISetDifficulty(lv_aIPlayer, c_diffHoldAtIdleChokes, true);
    AISetDifficulty(lv_aIPlayer, c_diffFleeWorkers, true);
    AISetDifficulty(lv_aIPlayer, c_diffFleeDanger, true);
    AISetDifficulty(lv_aIPlayer, c_diffNormalVision, true);
    AISetDifficulty(lv_aIPlayer, c_diffOptimizeGas, true);
    AISetDifficulty(lv_aIPlayer, c_diffEarlyGameRepair, true);
    AISetDifficulty(lv_aIPlayer, c_diffSetRallyPoints, true);
    AISetDifficulty(lv_aIPlayer, c_diffSplitAttacking, true);
    AISetDifficulty(lv_aIPlayer, c_diffSpotChangelings, true);
    AISetDifficulty(lv_aIPlayer, c_diffSupportsBeacons, true);
    AISetDifficulty(lv_aIPlayer, c_diffTargetSpawners, true);
    AISetDifficulty(lv_aIPlayer, c_diffLimitAPM, true);
    AISetDifficulty(lv_aIPlayer, c_diffLimitAPMCombat, true);
    AISetDifficulty(lv_aIPlayer, c_diffTimeoutMakeRequests, true);
    AISetDifficulty(lv_aIPlayer, c_diffUseExtraScouts, true);
    AISetDifficulty(lv_aIPlayer, c_diffNormalTargetPrio, true);
    AISetDifficulty(lv_aIPlayer, c_diffWaveLeashing, true);
    AISetDifficulty(lv_aIPlayer, c_diffWaveAvoidDanger, true);
    AISetFlag(lv_aIPlayer, lib1_gv_e_flagsAllowDropAttack, true);
    AISetFlag(lv_aIPlayer, lib1_gv_e_flagsAllowRetreat, true);
    AISetFlag(lv_aIPlayer, lib1_gv_e_flagsRunScared, false);
    AISetFlag(lv_aIPlayer, lib1_gv_e_flagsLateScout, true);
    AISetFlag(lv_aIPlayer, lib1_gv_e_flagsClearObs, true);
    AIDeclareTown(lv_aIPlayer, 0, PlayerStartLocation(lv_aIPlayer));
    AISetMainTown(lv_aIPlayer, 0);
    AIHarvest(lv_aIPlayer, 0);
    AISetAllStates(lv_aIPlayer, 1);
    lv_targDPoint = AIGetGatherDefLocation(lv_aIPlayer, lv_townMain);
    lv_targOPoint = AIGetGatherLocation(lv_aIPlayer, lv_townMain);
    AISetNumScouts(lv_aIPlayer, 1);
    AISetDefenseRadii(lv_aIPlayer, 15.0, 10.0, 12.0);
    AIEarlyDefenseEnable(lv_aIPlayer, false, false);
    AIEarlyDefenseProps(lv_aIPlayer, 30.0, 20.0, 30.0);
    AIScout(lv_aIPlayer);
}

void lib1_gf_AITechInfo (int lp_player) {
    // Variable Declarations
    int lv_aIPlayer;
    string lv_aiunits;
    string lv_aiunitfood;
    string lv_aiunitsupport;
    string lv_aiunitcombat;
    string lv_aiunitworker;
    string lv_aiunittransport;
    string lv_aistructuretech;
    string lv_aistructureproduction;
    string lv_aistructuredefenses;
    string lv_aistructurepower;
    string lv_aistructuremain;
    string lv_aistructurerefinery;
    string lv_aiupgrades;
    string lv_aistructuredropoff;
    string lv_aimorph;
    string lv_aiprojectiles;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_aIPlayer = lp_player;
    lv_aiunits = ("^AI" + IntToString(lv_aIPlayer) + "Units");
    lv_aiunitfood = ("^AI" + IntToString(lv_aIPlayer) + "StructureFood");
    lv_aiunitsupport = ("^AI" + IntToString(lv_aIPlayer) + "UnitSupport");
    lv_aiunitcombat = ("^AI" + IntToString(lv_aIPlayer) + "UnitCombat");
    lv_aiunitworker = ("^AI" + IntToString(lv_aIPlayer) + "UnitWorker");
    lv_aiunittransport = ("^AI" + IntToString(lv_aIPlayer) + "UnitTransport");
    lv_aistructuretech = ("^AI" + IntToString(lv_aIPlayer) + "StructureTech");
    lv_aistructureproduction = ("^AI" + IntToString(lv_aIPlayer) + "StructureProduction");
    lv_aistructuredefenses = ("^AI" + IntToString(lv_aIPlayer) + "StructureDefense");
    lv_aistructurepower = ("^AI" + IntToString(lv_aIPlayer) + "StructurePower");
    lv_aistructuremain = ("^AI" + IntToString(lv_aIPlayer) + "StructureMain");
    lv_aistructurerefinery = ("^AI" + IntToString(lv_aIPlayer) + "StructureRefinery");
    lv_aiupgrades = ("^AI" + IntToString(lv_aIPlayer) + "Upgrades");
    lv_aistructuredropoff = ("^AI" + IntToString(lv_aIPlayer) + "StructureDropOff");
    lv_aimorph = ("^AI" + IntToString(lv_aIPlayer) + "Morphs");
    lv_aiprojectiles = ("^AI" + IntToString(lv_aIPlayer) + "Projectiles");

    // Implementation
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_E0FEEEFB"), true);
    TextExpressionSetToken("Param/Expression/lib_1_BF77E86D", "A", StringToText((PlayerRace(lv_aIPlayer))));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_BF77E86D"), true);
    TextExpressionSetToken("Param/Expression/lib_1_3367DC08", "A", lib1_gf_ListStringtoText(lv_aimorph));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_3367DC08"), true);
    TextExpressionSetToken("Param/Expression/lib_1_57A6FFBC", "A", lib1_gf_ListStringtoText(lv_aiprojectiles));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_57A6FFBC"), true);
    TextExpressionSetToken("Param/Expression/lib_1_78BE631E", "A", lib1_gf_ListStringtoText(lv_aiunits));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_78BE631E"), true);
    TextExpressionSetToken("Param/Expression/lib_1_C6655192", "A", lib1_gf_ListStringtoText(lv_aiupgrades));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_C6655192"), true);
    TextExpressionSetToken("Param/Expression/lib_1_16369B72", "A", lib1_gf_ListStringtoText(lv_aistructuremain));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_16369B72"), true);
    TextExpressionSetToken("Param/Expression/lib_1_2E5BE931", "A", lib1_gf_ListStringtoText(lv_aistructuredropoff));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_2E5BE931"), true);
    TextExpressionSetToken("Param/Expression/lib_1_B6EDDF9B", "A", lib1_gf_ListStringtoText(lv_aiunitworker));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_B6EDDF9B"), true);
    TextExpressionSetToken("Param/Expression/lib_1_0DF8E162", "A", lib1_gf_ListStringtoText(lv_aiunitfood));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_0DF8E162"), true);
    TextExpressionSetToken("Param/Expression/lib_1_ACEB896C", "A", lib1_gf_ListStringtoText(lv_aistructurerefinery));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_ACEB896C"), true);
    TextExpressionSetToken("Param/Expression/lib_1_B69385DF", "A", lib1_gf_ListStringtoText(lv_aistructureproduction));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_B69385DF"), true);
    TextExpressionSetToken("Param/Expression/lib_1_FD302351", "A", lib1_gf_ListStringtoText(lv_aistructuretech));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_FD302351"), true);
    TextExpressionSetToken("Param/Expression/lib_1_2EB7A16D", "A", lib1_gf_ListStringtoText(lv_aistructuredefenses));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_2EB7A16D"), true);
    TextExpressionSetToken("Param/Expression/lib_1_2A1C2DE7", "A", lib1_gf_ListStringtoText(lv_aiunitcombat));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_2A1C2DE7"), true);
    TextExpressionSetToken("Param/Expression/lib_1_EBED9FE4", "A", lib1_gf_ListStringtoText(lv_aiunitsupport));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_EBED9FE4"), true);
    TextExpressionSetToken("Param/Expression/lib_1_BD4A24F7", "A", lib1_gf_ListStringtoText(lv_aiunittransport));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_BD4A24F7"), true);
}

void lib1_gf_CleanUp (int lp_player) {
    // Variable Declarations
    int lv_aIPlayer;
    string lv_aiunitfood;
    string lv_aiunitsupport;
    string lv_aiunitcombat;
    string lv_aiunitworker;
    string lv_aiunittransport;
    string lv_aistructuretech;
    string lv_aistructureproduction;
    string lv_aistructuredefenses;
    string lv_aistructurepower;
    string lv_aistructuremain;
    string lv_aistructurerefinery;
    string lv_aiupgrades;
    string lv_aistructuredropoff;
    string lv_unitTownHall;
    string lv_unitPeon;
    string lv_unitRefinery;
    string lv_unitSupply;
    string lv_unitTransport;
    string lv_unitType;
    string lv_UnitTransport2;
    int lv_towns;
    int lv_supplyNeeded;
    fixed lv_supplyFoodAmount;
    int lv_SupplyNeeded2;
    int lv_SupplyNeeded3;
    int lv_SupplyNeeded6;
    int lv_SupplyNeeded5;
    int lv_SupplyNeeded4;
    fixed lv_nextwavetime;
    string lv_techStructure;
    string lv_techCombat;
    string lv_techSupport;
    string lv_techProduction;
    string lv_techUpgrade;
    string lv_availableunits;
    string lv_availableupgrades;
    string lv_availablesupport;
    string lv_availableproduction;
    string lv_availabletech;
    int lv_dangerLevel;
    bool lv_isExpansing;
    timer lv_aIExpandTimer;
    timer lv_aIAttackTimer;

    // Automatic Variable Declarations
    int auto1806E835_ai;
    int auto1806E835_ae;
    int auto6B4C077D_ai;
    int auto6B4C077D_ae;
    int auto8D95DFAE_ai;
    int auto8D95DFAE_ae;
    int autoEA7E7665_ai;
    int autoEA7E7665_ae;
    int auto6D064B60_ai;
    int auto6D064B60_ae;

    // Variable Initialization
    lv_aIPlayer = lp_player;
    lv_aiunitfood = ("^AI" + IntToString(lv_aIPlayer) + "StructureFood");
    lv_aiunitsupport = ("^AI" + IntToString(lv_aIPlayer) + "UnitSupport");
    lv_aiunitcombat = ("^AI" + IntToString(lv_aIPlayer) + "UnitCombat");
    lv_aiunitworker = ("^AI" + IntToString(lv_aIPlayer) + "UnitWorker");
    lv_aiunittransport = ("^AI" + IntToString(lv_aIPlayer) + "UnitTransport");
    lv_aistructuretech = ("^AI" + IntToString(lv_aIPlayer) + "StructureTech");
    lv_aistructureproduction = ("^AI" + IntToString(lv_aIPlayer) + "StructureProduction");
    lv_aistructuredefenses = ("^AI" + IntToString(lv_aIPlayer) + "StructureDefense");
    lv_aistructurepower = ("^AI" + IntToString(lv_aIPlayer) + "StructurePower");
    lv_aistructuremain = ("^AI" + IntToString(lv_aIPlayer) + "StructureMain");
    lv_aistructurerefinery = ("^AI" + IntToString(lv_aIPlayer) + "StructureRefinery");
    lv_aiupgrades = ("^AI" + IntToString(lv_aIPlayer) + "Upgrades");
    lv_aistructuredropoff = ("^AI" + IntToString(lv_aIPlayer) + "StructureDropOff");
    lv_unitTownHall = (lib1_gf_ListStringGet(lv_aistructuremain, 1));
    lv_unitPeon = (lib1_gf_ListStringGet(lv_aiunitworker, 1));
    lv_unitRefinery = (lib1_gf_ListStringGet(lv_aistructurerefinery, 1));
    lv_unitSupply = (lib1_gf_ListStringGet(lv_aiunitfood, 1));
    lv_unitTransport = (lib1_gf_ListStringGet(lv_aiunittransport, 1));
    lv_UnitTransport2 = "";
    lv_supplyFoodAmount = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, lv_unitRefinery, "Food", lv_aIPlayer);
    lv_nextwavetime = 160.0;
    lv_availableunits = ("^AI" + IntToString(lv_aIPlayer) + "AvailableUnits");
    lv_availableupgrades = ("^AI" + IntToString(lv_aIPlayer) + "AvailableUpgrades");
    lv_availablesupport = ("^AI" + IntToString(lv_aIPlayer) + "AvailableSupport");
    lv_availableproduction = ("^AI" + IntToString(lv_aIPlayer) + "AvailableProduction");
    lv_availabletech = ("^AI" + IntToString(lv_aIPlayer) + "AvailableTech");
    lv_dangerLevel = AISelfDefenseThreatEval(lib1_gv_realSelfThreat, lv_aIPlayer);
    lv_aIExpandTimer = TimerCreate();
    lv_aIAttackTimer = TimerCreate();

    // Implementation
    AIClearTrainQueue(lv_aIPlayer);
    AIClearBuildQueue(lv_aIPlayer);
    AIClearStock(lv_aIPlayer);
    AIClearResearchQueue(lv_aIPlayer);
    lib1_gf_ListClear(lv_availableproduction);
    lib1_gf_ListClear(lv_availablesupport);
    lib1_gf_ListClear(lv_availabletech);
    lib1_gf_ListClear(lv_availableunits);
    lib1_gf_ListClear(lv_availableupgrades);
    auto1806E835_ai = 1;
    auto1806E835_ae = lib1_gf_ListSize(lv_aiunitcombat);
    while (auto1806E835_ai <= auto1806E835_ae) {
        lv_UnitTransport2 = lib1_gf_ListStringGet(lv_aiunitcombat, auto1806E835_ai);
        auto1806E835_ai = auto1806E835_ai+1;
        if ((AIDefaultGetFirstUnfinishedReq(lv_aIPlayer, (lv_UnitTransport2)) == null)) {
            lib1_gf_ListStringInclude(lv_availableunits, lv_UnitTransport2);
        }

    }
    auto6B4C077D_ai = 1;
    auto6B4C077D_ae = lib1_gf_ListSize(lv_aistructureproduction);
    while (auto6B4C077D_ai <= auto6B4C077D_ae) {
        lv_UnitTransport2 = lib1_gf_ListStringGet(lv_aistructureproduction, auto6B4C077D_ai);
        auto6B4C077D_ai = auto6B4C077D_ai+1;
        if ((AIDefaultGetFirstUnfinishedReq(lv_aIPlayer, (lv_UnitTransport2)) == null)) {
            lib1_gf_ListStringInclude(lv_availableproduction, lv_UnitTransport2);
        }

    }
    auto8D95DFAE_ai = 1;
    auto8D95DFAE_ae = lib1_gf_ListSize(lv_aistructuretech);
    while (auto8D95DFAE_ai <= auto8D95DFAE_ae) {
        lv_UnitTransport2 = lib1_gf_ListStringGet(lv_aistructuretech, auto8D95DFAE_ai);
        auto8D95DFAE_ai = auto8D95DFAE_ai+1;
        if ((AIDefaultGetFirstUnfinishedReq(lv_aIPlayer, (lv_UnitTransport2)) == null)) {
            lib1_gf_ListStringInclude(lv_availabletech, lv_UnitTransport2);
        }

    }
    autoEA7E7665_ai = 1;
    autoEA7E7665_ae = lib1_gf_ListSize(lv_aiunitsupport);
    while (autoEA7E7665_ai <= autoEA7E7665_ae) {
        lv_UnitTransport2 = lib1_gf_ListStringGet(lv_aiunitsupport, autoEA7E7665_ai);
        autoEA7E7665_ai = autoEA7E7665_ai+1;
        if ((AIDefaultGetFirstUnfinishedReq(lv_aIPlayer, (lv_UnitTransport2)) == null)) {
            lib1_gf_ListStringInclude(lv_availablesupport, lv_UnitTransport2);
        }

    }
    auto6D064B60_ai = 1;
    auto6D064B60_ae = lib1_gf_ListSize(lv_aiupgrades);
    while (auto6D064B60_ai <= auto6D064B60_ae) {
        lv_UnitTransport2 = lib1_gf_ListStringGet(lv_aiupgrades, auto6D064B60_ai);
        auto6D064B60_ai = auto6D064B60_ai+1;
        if ((AIDefaultGetFirstUnfinishedReq(lv_aIPlayer, (lv_UnitTransport2)) == null)) {
            lib1_gf_ListStringInclude(lv_availableupgrades, lv_UnitTransport2);
        }

    }
}

void lib1_gf_Attack (int lp_player) {
    // Variable Declarations
    int lv_AIPlayer;
    string lv_aiunitcombat;
    fixed lv_nextwavetime;
    bool lv_wavemerge;

    // Automatic Variable Declarations
    int auto6A05D4CC_ae;
    int auto6A05D4CC_var;
    unitgroup auto0F852397_g;
    int auto0F852397_u;
    unit auto0F852397_var;

    // Variable Initialization
    lv_AIPlayer = lp_player;
    lv_aiunitcombat = ("^AI" + IntToString(lv_AIPlayer) + "UnitCombat");
    lv_nextwavetime = 160.0;

    // Implementation
    if ((AIWaveUnitCount(lib1_gv_aIWaves[lv_AIPlayer]) > 0)) {
        AIAttackWaveSetTargetMerge(lv_AIPlayer, lib1_gv_aIWaves[lv_AIPlayer]);
        lv_wavemerge = true;
    }
    else {
        AIAttackWaveSetTargetMelee(lv_AIPlayer);
        lv_wavemerge = false;
    }
    auto6A05D4CC_ae = lib1_gf_ListSize(lv_aiunitcombat);
    auto6A05D4CC_var = 1;
    for ( ; auto6A05D4CC_var <= auto6A05D4CC_ae; auto6A05D4CC_var += 1 ) {
        lib1_gf_AddAttackWaveUnitType(20, (lib1_gf_ListStringGet(lv_aiunitcombat, auto6A05D4CC_var)));
        auto0F852397_g = UnitGroup((lib1_gf_ListStringGet(lv_aiunitcombat, auto6A05D4CC_var)), lv_AIPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 20);
        auto0F852397_u = UnitGroupCount(auto0F852397_g, c_unitCountAll);
        for (;; auto0F852397_u -= 1) {
            auto0F852397_var = UnitGroupUnitFromEnd(auto0F852397_g, auto0F852397_u);
            if (auto0F852397_var == null) { break; }
            if ((AIUnitGetWave(auto0F852397_var) == null)) {
                AIAttackWaveUseUnit(lv_AIPlayer, auto0F852397_var);
            }

        }
    }
    AIAttackWaveSend(lv_AIPlayer, 20, false);
    if ((lv_wavemerge == false)) {
        lib1_gv_aIWaves[lv_AIPlayer] = WaveLastCreated();
    }

}

void lib1_gf_AddStockIfAvailable (int lp_player, int lp_count, string lp_what) {
    // Variable Declarations
    int lv_want;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_want = lp_count;

    // Implementation
    if ((AIDefaultGetFirstUnfinishedReq(lp_player, lp_what) != null)) {
        return ;
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_1_109AFCB3", "B", IntToText(lp_count));
        TextExpressionSetToken("Param/Expression/lib_1_109AFCB3", "A", StringToText((lp_what)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_109AFCB3"), true);
        if ((UnitTypeTestAttribute(lp_what, c_unitAttributeStructure) == true)) {
            lib1_gf_BuildIfNotInQueue(lp_player, lp_what, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, lv_want, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, -1, lib1_gv_power, 2);
        }
        else {
            lib1_gf_TrainUnitIfNotInQueue(lp_player, lp_what, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, lv_want, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, -1, 2);
        }
    }
}

void lib1_gf_AddEmergencyStockIfAvailable (int lp_player, int lp_count, string lp_what, bool lp_onlyIfTechInPlace) {
    // Variable Declarations
    int lv_want;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_onlyIfTechInPlace == true) && (AIDefaultGetFirstUnfinishedReq(lp_player, lp_what) != null)) {
        return ;
    }
    else {
        lv_want = MaxI((AITechCount(lp_player, lp_what, c_techCountInProgressOrBetter) + 1), lp_count);
        TextExpressionSetToken("Param/Expression/lib_1_FD4022B9", "B", IntToText(lp_count));
        TextExpressionSetToken("Param/Expression/lib_1_FD4022B9", "A", StringToText((lp_what)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_FD4022B9"), true);
        AISetStockEx(lp_player, lib1_gv_townMain, lv_want, lp_what, lib1_gv_default, 4);
    }
}

bool lib1_gf_AIIsExpandingOrHasExpanded (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    int state;
    int count = 0;
    int i = 0;
    int player = lp_player;
    while (i < c_townMax) {
        state = AIGetTownState(player, i);
        i = i + 1;
        if (state == c_townStateClaimed || state == c_townStateBuilding) {
            return true; // already expanding
        }
        if (state != c_townStateEstablished) {
            continue;
        }
        if (count == 1) {
            return true; // found 2nd town
        }
        count = 1;
    }
    return false;
}

bool lib1_gf_AINeedsDefending (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    int state;
    int count = 0;
    int i = 0;
    int player = lp_player;
    while (i < c_townMax) {
        state = AIGetTownState(player, i);
        i = i + 1;
        if (state == c_townStateClaimed || state == c_townStateBuilding) {
            return true; // already expanding
        }
        if (state != c_townStateEstablished) {
            continue;
        }
        if (count == 1) {
            return true; // found 2nd town
        }
        count = 1;
    }
    return false;
}

void lib1_gf_StockWorkers (int lp_player, int lp_count, string lp_worker) {
    // Variable Declarations
    int lv_count;
    int lv_econMin;
    int lv_econMax;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_count = lp_count;
    lv_econMin = AIGetMinPeonCount(lp_player, 32);
    lv_econMax = AIGetMaxPeonCount(lp_player, 32);

    // Implementation
    if ((lv_econMin > lp_count)) {
        lv_count = lv_econMin;
    }

    if ((lv_econMax > lp_count)) {
        lv_count = lv_econMax;
    }

    AISetStockUnitNext(lp_player, lv_count, lp_worker, false);
}

bool lib1_gf_MacroExpand (int lp_player) {
    // Variable Declarations
    int lv_AIPlayer;
    string lv_aiunitworker;
    string lv_aistructuremain;
    string lv_UnitTownhall;
    string lv_UnitPeon;
    int lv_dangerLevel;
    int lv_townHallMineralCost;
    int lv_townHallVespeneCost;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_AIPlayer = lp_player;
    lv_aiunitworker = ("^AI" + IntToString(lv_AIPlayer) + "UnitWorker");
    lv_aistructuremain = ("^AI" + IntToString(lv_AIPlayer) + "StructureMain");
    lv_UnitTownhall = (lib1_gf_ListStringGet(lv_aistructuremain, 1));
    lv_UnitPeon = (lib1_gf_ListStringGet(lv_aiunitworker, 1));
    lv_dangerLevel = AISelfDefenseThreatEval(lib1_gv_realSelfThreat, lp_player);
    lv_townHallMineralCost = CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_UnitTownhall, "CostResource[" + IntToString(c_resourceTypeMinerals) + "]", lp_player);
    lv_townHallVespeneCost = CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_UnitTownhall, "CostResource[" + IntToString(c_resourceTypeVespene) + "]", lp_player);

    // Implementation
    if (((lv_dangerLevel >= 120) || (AIHasNearbyOpenExpansion(lp_player) == false) || (AITechCount(lp_player, lv_UnitPeon, c_techCountQueuedOrBetter) < 14) || (AITechCount(lp_player, lv_UnitTownhall, c_techCountQueuedOrBetter) >= 2))) {
        return false;
    }
    if ((lib1_gf_AIIsExpandingOrHasExpanded(lv_AIPlayer) == false)) {
        if ((AIHasRes(lv_AIPlayer, (lv_townHallMineralCost / 2), (lv_townHallVespeneCost / 2)) == false)) {
            AIEnableStock(lv_AIPlayer);
            return true;
        }
        else {
            AIExpand(lv_AIPlayer, AIGetTownLocation(lv_AIPlayer, AIGetMainTown(lv_AIPlayer)), lv_UnitTownhall);
        }
    }

    if ((AIHasRes(lv_AIPlayer, lv_townHallMineralCost, lv_townHallVespeneCost) == false)) {
        AIEnableStock(lv_AIPlayer);
        return true;
    }
    else {
        AIExpand(lv_AIPlayer, AIGetTownLocation(lv_AIPlayer, AIGetMainTown(lv_AIPlayer)), lv_UnitTownhall);
    }
    return false;
}

void lib1_gf_BasicDefensesStock (int lp_player) {
    // Variable Declarations
    int lv_AIPlayer;
    string lv_aiunitfood;
    string lv_aiunitworker;
    string lv_aistructuredefenses;
    string lv_aistructuremain;
    string lv_aistructurerefinery;
    string lv_UnitSupply;
    string lv_UnitTownhall;
    string lv_UnitPeon;
    string lv_UnitRefinery;
    string lv_unitType;

    // Automatic Variable Declarations
    int auto72F6F591_ai;
    int auto72F6F591_ae;

    // Variable Initialization
    lv_AIPlayer = lp_player;
    lv_aiunitfood = ("^AI" + IntToString(lv_AIPlayer) + "StructureFood");
    lv_aiunitworker = ("^AI" + IntToString(lv_AIPlayer) + "UnitWorker");
    lv_aistructuredefenses = ("^AI" + IntToString(lv_AIPlayer) + "StructureDefense");
    lv_aistructuremain = ("^AI" + IntToString(lv_AIPlayer) + "StructureMain");
    lv_aistructurerefinery = ("^AI" + IntToString(lv_AIPlayer) + "StructureRefinery");
    lv_UnitSupply = (lib1_gf_ListStringGet(lv_aiunitfood, 1));
    lv_UnitTownhall = (lib1_gf_ListStringGet(lv_aistructuremain, 1));
    lv_UnitPeon = (lib1_gf_ListStringGet(lv_aiunitworker, 1));
    lv_UnitRefinery = (lib1_gf_ListStringGet(lv_aistructurerefinery, 1));
    lv_unitType = "";

    // Implementation
    if ((lib1_gf_AINeedsDefending(lv_AIPlayer) == false)) {
        return ;
    }

    AISetStockFarms(lv_AIPlayer, lv_UnitSupply, false);
    auto72F6F591_ai = 1;
    auto72F6F591_ae = lib1_gf_ListSize(lv_aistructuredefenses);
    while (auto72F6F591_ai <= auto72F6F591_ae) {
        lv_unitType = lib1_gf_ListStringGet(lv_aistructuredefenses, auto72F6F591_ai);
        auto72F6F591_ai = auto72F6F591_ai+1;
        lib1_gf_AddEmergencyStockIfAvailable(lv_AIPlayer, 2, (lv_unitType), true);
    }
    AISetStock(lv_AIPlayer, 1, lv_UnitTownhall);
    AISetStock(lv_AIPlayer, 20, lv_UnitPeon);
    AISetStock(lv_AIPlayer, 1, lv_UnitRefinery);
}

bool lib1_gf_UnitIsDropOff (int lp_player, string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "ResourceDropOff[" + IntToString(c_resourceTypeMinerals) + "]", lp_player) == 1)) {
        return true;
    }
    else {
        return false;
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: UT_InfoSave
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_InfoSave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_a = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "General commands");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-info");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides available commands");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pai");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "pauses/unpauses AI");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-cdr");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "refreshes cooldowns");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-fastbuild");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables/disables fast build");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-money");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "gives resources");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-vision");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "reveals whole map");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-god");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "invulnerability");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-speed X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "changes game speed to X = \"slower/slow/normal/fast/faster\"");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-ally");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "gives/removes control over allied units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-share");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "gives/removes control over allied units + spending");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pvp");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets player 01 and 02 as enemies (or disables that)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-caster");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "creates the caster of top bar abilities for player 2");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-mastery X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "changes masteries for player X; might not work 100% during the game");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-light");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "cycles through game lighting with \"+\" and \"-\" keys");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-bile");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables/disables smartcasting for Bile Launchers");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-randommut X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "starts X random mutators");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-supply X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Sets supply limit to X for player Y (optional)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-nuketest");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Launches many nukes as in Going Nuclear mutator");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-techreset X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "resets tech (upgrades/research) for player X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-mutsel");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lets you add more mutators");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-bioreport");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows info about biomass");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pause");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "pauses/unpauses all units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-resource X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets resouces to X minerals and Y vespene");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-unitinfo");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "show/hides additional information for all units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-voidrifts X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows where void rifts can spawn; if X=clear, clears; if X=time in minutes limits time spawning");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-replace X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "replaces unit type X seamlessly");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-sbank X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "saves units and upgrade into bank named X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-rbank X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "restores units and upgrade from the bank named X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-clearscreen X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "removes ALL units at the camera target location owned by player X (default=Any), 15 radius");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-soundlimit X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "limits sound emotes to one each X seconds");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Measuring and logging");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-dummy X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "spawns a dummy that calculates DPS; X= additional armored/light/structure attribute");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-log X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides log; shows other player if X=\"2\" ");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-log clear");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "clears log");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pie");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows pie charts for damage log");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-dps");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "starts and resets DPS counting for selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-dpsstop");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "stops DPS counting");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-gincome");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a graph of income rate");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-garmy");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a graph of army value");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-gapm");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a graph of APM");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-gkills");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a graph of kills");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-glost");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a graph of unit value lost");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pathcheck");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Checks pathing between selected unit and camera target");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-eco");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "starts economic testing");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-val");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows economic value");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Units");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-copypaste");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables/disables copypasting of units with Ctrl+C; Ctrl+V");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-spawn X Y Z");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "spawns units; X= unitID, Y= amount; Z= for player");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-getid");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "get unitID for units onscreen");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-aw X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "spawns attack wave; X= size, Y= tech");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-attack");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "orders spawned attack waves to attack");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-remw");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "removes spawned attack waves");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-aichoice");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "selects enemy unit comp");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-refill X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "refills enemy pre-placed units; X=\"all\" to include rocks");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-horde X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "multiplies the amount of pre-placed and attack wave units by X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-remhorde");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "removes units spawned by horde command");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-empower X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "increases health +X*100% and damage +Y*100% of all enemy units and structures");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-cost X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "calculates resouce and supply cost of units on screen; X= optional distance");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-kill X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "kills selected units; X= killing player");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-remove");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "removes selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-give X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "give selected units to player X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-switchowner X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "give selected units to player X; unit keeps upgrades");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-restore");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "refills health, shields and energy");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-teleport");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "teleports selected units to camera location");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-control X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lets you control all enemy units; alliance status is unaffected; if X=ally, control allies");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-clearenemy");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "removes all enemy units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "User interface");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-toprefresh");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "refreshes topbar; use if you encounter issues after resuming from replay");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-slim");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides custom user interface");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-look X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "makes all selected units look at X angle");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-topbar");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "hides/shows topbar notifications (right-click)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-numbers");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides damage and healing numbers");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-ui");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides UI");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-meme");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides meme faces");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-cam");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables/disables full camera control with Q,W,E,A,S,D keys");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-cam X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "X=\"reset\" resets camera position; X=\"top\" top view");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-tychui");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables reordering outlaws");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-terin");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides Terin's UI for basic commands");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-unlock");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "unlocks camera from victory/defeat screen");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-trigdebug");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows debugging window");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-trace");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "offline only | shows/hides visual debug tracing of effects");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "actorinfodisplay");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "offline only | shows/hides actor info");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-allysupply");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides player 2 supply UI");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-listdead");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lists all dead units (with position and owner)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-listhidden");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lists all hidden units (with position and owner)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-listmissile");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lists all missiles (with position and owner)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-listall");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lists all units and structures (with position and owner)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-encomps");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a list of enemy AI comps");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-emotes");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a list of emotes available for twitch integration with !message");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-buttons");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables/disables showing which buttons are you pressing");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-hotkey X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "changes the hotkey for button X to Y. This is saved between games.");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Unit modifications");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-ms X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets movement speed of selected units to X; -ms alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-acc X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets unit acceleration of selected unit types to X; -acc alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-range X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets weapon range for selected unit types to X; Y can specify weapon; -range alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-arange X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets ability range for selected unit types to X; Y can specify weapon; -arange alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-as X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "multiply attack speed for selected unit types by X; -as alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-mm X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "changes projectile speed for a group of units by X; just \"-mm\" adds units to group; \"-mm clear\" clears");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-life X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets max life to X for selected units; shields if Y=2; -life alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-energy X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets selected units max energy to X. If Y == 'regen', set energy regen to Y. -energy alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-armor X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "changes armor to X for selected unit types; shield armor if Y=2; -armor alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-tint X,Y,Z ");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets tint color to X,Y,Z in RGB for selected units; in decimal");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-scale X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets actor scale to X for selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-height X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets height offset to X for selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-timescale X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Changes timescale for selected units to X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-actorsend X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Sends actor message X to selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-cannon X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "SetsTesseract Cannon Projection damage to X%. E.g. -cannon 0.2 sets their damage to 20%");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-xp X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Adds X amount of experience for selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-rad X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Sets movement radius for unit types of all selected units to X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-airbeh/-groundbeh");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Selected units will be a valid target as air or ground exclusively");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Dead of Night");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pick X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "picks the first (X) and the second (Y) special infested -hunterling/spotter/kaboomer/choker");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-bosspick X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "picks the boss type (X) -stank/nydus");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Scythe of Amon");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "SetSliverAbility X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Sets a fixed order of abilities on Slivers. X =  first ability (deathgrip / shockwave / unstableenergy )");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Cradle of Death");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "cheats");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows cheat info");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "SetBranch X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets branch for main objective; X=one/two; Y=right/left");
    lv_a += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_InfoSave_Init () {
    lib1_gt_UT_InfoSave = TriggerCreate("lib1_gt_UT_InfoSave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Info
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Info_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(lib1_gt_UT_InfoCreate, true, true);
    TriggerEnable(lib1_gt_UT_InfoButton, true);
    if ((DialogIsVisible(lib1_gv_uT_InfoDialog, EventPlayer()) == false)) {
        DialogSetVisible(lib1_gv_uT_InfoDialog, PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        DialogSetVisible(lib1_gv_uT_InfoDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Info_Init () {
    lib1_gt_UT_Info = TriggerCreate("lib1_gt_UT_Info_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Info, c_playerAny, "-info", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_InfoButton
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_InfoButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_uT_InfoButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(lib1_gv_uT_InfoDialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_InfoButton_Init () {
    lib1_gt_UT_InfoButton = TriggerCreate("lib1_gt_UT_InfoButton_Func");
    TriggerEnable(lib1_gt_UT_InfoButton, false);
    TriggerAddEventDialogControl(lib1_gt_UT_InfoButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Info Create
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_InfoCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vListBox;
    int lv_a;
    string lv_vString;
    string lv_vDesc;

    // Automatic Variable Declarations
    const int auto9C82FD67_ae = 200;
    const int auto9C82FD67_ai = 1;

    // Variable Initialization
    lv_vListBox = c_invalidDialogControlId;
    lv_vDesc = "";

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(960, 600, c_anchorCenter, 0, -500, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 1050);
    DialogSetFullscreen(DialogLastCreated(), true);
    lib1_gv_uT_InfoDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 964, 546, c_anchorCenter, 0, 38, StringToText(""), "Assets\\Textures\\ui_ingame_resourcesharing_frame_message_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    TextExpressionSetToken("Param/Expression/lib_1_4BE89BCD", "B", GameMapName());
    TextExpressionSetToken("Param/Expression/lib_1_4BE89BCD", "A", IntToText(UnitGroupCount(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 910, 38, c_anchorCenter, -15, -205, TextExpressionAssemble("Param/Expression/lib_1_4BE89BCD"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 30, 30, c_anchorCenter, 460, -210, StringToText(""), StringToText(""), "");
    lib1_gv_uT_InfoButton = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 31, c_anchorCenter, 460, -210, StringToText(""), "Assets\\Textures\\sc2_ui_glues_icons_closebuttonhover.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 10.0);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 60);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 960, 500);
    lv_vListBox = DialogControlLastCreated();
    lv_a = 1;
    for ( ; ( (auto9C82FD67_ai >= 0 && lv_a <= auto9C82FD67_ae) || (auto9C82FD67_ai < 0 && lv_a >= auto9C82FD67_ae) ) ; lv_a += auto9C82FD67_ai ) {
        lv_vString = DataTableGetString(true, ("UT_command" + IntToString(lv_a)));
        if ((lv_vString != "")) {
            lv_vDesc = DataTableGetString(true, ("UT_desc" + IntToString(lv_a)));
            if ((lv_vDesc != "")) {
                TextExpressionSetToken("Param/Expression/lib_1_B69A406F", "A", StringToText(lv_vString));
                TextExpressionSetToken("Param/Expression/lib_1_B69A406F", "B", StringToText(lv_vDesc));
                DialogControlAddItem(lv_vListBox, PlayerGroupAll(), TextExpressionAssemble("Param/Expression/lib_1_B69A406F"));
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_1_AA38F474", "A", StringToText(lv_vString));
                DialogControlAddItem(lv_vListBox, PlayerGroupAll(), TextExpressionAssemble("Param/Expression/lib_1_AA38F474"));
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_InfoCreate_Init () {
    lib1_gt_UT_InfoCreate = TriggerCreate("lib1_gt_UT_InfoCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UI
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_UI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_vShowHide;
    playergroup lv_vPGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vShowHide = true;
    lv_vPGroup = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(lib1_gt_UT_UI_CtrlH) == false)) {
        TriggerEnable(lib1_gt_UT_UI_CtrlH, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_6E93EBC8"));
    }
    else {
        TriggerEnable(lib1_gt_UT_UI_CtrlH, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_F3AB9CE3"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_UI_Init () {
    lib1_gt_UT_UI = TriggerCreate("lib1_gt_UT_UI_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_UI, c_playerAny, "-ui", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UI_Ctrl+H
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_UI_CtrlH_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_vShowHide;
    playergroup lv_vPGroup;

    // Automatic Variable Declarations
    bool auto0A127D0A_val;

    // Variable Initialization
    lv_vShowHide = true;
    lv_vPGroup = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0A127D0A_val = PlayerGroupHasPlayer(lib1_gv_uT_UI_Hidden, EventPlayer());
    if (auto0A127D0A_val == false) {
        PlayerGroupAdd(lib1_gv_uT_UI_Hidden, EventPlayer());
        lv_vShowHide = false;
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer");
        DialogControlSetPosition(DialogControlLastCreated(), lv_vPGroup, c_anchorTopLeft, 0, -3000);
    }
    else if (auto0A127D0A_val == true) {
        PlayerGroupRemove(lib1_gv_uT_UI_Hidden, EventPlayer());
        Wait(1.0, c_timeReal);
        lv_vShowHide = true;
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer");
        DialogControlSetPosition(DialogControlLastCreated(), lv_vPGroup, c_anchorTopLeft, 0, 0);
    }
    else {
    }
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeConsolePanel, lv_vShowHide);
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeSupply, lv_vShowHide);
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeMenuBar, lv_vShowHide);
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeResourcePanel, lv_vShowHide);
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeObjectivePanel, lv_vShowHide);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_UI_CtrlH_Init () {
    lib1_gt_UT_UI_CtrlH = TriggerCreate("lib1_gt_UT_UI_CtrlH_Func");
    TriggerEnable(lib1_gt_UT_UI_CtrlH, false);
    TriggerAddEventKeyPressed(lib1_gt_UT_UI_CtrlH, c_playerAny, c_keyH, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ButtonMonitor
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_ButtonMonitor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(lib1_gv_uT_ButtonUsagePlayerGroup, EventPlayer()) == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_2DB85F54"));
        PlayerGroupRemove(lib1_gv_uT_ButtonUsagePlayerGroup, EventPlayer());
        if ((PlayerGroupCount(lib1_gv_uT_ButtonUsagePlayerGroup) == 0)) {
            TriggerEnable(lib1_gt_UT_ButtonUsage, false);
        }

    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_1140A22E"));
        PlayerGroupAdd(lib1_gv_uT_ButtonUsagePlayerGroup, EventPlayer());
        TriggerEnable(lib1_gt_UT_ButtonUsage, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_ButtonMonitor_Init () {
    lib1_gt_UT_ButtonMonitor = TriggerCreate("lib1_gt_UT_ButtonMonitor_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_ButtonMonitor, c_playerAny, "-buttons", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ButtonUsage
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_ButtonUsage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vButton;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vButton = EventButtonPressed();

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_1_10179BA7", "A", StringToText((lv_vButton)));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_10179BA7"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_ButtonUsage_Init () {
    lib1_gt_UT_ButtonUsage = TriggerCreate("lib1_gt_UT_ButtonUsage_Func");
    TriggerEnable(lib1_gt_UT_ButtonUsage, false);
    TriggerAddEventButtonPressed(lib1_gt_UT_ButtonUsage, c_playerAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_HotkeyChange
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_HotkeyChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vIdx;

    // Automatic Variable Declarations
    const int auto55541E56_ae = lib1_gv_uT_HotkeyStoreLength;
    const int auto55541E56_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((StringContains(StringWord(EventChatMessage(false), 3), "Ctrl+", c_stringAnywhere, c_stringNoCase) == true) || (StringContains(StringWord(EventChatMessage(false), 3), "Alt+", c_stringAnywhere, c_stringNoCase) == true) || (StringContains(StringWord(EventChatMessage(false), 3), "Shift+", c_stringAnywhere, c_stringNoCase) == true))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_D2E1915C"));
        return true;
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_1_0A4B6D51", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, (StringWord(EventChatMessage(false), 2)), "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_1_0A4B6D51", "B", StringToText(StringWord(EventChatMessage(false), 3)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_0A4B6D51"));
    }
    CatalogFieldValueSet(c_gameCatalogButton, (StringWord(EventChatMessage(false), 2)), "Hotkey", EventPlayer(), ("Letter/" + StringWord(EventChatMessage(false), 3)));
    lv_vIdx = 1;
    for ( ; ( (auto55541E56_ai >= 0 && lv_vIdx <= auto55541E56_ae) || (auto55541E56_ai < 0 && lv_vIdx >= auto55541E56_ae) ) ; lv_vIdx += auto55541E56_ai ) {
        if ((lib1_gv_uT_HotkeyToStoreButton[lv_vIdx][EventPlayer()] == "")) {
            lib1_gv_uT_HotkeyToStoreButton[lv_vIdx][EventPlayer()] = StringWord(EventChatMessage(false), 2);
            lib1_gv_uT_HotkeyToStoreValue[lv_vIdx][EventPlayer()] = StringWord(EventChatMessage(false), 3);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_HotkeyChange_Init () {
    lib1_gt_UT_HotkeyChange = TriggerCreate("lib1_gt_UT_HotkeyChange_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_HotkeyChange, c_playerAny, "-hotkey", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Godmode
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Godmode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto00CEFF87_g;
    int auto00CEFF87_u;
    unit auto00CEFF87_var;
    unitgroup autoC494CBB5_g;
    int autoC494CBB5_u;
    unit autoC494CBB5_var;
    unitgroup autoDAF2A0F4_g;
    int autoDAF2A0F4_u;
    unit autoDAF2A0F4_var;
    unitgroup autoCC33A234_g;
    int autoCC33A234_u;
    unit autoCC33A234_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gv_uT_GodMode == false)) {
        lib1_gv_uT_GodMode = true;
        TriggerEnable(lib1_gt_UT_Godmode_unit_created, true);
        autoDAF2A0F4_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDAF2A0F4_u = UnitGroupCount(autoDAF2A0F4_g, c_unitCountAll);
        for (;; autoDAF2A0F4_u -= 1) {
            autoDAF2A0F4_var = UnitGroupUnitFromEnd(autoDAF2A0F4_g, autoDAF2A0F4_u);
            if (autoDAF2A0F4_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(autoDAF2A0F4_var, true);
        }
        autoCC33A234_g = UnitGroup(null, 2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoCC33A234_u = UnitGroupCount(autoCC33A234_g, c_unitCountAll);
        for (;; autoCC33A234_u -= 1) {
            autoCC33A234_var = UnitGroupUnitFromEnd(autoCC33A234_g, autoCC33A234_u);
            if (autoCC33A234_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(autoCC33A234_var, true);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_CDEDD954"));
    }
    else {
        lib1_gv_uT_GodMode = false;
        TriggerEnable(lib1_gt_UT_Godmode_unit_created, false);
        auto00CEFF87_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto00CEFF87_u = UnitGroupCount(auto00CEFF87_g, c_unitCountAll);
        for (;; auto00CEFF87_u -= 1) {
            auto00CEFF87_var = UnitGroupUnitFromEnd(auto00CEFF87_g, auto00CEFF87_u);
            if (auto00CEFF87_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(auto00CEFF87_var, false);
        }
        autoC494CBB5_g = UnitGroup(null, 2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC494CBB5_u = UnitGroupCount(autoC494CBB5_g, c_unitCountAll);
        for (;; autoC494CBB5_u -= 1) {
            autoC494CBB5_var = UnitGroupUnitFromEnd(autoC494CBB5_g, autoC494CBB5_u);
            if (autoC494CBB5_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(autoC494CBB5_var, false);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_F637819F"));
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Godmode_Init () {
    lib1_gt_UT_Godmode = TriggerCreate("lib1_gt_UT_Godmode_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Godmode, c_playerAny, "-god", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Godmode_unit_created
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Godmode_unit_created_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_uT_GodMode == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitCreatedUnit()) == 1) || (UnitGetOwner(EventUnitCreatedUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(EventUnitCreatedUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Godmode_unit_created_Init () {
    lib1_gt_UT_Godmode_unit_created = TriggerCreate("lib1_gt_UT_Godmode_unit_created_Func");
    TriggerEnable(lib1_gt_UT_Godmode_unit_created, false);
    TriggerAddEventUnitCreated(lib1_gt_UT_Godmode_unit_created, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UnitInfo
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_UnitInfo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3D3561D8_g;
    int auto3D3561D8_u;
    unit auto3D3561D8_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(lib1_gt_UT_UnitInfoUpdate) == true)) {
        TriggerEnable(lib1_gt_UT_UnitInfoUpdate, false);
        auto3D3561D8_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto3D3561D8_u = UnitGroupCount(auto3D3561D8_g, c_unitCountAll);
        for (;; auto3D3561D8_u -= 1) {
            auto3D3561D8_var = UnitGroupUnitFromEnd(auto3D3561D8_g, auto3D3561D8_u);
            if (auto3D3561D8_var == null) { break; }
            lib1_gf_UT_RemoveUnitInfo(auto3D3561D8_var);
        }
    }
    else {
        TriggerEnable(lib1_gt_UT_UnitInfoUpdate, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_UnitInfo_Init () {
    lib1_gt_UT_UnitInfo = TriggerCreate("lib1_gt_UT_UnitInfo_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_UnitInfo, c_playerAny, "-unitinfo", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UnitInfoUpdate
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_UnitInfoUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFA75301A_g;
    int autoFA75301A_u;
    unit autoFA75301A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoFA75301A_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoFA75301A_u = UnitGroupCount(autoFA75301A_g, c_unitCountAll);
    for (;; autoFA75301A_u -= 1) {
        autoFA75301A_var = UnitGroupUnitFromEnd(autoFA75301A_g, autoFA75301A_u);
        if (autoFA75301A_var == null) { break; }
        lib1_gf_UT_UpdateUnitInfo(autoFA75301A_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_UnitInfoUpdate_Init () {
    lib1_gt_UT_UnitInfoUpdate = TriggerCreate("lib1_gt_UT_UnitInfoUpdate_Func");
    TriggerEnable(lib1_gt_UT_UnitInfoUpdate, false);
    TriggerAddEventTimePeriodic(lib1_gt_UT_UnitInfoUpdate, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastConstruction
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_FastConstruction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_uT_FastBuildCheat == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnitProgressUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_FastConstruction_Init () {
    lib1_gt_UT_FastConstruction = TriggerCreate("lib1_gt_UT_FastConstruction_Func");
    TriggerEnable(lib1_gt_UT_FastConstruction, false);
    TriggerAddEventUnitConstructProgress(lib1_gt_UT_FastConstruction, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastTrain
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_FastTrain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_uT_FastBuildCheat == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    UnitSetProgressComplete(EventUnit(), 2, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_FastTrain_Init () {
    lib1_gt_UT_FastTrain = TriggerCreate("lib1_gt_UT_FastTrain_Func");
    TriggerEnable(lib1_gt_UT_FastTrain, false);
    TriggerAddEventUnitTrainProgress(lib1_gt_UT_FastTrain, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastResearch
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_FastResearch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_uT_FastBuildCheat == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_FastResearch_Init () {
    lib1_gt_UT_FastResearch = TriggerCreate("lib1_gt_UT_FastResearch_Func");
    TriggerEnable(lib1_gt_UT_FastResearch, false);
    TriggerAddEventUnitResearchProgress(lib1_gt_UT_FastResearch, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastArrm
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_FastArrm_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_uT_FastBuildCheat == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_FastArrm_Init () {
    lib1_gt_UT_FastArrm = TriggerCreate("lib1_gt_UT_FastArrm_Func");
    TriggerEnable(lib1_gt_UT_FastArrm, false);
    TriggerAddEventUnitArmMagazineProgress(lib1_gt_UT_FastArrm, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastRevive
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_FastRevive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_uT_FastBuildCheat == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_FastRevive_Init () {
    lib1_gt_UT_FastRevive = TriggerCreate("lib1_gt_UT_FastRevive_Func");
    TriggerEnable(lib1_gt_UT_FastRevive, false);
    TriggerAddEventUnitReviveProgress(lib1_gt_UT_FastRevive, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastBuild
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_FastBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gv_uT_FastBuildCheat == false)) {
        lib1_gv_uT_FastBuildCheat = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_1B8B1D89"));
        TriggerEnable(lib1_gt_UT_FastArrm, true);
        TriggerEnable(lib1_gt_UT_FastConstruction, true);
        TriggerEnable(lib1_gt_UT_FastResearch, true);
        TriggerEnable(lib1_gt_UT_FastRevive, true);
        TriggerEnable(lib1_gt_UT_FastTrain, true);
    }
    else {
        lib1_gv_uT_FastBuildCheat = false;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_D787F213"));
        TriggerEnable(lib1_gt_UT_FastArrm, false);
        TriggerEnable(lib1_gt_UT_FastConstruction, false);
        TriggerEnable(lib1_gt_UT_FastResearch, false);
        TriggerEnable(lib1_gt_UT_FastRevive, false);
        TriggerEnable(lib1_gt_UT_FastTrain, false);
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_FastBuild_Init () {
    lib1_gt_UT_FastBuild = TriggerCreate("lib1_gt_UT_FastBuild_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_FastBuild, c_playerAny, "-fastbuild", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Toggle Eco
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_ToggleEco_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gv_uT_EconomyTest == false)) {
        lib1_gv_uT_EconomyTest = true;
        TriggerEnable(lib1_gt_UT_WorkerSaturation, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_B312A9FD"));
    }
    else {
        lib1_gv_uT_EconomyTest = false;
        TriggerEnable(lib1_gt_UT_WorkerSaturation, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_7C6A7E80"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_ToggleEco_Init () {
    lib1_gt_UT_ToggleEco = TriggerCreate("lib1_gt_UT_ToggleEco_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_ToggleEco, c_playerAny, "-eco", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Economy Value
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_EconomyValue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_mineral_count;
    fixed lv_gas_count;
    fixed lv_energy_count;

    // Automatic Variable Declarations
    unitgroup auto0049135D_g;
    int auto0049135D_u;
    unit auto0049135D_var;
    string autoDED2F279_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gv_uT_EconomyTest == true))) {
            return false;
        }

        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0049135D_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto0049135D_u = UnitGroupCount(auto0049135D_g, c_unitCountAll);
    for (;; auto0049135D_u -= 1) {
        auto0049135D_var = UnitGroupUnitFromEnd(auto0049135D_g, auto0049135D_u);
        if (auto0049135D_var == null) { break; }
        autoDED2F279_val = UnitGetType(auto0049135D_var);
        if (autoDED2F279_val == "Zergling") {
            lv_mineral_count = (lv_mineral_count+14.6667);
        }
        else if (autoDED2F279_val == "Baneling") {
            lv_mineral_count = (lv_mineral_count+36.6667);
            lv_gas_count = (lv_gas_count+14.0);
        }
        else if (autoDED2F279_val == "Drone") {
            lv_mineral_count = (lv_mineral_count+37.5);
        }
        else if (autoDED2F279_val == "GhostAcademyNova") {
        }
        else if (autoDED2F279_val == "OrbitalCommand") {
            lv_mineral_count = (lv_mineral_count+550);
            lv_energy_count = (lv_energy_count+UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent));
        }
        else {
            lv_mineral_count = (lv_mineral_count+IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(auto0049135D_var), "CostResource[" + IntToString(0) + "]", c_playerAny)));
            lv_gas_count = (lv_gas_count+IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(auto0049135D_var), "CostResource[" + IntToString(1) + "]", c_playerAny)));
        }
    }
    lv_mineral_count = (lv_mineral_count+lv_energy_count*4.43+PlayerGetPropertyFixed(1, c_playerPropMinerals));
    lv_gas_count = (lv_gas_count+PlayerGetPropertyFixed(1, c_playerPropVespene));
    TextExpressionSetToken("Param/Expression/lib_1_658B0A90", "A", IntToText(FixedToInt(lv_mineral_count)));
    TextExpressionSetToken("Param/Expression/lib_1_658B0A90", "B", IntToText(FixedToInt(lv_gas_count)));
    TextExpressionSetToken("Param/Expression/lib_1_658B0A90", "C", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(GameGetMissionTime())));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_658B0A90"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_EconomyValue_Init () {
    lib1_gt_UT_EconomyValue = TriggerCreate("lib1_gt_UT_EconomyValue_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_EconomyValue, c_playerAny, "-val", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Worker Saturation
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_WorkerSaturation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_worker_count;
    int lv_saturation_count;

    // Automatic Variable Declarations
    unitgroup auto35AB6A54_g;
    int auto35AB6A54_u;
    unit auto35AB6A54_var;
    unitgroup autoF75DDE6A_g;
    int autoF75DDE6A_u;
    unit autoF75DDE6A_var;

    // Variable Initialization
    lv_saturation_count = 48;

    // Conditions
    if (testConds) {
        if (!((lib1_gv_uT_EconomyTest == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitCreatedUnit()) == "SCV") || (UnitGetType(EventUnitCreatedUnit()) == "Probe") || (UnitGetType(EventUnitCreatedUnit()) == "Drone") || (UnitGetType(EventUnitCreatedUnit()) == "SISCV") || (UnitGetType(EventUnitCreatedUnit()) == "DehakaDrone") || (UnitGetType(EventUnitCreatedUnit()) == "HHSCV")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto35AB6A54_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto35AB6A54_u = UnitGroupCount(auto35AB6A54_g, c_unitCountAll);
    for (;; auto35AB6A54_u -= 1) {
        auto35AB6A54_var = UnitGroupUnitFromEnd(auto35AB6A54_g, auto35AB6A54_u);
        if (auto35AB6A54_var == null) { break; }
        if (((UnitGetType(auto35AB6A54_var) == "AutomatedRefinery") || (UnitGetType(auto35AB6A54_var) == "AutomatedAssimilator"))) {
            lv_saturation_count = 36;
        }

    }
    autoF75DDE6A_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoF75DDE6A_u = UnitGroupCount(autoF75DDE6A_g, c_unitCountAll);
    for (;; autoF75DDE6A_u -= 1) {
        autoF75DDE6A_var = UnitGroupUnitFromEnd(autoF75DDE6A_g, autoF75DDE6A_u);
        if (autoF75DDE6A_var == null) { break; }
        if (((UnitGetType(autoF75DDE6A_var) == "SCV") || (UnitGetType(autoF75DDE6A_var) == "Probe") || (UnitGetType(autoF75DDE6A_var) == "Drone") || (UnitGetType(autoF75DDE6A_var) == "SISCV") || (UnitGetType(autoF75DDE6A_var) == "DehakaDrone") || (UnitGetType(autoF75DDE6A_var) == "HHSCV"))) {
            lv_worker_count = (lv_worker_count+1);
            if ((lv_worker_count >= lv_saturation_count)) {
                TextExpressionSetToken("Param/Expression/lib_1_314EA02D", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(GameGetMissionTime())));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_314EA02D"));
                TriggerExecute(lib1_gt_UT_EconomyValue, true, false);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_AFA5A4FD"));
                SoundPlayForPlayer(SoundLink("Alert_UniObjectiveCompleted", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                TriggerEnable(TriggerGetCurrent(), false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_WorkerSaturation_Init () {
    lib1_gt_UT_WorkerSaturation = TriggerCreate("lib1_gt_UT_WorkerSaturation_Func");
    TriggerEnable(lib1_gt_UT_WorkerSaturation, false);
    TriggerAddEventUnitCreated(lib1_gt_UT_WorkerSaturation, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListEmotes
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_ListEmotes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vString;
    string lv_vStyle;

    // Automatic Variable Declarations
    const int auto07E764CE_ae = 30;
    int auto07E764CE_var;
    const int auto34DDD7CB_ae = lib1_gv_uT_MAXEMOTES;
    int auto34DDD7CB_var;
    const int auto91FE7471_ae = 30;
    int auto91FE7471_var;
    const int autoBD81D8BA_ae = lib1_gv_uT_MAXEMOTES;
    int autoBD81D8BA_var;

    // Variable Initialization
    lv_vString = "";
    lv_vStyle = "<s val=\"EmoteListNormal\">";

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    lib1_gv_uT_Emote_Dialog = DialogLastCreated();
    DialogSetRenderPriority(DialogLastCreated(), 5000);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 60, c_anchorTop, -350, 50, StringExternal("Param/Value/lib_1_BDB919F6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EmoteListTitle", PlayerGroupAll());
    auto07E764CE_var = 1;
    for ( ; auto07E764CE_var <= auto07E764CE_ae; auto07E764CE_var += 1 ) {
        if ((lib1_gv_uT_SC_Emoticons[auto07E764CE_var] != "")) {
            lv_vString = (lv_vString + lib1_gf_UT_ReplaceEmotes(("(" + lib1_gv_uT_SC_Emoticons[auto07E764CE_var] + ")")) + " " + lv_vStyle + "(" + lib1_gv_uT_SC_Emoticons[auto07E764CE_var] + ")</s> </n>");
        }

    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 1000, c_anchorTop, -250, 150, StringToText(lv_vString), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_vString = "</n>";
    auto34DDD7CB_var = 31;
    for ( ; auto34DDD7CB_var <= auto34DDD7CB_ae; auto34DDD7CB_var += 1 ) {
        if ((lib1_gv_uT_SC_Emoticons[auto34DDD7CB_var] != "")) {
            lv_vString = (lv_vString + lib1_gf_UT_ReplaceEmotes(("(" + lib1_gv_uT_SC_Emoticons[auto34DDD7CB_var] + ")")) + " " + lv_vStyle + "(" + lib1_gv_uT_SC_Emoticons[auto34DDD7CB_var] + ")</s> </n>");
        }

    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 1000, c_anchorTop, -500, 150, StringToText(lv_vString), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 60, c_anchorTop, 250, 50, StringExternal("Param/Value/lib_1_BD92D3D5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EmoteListTitle", PlayerGroupAll());
    lv_vString = "";
    auto91FE7471_var = 1;
    for ( ; auto91FE7471_var <= auto91FE7471_ae; auto91FE7471_var += 1 ) {
        if ((lib1_gv_uT_CS_Emoticons[auto91FE7471_var] != "")) {
            lv_vString = (lv_vString + lib1_gf_UT_ReplaceEmotes((" " + lib1_gv_uT_CS_Emoticons[auto91FE7471_var])) + "  " + lv_vStyle + lib1_gv_uT_CS_Emoticons[auto91FE7471_var] + "</s></n>");
        }

    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 1000, c_anchorTop, 300, 150, StringToText(lv_vString), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EmoteListBig", PlayerGroupAll());
    lv_vString = "";
    autoBD81D8BA_var = 31;
    for ( ; autoBD81D8BA_var <= autoBD81D8BA_ae; autoBD81D8BA_var += 1 ) {
        if ((lib1_gv_uT_CS_Emoticons[autoBD81D8BA_var] != "")) {
            lv_vString = (lv_vString + lib1_gf_UT_ReplaceEmotes((" " + lib1_gv_uT_CS_Emoticons[autoBD81D8BA_var])) + "  " + lv_vStyle + lib1_gv_uT_CS_Emoticons[autoBD81D8BA_var] + "</s> </n>");
        }

    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 1000, c_anchorTop, 600, 150, StringToText(lv_vString), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EmoteListBig", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottom, 0, 50, StringToText(""), StringExternal("Param/Value/lib_1_6E9286A1"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ButtonFont", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 230, 50);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    lib1_gv_uT_Emote_CloseButton = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(EventPlayer()), true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_ListEmotes_Init () {
    lib1_gt_UT_ListEmotes = TriggerCreate("lib1_gt_UT_ListEmotes_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_ListEmotes, c_playerAny, "-emotes", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Emote_ButtonClicked
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Emote_ButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_uT_Emote_CloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(lib1_gv_uT_Emote_Dialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Emote_ButtonClicked_Init () {
    lib1_gt_UT_Emote_ButtonClicked = TriggerCreate("lib1_gt_UT_Emote_ButtonClicked_Func");
    TriggerAddEventDialogControl(lib1_gt_UT_Emote_ButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Debug
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Debug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "effect")) {
        TriggerEnable(lib1_gt_EffectUsed, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "behavior")) {
        TriggerEnable(lib1_gt_BehaviorChanged, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "upgrade")) {
        TriggerEnable(lib1_gt_UpgradeChanged, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "ability")) {
        TriggerEnable(lib1_gt_AbilityUsed, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "unit")) {
        TriggerEnable(lib1_gt_UnitCreated, true);
        TriggerEnable(lib1_gt_UnitDied, true);
        TriggerEnable(lib1_gt_UnitRevived, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "stop")) {
        TriggerEnable(lib1_gt_UnitCreated, false);
        TriggerEnable(lib1_gt_UnitDied, false);
        TriggerEnable(lib1_gt_UnitRevived, false);
        TriggerEnable(lib1_gt_EffectUsed, false);
        TriggerEnable(lib1_gt_BehaviorChanged, false);
        TriggerEnable(lib1_gt_UpgradeChanged, false);
        TriggerEnable(lib1_gt_AbilityUsed, false);
    }
    else if (true) {
        TriggerEnable(lib1_gt_UnitCreated, true);
        TriggerEnable(lib1_gt_UnitDied, true);
        TriggerEnable(lib1_gt_UnitRevived, true);
        TriggerEnable(lib1_gt_EffectUsed, true);
        TriggerEnable(lib1_gt_BehaviorChanged, true);
        TriggerEnable(lib1_gt_UpgradeChanged, true);
        TriggerEnable(lib1_gt_AbilityUsed, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Debug_Init () {
    lib1_gt_UT_Debug = TriggerCreate("lib1_gt_UT_Debug_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Debug, c_playerAny, "-debug", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability Used
//--------------------------------------------------------------------------------------------------
bool lib1_gt_AbilityUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == 1))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("move", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("attack", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("stop", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("SCVHarvest", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("SCVHarvest", 1)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("DroneHarvest", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("DroneHarvest", 1)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("ProbeHarvest", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("ProbeHarvest", 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_1_CEDAA11B", "A", StringToText((AbilityCommandGetAbility(EventUnitAbility()))));
    TextExpressionSetToken("Param/Expression/lib_1_CEDAA11B", "B", StringToText(lib1_gf_UT_StageToString(EventUnitAbilityStage())));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_CEDAA11B"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_AbilityUsed_Init () {
    lib1_gt_AbilityUsed = TriggerCreate("lib1_gt_AbilityUsed_Func");
    TriggerEnable(lib1_gt_AbilityUsed, false);
    TriggerAddEventUnitAbility(lib1_gt_AbilityUsed, null, null, c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Created
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UnitCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_1_4CDBE4D3", "C", StringToText((UnitGetType(EventUnitCreatedUnit()))));
    TextExpressionSetToken("Param/Expression/lib_1_4CDBE4D3", "D", IntToText(UnitGetOwner(EventUnitCreatedUnit())));
    TextExpressionSetToken("Param/Expression/lib_1_4CDBE4D3", "A", FixedToText(PointGetX(UnitGetPosition(EventUnitCreatedUnit())), 1));
    TextExpressionSetToken("Param/Expression/lib_1_4CDBE4D3", "B", FixedToText(PointGetY(UnitGetPosition(EventUnitCreatedUnit())), 1));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_4CDBE4D3"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UnitCreated_Init () {
    lib1_gt_UnitCreated = TriggerCreate("lib1_gt_UnitCreated_Func");
    TriggerEnable(lib1_gt_UnitCreated, false);
    TriggerAddEventUnitCreated(lib1_gt_UnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Died
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UnitDied_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_1_E6467609", "C", StringToText((UnitGetType(EventUnit()))));
    TextExpressionSetToken("Param/Expression/lib_1_E6467609", "D", IntToText(UnitGetOwner(EventUnit())));
    TextExpressionSetToken("Param/Expression/lib_1_E6467609", "A", FixedToText(PointGetX(UnitGetPosition(EventUnit())), 1));
    TextExpressionSetToken("Param/Expression/lib_1_E6467609", "B", FixedToText(PointGetY(UnitGetPosition(EventUnit())), 1));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_E6467609"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UnitDied_Init () {
    lib1_gt_UnitDied = TriggerCreate("lib1_gt_UnitDied_Func");
    TriggerEnable(lib1_gt_UnitDied, false);
    TriggerAddEventUnitDied(lib1_gt_UnitDied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Revived
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UnitRevived_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_1_A959AEA5", "C", StringToText((UnitGetType(EventUnit()))));
    TextExpressionSetToken("Param/Expression/lib_1_A959AEA5", "D", IntToText(UnitGetOwner(EventUnit())));
    TextExpressionSetToken("Param/Expression/lib_1_A959AEA5", "A", FixedToText(PointGetX(UnitGetPosition(EventUnit())), 1));
    TextExpressionSetToken("Param/Expression/lib_1_A959AEA5", "B", FixedToText(PointGetY(UnitGetPosition(EventUnit())), 1));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_A959AEA5"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UnitRevived_Init () {
    lib1_gt_UnitRevived = TriggerCreate("lib1_gt_UnitRevived_Func");
    TriggerEnable(lib1_gt_UnitRevived, false);
    TriggerAddEventUnitRevive(lib1_gt_UnitRevived, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect Used
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsedAmountFixed(c_effectAmountDamaged, false) > 0.0)) {
        TextExpressionSetToken("Param/Expression/lib_1_1C3923AC", "A", StringToText((EventPlayerEffectUsed())));
        TextExpressionSetToken("Param/Expression/lib_1_1C3923AC", "B", FixedToText(EventPlayerEffectUsedAmountFixed(c_effectAmountDamaged, false), 1));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_1C3923AC"), true);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_1_A3C9045E", "A", StringToText((EventPlayerEffectUsed())));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_A3C9045E"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectUsed_Init () {
    lib1_gt_EffectUsed = TriggerCreate("lib1_gt_EffectUsed_Func");
    TriggerEnable(lib1_gt_EffectUsed, false);
    TriggerAddEventPlayerEffectUsed(lib1_gt_EffectUsed, 1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behavior Changed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_BehaviorChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_vChange;

    // Automatic Variable Declarations
    int autoB1794BEB_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((EventUnitBehavior() != "CarryMineralFieldMinerals"))) {
            return false;
        }

        if (!((EventUnitBehavior() != "CarryHarvestableVespeneGeyserGas"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB1794BEB_val = EventUnitBehaviorChange();
    if (autoB1794BEB_val == c_unitBehaviorChangeRefresh) {
        lv_vChange = StringExternal("Param/Value/lib_1_265C1742");
    }
    else if (autoB1794BEB_val == c_unitBehaviorChangeIncrease) {
        lv_vChange = StringExternal("Param/Value/lib_1_FB7F3836");
    }
    else if (autoB1794BEB_val == c_unitBehaviorChangeDestroy) {
        lv_vChange = StringExternal("Param/Value/lib_1_249C0C42");
    }
    else if (autoB1794BEB_val == c_unitBehaviorChangeDecrease) {
        lv_vChange = StringExternal("Param/Value/lib_1_F4A07C27");
    }
    else if (autoB1794BEB_val == c_unitBehaviorChangeDeactivate) {
        lv_vChange = StringExternal("Param/Value/lib_1_E4FCEF44");
    }
    else if (autoB1794BEB_val == c_unitBehaviorChangeCreate) {
        lv_vChange = StringExternal("Param/Value/lib_1_1DFC24B2");
    }
    else if (autoB1794BEB_val == c_unitBehaviorChangeAny) {
        lv_vChange = StringExternal("Param/Value/lib_1_230BFDC4");
    }
    else if (autoB1794BEB_val == c_unitBehaviorChangeActivate) {
        lv_vChange = StringExternal("Param/Value/lib_1_42D0F838");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_1_5E4C8E97", "A", lv_vChange);
    TextExpressionSetToken("Param/Expression/lib_1_5E4C8E97", "B", StringToText((EventUnitBehavior())));
    TextExpressionSetToken("Param/Expression/lib_1_5E4C8E97", "C", StringToText((UnitGetType(EventUnit()))));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_5E4C8E97"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_BehaviorChanged_Init () {
    lib1_gt_BehaviorChanged = TriggerCreate("lib1_gt_BehaviorChanged_Func");
    TriggerEnable(lib1_gt_BehaviorChanged, false);
    TriggerAddEventUnitBehaviorChange(lib1_gt_BehaviorChanged, null, null, c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect Dealing Damage
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectDealingDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_1_3428B512", "A", StringToText((EventUnitDamageEffect())));
    TextExpressionSetToken("Param/Expression/lib_1_3428B512", "B", FixedToText(EventUnitDamageAttempted(), 1));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_3428B512"));
    TextExpressionSetToken("Param/Expression/lib_1_9488CD11", "A", libNtve_gf_ConvertBooleanToText(libNtve_gf_UnitIsHidden(EventUnit())));
    TextExpressionSetToken("Param/Expression/lib_1_9488CD11", "B", libNtve_gf_ConvertBooleanToText(libNtve_gf_UnitIsInvulnerable(EventUnit())));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_9488CD11"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectDealingDamage_Init () {
    lib1_gt_EffectDealingDamage = TriggerCreate("lib1_gt_EffectDealingDamage_Func");
    TriggerEnable(lib1_gt_EffectDealingDamage, false);
    TriggerAddEventUnitDamaged(lib1_gt_EffectDealingDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Trace
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Trace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(lib1_gt_UT_Tracing) == true)) {
        TriggerEnable(lib1_gt_UT_Tracing, false);
        TriggerEnable(lib1_gt_UT_DeTracing, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_94935452"));
    }
    else {
        TriggerEnable(lib1_gt_UT_Tracing, true);
        TriggerEnable(lib1_gt_UT_DeTracing, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_30B98A71"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Trace_Init () {
    lib1_gt_UT_Trace = TriggerCreate("lib1_gt_UT_Trace_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Trace, c_playerAny, "-trace", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Tracing
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Tracing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, EventPlayerEffectUsed(), "DebugTrace", EventPlayer(), "1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Tracing_Init () {
    lib1_gt_UT_Tracing = TriggerCreate("lib1_gt_UT_Tracing_Func");
    TriggerEnable(lib1_gt_UT_Tracing, false);
    TriggerAddEventPlayerEffectUsed(lib1_gt_UT_Tracing, c_playerAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DeTracing
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DeTracing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, EventPlayerEffectUsed(), "DebugTrace", EventPlayer(), "0");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DeTracing_Init () {
    lib1_gt_UT_DeTracing = TriggerCreate("lib1_gt_UT_DeTracing_Func");
    TriggerEnable(lib1_gt_UT_DeTracing, false);
    TriggerAddEventPlayerEffectUsed(lib1_gt_UT_DeTracing, c_playerAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CopyPaste
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_CopyPaste_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(lib1_gt_UT_CTRLC) == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_375938B5"));
        TriggerEnable(lib1_gt_UT_CTRLC, false);
        TriggerEnable(lib1_gt_UT_CTRLV, false);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_9AC3A6AE"));
        TriggerEnable(lib1_gt_UT_CTRLC, true);
        TriggerEnable(lib1_gt_UT_CTRLV, true);
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_CopyPaste_Init () {
    lib1_gt_UT_CopyPaste = TriggerCreate("lib1_gt_UT_CopyPaste_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_CopyPaste, c_playerAny, "-copypaste", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CTRL+C
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_CTRLC_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vSelectedUnits;
    point lv_vCenter;
    int lv_vA;
    int lv_vB;
    int lv_vC;

    // Automatic Variable Declarations
    unitgroup autoF23656D4_g;
    int autoF23656D4_u;
    unit autoF23656D4_var;
    int autoAF94BA6D_ae;
    const int autoAF94BA6D_ai = 1;
    int auto91DE3C4A_ae;
    const int auto91DE3C4A_ai = 1;
    int autoA29DC9B8_ae;
    const int autoA29DC9B8_ai = 1;

    // Variable Initialization
    lv_vSelectedUnits = UnitGroupSelected(EventPlayer());
    lv_vCenter = UnitGroupCenterOfGroup(UnitGroupSelected(1));

    // Actions
    if (!runActions) {
        return true;
    }

    autoF23656D4_g = lv_vSelectedUnits;
    autoF23656D4_u = UnitGroupCount(autoF23656D4_g, c_unitCountAll);
    for (;; autoF23656D4_u -= 1) {
        autoF23656D4_var = UnitGroupUnitFromEnd(autoF23656D4_g, autoF23656D4_u);
        if (autoF23656D4_var == null) { break; }
        lv_vA += 1;
        DataTableSetString(true, ("CopyPaste_UnitType_" + IntToString(lv_vA)), (UnitGetType(autoF23656D4_var)));
        DataTableSetInt(true, ("CopyPaste_Owner_" + IntToString(lv_vA)), UnitGetOwner(autoF23656D4_var));
        DataTableSetFixed(true, ("CopyPaste_Facing_" + IntToString(lv_vA)), UnitGetFacing(autoF23656D4_var));
        DataTableSetFixed(true, ("CopyPaste_PositionAngle_" + IntToString(lv_vA)), AngleBetweenPoints(lv_vCenter, UnitGetPosition(autoF23656D4_var)));
        DataTableSetFixed(true, ("CopyPaste_PositionDistance_" + IntToString(lv_vA)), DistanceBetweenPoints(UnitGetPosition(autoF23656D4_var), lv_vCenter));
        DataTableSetFixed(true, ("CopyPaste_Life_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoF23656D4_var, c_unitPropLife, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_MaxLife_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoF23656D4_var, c_unitPropLifeMax, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_Energy_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoF23656D4_var, c_unitPropEnergy, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_MaxEnergy_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoF23656D4_var, c_unitPropEnergyMax, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_Shields_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoF23656D4_var, c_unitPropShields, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_MaxShields_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoF23656D4_var, c_unitPropShieldsMax, c_unitPropCurrent));
        DataTableSetInt(true, ("CopyPaste_BehCount_" + IntToString(lv_vA)), UnitBehaviorCountAll(autoF23656D4_var));
        autoAF94BA6D_ae = UnitBehaviorCountAll(autoF23656D4_var);
        lv_vB = 0;
        for ( ; ( (autoAF94BA6D_ai >= 0 && lv_vB <= autoAF94BA6D_ae) || (autoAF94BA6D_ai < 0 && lv_vB >= autoAF94BA6D_ae) ) ; lv_vB += autoAF94BA6D_ai ) {
            DataTableSetString(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)), (UnitBehaviorGet(autoF23656D4_var, lv_vB)));
            DataTableSetInt(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_s"), UnitBehaviorCount(autoF23656D4_var, UnitBehaviorGet(autoF23656D4_var, lv_vB)));
        }
        DataTableSetInt(true, ("CopyPaste_CargoCount_" + IntToString(lv_vA)), UnitCargoValue(autoF23656D4_var, c_unitCargoUnitCount));
        auto91DE3C4A_ae = UnitCargoValue(autoF23656D4_var, c_unitCargoUnitCount);
        lv_vB = 0;
        for ( ; ( (auto91DE3C4A_ai >= 0 && lv_vB <= auto91DE3C4A_ae) || (auto91DE3C4A_ai < 0 && lv_vB >= auto91DE3C4A_ae) ) ; lv_vB += auto91DE3C4A_ai ) {
            DataTableSetString(true, ("CopyPaste_CargoUnit_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)), (UnitGetType(UnitCargo(autoF23656D4_var, lv_vB))));
            DataTableSetInt(true, ("CopyPaste_BehCount_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)), UnitBehaviorCountAll(UnitCargo(autoF23656D4_var, lv_vB)));
            DataTableSetFixed(true, ("CopyPaste_Life_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)), UnitGetPropertyFixed(UnitCargo(autoF23656D4_var, lv_vB), c_unitPropLifePercent, c_unitPropCurrent));
            autoA29DC9B8_ae = UnitBehaviorCountAll(UnitCargo(autoF23656D4_var, lv_vB));
            lv_vC = 0;
            for ( ; ( (autoA29DC9B8_ai >= 0 && lv_vC <= autoA29DC9B8_ae) || (autoA29DC9B8_ai < 0 && lv_vC >= autoA29DC9B8_ae) ) ; lv_vC += autoA29DC9B8_ai ) {
                DataTableSetString(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_" + IntToString(lv_vC)), (UnitBehaviorGet(UnitCargo(autoF23656D4_var, lv_vB), lv_vC)));
                DataTableSetInt(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_" + IntToString(lv_vC) + "_s"), UnitBehaviorCount(UnitCargo(autoF23656D4_var, lv_vB), UnitBehaviorGet(UnitCargo(autoF23656D4_var, lv_vB), lv_vC)));
            }
        }
    }
    DataTableSetInt(true, ("CopyPaste_UnitCount"), lv_vA);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_CTRLC_Init () {
    lib1_gt_UT_CTRLC = TriggerCreate("lib1_gt_UT_CTRLC_Func");
    TriggerEnable(lib1_gt_UT_CTRLC, false);
    TriggerAddEventKeyPressed(lib1_gt_UT_CTRLC, c_playerAny, c_keyC, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CTRL+V
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_CTRLV_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_vCenter;
    int lv_vA;
    int lv_vB;
    int lv_vC;

    // Automatic Variable Declarations
    int autoE9072346_ae;
    int autoE9072346_var;
    int auto8234FD6C_ae;
    const int auto8234FD6C_ai = 1;
    int auto13B06CB1_ae;
    const int auto13B06CB1_ai = 1;
    int auto52F9CF25_ae;
    const int auto52F9CF25_ai = 1;

    // Variable Initialization
    lv_vCenter = CameraGetTarget(EventPlayer());

    // Actions
    if (!runActions) {
        return true;
    }

    autoE9072346_ae = DataTableGetInt(true, "CopyPaste_UnitCount");
    autoE9072346_var = 1;
    for ( ; autoE9072346_var <= autoE9072346_ae; autoE9072346_var += 1 ) {
        lv_vA += 1;
        UnitCreate(1, UnitTypeFromString(DataTableGetString(true, ("CopyPaste_UnitType_" + IntToString(lv_vA)))), 0, DataTableGetInt(true, ("CopyPaste_Owner_" + IntToString(lv_vA))), PointWithOffsetPolar(lv_vCenter, DataTableGetFixed(true, ("CopyPaste_PositionDistance_" + IntToString(lv_vA))), DataTableGetFixed(true, ("CopyPaste_PositionAngle_" + IntToString(lv_vA)))), DataTableGetFixed(true, ("CopyPaste_Facing_" + IntToString(lv_vA))));
        auto8234FD6C_ae = DataTableGetInt(true, ("CopyPaste_BehCount_" + IntToString(lv_vA)));
        lv_vB = 0;
        for ( ; ( (auto8234FD6C_ai >= 0 && lv_vB <= auto8234FD6C_ae) || (auto8234FD6C_ai < 0 && lv_vB >= auto8234FD6C_ae) ) ; lv_vB += auto8234FD6C_ai ) {
            UnitBehaviorAddPlayer(UnitLastCreated(), (DataTableGetString(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)))), UnitGetOwner(UnitLastCreated()), DataTableGetInt(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_s")));
        }
        auto13B06CB1_ae = DataTableGetInt(true, ("CopyPaste_CargoCount_" + IntToString(lv_vA)));
        lv_vB = 1;
        for ( ; ( (auto13B06CB1_ai >= 0 && lv_vB <= auto13B06CB1_ae) || (auto13B06CB1_ai < 0 && lv_vB >= auto13B06CB1_ae) ) ; lv_vB += auto13B06CB1_ai ) {
            UnitCargoCreate(UnitLastCreated(), UnitTypeFromString(DataTableGetString(true, ("CopyPaste_CargoUnit_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)))), 1);
            auto52F9CF25_ae = DataTableGetInt(true, ("CopyPaste_BehCount_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)));
            lv_vC = 0;
            for ( ; ( (auto52F9CF25_ai >= 0 && lv_vC <= auto52F9CF25_ae) || (auto52F9CF25_ai < 0 && lv_vC >= auto52F9CF25_ae) ) ; lv_vC += auto52F9CF25_ai ) {
                UnitBehaviorAddPlayer(UnitCargoLastCreated(), (DataTableGetString(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_" + IntToString(lv_vC)))), UnitGetOwner(UnitCargoLastCreated()), DataTableGetInt(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_" + IntToString(lv_vC) + "_s")));
            }
            UnitSetPropertyFixed(UnitCargoLastCreated(), c_unitPropLifePercent, DataTableGetFixed(true, ("CopyPaste_Life_" + IntToString(lv_vA) + "_" + IntToString(lv_vB))));
        }
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, DataTableGetFixed(true, ("CopyPaste_Life_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, DataTableGetFixed(true, ("CopyPaste_MaxLife_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, DataTableGetFixed(true, ("CopyPaste_Shields_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, DataTableGetFixed(true, ("CopyPaste_MaxShields_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, DataTableGetFixed(true, ("CopyPaste_Energy_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, DataTableGetFixed(true, ("CopyPaste_MaxEnergy_" + IntToString(lv_vA))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_CTRLV_Init () {
    lib1_gt_UT_CTRLV = TriggerCreate("lib1_gt_UT_CTRLV_Func");
    TriggerEnable(lib1_gt_UT_CTRLV, false);
    TriggerAddEventKeyPressed(lib1_gt_UT_CTRLV, c_playerAny, c_keyV, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_PathCheck
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_PathCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(lib1_gt_UT_PathCheckTAB) == false)) {
        TriggerEnable(lib1_gt_UT_PathCheckTAB, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_22153BA9"));
    }
    else {
        TriggerEnable(lib1_gt_UT_PathCheckTAB, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_723063AF"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_PathCheck_Init () {
    lib1_gt_UT_PathCheck = TriggerCreate("lib1_gt_UT_PathCheck_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_PathCheck, c_playerAny, "-pathcheck", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_PathCheckTAB
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_PathCheckTAB_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vUnit;
    point lv_vPoint;
    bool lv_vPointsConnectedByPathing;
    int lv_vPathingCostBetweenPoints;
    bool lv_vUnitCanPathToPoint11000;
    bool lv_vPointIsPassable;
    fixed lv_vPathingCostBetweenPointsReal;
    fixed lv_vAIPathingCostUnit;
    int lv_vGround;
    text lv_vGroundType;

    // Automatic Variable Declarations
    int autoB4A0460F_val;

    // Variable Initialization
    lv_vUnit = UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive);
    lv_vPoint = CameraGetTarget(EventPlayer());
    lv_vPointsConnectedByPathing = PointPathingIsConnected(UnitGetPosition(lv_vUnit), lv_vPoint);
    lv_vPathingCostBetweenPoints = PointPathingCost(UnitGetPosition(lv_vUnit), lv_vPoint);
    lv_vUnitCanPathToPoint11000 = UnitPathableToPoint(lv_vUnit, lv_vPoint, 1.0, 1000.0);
    lv_vPointIsPassable = PointPathingPassable(lv_vPoint);
    lv_vPathingCostBetweenPointsReal = PointPathingCost(UnitGetPosition(lv_vUnit), lv_vPoint);
    lv_vAIPathingCostUnit = AIPathingCostUnit(lv_vUnit, lv_vPoint, c_includeAllBuildings);
    lv_vGround = PathingType(lv_vPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    autoB4A0460F_val = lv_vGround;
    if (autoB4A0460F_val == c_pathingGround) {
        lv_vGroundType = StringExternal("Param/Value/lib_1_E908106B");
    }
    else if (autoB4A0460F_val == c_pathingCliff) {
        lv_vGroundType = StringExternal("Param/Value/lib_1_551BF50D");
    }
    else if (autoB4A0460F_val == c_pathingBuilding) {
        lv_vGroundType = StringExternal("Param/Value/lib_1_1B7F2A7D");
    }
    else if (autoB4A0460F_val == c_pathingUnpathable) {
        lv_vGroundType = StringExternal("Param/Value/lib_1_20D3CDA0");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_1_42EC7EA0", "B", IntToText(lv_vPathingCostBetweenPoints));
    TextExpressionSetToken("Param/Expression/lib_1_42EC7EA0", "C", libNtve_gf_ConvertBooleanToText(lv_vUnitCanPathToPoint11000));
    TextExpressionSetToken("Param/Expression/lib_1_42EC7EA0", "G", FixedToText(lv_vAIPathingCostUnit, c_fixedPrecisionAny));
    TextExpressionSetToken("Param/Expression/lib_1_42EC7EA0", "A", libNtve_gf_ConvertBooleanToText(lv_vPointsConnectedByPathing));
    TextExpressionSetToken("Param/Expression/lib_1_42EC7EA0", "E", libNtve_gf_ConvertBooleanToText(lv_vPointIsPassable));
    TextExpressionSetToken("Param/Expression/lib_1_42EC7EA0", "D", lv_vGroundType);
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_42EC7EA0"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_PathCheckTAB_Init () {
    lib1_gt_UT_PathCheckTAB = TriggerCreate("lib1_gt_UT_PathCheckTAB_Func");
    TriggerEnable(lib1_gt_UT_PathCheckTAB, false);
    TriggerAddEventKeyPressed(lib1_gt_UT_PathCheckTAB, c_playerAny, c_keyTab, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Light
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Light_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(lib1_gt_UT_Plus) == false)) {
        TriggerEnable(lib1_gt_UT_Plus, true);
        TriggerEnable(lib1_gt_UT_Minus, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_D61C02DD"));
        GameSetSpeedLocked(true);
    }
    else {
        TriggerEnable(lib1_gt_UT_Plus, false);
        TriggerEnable(lib1_gt_UT_Minus, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_D684EE8D"));
        GameSetSpeedLocked(false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Light_Init () {
    lib1_gt_UT_Light = TriggerCreate("lib1_gt_UT_Light_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Light, c_playerAny, "-light", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Plus
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Plus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_uT_LighIndex += 1;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText((((CatalogEntryGet(c_gameCatalogLight, lib1_gv_uT_LighIndex))))));
    GameSetLighting(((CatalogEntryGet(c_gameCatalogLight, lib1_gv_uT_LighIndex))), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Plus_Init () {
    lib1_gt_UT_Plus = TriggerCreate("lib1_gt_UT_Plus_Func");
    TriggerEnable(lib1_gt_UT_Plus, false);
    TriggerAddEventKeyPressed(lib1_gt_UT_Plus, c_playerAny, c_keyNumPadPlus, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Minus
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Minus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_uT_LighIndex -= 1;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText((((CatalogEntryGet(c_gameCatalogLight, lib1_gv_uT_LighIndex))))));
    GameSetLighting(((CatalogEntryGet(c_gameCatalogLight, lib1_gv_uT_LighIndex))), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Minus_Init () {
    lib1_gt_UT_Minus = TriggerCreate("lib1_gt_UT_Minus_Func");
    TriggerEnable(lib1_gt_UT_Minus, false);
    TriggerAddEventKeyPressed(lib1_gt_UT_Minus, c_playerAny, c_keyNumPadMinus, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_MissileMovers
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_MissileMovers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_mIssilePlayer = EventPlayer();
    CatalogFieldValueSet(c_gameCatalogBehavior, "MissileCoef", "Modification.TimeScale", EventPlayer(), StringWord(EventChatMessage(false), 2));
    UnitGroupAddUnitGroup(lib1_gv_uT_MissileCreators, UnitGroupSelected(EventPlayer()));
    TriggerEnable(lib1_gt_UT_MissileCreated, true);
    if ((StringWord(EventChatMessage(false), 2) == "clear")) {
        UnitGroupClear(lib1_gv_uT_MissileCreators);
        TriggerEnable(lib1_gt_UT_MissileCreated, false);
    }

    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_MissileMovers_Init () {
    lib1_gt_UT_MissileMovers = TriggerCreate("lib1_gt_UT_MissileMovers_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_MissileMovers, c_playerAny, "-mm", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_MissileCreated
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_MissileCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib1_gv_uT_MissileCreators, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnitCreatedUnit()), c_unitFlagMissile) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "MissileCoef", lib1_gv_mIssilePlayer, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_MissileCreated_Init () {
    lib1_gt_UT_MissileCreated = TriggerCreate("lib1_gt_UT_MissileCreated_Func");
    TriggerEnable(lib1_gt_UT_MissileCreated, false);
    TriggerAddEventUnitCreated(lib1_gt_UT_MissileCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Height
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Height_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC8878D2B_g;
    int autoC8878D2B_u;
    unit autoC8878D2B_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC8878D2B_g = UnitGroupSelected(EventPlayer());
    autoC8878D2B_u = UnitGroupCount(autoC8878D2B_g, c_unitCountAll);
    for (;; autoC8878D2B_u -= 1) {
        autoC8878D2B_var = UnitGroupUnitFromEnd(autoC8878D2B_g, autoC8878D2B_u);
        if (autoC8878D2B_var == null) { break; }
        UnitSetPropertyFixed(autoC8878D2B_var, c_unitPropHeight, StringToFixed(StringWord(EventChatMessage(false), 2)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Height_Init () {
    lib1_gt_UT_Height = TriggerCreate("lib1_gt_UT_Height_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Height, c_playerAny, "-height", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AttackSpeed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_AttackSpeed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    unitgroup auto67BB8BAD_g;
    int auto67BB8BAD_u;
    unit auto67BB8BAD_var;
    int autoA7712FC4_ae;
    const int autoA7712FC4_ai = 1;
    unitgroup autoE5B2E4AC_g;
    int autoE5B2E4AC_u;
    unit autoE5B2E4AC_var;
    int auto6D77C2FC_ae;
    const int auto6D77C2FC_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        autoE5B2E4AC_g = UnitGroupSelected(EventPlayer());
        autoE5B2E4AC_u = UnitGroupCount(autoE5B2E4AC_g, c_unitCountAll);
        for (;; autoE5B2E4AC_u -= 1) {
            autoE5B2E4AC_var = UnitGroupUnitFromEnd(autoE5B2E4AC_g, autoE5B2E4AC_u);
            if (autoE5B2E4AC_var == null) { break; }
            auto6D77C2FC_ae = UnitWeaponCount(autoE5B2E4AC_var);
            lv_a = 1;
            for ( ; ( (auto6D77C2FC_ai >= 0 && lv_a <= auto6D77C2FC_ae) || (auto6D77C2FC_ai < 0 && lv_a >= auto6D77C2FC_ae) ) ; lv_a += auto6D77C2FC_ai ) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(autoE5B2E4AC_var, lv_a), "RateMultiplier", UnitGetOwner(autoE5B2E4AC_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
        }
    }
    else {
        auto67BB8BAD_g = UnitGroupSelected(EventPlayer());
        auto67BB8BAD_u = UnitGroupCount(auto67BB8BAD_g, c_unitCountAll);
        for (;; auto67BB8BAD_u -= 1) {
            auto67BB8BAD_var = UnitGroupUnitFromEnd(auto67BB8BAD_g, auto67BB8BAD_u);
            if (auto67BB8BAD_var == null) { break; }
            autoA7712FC4_ae = UnitWeaponCount(auto67BB8BAD_var);
            lv_a = 1;
            for ( ; ( (autoA7712FC4_ai >= 0 && lv_a <= autoA7712FC4_ae) || (autoA7712FC4_ai < 0 && lv_a >= autoA7712FC4_ae) ) ; lv_a += autoA7712FC4_ai ) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(auto67BB8BAD_var, lv_a), "RateMultiplier", UnitGetOwner(auto67BB8BAD_var), "1", c_upgradeOperationSet);
            }
        }
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_AttackSpeed_Init () {
    lib1_gt_UT_AttackSpeed = TriggerCreate("lib1_gt_UT_AttackSpeed_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_AttackSpeed, c_playerAny, "-as", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Life
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Life_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1ADF5DAA_g;
    int auto1ADF5DAA_u;
    unit auto1ADF5DAA_var;
    unitgroup auto5F5EAD82_g;
    int auto5F5EAD82_u;
    unit auto5F5EAD82_var;
    unitgroup autoB4FC5B49_g;
    int autoB4FC5B49_u;
    unit autoB4FC5B49_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        auto1ADF5DAA_g = UnitGroupSelected(EventPlayer());
        auto1ADF5DAA_u = UnitGroupCount(auto1ADF5DAA_g, c_unitCountAll);
        for (;; auto1ADF5DAA_u -= 1) {
            auto1ADF5DAA_var = UnitGroupUnitFromEnd(auto1ADF5DAA_g, auto1ADF5DAA_u);
            if (auto1ADF5DAA_var == null) { break; }
            UnitSetPropertyFixed(auto1ADF5DAA_var, c_unitPropLifeMax, UnitTypeGetProperty(UnitGetType(auto1ADF5DAA_var), c_unitPropLifeMax));
            UnitSetPropertyFixed(auto1ADF5DAA_var, c_unitPropShieldsMax, UnitTypeGetProperty(UnitGetType(auto1ADF5DAA_var), c_unitPropShieldsMax));
            UnitSetPropertyFixed(auto1ADF5DAA_var, c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(auto1ADF5DAA_var, c_unitPropShieldsPercent, 100.0);
        }
    }
    else {
        if ((StringWord(EventChatMessage(false), 3) == "2")) {
            auto5F5EAD82_g = UnitGroupSelected(EventPlayer());
            auto5F5EAD82_u = UnitGroupCount(auto5F5EAD82_g, c_unitCountAll);
            for (;; auto5F5EAD82_u -= 1) {
                auto5F5EAD82_var = UnitGroupUnitFromEnd(auto5F5EAD82_g, auto5F5EAD82_u);
                if (auto5F5EAD82_var == null) { break; }
                UnitSetPropertyFixed(auto5F5EAD82_var, c_unitPropShieldsMax, StringToFixed(StringWord(EventChatMessage(false), 2)));
                UnitSetPropertyFixed(auto5F5EAD82_var, c_unitPropShieldsPercent, 100.0);
            }
        }
        else {
            autoB4FC5B49_g = UnitGroupSelected(EventPlayer());
            autoB4FC5B49_u = UnitGroupCount(autoB4FC5B49_g, c_unitCountAll);
            for (;; autoB4FC5B49_u -= 1) {
                autoB4FC5B49_var = UnitGroupUnitFromEnd(autoB4FC5B49_g, autoB4FC5B49_u);
                if (autoB4FC5B49_var == null) { break; }
                UnitSetPropertyFixed(autoB4FC5B49_var, c_unitPropLifeMax, StringToFixed(StringWord(EventChatMessage(false), 2)));
                UnitSetPropertyFixed(autoB4FC5B49_var, c_unitPropLifePercent, 100.0);
            }
        }
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Life_Init () {
    lib1_gt_UT_Life = TriggerCreate("lib1_gt_UT_Life_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Life, c_playerAny, "-life", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Energy
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Energy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB737F806_g;
    int autoB737F806_u;
    unit autoB737F806_var;
    unitgroup auto508E9E09_g;
    int auto508E9E09_u;
    unit auto508E9E09_var;
    unitgroup auto9756B80D_g;
    int auto9756B80D_u;
    unit auto9756B80D_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        autoB737F806_g = UnitGroupSelected(EventPlayer());
        autoB737F806_u = UnitGroupCount(autoB737F806_g, c_unitCountAll);
        for (;; autoB737F806_u -= 1) {
            autoB737F806_var = UnitGroupUnitFromEnd(autoB737F806_g, autoB737F806_u);
            if (autoB737F806_var == null) { break; }
            UnitSetPropertyFixed(autoB737F806_var, c_unitPropEnergyMax, UnitTypeGetProperty(UnitGetType(autoB737F806_var), c_unitPropEnergyMax));
            UnitSetPropertyFixed(autoB737F806_var, c_unitPropLifeRegen, UnitTypeGetProperty(UnitGetType(autoB737F806_var), c_unitPropEnergyRegen));
            UnitSetPropertyFixed(autoB737F806_var, c_unitPropEnergyPercent, 100.0);
        }
    }
    else {
        if ((StringWord(EventChatMessage(false), 3) == "regen")) {
            auto508E9E09_g = UnitGroupSelected(EventPlayer());
            auto508E9E09_u = UnitGroupCount(auto508E9E09_g, c_unitCountAll);
            for (;; auto508E9E09_u -= 1) {
                auto508E9E09_var = UnitGroupUnitFromEnd(auto508E9E09_g, auto508E9E09_u);
                if (auto508E9E09_var == null) { break; }
                UnitSetPropertyFixed(auto508E9E09_var, c_unitPropEnergyRegen, StringToFixed(StringWord(EventChatMessage(false), 2)));
            }
        }
        else {
            auto9756B80D_g = UnitGroupSelected(EventPlayer());
            auto9756B80D_u = UnitGroupCount(auto9756B80D_g, c_unitCountAll);
            for (;; auto9756B80D_u -= 1) {
                auto9756B80D_var = UnitGroupUnitFromEnd(auto9756B80D_g, auto9756B80D_u);
                if (auto9756B80D_var == null) { break; }
                UnitSetPropertyFixed(auto9756B80D_var, c_unitPropEnergyMax, StringToFixed(StringWord(EventChatMessage(false), 2)));
                UnitSetPropertyFixed(auto9756B80D_var, c_unitPropEnergyPercent, 100.0);
            }
        }
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Energy_Init () {
    lib1_gt_UT_Energy = TriggerCreate("lib1_gt_UT_Energy_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Energy, c_playerAny, "-energy", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Movement Speed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_MovementSpeed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto54B45CD1_g;
    int auto54B45CD1_u;
    unit auto54B45CD1_var;
    unitgroup auto09D772AB_g;
    int auto09D772AB_u;
    unit auto09D772AB_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        auto54B45CD1_g = UnitGroupSelected(EventPlayer());
        auto54B45CD1_u = UnitGroupCount(auto54B45CD1_g, c_unitCountAll);
        for (;; auto54B45CD1_u -= 1) {
            auto54B45CD1_var = UnitGroupUnitFromEnd(auto54B45CD1_g, auto54B45CD1_u);
            if (auto54B45CD1_var == null) { break; }
            UnitSetPropertyFixed(auto54B45CD1_var, c_unitPropMovementSpeed, UnitTypeGetProperty(UnitGetType(auto54B45CD1_var), c_unitPropMovementSpeed));
        }
    }
    else {
        auto09D772AB_g = UnitGroupSelected(EventPlayer());
        auto09D772AB_u = UnitGroupCount(auto09D772AB_g, c_unitCountAll);
        for (;; auto09D772AB_u -= 1) {
            auto09D772AB_var = UnitGroupUnitFromEnd(auto09D772AB_g, auto09D772AB_u);
            if (auto09D772AB_var == null) { break; }
            UnitSetPropertyFixed(auto09D772AB_var, c_unitPropMovementSpeed, StringToFixed(StringWord(EventChatMessage(false), 2)));
        }
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_MovementSpeed_Init () {
    lib1_gt_UT_MovementSpeed = TriggerCreate("lib1_gt_UT_MovementSpeed_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_MovementSpeed, c_playerAny, "-ms", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Acceleration
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Acceleration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto86CFF64E_g;
    int auto86CFF64E_u;
    unit auto86CFF64E_var;
    unitgroup auto1451FCE8_g;
    int auto1451FCE8_u;
    unit auto1451FCE8_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        auto86CFF64E_g = UnitGroupSelected(EventPlayer());
        auto86CFF64E_u = UnitGroupCount(auto86CFF64E_g, c_unitCountAll);
        for (;; auto86CFF64E_u -= 1) {
            auto86CFF64E_var = UnitGroupUnitFromEnd(auto86CFF64E_g, auto86CFF64E_u);
            if (auto86CFF64E_var == null) { break; }
            CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(auto86CFF64E_var), "Acceleration", EventPlayer(), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(auto86CFF64E_var), "Acceleration", 7), c_upgradeOperationSet);
            TextTagAttachToUnit(TextTagLastCreated(), auto86CFF64E_var, 1.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 15.0);
            TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
        }
    }
    else {
        auto1451FCE8_g = UnitGroupSelected(EventPlayer());
        auto1451FCE8_u = UnitGroupCount(auto1451FCE8_g, c_unitCountAll);
        for (;; auto1451FCE8_u -= 1) {
            auto1451FCE8_var = UnitGroupUnitFromEnd(auto1451FCE8_g, auto1451FCE8_u);
            if (auto1451FCE8_var == null) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(auto1451FCE8_var), "Acceleration", EventPlayer(), StringWord(EventChatMessage(false), 2));
        }
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Acceleration_Init () {
    lib1_gt_UT_Acceleration = TriggerCreate("lib1_gt_UT_Acceleration_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Acceleration, c_playerAny, "-acc", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Range
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Range_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto8A09B5E0_g;
    int auto8A09B5E0_u;
    unit auto8A09B5E0_var;
    int auto40C709D2_ae;
    const int auto40C709D2_ai = 1;
    unitgroup auto78DD1CA6_g;
    int auto78DD1CA6_u;
    unit auto78DD1CA6_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        auto78DD1CA6_g = UnitGroupSelected(EventPlayer());
        auto78DD1CA6_u = UnitGroupCount(auto78DD1CA6_g, c_unitCountAll);
        for (;; auto78DD1CA6_u -= 1) {
            auto78DD1CA6_var = UnitGroupUnitFromEnd(auto78DD1CA6_g, auto78DD1CA6_u);
            if (auto78DD1CA6_var == null) { break; }
            if ((StringWord(EventChatMessage(false), 3) != null)) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(auto78DD1CA6_var, StringToInt(StringWord(EventChatMessage(false), 3))), "Range", UnitGetOwner(auto78DD1CA6_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
            else {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(auto78DD1CA6_var, 1), "Range", UnitGetOwner(auto78DD1CA6_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
        }
    }
    else {
        auto8A09B5E0_g = UnitGroupSelected(EventPlayer());
        auto8A09B5E0_u = UnitGroupCount(auto8A09B5E0_g, c_unitCountAll);
        for (;; auto8A09B5E0_u -= 1) {
            auto8A09B5E0_var = UnitGroupUnitFromEnd(auto8A09B5E0_g, auto8A09B5E0_u);
            if (auto8A09B5E0_var == null) { break; }
            auto40C709D2_ae = UnitWeaponCount(auto8A09B5E0_var);
            lv_i = 1;
            for ( ; ( (auto40C709D2_ai >= 0 && lv_i <= auto40C709D2_ae) || (auto40C709D2_ai < 0 && lv_i >= auto40C709D2_ae) ) ; lv_i += auto40C709D2_ai ) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(auto8A09B5E0_var, lv_i), "Range", UnitGetOwner(auto8A09B5E0_var), CatalogFieldValueGet(c_gameCatalogWeapon, UnitWeaponGet(auto8A09B5E0_var, lv_i), "Range", 7), c_upgradeOperationSet);
            }
        }
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Range_Init () {
    lib1_gt_UT_Range = TriggerCreate("lib1_gt_UT_Range_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Range, c_playerAny, "-range", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ARange
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_ARange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vAbility;
    string lv_vAbv;

    // Automatic Variable Declarations
    unitgroup auto8C07A232_g;
    int auto8C07A232_u;
    unit auto8C07A232_var;
    unit auto450E3F0A_unit;
    int auto450E3F0A_i;
    unitgroup auto87AF064F_g;
    int auto87AF064F_u;
    unit auto87AF064F_var;
    unit auto7BA77132_unit;
    int auto7BA77132_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        auto8C07A232_g = UnitGroupSelected(EventPlayer());
        auto8C07A232_u = UnitGroupCount(auto8C07A232_g, c_unitCountAll);
        for (;; auto8C07A232_u -= 1) {
            auto8C07A232_var = UnitGroupUnitFromEnd(auto8C07A232_g, auto8C07A232_u);
            if (auto8C07A232_var == null) { break; }
            auto450E3F0A_unit = auto8C07A232_var;
            auto450E3F0A_i = 1;
            for ( ; auto450E3F0A_i <= UnitAbilityCount(auto450E3F0A_unit) ; auto450E3F0A_i += 1 ) {
                lv_vAbility = UnitAbilityGet(auto450E3F0A_unit, auto450E3F0A_i);
                if ((AbilityClass(lv_vAbility) != c_classIdCAbilAttack) && (AbilityClass(lv_vAbility) != c_classIdCAbilMove) && (AbilityClass(lv_vAbility) != c_classIdCAbilStop) && (AbilityClass(lv_vAbility) != c_classIdCAbilMorph) && (AbilityClass(lv_vAbility) != c_classIdCAbilRally)) {
                    lv_vAbv = (lv_vAbility);
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_vAbv, "Range[" + IntToString(0) + "]", UnitGetOwner(auto8C07A232_var), StringWord(EventChatMessage(false), 2));
                    TextExpressionSetToken("Param/Expression/lib_1_A7A4F0E4", "A", StringToText((lv_vAbility)));
                    TextExpressionSetToken("Param/Expression/lib_1_A7A4F0E4", "C", StringToText(StringWord(EventChatMessage(false), 2)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_A7A4F0E4"), true);
                }

            }
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_C42CCE4F"));
        auto87AF064F_g = UnitGroupSelected(EventPlayer());
        auto87AF064F_u = UnitGroupCount(auto87AF064F_g, c_unitCountAll);
        for (;; auto87AF064F_u -= 1) {
            auto87AF064F_var = UnitGroupUnitFromEnd(auto87AF064F_g, auto87AF064F_u);
            if (auto87AF064F_var == null) { break; }
            auto7BA77132_unit = auto87AF064F_var;
            auto7BA77132_i = 1;
            for ( ; auto7BA77132_i <= UnitAbilityCount(auto7BA77132_unit) ; auto7BA77132_i += 1 ) {
                lv_vAbility = UnitAbilityGet(auto7BA77132_unit, auto7BA77132_i);
                if ((AbilityClass(lv_vAbility) != c_classIdCAbilAttack) && (AbilityClass(lv_vAbility) != c_classIdCAbilMove) && (AbilityClass(lv_vAbility) != c_classIdCAbilStop) && (AbilityClass(lv_vAbility) != c_classIdCAbilMorph) && (AbilityClass(lv_vAbility) != c_classIdCAbilRally)) {
                    lv_vAbv = (lv_vAbility);
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_vAbv, "Range[" + IntToString(0) + "]", UnitGetOwner(auto87AF064F_var), CatalogFieldValueGet(c_gameCatalogAbil, lv_vAbv, "Range[" + IntToString(0) + "]", 0));
                    TextExpressionSetToken("Param/Expression/lib_1_9C189A7F", "A", StringToText((lv_vAbility)));
                    TextExpressionSetToken("Param/Expression/lib_1_9C189A7F", "C", StringToText(StringWord(EventChatMessage(false), 2)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_9C189A7F"), false);
                }

            }
        }
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_ARange_Init () {
    lib1_gt_UT_ARange = TriggerCreate("lib1_gt_UT_ARange_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_ARange, c_playerAny, "-arange", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Armor
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Armor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoED5CEE88_g;
    int autoED5CEE88_u;
    unit autoED5CEE88_var;
    unitgroup auto0B2AFE97_g;
    int auto0B2AFE97_u;
    unit auto0B2AFE97_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        auto0B2AFE97_g = UnitGroupSelected(EventPlayer());
        auto0B2AFE97_u = UnitGroupCount(auto0B2AFE97_g, c_unitCountAll);
        for (;; auto0B2AFE97_u -= 1) {
            auto0B2AFE97_var = UnitGroupUnitFromEnd(auto0B2AFE97_g, auto0B2AFE97_u);
            if (auto0B2AFE97_var == null) { break; }
            if ((StringWord(EventChatMessage(false), 3) != null)) {
                CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(auto0B2AFE97_var), "ShieldArmor", UnitGetOwner(auto0B2AFE97_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
            else {
                CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(auto0B2AFE97_var), "LifeArmor", UnitGetOwner(auto0B2AFE97_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
        }
    }
    else {
        autoED5CEE88_g = UnitGroupSelected(EventPlayer());
        autoED5CEE88_u = UnitGroupCount(autoED5CEE88_g, c_unitCountAll);
        for (;; autoED5CEE88_u -= 1) {
            autoED5CEE88_var = UnitGroupUnitFromEnd(autoED5CEE88_g, autoED5CEE88_u);
            if (autoED5CEE88_var == null) { break; }
            CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(autoED5CEE88_var), "LifeArmor", UnitGetOwner(autoED5CEE88_var), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(autoED5CEE88_var), "LifeArmor", 7), c_upgradeOperationSet);
            CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(autoED5CEE88_var), "ShieldArmor", UnitGetOwner(autoED5CEE88_var), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(autoED5CEE88_var), "ShieldArmor", 7), c_upgradeOperationSet);
        }
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Armor_Init () {
    lib1_gt_UT_Armor = TriggerCreate("lib1_gt_UT_Armor_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Armor, c_playerAny, "-armor", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_TintColor
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_TintColor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAA9A3351_g;
    int autoAA9A3351_u;
    unit autoAA9A3351_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAA9A3351_g = UnitGroupSelected(EventPlayer());
    autoAA9A3351_u = UnitGroupCount(autoAA9A3351_g, c_unitCountAll);
    for (;; autoAA9A3351_u -= 1) {
        autoAA9A3351_var = UnitGroupUnitFromEnd(autoAA9A3351_g, autoAA9A3351_u);
        if (autoAA9A3351_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoAA9A3351_var, (("SetTintColor " + StringWord(EventChatMessage(false), 2))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_TintColor_Init () {
    lib1_gt_UT_TintColor = TriggerCreate("lib1_gt_UT_TintColor_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_TintColor, c_playerAny, "-tint", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Scale
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Scale_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8BE5D0E7_g;
    int auto8BE5D0E7_u;
    unit auto8BE5D0E7_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8BE5D0E7_g = UnitGroupSelected(EventPlayer());
    auto8BE5D0E7_u = UnitGroupCount(auto8BE5D0E7_g, c_unitCountAll);
    for (;; auto8BE5D0E7_u -= 1) {
        auto8BE5D0E7_var = UnitGroupUnitFromEnd(auto8BE5D0E7_g, auto8BE5D0E7_u);
        if (auto8BE5D0E7_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto8BE5D0E7_var, (("SetScale " + StringWord(EventChatMessage(false), 2))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Scale_Init () {
    lib1_gt_UT_Scale = TriggerCreate("lib1_gt_UT_Scale_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Scale, c_playerAny, "-scale", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_TimeScale
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_TimeScale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vAmount;

    // Automatic Variable Declarations
    unitgroup auto52496797_g;
    int auto52496797_u;
    unit auto52496797_var;

    // Variable Initialization
    lv_vAmount = StringToFixed(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_vAmount >= 0.01)) {
        CatalogFieldValueSet(c_gameCatalogBehavior, "TimeScaleIncreased", "Modification.TimeScale", EventPlayer(), StringWord(EventChatMessage(false), 2));
        TextExpressionSetToken("Param/Expression/lib_1_4C2150FB", "A", FixedToText(lv_vAmount, 2));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_4C2150FB"));
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_1_2ABDF189", "A", StringExternal("Param/Value/lib_1_CF7BAD5D"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_2ABDF189"));
    }
    auto52496797_g = UnitGroupSelected(EventPlayer());
    auto52496797_u = UnitGroupCount(auto52496797_g, c_unitCountAll);
    for (;; auto52496797_u -= 1) {
        auto52496797_var = UnitGroupUnitFromEnd(auto52496797_g, auto52496797_u);
        if (auto52496797_var == null) { break; }
        UnitBehaviorAddPlayer(auto52496797_var, "TimeScaleIncreased", EventPlayer(), 1);
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_TimeScale_Init () {
    lib1_gt_UT_TimeScale = TriggerCreate("lib1_gt_UT_TimeScale_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_TimeScale, c_playerAny, "-timescale", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ActorMsg
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_ActorMsg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto97F5D906_g;
    int auto97F5D906_u;
    unit auto97F5D906_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto97F5D906_g = UnitGroupSelected(EventPlayer());
    auto97F5D906_u = UnitGroupCount(auto97F5D906_g, c_unitCountAll);
    for (;; auto97F5D906_u -= 1) {
        auto97F5D906_var = UnitGroupUnitFromEnd(auto97F5D906_g, auto97F5D906_u);
        if (auto97F5D906_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto97F5D906_var, (StringSub(EventChatMessage(false), (StringLength(StringWord(EventChatMessage(false), 1))+1), StringLength(EventChatMessage(false)))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_ActorMsg_Init () {
    lib1_gt_UT_ActorMsg = TriggerCreate("lib1_gt_UT_ActorMsg_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_ActorMsg, c_playerAny, "-actorsend", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Air & Ground
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_AirGround_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto26C34289_g;
    int auto26C34289_u;
    unit auto26C34289_var;
    unitgroup auto6661CD26_g;
    int auto6661CD26_u;
    unit auto6661CD26_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventChatMessage(false) == "-airbeh")) {
        auto6661CD26_g = UnitGroupSelected(EventPlayer());
        auto6661CD26_u = UnitGroupCount(auto6661CD26_g, c_unitCountAll);
        for (;; auto6661CD26_u -= 1) {
            auto6661CD26_var = UnitGroupUnitFromEnd(auto6661CD26_g, auto6661CD26_u);
            if (auto6661CD26_var == null) { break; }
            if ((UnitBehaviorCount(auto6661CD26_var, "GroundBeh") > 0)) {
                UnitBehaviorRemovePlayer(auto6661CD26_var, "GroundBeh", EventPlayer(), 1);
            }

            UnitBehaviorAddPlayer(auto6661CD26_var, "AirBeh", EventPlayer(), 1);
        }
    }
    else {
        auto26C34289_g = UnitGroupSelected(EventPlayer());
        auto26C34289_u = UnitGroupCount(auto26C34289_g, c_unitCountAll);
        for (;; auto26C34289_u -= 1) {
            auto26C34289_var = UnitGroupUnitFromEnd(auto26C34289_g, auto26C34289_u);
            if (auto26C34289_var == null) { break; }
            if ((UnitBehaviorCount(auto26C34289_var, "AirBeh") > 0)) {
                UnitBehaviorRemovePlayer(auto26C34289_var, "AirBeh", EventPlayer(), 1);
            }

            UnitBehaviorAddPlayer(auto26C34289_var, "GroundBeh", EventPlayer(), 1);
        }
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_AirGround_Init () {
    lib1_gt_UT_AirGround = TriggerCreate("lib1_gt_UT_AirGround_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_AirGround, c_playerAny, "-airbeh", false);
    TriggerAddEventChatMessage(lib1_gt_UT_AirGround, c_playerAny, "-groundbeh", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_TurnOnOff
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Camera_TurnOnOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gv_uT_Camera_CameraActive == false)) {
        lib1_gv_uT_Camera_CameraActive = true;
        TriggerExecute(lib1_gt_UT_Camera_PeriodicUpdate, true, false);
        TriggerEnable(lib1_gt_UT_Camera_KeyDown, true);
        TriggerEnable(lib1_gt_UT_Camera_KeyUp, true);
        UnitClearSelection(EventPlayer());
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_E4394E84"));
    }
    else {
        lib1_gv_uT_Camera_CameraActive = false;
        TriggerEnable(lib1_gt_UT_Camera_KeyDown, false);
        TriggerEnable(lib1_gt_UT_Camera_KeyUp, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_11B9F724"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Camera_TurnOnOff_Init () {
    lib1_gt_UT_Camera_TurnOnOff = TriggerCreate("lib1_gt_UT_Camera_TurnOnOff_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Camera_TurnOnOff, c_playerAny, "-cam", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_Reset
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Camera_Reset_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraSetValue(EventPlayer(), c_cameraValueYaw, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueYaw), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValuePitch, CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueDistance, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueDepthOfField, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDepthOfField), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueRoll, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueRoll), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueFieldOfView, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueFieldOfView), 1.0, -1, 10.0);
    lib1_gv_uT_Camera_AngleofAttack[EventPlayer()] = CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch);
    lib1_gv_uT_Camera_Rotation[EventPlayer()] = CameraInfoGetValue(CameraInfoDefault(), c_cameraValueYaw);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_CBD9C3D9"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Camera_Reset_Init () {
    lib1_gt_UT_Camera_Reset = TriggerCreate("lib1_gt_UT_Camera_Reset_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Camera_Reset, c_playerAny, "-cam reset", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_Top
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Camera_Top_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraPan(EventPlayer(), RegionGetCenter(RegionPlayableMap()), 2.0, -1, 10.0, false);
    CameraSetValue(EventPlayer(), c_cameraValueFieldOfView, 45.0, 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueRoll, 0.0, 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueDepthOfField, 0.0, 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueDistance, (libNtve_gf_WidthOfRegion(RegionPlayableMap()) * 1.5), 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValuePitch, 90.0, 2.0, -1, 10.0);
    lib1_gv_uT_Camera_AngleofAttack[EventPlayer()] = 90.0;
    CameraSetValue(EventPlayer(), c_cameraValueYaw, 90.0, 2.0, -1, 10.0);
    lib1_gv_uT_Camera_Rotation[EventPlayer()] = 90.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Camera_Top_Init () {
    lib1_gt_UT_Camera_Top = TriggerCreate("lib1_gt_UT_Camera_Top_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Camera_Top, c_playerAny, "-cam top", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_Key Up
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Camera_KeyUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoA66D0BEE_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA66D0BEE_val = EventKeyPressed();
    if (autoA66D0BEE_val == c_keyQ) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_Q)][EventPlayer()] = false;
    }
    else if (autoA66D0BEE_val == c_keyE) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_E)][EventPlayer()] = false;
    }
    else if (autoA66D0BEE_val == c_keyW) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_W)][EventPlayer()] = false;
    }
    else if (autoA66D0BEE_val == c_keyS) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_S)][EventPlayer()] = false;
    }
    else if (autoA66D0BEE_val == c_keyA) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_A)][EventPlayer()] = false;
    }
    else if (autoA66D0BEE_val == c_keyD) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_D)][EventPlayer()] = false;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Camera_KeyUp_Init () {
    lib1_gt_UT_Camera_KeyUp = TriggerCreate("lib1_gt_UT_Camera_KeyUp_Func");
    TriggerEnable(lib1_gt_UT_Camera_KeyUp, false);
    TriggerAddEventKeyPressed(lib1_gt_UT_Camera_KeyUp, c_playerAny, c_keyNone, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_Key Down
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Camera_KeyDown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto0955E73F_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto0955E73F_val = EventKeyPressed();
    if (auto0955E73F_val == c_keyQ) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_Q)][EventPlayer()] = true;
    }
    else if (auto0955E73F_val == c_keyE) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_E)][EventPlayer()] = true;
    }
    else if (auto0955E73F_val == c_keyW) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_W)][EventPlayer()] = true;
    }
    else if (auto0955E73F_val == c_keyS) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_S)][EventPlayer()] = true;
    }
    else if (auto0955E73F_val == c_keyA) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_A)][EventPlayer()] = true;
    }
    else if (auto0955E73F_val == c_keyD) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_D)][EventPlayer()] = true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Camera_KeyDown_Init () {
    lib1_gt_UT_Camera_KeyDown = TriggerCreate("lib1_gt_UT_Camera_KeyDown_Func");
    TriggerEnable(lib1_gt_UT_Camera_KeyDown, false);
    TriggerAddEventKeyPressed(lib1_gt_UT_Camera_KeyDown, c_playerAny, c_keyNone, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_PeriodicUpdate
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Camera_PeriodicUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vDuration;
    fixed lv_vDistanceStep;
    fixed lv_vBaseDistanceStep;
    fixed lv_vAngleStep;
    fixed lv_vRotationStep;
    int lv_vPlayer;

    // Automatic Variable Declarations
    const int auto12C4C1FB_ae = 2;
    const int auto12C4C1FB_ai = 1;

    // Variable Initialization
    lv_vDuration = 0.5;
    lv_vDistanceStep = 6.0;
    lv_vBaseDistanceStep = 8.0;
    lv_vAngleStep = 0.5;
    lv_vRotationStep = 1.5;
    lv_vPlayer = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lib1_gv_uT_Camera_CameraActive == true)) {
        lv_vPlayer = 1;
        for ( ; ( (auto12C4C1FB_ai >= 0 && lv_vPlayer <= auto12C4C1FB_ae) || (auto12C4C1FB_ai < 0 && lv_vPlayer >= auto12C4C1FB_ae) ) ; lv_vPlayer += auto12C4C1FB_ai ) {
            if ((lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_Q)][lv_vPlayer] == true)) {
                if ((CameraGetDistance(lv_vPlayer) >= 60.0)) {
                    lv_vDistanceStep = (lv_vBaseDistanceStep * 2.0);
                }
                else {
                    lv_vDistanceStep = lv_vBaseDistanceStep;
                }
                if ((CameraGetDistance(lv_vPlayer) <= 20.0)) {
                    lv_vDistanceStep = (lv_vBaseDistanceStep * 0.33);
                }
                else {
                    lv_vDistanceStep = lv_vBaseDistanceStep;
                }
                CameraSetValue(lv_vPlayer, c_cameraValueDistance, (CameraGetDistance(lv_vPlayer) - lv_vDistanceStep), lv_vDuration, -1, 10.0);
            }

            if ((lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_E)][lv_vPlayer] == true)) {
                if ((CameraGetDistance(lv_vPlayer) >= 60.0)) {
                    lv_vDistanceStep = (lv_vBaseDistanceStep * 2.0);
                }
                else {
                    lv_vDistanceStep = lv_vBaseDistanceStep;
                }
                if ((CameraGetDistance(lv_vPlayer) <= 20.0)) {
                    lv_vDistanceStep = (lv_vBaseDistanceStep * 0.33);
                }
                else {
                    lv_vDistanceStep = lv_vBaseDistanceStep;
                }
                CameraSetValue(lv_vPlayer, c_cameraValueDistance, (CameraGetDistance(lv_vPlayer) + lv_vDistanceStep), lv_vDuration, -1, 10.0);
            }

            if ((lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_W)][lv_vPlayer] == true)) {
                lib1_gv_uT_Camera_AngleofAttack[lv_vPlayer] += lv_vAngleStep;
                if ((lib1_gv_uT_Camera_AngleofAttack[lv_vPlayer] > 90.0)) {
                    lib1_gv_uT_Camera_AngleofAttack[lv_vPlayer] = 90.0;
                }

                CameraSetValue(lv_vPlayer, c_cameraValuePitch, lib1_gv_uT_Camera_AngleofAttack[lv_vPlayer], lv_vDuration, -1, 10.0);
            }

            if ((lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_S)][lv_vPlayer] == true)) {
                lib1_gv_uT_Camera_AngleofAttack[lv_vPlayer] -= lv_vAngleStep;
                if ((lib1_gv_uT_Camera_AngleofAttack[lv_vPlayer] < -90.0)) {
                    lib1_gv_uT_Camera_AngleofAttack[lv_vPlayer] = -90.0;
                }

                CameraSetValue(lv_vPlayer, c_cameraValuePitch, lib1_gv_uT_Camera_AngleofAttack[lv_vPlayer], lv_vDuration, -1, 10.0);
            }

            if ((lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_A)][lv_vPlayer] == true)) {
                lib1_gv_uT_Camera_Rotation[lv_vPlayer] -= lv_vRotationStep;
                CameraSetValue(lv_vPlayer, c_cameraValueYaw, lib1_gv_uT_Camera_Rotation[lv_vPlayer], lv_vDuration, -1, 10.0);
            }

            if ((lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_D)][lv_vPlayer] == true)) {
                lib1_gv_uT_Camera_Rotation[lv_vPlayer] += lv_vRotationStep;
                CameraSetValue(lv_vPlayer, c_cameraValueYaw, lib1_gv_uT_Camera_Rotation[lv_vPlayer], lv_vDuration, -1, 10.0);
            }

        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Camera_PeriodicUpdate_Init () {
    lib1_gt_UT_Camera_PeriodicUpdate = TriggerCreate("lib1_gt_UT_Camera_PeriodicUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Dummy
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Dummy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    string autoBCEFA452_val;
    const int autoF4CB93C3_ae = 20;
    int autoF4CB93C3_var;

    // Variable Initialization
    lv_vPlayer = 3;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBCEFA452_val = StringWord(EventChatMessage(false), 2);
    if (autoBCEFA452_val == "armored") {
        UnitCreate(1, "DummyArmored", 0, lv_vPlayer, CameraGetTarget(EventPlayer()), 240.0);
    }
    else if (autoBCEFA452_val == "light") {
        UnitCreate(1, "DummyLight", 0, lv_vPlayer, CameraGetTarget(EventPlayer()), 240.0);
    }
    else if (autoBCEFA452_val == "structure") {
        UnitCreate(1, "DummyStructure", 0, lv_vPlayer, CameraGetTarget(EventPlayer()), 240.0);
    }
    else {
        UnitCreate(1, "Dummy", 0, lv_vPlayer, CameraGetTarget(EventPlayer()), 240.0);
    }
    TextTagCreate(StringExternal("Param/Value/lib_1_8BA4384F"), 18, UnitGetPosition(UnitLastCreated()), 1.0, true, false, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 1.0);
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\void_pure_black_backgroundcolor_diff.dds", true);
    TextTagShowBackground(TextTagLastCreated(), true);
    libHots_gf_StoreTextTagForUnit(UnitLastCreated(), 1, TextTagLastCreated());
    autoF4CB93C3_var = 1;
    for ( ; autoF4CB93C3_var <= autoF4CB93C3_ae; autoF4CB93C3_var += 1 ) {
        if ((UnitIsAlive(lib1_gv_uT_DummyUnits[autoF4CB93C3_var]) == false)) {
            lib1_gv_uT_DummyUnits[autoF4CB93C3_var] = UnitLastCreated();
            UnitSetCustomValue(UnitLastCreated(), lib1_gv_uT_DummyCustomValue, autoF4CB93C3_var);
            break;
        }

    }
    UnitGroupAdd(lib1_gv_uT_Dummies, UnitLastCreated());
    TriggerEnable(lib1_gt_UT_DummyTakesDamage, true);
    TriggerEnable(lib1_gt_UT_DummyUpdate, true);
    TriggerEnable(lib1_gt_UT_DummyDestroyed, true);
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Dummy_Init () {
    lib1_gt_UT_Dummy = TriggerCreate("lib1_gt_UT_Dummy_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Dummy, c_playerAny, "-dummy", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DummyTakesDamage
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DummyTakesDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vIndex = FixedToInt(UnitGetCustomValue(EventUnit(), lib1_gv_uT_DummyCustomValue));

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib1_gv_uT_Dummies, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_uT_DummyDamage[lv_vIndex][0] += EventUnitDamageAmount();
    lib1_gv_uT_DummyDamage[lv_vIndex][1] += EventUnitDamageAmount();
    if ((TimerGetElapsed(lib1_gv_uT_DummyTimer[lv_vIndex][0]) <= 0.0)) {
        TimerStart(lib1_gv_uT_DummyTimer[lv_vIndex][0], 5.0, false, c_timeGame);
        if ((TimerGetElapsed(lib1_gv_uT_DummyTimer[lv_vIndex][1]) <= 0.0)) {
            TimerStart(lib1_gv_uT_DummyTimer[lv_vIndex][1], 524287.0, false, c_timeGame);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DummyTakesDamage_Init () {
    lib1_gt_UT_DummyTakesDamage = TriggerCreate("lib1_gt_UT_DummyTakesDamage_Func");
    TriggerEnable(lib1_gt_UT_DummyTakesDamage, false);
    TriggerAddEventUnitDamaged(lib1_gt_UT_DummyTakesDamage, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DummyUpdate
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DummyUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto79C8EF73_ae = 20;
    const int auto79C8EF73_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto79C8EF73_ai >= 0 && lv_index <= auto79C8EF73_ae) || (auto79C8EF73_ai < 0 && lv_index >= auto79C8EF73_ae) ) ; lv_index += auto79C8EF73_ai ) {
        if ((EventTimer() == lib1_gv_uT_DummyTimer[lv_index][0])) {
            if ((lib1_gv_uT_DummyDamage[lv_index][0] <= 0.5)) {
                TextExpressionSetToken("Param/Expression/lib_1_7A59D871", "A", FixedToText((lib1_gv_uT_DummyDamage[lv_index][0] / 5.0), 0));
                TextExpressionSetToken("Param/Expression/lib_1_7A59D871", "B", FixedToText((TimerGetElapsed(lib1_gv_uT_DummyTimer[lv_index][1]) - 5.0), 0));
                TextExpressionSetToken("Param/Expression/lib_1_7A59D871", "C", FixedToText((lib1_gv_uT_DummyDamage[lv_index][1] / (TimerGetElapsed(lib1_gv_uT_DummyTimer[lv_index][1]) - 5.0)), 1));
                TextTagSetText(libHots_gf_TextTagForUnit(lib1_gv_uT_DummyUnits[lv_index], 1), TextExpressionAssemble("Param/Expression/lib_1_7A59D871"));
                lib1_gv_uT_DummyDamage[lv_index][0] = 0.0;
                lib1_gv_uT_DummyDamage[lv_index][1] = 0.0;
                TimerStart(lib1_gv_uT_DummyTimer[lv_index][1], 524287.0, false, c_timeGame);
                TimerPause(lib1_gv_uT_DummyTimer[lv_index][1], true);
                TimerStart(lib1_gv_uT_DummyTimer[lv_index][0], 5.0, false, c_timeGame);
                TimerPause(lib1_gv_uT_DummyTimer[lv_index][0], true);
                break;
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_1_03378DEF", "A", FixedToText((lib1_gv_uT_DummyDamage[lv_index][0] / 5.0), 0));
                TextExpressionSetToken("Param/Expression/lib_1_03378DEF", "B", FixedToText(TimerGetElapsed(lib1_gv_uT_DummyTimer[lv_index][1]), 0));
                TextExpressionSetToken("Param/Expression/lib_1_03378DEF", "C", FixedToText((lib1_gv_uT_DummyDamage[lv_index][1] / TimerGetElapsed(lib1_gv_uT_DummyTimer[lv_index][1])), 1));
                TextTagSetText(libHots_gf_TextTagForUnit(lib1_gv_uT_DummyUnits[lv_index], 1), TextExpressionAssemble("Param/Expression/lib_1_03378DEF"));
                lib1_gv_uT_DummyDamage[lv_index][0] = 0.0;
                TimerStart(lib1_gv_uT_DummyTimer[lv_index][0], 5.0, false, c_timeGame);
                break;
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DummyUpdate_Init () {
    lib1_gt_UT_DummyUpdate = TriggerCreate("lib1_gt_UT_DummyUpdate_Func");
    TriggerEnable(lib1_gt_UT_DummyUpdate, false);
    TriggerAddEventTimer(lib1_gt_UT_DummyUpdate, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DummyDestroyed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DummyDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib1_gv_uT_Dummies, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagShow(libHots_gf_TextTagForUnit(EventUnit(), 1), PlayerGroupAll(), false);
    TextTagDestroy(libHots_gf_TextTagForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DummyDestroyed_Init () {
    lib1_gt_UT_DummyDestroyed = TriggerCreate("lib1_gt_UT_DummyDestroyed_Func");
    TriggerEnable(lib1_gt_UT_DummyDestroyed, false);
    TriggerAddEventUnitDied(lib1_gt_UT_DummyDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DPS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_vUnit;

    // Automatic Variable Declarations
    const int auto75100041_ae = lib1_gv_uT_DPS_MaxUnits;
    const int auto75100041_ai = 1;
    unitgroup auto078DAF23_g;
    int auto078DAF23_u;
    unit auto078DAF23_var;
    const int auto68BBE10F_ae = lib1_gv_uT_DPS_MaxUnits;
    const int auto68BBE10F_ai = 1;
    unitgroup autoC2A62868_g;
    int autoC2A62868_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(lib1_gv_uT_DPS_UG, UnitGroupSelected(EventPlayer()));
    lv_i = 1;
    for ( ; ( (auto75100041_ai >= 0 && lv_i <= auto75100041_ae) || (auto75100041_ai < 0 && lv_i >= auto75100041_ae) ) ; lv_i += auto75100041_ai ) {
        lib1_gv_uT_DPS_Damage[lv_i][0] = 0.0;
        lib1_gv_uT_DPS_Damage[lv_i][1] = 0.0;
        libNtve_gf_StopTimer(lib1_gv_uT_DPS_Timer[lv_i][0]);
        libNtve_gf_StopTimer(lib1_gv_uT_DPS_Timer[lv_i][1]);
    }
    auto078DAF23_g = UnitGroupSelected(EventPlayer());
    auto078DAF23_u = UnitGroupCount(auto078DAF23_g, c_unitCountAll);
    for (;; auto078DAF23_u -= 1) {
        auto078DAF23_var = UnitGroupUnitFromEnd(auto078DAF23_g, auto078DAF23_u);
        if (auto078DAF23_var == null) { break; }
        if ((TextTagVisible(libHots_gf_TextTagForUnit(auto078DAF23_var, 1), EventPlayer()) == false)) {
            lv_i = 1;
            for ( ; ( (auto68BBE10F_ai >= 0 && lv_i <= auto68BBE10F_ae) || (auto68BBE10F_ai < 0 && lv_i >= auto68BBE10F_ae) ) ; lv_i += auto68BBE10F_ai ) {
                if ((lib1_gv_uT_DPS_Units[lv_i] == null)) {
                    lib1_gv_uT_DPS_Units[lv_i] = auto078DAF23_var;
                    UnitSetCustomValue(auto078DAF23_var, lib1_gv_uT_DPS_CustomValueIndex, lv_i);
                    UnitBehaviorAddPlayer(auto078DAF23_var, "DPSTESTBEGH", EventPlayer(), 1);
                    autoC2A62868_g = UnitGroup(null, UnitGetOwner(auto078DAF23_var), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    autoC2A62868_u = UnitGroupCount(autoC2A62868_g, c_unitCountAll);
                    for (;; autoC2A62868_u -= 1) {
                        lv_vUnit = UnitGroupUnitFromEnd(autoC2A62868_g, autoC2A62868_u);
                        if (lv_vUnit == null) { break; }
                        if ((UnitHasBehavior2(lv_vUnit, "DPSTESTBEGH") == true)) {
                            UnitSetCustomValue(lv_vUnit, lib1_gv_uT_DPS_CustomValueIndex, lv_i);
                            UnitGroupAdd(lib1_gv_uT_DPS_UG, lv_vUnit);
                            UnitBehaviorRemovePlayer(lv_vUnit, "DPSTESTBEGH", EventPlayer(), 1);
                        }

                    }
                    break;
                }

            }
            TextTagCreate(StringExternal("Param/Value/lib_1_1725FDFE"), 24, UnitGetPosition(auto078DAF23_var), 1.0, true, false, PlayerGroupAll());
            TextTagAttachToUnit(TextTagLastCreated(), auto078DAF23_var, 1.0);
            TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
            libHots_gf_StoreTextTagForUnit(auto078DAF23_var, 1, TextTagLastCreated());
        }

    }
    TriggerEnable(lib1_gt_UT_DPS_DealsDamage, true);
    TriggerEnable(lib1_gt_UT_DPS_Summon, true);
    TriggerEnable(lib1_gt_UT_DPS_Dies, true);
    TriggerEnable(lib1_gt_UT_DPS_PauseGlobal, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DPS_Init () {
    lib1_gt_UT_DPS = TriggerCreate("lib1_gt_UT_DPS_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_DPS, c_playerAny, "-dps", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_Stop
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DPS_Stop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoB74E607B_g;
    int autoB74E607B_u;
    unit autoB74E607B_var;
    const int auto714290B4_ae = lib1_gv_uT_DPS_MaxUnits;
    const int auto714290B4_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB74E607B_g = lib1_gv_uT_DPS_UG;
    autoB74E607B_u = UnitGroupCount(autoB74E607B_g, c_unitCountAll);
    for (;; autoB74E607B_u -= 1) {
        autoB74E607B_var = UnitGroupUnitFromEnd(autoB74E607B_g, autoB74E607B_u);
        if (autoB74E607B_var == null) { break; }
        UnitGroupRemove(lib1_gv_uT_DPS_UG, autoB74E607B_var);
        TextTagDestroy(libHots_gf_TextTagForUnit(autoB74E607B_var, 1));
    }
    lv_i = 1;
    for ( ; ( (auto714290B4_ai >= 0 && lv_i <= auto714290B4_ae) || (auto714290B4_ai < 0 && lv_i >= auto714290B4_ae) ) ; lv_i += auto714290B4_ai ) {
        lib1_gv_uT_DPS_Units[lv_i] = null;
        lib1_gv_uT_DPS_Damage[lv_i][0] = 0.0;
        lib1_gv_uT_DPS_Damage[lv_i][1] = 0.0;
        libNtve_gf_StopTimer(lib1_gv_uT_DPS_Timer[lv_i][0]);
        libNtve_gf_StopTimer(lib1_gv_uT_DPS_Timer[lv_i][1]);
    }
    TriggerEnable(lib1_gt_UT_DPS_DealsDamage, false);
    TriggerEnable(lib1_gt_UT_DPS_Summon, false);
    TriggerEnable(lib1_gt_UT_DPS_PauseGlobal, false);
    TriggerEnable(lib1_gt_UT_DPS_Dies, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DPS_Stop_Init () {
    lib1_gt_UT_DPS_Stop = TriggerCreate("lib1_gt_UT_DPS_Stop_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_DPS_Stop, c_playerAny, "-dpsstop", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_DealsDamage
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DPS_DealsDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vCustomValue;
    fixed lv_vElapsedTime;
    fixed lv_vDPS_Now;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib1_gv_uT_DPS_UG, EventUnitDamageSourceUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vCustomValue = FixedToInt(UnitGetCustomValue(EventUnitDamageSourceUnit(), lib1_gv_uT_DPS_CustomValueIndex));
    lv_vElapsedTime = TimerGetElapsed(lib1_gv_uT_DPS_Timer[lv_vCustomValue][0]);
    if ((TimerGetElapsed(lib1_gv_uT_DPS_Timer[lv_vCustomValue][1]) <= 0.0)) {
        TimerStart(lib1_gv_uT_DPS_Timer[lv_vCustomValue][1], 524287.0, false, c_timeGame);
        TimerStart(lib1_gv_uT_DPS_Timer[lv_vCustomValue][0], 5.0, false, c_timeGame);
    }
    else {
        if ((TimerIsPaused(lib1_gv_uT_DPS_Timer[lv_vCustomValue][1]) == true)) {
            TimerRestart(lib1_gv_uT_DPS_Timer[lv_vCustomValue][1]);
            lib1_gv_uT_DPS_Damage[lv_vCustomValue][1] = 0.0;
        }
        else {
            lib1_gv_uT_DPS_Damage[lv_vCustomValue][0] += EventUnitDamageAmount();
            lib1_gv_uT_DPS_Damage[lv_vCustomValue][1] += EventUnitDamageAmount();
            if ((lv_vElapsedTime >= 2.0)) {
                lv_vDPS_Now = (lib1_gv_uT_DPS_Damage[lv_vCustomValue][0] / lv_vElapsedTime);
                lib1_gv_uT_DPS_Avg[lv_vCustomValue] = (lib1_gv_uT_DPS_Damage[lv_vCustomValue][1] / TimerGetElapsed(lib1_gv_uT_DPS_Timer[lv_vCustomValue][1]));
                TextExpressionSetToken("Param/Expression/lib_1_B0755CEB", "A", FixedToText(lib1_gv_uT_DPS_Avg[lv_vCustomValue], 1));
                TextExpressionSetToken("Param/Expression/lib_1_B0755CEB", "B", FixedToText(lv_vDPS_Now, 1));
                TextTagSetText(libHots_gf_TextTagForUnit(lib1_gv_uT_DPS_Units[lv_vCustomValue], 1), TextExpressionAssemble("Param/Expression/lib_1_B0755CEB"));
                lib1_gv_uT_DPS_Damage[lv_vCustomValue][0] = 0.0;
                TimerRestart(lib1_gv_uT_DPS_Timer[lv_vCustomValue][0]);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DPS_DealsDamage_Init () {
    lib1_gt_UT_DPS_DealsDamage = TriggerCreate("lib1_gt_UT_DPS_DealsDamage_Func");
    TriggerEnable(lib1_gt_UT_DPS_DealsDamage, false);
    TriggerAddEventUnitDamaged(lib1_gt_UT_DPS_DealsDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_Summon
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DPS_Summon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib1_gv_uT_DPS_UG, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lib1_gv_uT_DPS_UG, EventUnitCreatedUnit());
    UnitSetCustomValue(EventUnitCreatedUnit(), lib1_gv_uT_DPS_CustomValueIndex, UnitGetCustomValue(EventUnit(), lib1_gv_uT_DPS_CustomValueIndex));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DPS_Summon_Init () {
    lib1_gt_UT_DPS_Summon = TriggerCreate("lib1_gt_UT_DPS_Summon_Func");
    TriggerEnable(lib1_gt_UT_DPS_Summon, false);
    TriggerAddEventUnitCreated(lib1_gt_UT_DPS_Summon, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_Dies
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DPS_Dies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib1_gv_uT_DPS_UG, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(libHots_gf_TextTagForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DPS_Dies_Init () {
    lib1_gt_UT_DPS_Dies = TriggerCreate("lib1_gt_UT_DPS_Dies_Func");
    TriggerEnable(lib1_gt_UT_DPS_Dies, false);
    TriggerAddEventUnitDied(lib1_gt_UT_DPS_Dies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_PauseGlobal
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DPS_PauseGlobal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto0ED612FA_ae = lib1_gv_uT_DPS_MaxUnits;
    int auto0ED612FA_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto0ED612FA_var = 1;
    for ( ; auto0ED612FA_var <= auto0ED612FA_ae; auto0ED612FA_var += 1 ) {
        if ((EventTimer() == lib1_gv_uT_DPS_Timer[auto0ED612FA_var][0])) {
            TimerPause(lib1_gv_uT_DPS_Timer[auto0ED612FA_var][1], true);
            TextExpressionSetToken("Param/Expression/lib_1_265538F3", "A", FixedToText(lib1_gv_uT_DPS_Avg[auto0ED612FA_var], 1));
            TextTagSetText(libHots_gf_TextTagForUnit(lib1_gv_uT_DPS_Units[auto0ED612FA_var], 1), TextExpressionAssemble("Param/Expression/lib_1_265538F3"));
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DPS_PauseGlobal_Init () {
    lib1_gt_UT_DPS_PauseGlobal = TriggerCreate("lib1_gt_UT_DPS_PauseGlobal_Func");
    TriggerEnable(lib1_gt_UT_DPS_PauseGlobal, false);
    TriggerAddEventTimer(lib1_gt_UT_DPS_PauseGlobal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Vision
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Vision_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gv_uT_Revealed == false)) {
        VisRevealerCreate(EventPlayer(), RegionEntireMap());
        lib1_gv_uT_Revealer = VisRevealerLastCreated();
        lib1_gv_uT_Revealed = true;
    }
    else {
        VisRevealerDestroy(lib1_gv_uT_Revealer);
        lib1_gv_uT_Revealed = false;
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Vision_Init () {
    lib1_gt_UT_Vision = TriggerCreate("lib1_gt_UT_Vision_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Vision, c_playerAny, "-vision", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Numbers toggle
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Numberstoggle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((PlayerGroupHasPlayer(lib1_gv_uT_PlayersWithNumbers, EventPlayer()) == false) || (TriggerIsEnabled(lib1_gt_UT_NumbersHeal) == false))) {
        PlayerGroupAdd(lib1_gv_uT_PlayersWithNumbers, EventPlayer());
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_CD5C85AF"));
        TriggerEnable(lib1_gt_UT_NumbersDamage, true);
        TriggerEnable(lib1_gt_UT_NumbersHeal, true);
    }
    else {
        PlayerGroupRemove(lib1_gv_uT_PlayersWithNumbers, EventPlayer());
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_679C1976"));
        if ((PlayerGroupCount(lib1_gv_uT_PlayersWithNumbers) == 0)) {
            TriggerEnable(lib1_gt_UT_NumbersDamage, false);
            TriggerEnable(lib1_gt_UT_NumbersHeal, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Numberstoggle_Init () {
    lib1_gt_UT_Numberstoggle = TriggerCreate("lib1_gt_UT_Numberstoggle_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Numberstoggle, c_playerAny, "-numbers", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Numbers Damage
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_NumbersDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageAmount() >= 0.5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(FixedToText(EventUnitDamageAmount(), 0), 24, UnitGetPosition(EventUnit()), 1.0, true, false, lib1_gv_uT_PlayersWithNumbers);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, RandomInt(55, 125));
    if (((EventUnitDamageSourcePlayer() == 1) || (EventUnitDamageSourcePlayer() == 2))) {
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 59.22, 18.43));
    }
    else {
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    }
    if ((EventUnitDamageAmount() > 20.0)) {
        TextTagSetFontSize(TextTagLastCreated(), 32);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.5);
        if ((EventUnitDamageAmount() > 100.0)) {
            TextTagSetFontSize(TextTagLastCreated(), 50);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.5);
        }

    }
    else {
        if ((EventUnitDamageAmount() < 5.0)) {
            TextTagSetFontSize(TextTagLastCreated(), 14);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        }
        else {
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        }
    }
    TextTagShow(TextTagLastCreated(), lib1_gv_uT_PlayersWithNumbers, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_NumbersDamage_Init () {
    lib1_gt_UT_NumbersDamage = TriggerCreate("lib1_gt_UT_NumbersDamage_Func");
    TriggerEnable(lib1_gt_UT_NumbersDamage, false);
    TriggerAddEventUnitDamaged(lib1_gt_UT_NumbersDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Numbers Heal
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_NumbersHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitHealAmount() >= 0.1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(FixedToText(EventUnitHealAmount(), 0), 24, UnitGetPosition(EventUnit()), 1.0, true, false, lib1_gv_uT_PlayersWithNumbers);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, RandomInt(55, 125));
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
    if ((EventUnitHealAmount() > 20.0)) {
        TextTagSetFontSize(TextTagLastCreated(), 32);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.5);
        if ((EventUnitHealAmount() > 100.0)) {
            TextTagSetFontSize(TextTagLastCreated(), 50);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.5);
        }

    }
    else {
        if ((EventUnitHealAmount() < 5.0)) {
            TextTagSetFontSize(TextTagLastCreated(), 12);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        }
        else {
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        }
    }
    TextTagShow(TextTagLastCreated(), lib1_gv_uT_PlayersWithNumbers, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_NumbersHeal_Init () {
    lib1_gt_UT_NumbersHeal = TriggerCreate("lib1_gt_UT_NumbersHeal_Func");
    TriggerEnable(lib1_gt_UT_NumbersHeal, false);
    TriggerAddEventUnitHealed(lib1_gt_UT_NumbersHeal, null, c_unitVitalAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DL_LogDisplay
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DL_LogDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_vChangeInDataPlayer;

    // Automatic Variable Declarations
    string auto00E48EA4_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib1_gt_UT_DL_DamageLogging, true);
    TriggerEnable(lib1_gt_UT_DL_HealLogging, true);
    auto00E48EA4_val = StringWord(EventChatMessage(false), 2);
    if (auto00E48EA4_val == "2") {
        if (true) {
            lv_vChangeInDataPlayer = true;
        }

    }
    else if (auto00E48EA4_val == "clear") {
        lib1_gf_UT_DL_LogClear(EventPlayer());
        return true;
    }
    else if (auto00E48EA4_val == "stop") {
        PlayerGroupRemove(lib1_gv_uT_DL_LoggingPlayers, EventPlayer());
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_2D7EAD32"));
        if (((PlayerGroupHasPlayer(lib1_gv_uT_DL_LoggingPlayers, 1) == false) || (PlayerStatus(1) != c_playerStatusActive)) && ((PlayerGroupHasPlayer(lib1_gv_uT_DL_LoggingPlayers, 2) == false) || (PlayerStatus(2) != c_playerStatusActive))) {
            TriggerEnable(lib1_gt_UT_DL_DamageLogging, false);
            TriggerEnable(lib1_gt_UT_DL_HealLogging, false);
        }

        return true;
    }
    else {
        if ((lib1_gv_uT_DL_PlayerData[EventPlayer()] != EventPlayer())) {
            lib1_gv_uT_DL_PlayerData[EventPlayer()] = EventPlayer();
            lv_vChangeInDataPlayer = true;
        }

    }
    if (((lib1_gv_uT_DL_LogDialog == c_invalidDialogId) || (lv_vChangeInDataPlayer == true) || (DialogIsVisible(lib1_gv_uT_DL_LogDialog, EventPlayer()) == false))) {
        lib1_gf_UT_DL_DialogCreate();
        lib1_gf_UT_DL_DialogUpdate(lib1_gv_uT_DL_PlayerData[EventPlayer()], EventPlayer());
        DialogSetVisible(lib1_gv_uT_DL_LogDialog, PlayerGroupSingle(EventPlayer()), true);
        TriggerExecute(lib1_gt_UT_DL_PeriodicUpdate, true, false);
    }
    else {
        DialogSetVisible(lib1_gv_uT_DL_LogDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DL_LogDisplay_Init () {
    lib1_gt_UT_DL_LogDisplay = TriggerCreate("lib1_gt_UT_DL_LogDisplay_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_DL_LogDisplay, c_playerAny, "-log", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DL_PeriodicUpdate
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DL_PeriodicUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    while (((DialogIsVisible(lib1_gv_uT_DL_LogDialog, 1) == true) || (DialogIsVisible(lib1_gv_uT_DL_LogDialog, 2) == true))) {
        lib1_gf_UT_DL_DialogUpdate(lib1_gv_uT_DL_PlayerData[1], 1);
        lib1_gf_UT_DL_DialogUpdate(lib1_gv_uT_DL_PlayerData[2], 2);
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DL_PeriodicUpdate_Init () {
    lib1_gt_UT_DL_PeriodicUpdate = TriggerCreate("lib1_gt_UT_DL_PeriodicUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DL_Damage Logging
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DL_DamageLogging_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto96DEB764_ae = lib1_gv_uT_DL_MaxUnits;
    int auto96DEB764_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(lib1_gv_uT_DL_LoggingPlayers, EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((EventUnitDamageSourceUnit() != EventUnit()))) {
            return false;
        }

        if (!((EventUnitDamageAmount() >= 0.1))) {
            return false;
        }

        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto96DEB764_var = 1;
    for ( ; auto96DEB764_var <= auto96DEB764_ae; auto96DEB764_var += 1 ) {
        if (((UnitGetType(EventUnitDamageSourceUnit()) == lib1_gv_uT_DL_Data[auto96DEB764_var][0][EventUnitDamageSourcePlayer()].lv_unitType))) {
            lib1_gf_UT_DL_AddHealingDamage(auto96DEB764_var, 0, EventUnitDamageSourcePlayer(), EventUnitDamageAmount());
            break;
        }
        else {
            if ((lib1_gv_uT_DL_Data[auto96DEB764_var][0][EventUnitDamageSourcePlayer()].lv_unitType == null)) {
                lib1_gv_uT_DL_Data[auto96DEB764_var][0][EventUnitDamageSourcePlayer()].lv_unitType = UnitGetType(EventUnitDamageSourceUnit());
                lib1_gf_UT_DL_AddHealingDamage(auto96DEB764_var, 0, EventUnitDamageSourcePlayer(), EventUnitDamageAmount());
                break;
            }
            else {
                if ((auto96DEB764_var == lib1_gv_uT_DL_MaxUnits)) {
                    UIDisplayMessage(PlayerGroupSingle(EventUnitDamageSourcePlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_E9D58896"));
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DL_DamageLogging_Init () {
    lib1_gt_UT_DL_DamageLogging = TriggerCreate("lib1_gt_UT_DL_DamageLogging_Func");
    TriggerEnable(lib1_gt_UT_DL_DamageLogging, false);
    TriggerAddEventUnitDamaged(lib1_gt_UT_DL_DamageLogging, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DL_Heal Logging
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DL_HealLogging_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoD009B6D7_ae = lib1_gv_uT_DL_MaxUnits;
    int autoD009B6D7_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(lib1_gv_uT_DL_LoggingPlayers, EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((EventUnitHealAmount() >= 0.1))) {
            return false;
        }

        if (!((EventUnitHealLaunchUnit() != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD009B6D7_var = 1;
    for ( ; autoD009B6D7_var <= autoD009B6D7_ae; autoD009B6D7_var += 1 ) {
        if ((UnitGetType(EventUnitHealLaunchUnit()) == lib1_gv_uT_DL_Data[autoD009B6D7_var][1][EventUnitHealLaunchPlayer()].lv_unitType)) {
            lib1_gf_UT_DL_AddHealingDamage(autoD009B6D7_var, 1, EventUnitHealLaunchPlayer(), EventUnitHealAmount());
            break;
        }
        else {
            if ((lib1_gv_uT_DL_Data[autoD009B6D7_var][1][EventUnitHealLaunchPlayer()].lv_unitType == null)) {
                lib1_gv_uT_DL_Data[autoD009B6D7_var][1][EventUnitHealLaunchPlayer()].lv_unitType = UnitGetType(EventUnitHealLaunchUnit());
                lib1_gf_UT_DL_AddHealingDamage(autoD009B6D7_var, 1, EventUnitHealLaunchPlayer(), EventUnitHealAmount());
                break;
            }
            else {
                if ((autoD009B6D7_var == lib1_gv_uT_DL_MaxUnits)) {
                    UIDisplayMessage(PlayerGroupSingle(EventUnitHealLaunchPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_9682FD1F"));
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DL_HealLogging_Init () {
    lib1_gt_UT_DL_HealLogging = TriggerCreate("lib1_gt_UT_DL_HealLogging_Func");
    TriggerEnable(lib1_gt_UT_DL_HealLogging, false);
    TriggerAddEventUnitHealed(lib1_gt_UT_DL_HealLogging, null, c_unitVitalAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_EnableDev Commands
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_EnableDevCommands_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_uT_DevCommands[EventPlayer()] = lib1_ge_UT_DevCommandTypes_Gamealtering;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_EnableDevCommands_Init () {
    lib1_gt_UT_EnableDevCommands = TriggerCreate("lib1_gt_UT_EnableDevCommands_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_EnableDevCommands, c_playerAny, "-dc", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DisableDev Commands for ally
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DisableDevCommandsforally_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_uT_DevCommands[2] = lib1_ge_UT_DevCommandTypes_No;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DisableDevCommandsforally_Init () {
    lib1_gt_UT_DisableDevCommandsforally = TriggerCreate("lib1_gt_UT_DisableDevCommandsforally_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_DisableDevCommandsforally, c_playerAny, "-jail", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Rad
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Rad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vRadius;

    // Automatic Variable Declarations
    unitgroup auto95F50999_g;
    int auto95F50999_u;
    unit auto95F50999_var;
    unitgroup auto064A2345_g;
    int auto064A2345_u;
    unit auto064A2345_var;

    // Variable Initialization
    lv_vRadius = StringToFixed(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_vRadius >= 0.0)) {
        TextExpressionSetToken("Param/Expression/lib_1_D0941859", "A", FixedToText(lv_vRadius, c_fixedPrecisionAny));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_D0941859"));
        auto064A2345_g = UnitGroupSelected(EventPlayer());
        auto064A2345_u = UnitGroupCount(auto064A2345_g, c_unitCountAll);
        for (;; auto064A2345_u -= 1) {
            auto064A2345_var = UnitGroupUnitFromEnd(auto064A2345_g, auto064A2345_u);
            if (auto064A2345_var == null) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(auto064A2345_var), "Radius", 1, FixedToString(lv_vRadius, 2));
        }
        lib1_gf_UT_Cheat();
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_2F60937E"));
        auto95F50999_g = UnitGroupSelected(EventPlayer());
        auto95F50999_u = UnitGroupCount(auto95F50999_g, c_unitCountAll);
        for (;; auto95F50999_u -= 1) {
            auto95F50999_var = UnitGroupUnitFromEnd(auto95F50999_g, auto95F50999_u);
            if (auto95F50999_var == null) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(auto95F50999_var), "Radius", EventPlayer(), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(auto95F50999_var), "Radius", 0));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Rad_Init () {
    lib1_gt_UT_Rad = TriggerCreate("lib1_gt_UT_Rad_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Rad, c_playerAny, "-rad", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_XP
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_XP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vXPAmount;

    // Automatic Variable Declarations
    unitgroup autoA7CACAA8_g;
    int autoA7CACAA8_u;
    unit autoA7CACAA8_var;

    // Variable Initialization
    lv_vXPAmount = StringToFixed(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA7CACAA8_g = UnitGroupSelected(EventPlayer());
    autoA7CACAA8_u = UnitGroupCount(autoA7CACAA8_g, c_unitCountAll);
    for (;; autoA7CACAA8_u -= 1) {
        autoA7CACAA8_var = UnitGroupUnitFromEnd(autoA7CACAA8_g, autoA7CACAA8_u);
        if (autoA7CACAA8_var == null) { break; }
        UnitXPAddXP(autoA7CACAA8_var, null, lv_vXPAmount);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_XP_Init () {
    lib1_gt_UT_XP = TriggerCreate("lib1_gt_UT_XP_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_XP, c_playerAny, "-xp", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListDead
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_ListDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoE6D960DD_ae = 15;
    int autoE6D960DD_var;
    unitgroup auto878B4C14_g;
    int auto878B4C14_u;
    unit auto878B4C14_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_1_8FFF19EB"), true);
    autoE6D960DD_var = 0;
    for ( ; autoE6D960DD_var <= autoE6D960DD_ae; autoE6D960DD_var += 1 ) {
        auto878B4C14_g = UnitGroup(null, autoE6D960DD_var, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterDead - 32)), (1 << c_targetFilterMissile), 0), 0);
        auto878B4C14_u = UnitGroupCount(auto878B4C14_g, c_unitCountAll);
        for (;; auto878B4C14_u -= 1) {
            auto878B4C14_var = UnitGroupUnitFromEnd(auto878B4C14_g, auto878B4C14_u);
            if (auto878B4C14_var == null) { break; }
            TextExpressionSetToken("Param/Expression/lib_1_F9256E14", "A", UnitGetName(auto878B4C14_var));
            TextExpressionSetToken("Param/Expression/lib_1_F9256E14", "B", IntToText(UnitGetOwner(auto878B4C14_var)));
            TextExpressionSetToken("Param/Expression/lib_1_F9256E14", "C", FixedToText(PointGetX(UnitGetPosition(auto878B4C14_var)), 1));
            TextExpressionSetToken("Param/Expression/lib_1_F9256E14", "D", FixedToText(PointGetY(UnitGetPosition(auto878B4C14_var)), 1));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_F9256E14"), true);
            Wait(0.001, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_ListDead_Init () {
    lib1_gt_UT_ListDead = TriggerCreate("lib1_gt_UT_ListDead_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_ListDead, c_playerAny, "-listdead", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListHidden
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_ListHidden_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto6C035694_ae = 15;
    int auto6C035694_var;
    unitgroup autoE04015F2_g;
    int autoE04015F2_u;
    unit autoE04015F2_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_1_C92D1176"), true);
    auto6C035694_var = 0;
    for ( ; auto6C035694_var <= auto6C035694_ae; auto6C035694_var += 1 ) {
        autoE04015F2_g = UnitGroup(null, auto6C035694_var, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), 0), 0);
        autoE04015F2_u = UnitGroupCount(autoE04015F2_g, c_unitCountAll);
        for (;; autoE04015F2_u -= 1) {
            autoE04015F2_var = UnitGroupUnitFromEnd(autoE04015F2_g, autoE04015F2_u);
            if (autoE04015F2_var == null) { break; }
            if ((libNtve_gf_UnitIsInsideTransport(autoE04015F2_var) == true)) {
                TextExpressionSetToken("Param/Expression/lib_1_62F3C041", "A", UnitGetName(autoE04015F2_var));
                TextExpressionSetToken("Param/Expression/lib_1_62F3C041", "B", IntToText(UnitGetOwner(autoE04015F2_var)));
                TextExpressionSetToken("Param/Expression/lib_1_62F3C041", "C", FixedToText(PointGetX(UnitGetPosition(autoE04015F2_var)), 1));
                TextExpressionSetToken("Param/Expression/lib_1_62F3C041", "D", FixedToText(PointGetY(UnitGetPosition(autoE04015F2_var)), 1));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_62F3C041"), true);
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_1_6D62B637", "A", UnitGetName(autoE04015F2_var));
                TextExpressionSetToken("Param/Expression/lib_1_6D62B637", "B", IntToText(UnitGetOwner(autoE04015F2_var)));
                TextExpressionSetToken("Param/Expression/lib_1_6D62B637", "C", FixedToText(PointGetX(UnitGetPosition(autoE04015F2_var)), 1));
                TextExpressionSetToken("Param/Expression/lib_1_6D62B637", "D", FixedToText(PointGetY(UnitGetPosition(autoE04015F2_var)), 1));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_6D62B637"), true);
            }
            Wait(0.001, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_ListHidden_Init () {
    lib1_gt_UT_ListHidden = TriggerCreate("lib1_gt_UT_ListHidden_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_ListHidden, c_playerAny, "-listhidden", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListMissile
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_ListMissile_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoDD323E71_ae = 15;
    int autoDD323E71_var;
    unitgroup auto55DC678C_g;
    int auto55DC678C_u;
    unit auto55DC678C_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_1_34E692CF"), true);
    autoDD323E71_var = 0;
    for ( ; autoDD323E71_var <= autoDD323E71_ae; autoDD323E71_var += 1 ) {
        auto55DC678C_g = UnitGroup(null, autoDD323E71_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterMissile), 0, 0, 0), 0);
        auto55DC678C_u = UnitGroupCount(auto55DC678C_g, c_unitCountAll);
        for (;; auto55DC678C_u -= 1) {
            auto55DC678C_var = UnitGroupUnitFromEnd(auto55DC678C_g, auto55DC678C_u);
            if (auto55DC678C_var == null) { break; }
            TextExpressionSetToken("Param/Expression/lib_1_F205614B", "A", UnitGetName(auto55DC678C_var));
            TextExpressionSetToken("Param/Expression/lib_1_F205614B", "B", IntToText(UnitGetOwner(auto55DC678C_var)));
            TextExpressionSetToken("Param/Expression/lib_1_F205614B", "C", FixedToText(PointGetX(UnitGetPosition(auto55DC678C_var)), 1));
            TextExpressionSetToken("Param/Expression/lib_1_F205614B", "D", FixedToText(PointGetY(UnitGetPosition(auto55DC678C_var)), 1));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_F205614B"), true);
            Wait(0.001, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_ListMissile_Init () {
    lib1_gt_UT_ListMissile = TriggerCreate("lib1_gt_UT_ListMissile_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_ListMissile, c_playerAny, "-listmissile", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListAll
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_ListAll_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_vText;
    int lv_vA;
    int lv_vB;
    playergroup lv_vPlayerGroup;

    // Automatic Variable Declarations
    playergroup auto2EC98AC7_g;
    int auto2EC98AC7_var;
    unitgroup autoE8741EDB_g;
    int autoE8741EDB_u;
    unit autoE8741EDB_var;
    playergroup auto36220147_g;
    int auto36220147_var;
    unitgroup auto61790ACC_g;
    int auto61790ACC_u;
    unit auto61790ACC_var;

    // Variable Initialization
    lv_vB = StringToInt(StringWord(EventChatMessage(false), 2));
    lv_vPlayerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_1_B4CC199E", "A", IntToText(lv_vB));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_B4CC199E"));
    if ((StringWord(EventChatMessage(false), 2) != "") && (lv_vB >= 0)) {
        PlayerGroupAdd(lv_vPlayerGroup, lv_vB);
    }
    else {
        libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupAll(), lv_vPlayerGroup);
    }
    auto2EC98AC7_g = lv_vPlayerGroup;
    auto2EC98AC7_var = -1;
    while (true) {
        auto2EC98AC7_var = PlayerGroupNextPlayer(auto2EC98AC7_g, auto2EC98AC7_var);
        if (auto2EC98AC7_var < 0) { break; }
        autoE8741EDB_g = UnitGroup(null, auto2EC98AC7_var, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        autoE8741EDB_u = UnitGroupCount(autoE8741EDB_g, c_unitCountAll);
        for (;; autoE8741EDB_u -= 1) {
            autoE8741EDB_var = UnitGroupUnitFromEnd(autoE8741EDB_g, autoE8741EDB_u);
            if (autoE8741EDB_var == null) { break; }
            lv_vA += 1;
        }
    }
    TextExpressionSetToken("Param/Expression/lib_1_B97BD3F8", "A", IntToText(lv_vA));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_B97BD3F8"), true);
    Wait(0.5, c_timeGame);
    auto36220147_g = lv_vPlayerGroup;
    auto36220147_var = -1;
    while (true) {
        auto36220147_var = PlayerGroupNextPlayer(auto36220147_g, auto36220147_var);
        if (auto36220147_var < 0) { break; }
        auto61790ACC_g = UnitGroup(null, auto36220147_var, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto61790ACC_u = UnitGroupCount(auto61790ACC_g, c_unitCountAll);
        for (;; auto61790ACC_u -= 1) {
            auto61790ACC_var = UnitGroupUnitFromEnd(auto61790ACC_g, auto61790ACC_u);
            if (auto61790ACC_var == null) { break; }
            Wait(0.001, c_timeGame);
            lv_vText = StringToText("");
            if ((libNtve_gf_UnitIsHidden(auto61790ACC_var) == true)) {
                lv_vText = StringExternal("Param/Value/lib_1_D4C23F85");
            }

            if ((UnitIsAlive(auto61790ACC_var) == false)) {
                TextExpressionSetToken("Param/Expression/lib_1_8D14B078", "A", lv_vText);
                lv_vText = TextExpressionAssemble("Param/Expression/lib_1_8D14B078");
            }

            if ((UnitTypeTestFlag(UnitGetType(auto61790ACC_var), c_unitFlagMissile) == true)) {
                TextExpressionSetToken("Param/Expression/lib_1_4FCF183C", "A", lv_vText);
                lv_vText = TextExpressionAssemble("Param/Expression/lib_1_4FCF183C");
            }

            TextExpressionSetToken("Param/Expression/lib_1_2A16D82D", "A", UnitGetName(auto61790ACC_var));
            TextExpressionSetToken("Param/Expression/lib_1_2A16D82D", "B", IntToText(auto36220147_var));
            TextExpressionSetToken("Param/Expression/lib_1_2A16D82D", "C", FixedToText(PointGetX(UnitGetPosition(auto61790ACC_var)), 1));
            TextExpressionSetToken("Param/Expression/lib_1_2A16D82D", "D", FixedToText(PointGetY(UnitGetPosition(auto61790ACC_var)), 1));
            TextExpressionSetToken("Param/Expression/lib_1_2A16D82D", "E", lv_vText);
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_2A16D82D"), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_ListAll_Init () {
    lib1_gt_UT_ListAll = TriggerCreate("lib1_gt_UT_ListAll_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_ListAll, c_playerAny, "-listall", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Teleport
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Teleport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9482A92B_g;
    int auto9482A92B_u;
    unit auto9482A92B_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9482A92B_g = UnitGroupSelected(EventPlayer());
    auto9482A92B_u = UnitGroupCount(auto9482A92B_g, c_unitCountAll);
    for (;; auto9482A92B_u -= 1) {
        auto9482A92B_var = UnitGroupUnitFromEnd(auto9482A92B_g, auto9482A92B_u);
        if (auto9482A92B_var == null) { break; }
        UnitSetPosition(auto9482A92B_var, CameraGetTarget(EventPlayer()), true);
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Teleport_Init () {
    lib1_gt_UT_Teleport = TriggerCreate("lib1_gt_UT_Teleport_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Teleport, c_playerAny, "-teleport", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Restart
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Restart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    RestartGame(PlayerGroupAll());
    libNtve_gf_RescueUnit2(UnitGroupSelected(EventPlayer()), lv_vPlayer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Restart_Init () {
    lib1_gt_UT_Restart = TriggerCreate("lib1_gt_UT_Restart_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Restart, c_playerAny, "-restart", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_GetID
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_GetID_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto354A3FF1_g;
    int auto354A3FF1_u;
    unit auto354A3FF1_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto354A3FF1_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto354A3FF1_u = UnitGroupCount(auto354A3FF1_g, c_unitCountAll);
    for (;; auto354A3FF1_u -= 1) {
        auto354A3FF1_var = UnitGroupUnitFromEnd(auto354A3FF1_g, auto354A3FF1_u);
        if (auto354A3FF1_var == null) { break; }
        if ((libNtve_gf_UnitIsHidden(auto354A3FF1_var) == true)) {
            TextExpressionSetToken("Param/Expression/lib_1_1C821FEC", "A", StringToText((UnitGetType(auto354A3FF1_var))));
            TextExpressionSetToken("Param/Expression/lib_1_1C821FEC", "B", IntToText(UnitGetOwner(auto354A3FF1_var)));
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_1_1C821FEC"), 24, UnitGetPosition(auto354A3FF1_var), 1.0, true, false, PlayerGroupSingle(EventPlayer()));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_1_6551235B", "A", StringToText((UnitGetType(auto354A3FF1_var))));
            TextExpressionSetToken("Param/Expression/lib_1_6551235B", "B", IntToText(UnitGetOwner(auto354A3FF1_var)));
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_1_6551235B"), 24, UnitGetPosition(auto354A3FF1_var), 1.0, true, false, PlayerGroupSingle(EventPlayer()));
            TextTagAttachToUnit(TextTagLastCreated(), auto354A3FF1_var, 1.5);
        }
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 20.0);
        TextTagShow(TextTagLastCreated(), PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_GetID_Init () {
    lib1_gt_UT_GetID = TriggerCreate("lib1_gt_UT_GetID_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_GetID, c_playerAny, "-getid", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Restore
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Restore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8B5CB252_g;
    int auto8B5CB252_u;
    unit auto8B5CB252_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8B5CB252_g = UnitGroupSelected(EventPlayer());
    auto8B5CB252_u = UnitGroupCount(auto8B5CB252_g, c_unitCountAll);
    for (;; auto8B5CB252_u -= 1) {
        auto8B5CB252_var = UnitGroupUnitFromEnd(auto8B5CB252_g, auto8B5CB252_u);
        if (auto8B5CB252_var == null) { break; }
        UnitSetPropertyFixed(auto8B5CB252_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(auto8B5CB252_var, c_unitPropEnergyPercent, 100.0);
        UnitSetPropertyFixed(auto8B5CB252_var, c_unitPropShieldsPercent, 100.0);
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Restore_Init () {
    lib1_gt_UT_Restore = TriggerCreate("lib1_gt_UT_Restore_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Restore, c_playerAny, "-restore", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Pause
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Pause_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitIsPaused(UnitGroupRandomUnit(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)) == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_55C47CB9"));
        UnitPauseAll(false);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_FF203545"));
        UnitPauseAll(true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Pause_Init () {
    lib1_gt_UT_Pause = TriggerCreate("lib1_gt_UT_Pause_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Pause, c_playerAny, "-pause", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Money
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Money_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 50000);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 50000);
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Money_Init () {
    lib1_gt_UT_Money = TriggerCreate("lib1_gt_UT_Money_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Money, c_playerAny, "-money", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Look
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Look_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4EFBBC96_g;
    int auto4EFBBC96_u;
    unit auto4EFBBC96_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4EFBBC96_g = UnitGroupSelected(EventPlayer());
    auto4EFBBC96_u = UnitGroupCount(auto4EFBBC96_g, c_unitCountAll);
    for (;; auto4EFBBC96_u -= 1) {
        auto4EFBBC96_var = UnitGroupUnitFromEnd(auto4EFBBC96_g, auto4EFBBC96_u);
        if (auto4EFBBC96_var == null) { break; }
        libNtve_gf_MakeModelFaceAngle(libNtve_gf_MainActorofUnit(auto4EFBBC96_var), StringToFixed(StringWord(EventChatMessage(false), 2)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Look_Init () {
    lib1_gt_UT_Look = TriggerCreate("lib1_gt_UT_Look_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Look, c_playerAny, "-look", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_sight
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_sight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD31828E2_g;
    int autoD31828E2_u;
    unit autoD31828E2_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_1_45C2C9E9", "A", StringToText(StringWord(EventChatMessage(false), 1)));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_45C2C9E9"));
    autoD31828E2_g = UnitGroupSelected(EventPlayer());
    autoD31828E2_u = UnitGroupCount(autoD31828E2_g, c_unitCountAll);
    for (;; autoD31828E2_u -= 1) {
        autoD31828E2_var = UnitGroupUnitFromEnd(autoD31828E2_g, autoD31828E2_u);
        if (autoD31828E2_var == null) { break; }
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(autoD31828E2_var), "Sight", EventPlayer(), StringWord(EventChatMessage(false), 2));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_sight_Init () {
    lib1_gt_UT_sight = TriggerCreate("lib1_gt_UT_sight_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_sight, c_playerAny, "-sight", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Kill Units
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_KillUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    unitgroup auto87568DA6_g;
    int auto87568DA6_u;
    unit auto87568DA6_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    }

    auto87568DA6_g = UnitGroupSelected(EventPlayer());
    auto87568DA6_u = UnitGroupCount(auto87568DA6_g, c_unitCountAll);
    for (;; auto87568DA6_u -= 1) {
        auto87568DA6_var = UnitGroupUnitFromEnd(auto87568DA6_g, auto87568DA6_u);
        if (auto87568DA6_var == null) { break; }
        PlayerCreateEffectUnit(lv_vPlayer, "Damage", auto87568DA6_var);
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_KillUnits_Init () {
    lib1_gt_UT_KillUnits = TriggerCreate("lib1_gt_UT_KillUnits_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_KillUnits, c_playerAny, "-kill", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Remove
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Remove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vInnerUnit;

    // Automatic Variable Declarations
    unitgroup auto545F40A6_g;
    int auto545F40A6_u;
    unit auto545F40A6_var;
    const int auto4926FCEE_ae = 10;
    int auto4926FCEE_var;
    unitgroup auto60FD4672_g;
    int auto60FD4672_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto545F40A6_g = UnitGroupSelected(EventPlayer());
    auto545F40A6_u = UnitGroupCount(auto545F40A6_g, c_unitCountAll);
    for (;; auto545F40A6_u -= 1) {
        auto545F40A6_var = UnitGroupUnitFromEnd(auto545F40A6_g, auto545F40A6_u);
        if (auto545F40A6_var == null) { break; }
        auto4926FCEE_var = 0;
        for ( ; auto4926FCEE_var <= auto4926FCEE_ae; auto4926FCEE_var += 1 ) {
            if ((libHots_gf_TextTagForUnit(auto545F40A6_var, auto4926FCEE_var) != c_textTagNone)) {
                TextTagDestroy(libHots_gf_TextTagForUnit(auto545F40A6_var, auto4926FCEE_var));
            }

        }
        auto60FD4672_g = UnitCargoGroup(auto545F40A6_var);
        auto60FD4672_u = UnitGroupCount(auto60FD4672_g, c_unitCountAll);
        for (;; auto60FD4672_u -= 1) {
            lv_vInnerUnit = UnitGroupUnitFromEnd(auto60FD4672_g, auto60FD4672_u);
            if (lv_vInnerUnit == null) { break; }
            UnitRemove(lv_vInnerUnit);
        }
        UnitRemove(auto545F40A6_var);
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Remove_Init () {
    lib1_gt_UT_Remove = TriggerCreate("lib1_gt_UT_Remove_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Remove, c_playerAny, "-remove", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Pause AI
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_PauseAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((AITimeIsPaused() == false)) {
        AITimePause(true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_DAA8F14D"));
    }
    else {
        AITimePause(false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_4F225CD7"));
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_PauseAI_Init () {
    lib1_gt_UT_PauseAI = TriggerCreate("lib1_gt_UT_PauseAI_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_PauseAI, c_playerAny, "-pai", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Speed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Speed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto53569830_val;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto53569830_val = StringWord(EventChatMessage(false), 2);
    if (auto53569830_val == "slower") {
        GameSetSpeedValue(c_gameSpeedSlower);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_5809308A"));
    }
    else if (auto53569830_val == "slow") {
        GameSetSpeedValue(c_gameSpeedSlow);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_71CA2486"));
    }
    else if (auto53569830_val == "normal") {
        GameSetSpeedValue(c_gameSpeedNormal);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_AC038220"));
    }
    else if (auto53569830_val == "fast") {
        GameSetSpeedValue(c_gameSpeedFast);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_A22E87F5"));
    }
    else if (auto53569830_val == "faster") {
        GameSetSpeedValue(c_gameSpeedFaster);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_7E385E54"));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Speed_Init () {
    lib1_gt_UT_Speed = TriggerCreate("lib1_gt_UT_Speed_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Speed, c_playerAny, "-speed", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Supply
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Supply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vSupply;
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vSupply = StringToInt(StringWord(EventChatMessage(false), 2));
    lv_vPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringToInt(StringWord(EventChatMessage(false), 3)) >= 2)) {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 3));
    }

    PlayerModifyPropertyInt(lv_vPlayer, c_playerPropSuppliesLimit, c_playerPropOperSetTo, lv_vSupply);
    TextExpressionSetToken("Param/Expression/lib_1_AEF7B329", "A", IntToText(lv_vSupply));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_AEF7B329"));
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Supply_Init () {
    lib1_gt_UT_Supply = TriggerCreate("lib1_gt_UT_Supply_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Supply, c_playerAny, "-supply", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Give
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Give_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        lv_vPlayer = 3;
    }
    else {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    }
    libNtve_gf_RescueUnit2(UnitGroupSelected(EventPlayer()), lv_vPlayer, true);
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Give_Init () {
    lib1_gt_UT_Give = TriggerCreate("lib1_gt_UT_Give_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Give, c_playerAny, "-give", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_SwitchOwner
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_SwitchOwner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    unitgroup auto6B448A79_g;
    int auto6B448A79_u;
    unit auto6B448A79_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        lv_vPlayer = 3;
    }
    else {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    }
    auto6B448A79_g = UnitGroupSelected(EventPlayer());
    auto6B448A79_u = UnitGroupCount(auto6B448A79_g, c_unitCountAll);
    for (;; auto6B448A79_u -= 1) {
        auto6B448A79_var = UnitGroupUnitFromEnd(auto6B448A79_g, auto6B448A79_u);
        if (auto6B448A79_var == null) { break; }
        UnitBehaviorAddPlayer(auto6B448A79_var, "PXOwnership", lv_vPlayer, 1);
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_SwitchOwner_Init () {
    lib1_gt_UT_SwitchOwner = TriggerCreate("lib1_gt_UT_SwitchOwner_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_SwitchOwner, c_playerAny, "-switchowner", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Cost
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Cost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed[21] lv_vSupply;
    fixed[21] lv_vCost;
    fixed lv_vDistance;
    string lv_vRace;

    // Automatic Variable Declarations
    unitgroup auto0E63BE33_g;
    int auto0E63BE33_u;
    unit auto0E63BE33_var;
    const int auto6DC0A907_ae = 19;
    int auto6DC0A907_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vDistance = StringToFixed(StringWord(EventChatMessage(false), 2));
    if ((lv_vDistance >= 1)) {
    }
    else {
        lv_vDistance = 12.0;
    }
    auto0E63BE33_g = UnitGroup(null, c_playerAny, RegionCircle(CameraGetTarget(EventPlayer()), lv_vDistance), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto0E63BE33_u = UnitGroupCount(auto0E63BE33_g, c_unitCountAll);
    for (;; auto0E63BE33_u -= 1) {
        auto0E63BE33_var = UnitGroupUnitFromEnd(auto0E63BE33_g, auto0E63BE33_u);
        if (auto0E63BE33_var == null) { break; }
        lv_vSupply[UnitGetOwner(auto0E63BE33_var)] += UnitGetPropertyFixed(auto0E63BE33_var, c_unitPropSuppliesUsed, c_unitPropCurrent);
        lv_vCost[UnitGetOwner(auto0E63BE33_var)] += UnitTypeGetCost(UnitGetType(auto0E63BE33_var), c_unitCostSumMineralsVespene);
        TextExpressionSetToken("Param/Expression/lib_1_B1CBA26E", "A", FixedToText(UnitGetPropertyFixed(auto0E63BE33_var, c_unitPropSuppliesUsed, c_unitPropCurrent), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_1_B1CBA26E", "B", FixedToText(UnitTypeGetCost(UnitGetType(auto0E63BE33_var), c_unitCostSumMineralsVespene), c_fixedPrecisionAny));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_1_B1CBA26E"), 24, UnitGetPosition(auto0E63BE33_var), 1.0, true, false, PlayerGroupAll());
        TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 10.0);
    }
    auto6DC0A907_var = 1;
    for ( ; auto6DC0A907_var <= auto6DC0A907_ae; auto6DC0A907_var += 1 ) {
        if ((lv_vSupply[auto6DC0A907_var] != 0.0) && (lv_vCost[auto6DC0A907_var] != 0.0)) {
            TextExpressionSetToken("Param/Expression/lib_1_49F8A080", "A", IntToText(auto6DC0A907_var));
            TextExpressionSetToken("Param/Expression/lib_1_49F8A080", "D", StringToText((lv_vRace)));
            TextExpressionSetToken("Param/Expression/lib_1_49F8A080", "B", FixedToText(lv_vSupply[auto6DC0A907_var], c_fixedPrecisionAny));
            TextExpressionSetToken("Param/Expression/lib_1_49F8A080", "C", FixedToText(lv_vCost[auto6DC0A907_var], c_fixedPrecisionAny));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_49F8A080"));
            lv_vCost[20] += lv_vCost[auto6DC0A907_var];
            lv_vSupply[20] += lv_vSupply[auto6DC0A907_var];
        }

    }
    TextExpressionSetToken("Param/Expression/lib_1_D25A4EFD", "B", FixedToText(lv_vSupply[20], c_fixedPrecisionAny));
    TextExpressionSetToken("Param/Expression/lib_1_D25A4EFD", "C", FixedToText(lv_vCost[20], c_fixedPrecisionAny));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_D25A4EFD"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Cost_Init () {
    lib1_gt_UT_Cost = TriggerCreate("lib1_gt_UT_Cost_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Cost, c_playerAny, "-cost", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_clearscreen
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_clearscreen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;
    unit lv_vInnerUnit;

    // Automatic Variable Declarations
    unitgroup autoF05A0224_g;
    int autoF05A0224_u;
    unit autoF05A0224_var;
    const int auto56A183A4_ae = 10;
    int auto56A183A4_var;
    unitgroup autoAC765000_g;
    int autoAC765000_u;
    unitgroup autoFE53794A_g;
    int autoFE53794A_u;
    unit autoFE53794A_var;
    const int auto4E8D3513_ae = 10;
    int auto4E8D3513_var;
    unitgroup autoDBE882EE_g;
    int autoDBE882EE_u;

    // Variable Initialization
    lv_vPlayer = c_playerAny;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "unsel")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_7A6876F2"));
        autoF05A0224_g = UnitGroup(null, lv_vPlayer, RegionCircle(CameraGetTarget(EventPlayer()), 15.0), UnitFilter(0, 0, 0, 0), 0);
        autoF05A0224_u = UnitGroupCount(autoF05A0224_g, c_unitCountAll);
        for (;; autoF05A0224_u -= 1) {
            autoF05A0224_var = UnitGroupUnitFromEnd(autoF05A0224_g, autoF05A0224_u);
            if (autoF05A0224_var == null) { break; }
            if ((UnitTypeTestFlag(UnitGetType(autoF05A0224_var), c_unitFlagUnselectable) == true)) {
                auto56A183A4_var = 0;
                for ( ; auto56A183A4_var <= auto56A183A4_ae; auto56A183A4_var += 1 ) {
                    if ((libHots_gf_TextTagForUnit(autoF05A0224_var, auto56A183A4_var) != c_textTagNone)) {
                        TextTagDestroy(libHots_gf_TextTagForUnit(autoF05A0224_var, auto56A183A4_var));
                    }

                }
                autoAC765000_g = UnitCargoGroup(autoF05A0224_var);
                autoAC765000_u = UnitGroupCount(autoAC765000_g, c_unitCountAll);
                for (;; autoAC765000_u -= 1) {
                    lv_vInnerUnit = UnitGroupUnitFromEnd(autoAC765000_g, autoAC765000_u);
                    if (lv_vInnerUnit == null) { break; }
                    UnitRemove(lv_vInnerUnit);
                }
                UnitRemove(autoF05A0224_var);
            }

        }
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != "")) {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    }

    TextExpressionSetToken("Param/Expression/lib_1_2EF377A7", "A", IntToText(lv_vPlayer));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_2EF377A7"));
    autoFE53794A_g = UnitGroup(null, lv_vPlayer, RegionCircle(CameraGetTarget(EventPlayer()), 15.0), UnitFilter(0, 0, 0, 0), 0);
    autoFE53794A_u = UnitGroupCount(autoFE53794A_g, c_unitCountAll);
    for (;; autoFE53794A_u -= 1) {
        autoFE53794A_var = UnitGroupUnitFromEnd(autoFE53794A_g, autoFE53794A_u);
        if (autoFE53794A_var == null) { break; }
        auto4E8D3513_var = 0;
        for ( ; auto4E8D3513_var <= auto4E8D3513_ae; auto4E8D3513_var += 1 ) {
            if ((libHots_gf_TextTagForUnit(autoFE53794A_var, auto4E8D3513_var) != c_textTagNone)) {
                TextTagDestroy(libHots_gf_TextTagForUnit(autoFE53794A_var, auto4E8D3513_var));
            }

        }
        autoDBE882EE_g = UnitCargoGroup(autoFE53794A_var);
        autoDBE882EE_u = UnitGroupCount(autoDBE882EE_g, c_unitCountAll);
        for (;; autoDBE882EE_u -= 1) {
            lv_vInnerUnit = UnitGroupUnitFromEnd(autoDBE882EE_g, autoDBE882EE_u);
            if (lv_vInnerUnit == null) { break; }
            UnitRemove(lv_vInnerUnit);
        }
        UnitRemove(autoFE53794A_var);
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_clearscreen_Init () {
    lib1_gt_UT_clearscreen = TriggerCreate("lib1_gt_UT_clearscreen_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_clearscreen, c_playerAny, "-clearscreen", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Clear Enemy
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_ClearEnemy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6F7FAA18_g;
    int auto6F7FAA18_u;
    unit auto6F7FAA18_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6F7FAA18_g = UnitGroupAlliance(EventPlayer(), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    auto6F7FAA18_u = UnitGroupCount(auto6F7FAA18_g, c_unitCountAll);
    for (;; auto6F7FAA18_u -= 1) {
        auto6F7FAA18_var = UnitGroupUnitFromEnd(auto6F7FAA18_g, auto6F7FAA18_u);
        if (auto6F7FAA18_var == null) { break; }
        UnitRemove(auto6F7FAA18_var);
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_ClearEnemy_Init () {
    lib1_gt_UT_ClearEnemy = TriggerCreate("lib1_gt_UT_ClearEnemy_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_ClearEnemy, c_playerAny, "-clearenemy", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Spawn Units
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_SpawnUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vAmount;
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((StringWord(EventChatMessage(false), 2) != ""))) {
            return false;
        }

        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 3) == "")) {
        lv_vAmount = 1;
    }
    else {
        lv_vAmount = StringToInt(StringWord(EventChatMessage(false), 3));
    }
    if ((StringWord(EventChatMessage(false), 4) == "")) {
        lv_vPlayer = EventPlayer();
    }
    else {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 4));
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(lv_vAmount, UnitTypeFromString(StringWord(EventChatMessage(false), 2)), 0, lv_vPlayer, CameraGetTarget(EventPlayer()));
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_SpawnUnits_Init () {
    lib1_gt_UT_SpawnUnits = TriggerCreate("lib1_gt_UT_SpawnUnits_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_SpawnUnits, c_playerAny, "-spawn", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Control
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Control_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA35CBB24_g;
    int autoA35CBB24_var;
    playergroup auto1E4F6E61_g;
    int auto1E4F6E61_var;
    playergroup auto7E1E4345_g;
    int auto7E1E4345_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "other")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_EC5FC914"));
        autoA35CBB24_g = PlayerGroupAll();
        autoA35CBB24_var = -1;
        while (true) {
            autoA35CBB24_var = PlayerGroupNextPlayer(autoA35CBB24_g, autoA35CBB24_var);
            if (autoA35CBB24_var < 0) { break; }
            if ((libNtve_gf_PlayerIsEnemy(autoA35CBB24_var, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == false)) {
                PlayerSetAlliance(autoA35CBB24_var, c_allianceIdControl, EventPlayer(), true);
            }

        }
    }
    else {
        if ((PlayerGetAlliance(3, c_allianceIdControl, EventPlayer()) == false)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_F9DF915F"));
            auto7E1E4345_g = PlayerGroupAll();
            auto7E1E4345_var = -1;
            while (true) {
                auto7E1E4345_var = PlayerGroupNextPlayer(auto7E1E4345_g, auto7E1E4345_var);
                if (auto7E1E4345_var < 0) { break; }
                if ((libNtve_gf_PlayerIsEnemy(auto7E1E4345_var, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true)) {
                    PlayerSetAlliance(auto7E1E4345_var, c_allianceIdControl, EventPlayer(), true);
                }

            }
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_74BF5D8E"));
            auto1E4F6E61_g = PlayerGroupAll();
            auto1E4F6E61_var = -1;
            while (true) {
                auto1E4F6E61_var = PlayerGroupNextPlayer(auto1E4F6E61_g, auto1E4F6E61_var);
                if (auto1E4F6E61_var < 0) { break; }
                if ((libNtve_gf_PlayerIsEnemy(auto1E4F6E61_var, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true)) {
                    PlayerSetAlliance(auto1E4F6E61_var, c_allianceIdControl, EventPlayer(), false);
                }

            }
        }
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Control_Init () {
    lib1_gt_UT_Control = TriggerCreate("lib1_gt_UT_Control_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Control, c_playerAny, "-control", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Resource
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Resource_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, StringToInt(StringWord(EventChatMessage(false), 2)));
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, StringToInt(StringWord(EventChatMessage(false), 3)));
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Resource_Init () {
    lib1_gt_UT_Resource = TriggerCreate("lib1_gt_UT_Resource_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Resource, c_playerAny, "-resource", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Changed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UpgradeChanged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_1_ABA9AE4B", "A", StringToText(IntToString(EventUpgradeLevelDelta())));
    TextExpressionSetToken("Param/Expression/lib_1_ABA9AE4B", "B", StringToText((EventUpgradeName())));
    TextExpressionSetToken("Param/Expression/lib_1_ABA9AE4B", "C", IntToText(EventPlayer()));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_ABA9AE4B"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UpgradeChanged_Init () {
    lib1_gt_UpgradeChanged = TriggerCreate("lib1_gt_UpgradeChanged_Func");
    TriggerEnable(lib1_gt_UpgradeChanged, false);
    TriggerAddEventUpgradeLevelChanged(lib1_gt_UpgradeChanged, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugApplySkin
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CM_DebugApplySkin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringLength(StringWord(EventChatMessage(false), 3)) >= 1)) {
        PlayerApplySkin(StringToInt(StringWord(EventChatMessage(false), 3)), (StringWord(EventChatMessage(false), 2)), true);
    }
    else {
        PlayerApplySkin(EventPlayer(), (StringWord(EventChatMessage(false), 2)), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CM_DebugApplySkin_Init () {
    lib1_gt_CM_DebugApplySkin = TriggerCreate("lib1_gt_CM_DebugApplySkin_Func");
    TriggerAddEventChatMessage(lib1_gt_CM_DebugApplySkin, c_playerAny, "-skin", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Mode
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DebugMode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(lib1_gt_UT_FastBuild, true, false);
    VisRevealerCreate(1, RegionEntireMap());
    lib1_gv_uT_Revealer = VisRevealerLastCreated();
    lib1_gv_uT_Revealed = true;
    lib1_gf_UT_Cheat();
    TriggerEnable(lib1_gt_UT_CTRLC, true);
    TriggerEnable(lib1_gt_UT_CTRLV, true);
    PlayerGroupAdd(lib1_gv_uT_PlayersWithNumbers, 1);
    TriggerEnable(lib1_gt_UT_NumbersDamage, true);
    TriggerEnable(lib1_gt_UT_NumbersHeal, true);
    TriggerEnable(lib1_gt_UT_UI_CtrlH, true);
    TriggerEnable(lib1_gt_UpgradeChanged, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DebugMode_Init () {
    lib1_gt_DebugMode = TriggerCreate("lib1_gt_DebugMode_Func");
    TriggerAddEventChatMessage(lib1_gt_DebugMode, c_playerAny, "```", true);
    TriggerAddEventChatMessage(lib1_gt_DebugMode, c_playerAny, "Debug Mode", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P4 harvest
//--------------------------------------------------------------------------------------------------
bool lib1_gt_P4harvest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_aIPlayer;
    string lv_aistructuremain;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_aIPlayer = UnitGetOwner(EventUnit());
    lv_aistructuremain = ("^AI" + IntToString(lv_aIPlayer) + "StructureMain");

    // Conditions
    if (testConds) {
        if (!((PlayerType(lv_aIPlayer) == c_playerTypeComputer))) {
            return false;
        }

        if (!((lib1_gf_ListStringIncludes(lv_aistructuremain, (UnitGetType(EventUnit()))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIInitCampaignHarvest(lv_aIPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_P4harvest_Init () {
    lib1_gt_P4harvest = TriggerCreate("lib1_gt_P4harvest_Func");
    TriggerAddEventUnitConstructProgress(lib1_gt_P4harvest, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P4 rally
//--------------------------------------------------------------------------------------------------
bool lib1_gt_P4rally_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_aIPlayer;
    string lv_aistructuremain;
    int lv_town;
    point lv_unitpos;
    point lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_aIPlayer = UnitGetOwner(EventUnit());
    lv_aistructuremain = ("^AI" + IntToString(lv_aIPlayer) + "StructureMain");

    // Conditions
    if (testConds) {
        if (!((PlayerType(lv_aIPlayer) == c_playerTypeComputer))) {
            return false;
        }

        if (!((lib1_gf_ListStringIncludes(lv_aistructuremain, (UnitGetType(EventUnit()))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitpos = UnitGetPosition(EventUnitProgressUnit());
    lv_town = AIGetClosestTown(lv_aIPlayer, lv_unitpos);
    if ((lv_town == AIGetMainTown(lv_aIPlayer))) {
        libNtve_gf_AICast(EventUnitProgressUnit(), OrderTargetingPoint(null, UnitGetPosition(EventUnit())));
    }
    else {
        lv_target = libNtve_gf_PointOffsetTowardsPoint(lv_unitpos, -3.0, UnitGroupCenterOfGroup(UnitGroup(null, c_playerAny, RegionCircle(lv_unitpos, 13.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)));
        libNtve_gf_AICast(EventUnitProgressUnit(), OrderTargetingPoint(null, lv_target));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_P4rally_Init () {
    lib1_gt_P4rally = TriggerCreate("lib1_gt_P4rally_Func");
    TriggerAddEventUnitConstructProgress(lib1_gt_P4rally, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Offline Debug
//--------------------------------------------------------------------------------------------------
bool lib1_gt_OfflineDebug_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_uSer;

    // Automatic Variable Declarations
    playergroup auto68343D6B_g;
    int auto68343D6B_var;
    string autoDF76AD73_val;

    // Variable Initialization
    lv_uSer = 12;

    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARMP_gf_SetPlayerRaceARC(1, "UPL");
    libARMP_gf_SetPlayerRaceARC(2, "Dragon");
    libARMP_gf_SetPlayerRaceARC(3, "Gen");
    libARMP_gf_SetPlayerRaceARC(4, "NHbr");
    libARMP_gf_SetPlayerRaceARC(5, "Keir");
    libARMP_gf_SetPlayerRaceARC(6, "Prot");
    libARMP_gf_SetPlayerRaceARC(7, "Terr");
    libARMP_gf_SetPlayerRaceARC(8, "UED");
    libARMP_gf_SetPlayerRaceARC(9, "Xayi");
    libARMP_gf_SetPlayerRaceARC(10, "Zerg");
    libARMP_gf_SetPlayerRaceARC(12, "Terr");
    libARMP_gv_dEBUGGING_AI = 1;
    libARMP_gf_InitializeMeleeGame();
    MeleeInitResources();
    MeleeInitAI();
    MeleeInitOptions();
    auto68343D6B_g = PlayerGroupAll();
    auto68343D6B_var = -1;
    while (true) {
        auto68343D6B_var = PlayerGroupNextPlayer(auto68343D6B_g, auto68343D6B_var);
        if (auto68343D6B_var < 0) { break; }
        if ((PlayerType(auto68343D6B_var) == c_playerTypeComputer)) {
            PlayerSetAlliance(auto68343D6B_var, c_allianceIdVision, lv_uSer, true);
            PlayerSetAlliance(auto68343D6B_var, c_allianceIdControl, lv_uSer, true);
            PlayerSetAlliance(auto68343D6B_var, c_allianceIdSpend, lv_uSer, true);
            PlayerModifyPropertyInt(auto68343D6B_var, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
            PlayerModifyPropertyInt(auto68343D6B_var, c_playerPropVespene, c_playerPropOperSetTo, 10000);
            lib1_gf_SetupAIUnits(auto68343D6B_var);
            lib1_gf_SetupAIFlags(auto68343D6B_var);
            lib1_gv_pickedai = auto68343D6B_var;
            TriggerExecute(lib1_gt_StockAIController, true, false);
            autoDF76AD73_val = PlayerRace(auto68343D6B_var);
            if (autoDF76AD73_val == "Gen") {
                TriggerExecute(lib1_gt_GenetronAIController, true, false);
            }
            else if (autoDF76AD73_val == "UED") {
                TriggerExecute(lib1_gt_UEDAIController, true, false);
            }
            else if (autoDF76AD73_val == "Terr") {
                TriggerExecute(lib1_gt_TerranAIController, true, false);
            }
            else {
            }
        }

    }
    AISetGroupScriptControlled(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_OfflineDebug_Init () {
    lib1_gt_OfflineDebug = TriggerCreate("lib1_gt_OfflineDebug_Func");
    TriggerAddEventMapInit(lib1_gt_OfflineDebug);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UED AI Controller
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UEDAIController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_headquarters;
    unitgroup lv_beacons;
    int lv_aIPlayer;

    // Automatic Variable Declarations
    unitgroup autoD4E02DF3_g;
    int autoD4E02DF3_u;
    unit autoD4E02DF3_var;

    // Variable Initialization
    lv_headquarters = UnitGroupEmpty();
    lv_beacons = UnitGroupEmpty();
    lv_aIPlayer = lib1_gv_pickedai;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitGroupCount(UnitGroup(null, lv_aIPlayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        Wait(8.0, c_timeAI);
        lv_headquarters = UnitGroup("OperationHeadquarters", lv_aIPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD4E02DF3_g = lv_headquarters;
        autoD4E02DF3_u = UnitGroupCount(autoD4E02DF3_g, c_unitCountAll);
        for (;; autoD4E02DF3_u -= 1) {
            autoD4E02DF3_var = UnitGroupUnitFromEnd(autoD4E02DF3_g, autoD4E02DF3_u);
            if (autoD4E02DF3_var == null) { break; }
            lv_beacons = UnitGroup("BeaconUED", lv_aIPlayer, RegionCircle(UnitGetPosition(autoD4E02DF3_var), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
            if ((UnitGroupCount(UnitGroup("BeaconUED", lv_aIPlayer, RegionCircle(UnitGetPosition(autoD4E02DF3_var), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
                UnitIssueOrder(autoD4E02DF3_var, OrderTargetingPoint(AbilityCommand("WarpUEDBeacon", 0), lib1_gf_Thenearestbuildablepointtothepoint(UnitGetPosition(autoD4E02DF3_var), 0)), c_orderQueueAddToFront);
            }

        }
        AISetGroupScriptControlled(lv_headquarters, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UEDAIController_Init () {
    lib1_gt_UEDAIController = TriggerCreate("lib1_gt_UEDAIController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran AI Controller
//--------------------------------------------------------------------------------------------------
bool lib1_gt_TerranAIController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_aIPlayer;
    unitgroup lv_barracks;
    unitgroup lv_factories;
    unitgroup lv_starports;

    // Automatic Variable Declarations
    unitgroup auto6FC80C64_g;
    int auto6FC80C64_u;
    unit auto6FC80C64_var;
    unitgroup autoA767AFE3_g;
    int autoA767AFE3_u;
    unit autoA767AFE3_var;
    unitgroup auto64C5DFF8_g;
    int auto64C5DFF8_u;
    unit auto64C5DFF8_var;

    // Variable Initialization
    lv_aIPlayer = lib1_gv_pickedai;
    lv_barracks = UnitGroupEmpty();
    lv_factories = UnitGroupEmpty();
    lv_starports = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitGroupCount(UnitGroup(null, lv_aIPlayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        Wait(8.0, c_timeAI);
        lv_barracks = UnitGroup("Barracks", lv_aIPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_barracks, UnitGroup("BarracksFlying", lv_aIPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        lv_factories = UnitGroup("Factory", lv_aIPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_factories, UnitGroup("FactoryFlying", lv_aIPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        lv_starports = UnitGroup("Starport", lv_aIPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_starports, UnitGroup("StarportFlying", lv_aIPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        auto6FC80C64_g = lv_barracks;
        auto6FC80C64_u = UnitGroupCount(auto6FC80C64_g, c_unitCountAll);
        for (;; auto6FC80C64_u -= 1) {
            auto6FC80C64_var = UnitGroupUnitFromEnd(auto6FC80C64_g, auto6FC80C64_u);
            if (auto6FC80C64_var == null) { break; }
            UnitIssueOrder(auto6FC80C64_var, OrderTargetingPoint(AbilityCommand("BarracksAddOns", 0), lib1_gf_Thenearestbuildablepointtothepoint(UnitGetPosition(auto6FC80C64_var), 4)), c_orderQueueAddToEnd);
        }
        autoA767AFE3_g = lv_factories;
        autoA767AFE3_u = UnitGroupCount(autoA767AFE3_g, c_unitCountAll);
        for (;; autoA767AFE3_u -= 1) {
            autoA767AFE3_var = UnitGroupUnitFromEnd(autoA767AFE3_g, autoA767AFE3_u);
            if (autoA767AFE3_var == null) { break; }
            UnitIssueOrder(autoA767AFE3_var, OrderTargetingPoint(AbilityCommand("FactoryAddOns", 0), lib1_gf_Thenearestbuildablepointtothepoint(UnitGetPosition(autoA767AFE3_var), 4)), c_orderQueueAddToEnd);
        }
        auto64C5DFF8_g = lv_starports;
        auto64C5DFF8_u = UnitGroupCount(auto64C5DFF8_g, c_unitCountAll);
        for (;; auto64C5DFF8_u -= 1) {
            auto64C5DFF8_var = UnitGroupUnitFromEnd(auto64C5DFF8_g, auto64C5DFF8_u);
            if (auto64C5DFF8_var == null) { break; }
            UnitIssueOrder(auto64C5DFF8_var, OrderTargetingPoint(AbilityCommand("StarportAddOns", 0), lib1_gf_Thenearestbuildablepointtothepoint(UnitGetPosition(auto64C5DFF8_var), 4)), c_orderQueueAddToEnd);
        }
        AISetGroupScriptControlled(lv_barracks, false);
        AISetGroupScriptControlled(lv_factories, false);
        AISetGroupScriptControlled(lv_starports, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_TerranAIController_Init () {
    lib1_gt_TerranAIController = TriggerCreate("lib1_gt_TerranAIController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Genetron AI Controller
//--------------------------------------------------------------------------------------------------
bool lib1_gt_GenetronAIController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_manufacturers;
    unitgroup lv_assemblyArrays;
    unitgroup lv_fabricators;
    unitgroup lv_beacons;
    int lv_aIPlayer;
    unitgroup lv_units;

    // Automatic Variable Declarations
    unitgroup auto2702DDF1_g;
    int auto2702DDF1_u;
    unit auto2702DDF1_var;
    int autoDA71D7D9_val;

    // Variable Initialization
    lv_manufacturers = UnitGroupEmpty();
    lv_assemblyArrays = UnitGroupEmpty();
    lv_fabricators = UnitGroupEmpty();
    lv_beacons = UnitGroupEmpty();
    lv_aIPlayer = lib1_gv_pickedai;
    lv_units = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitGroupCount(UnitGroup(null, lv_aIPlayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        Wait(8.0, c_timeAI);
        lv_units = UnitGroupEmpty();
        lv_manufacturers = UnitGroup("Manufacturer", lv_aIPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_assemblyArrays = UnitGroup("AssemblyArray", lv_aIPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_fabricators = UnitGroup("Fabricator", lv_aIPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_units, lv_manufacturers);
        UnitGroupAddUnitGroup(lv_units, lv_assemblyArrays);
        UnitGroupAddUnitGroup(lv_units, lv_assemblyArrays);
        auto2702DDF1_g = lv_units;
        auto2702DDF1_u = UnitGroupCount(auto2702DDF1_g, c_unitCountAll);
        for (;; auto2702DDF1_u -= 1) {
            auto2702DDF1_var = UnitGroupUnitFromEnd(auto2702DDF1_g, auto2702DDF1_u);
            if (auto2702DDF1_var == null) { break; }
            autoDA71D7D9_val = RandomInt(1, 3);
            if (autoDA71D7D9_val == 1) {
                UnitIssueOrder(auto2702DDF1_var, Order(AbilityCommand("GenetronProductionModeOverclock", 0)), c_orderQueueAddToFront);
            }
            else if (autoDA71D7D9_val == 2) {
                UnitIssueOrder(auto2702DDF1_var, Order(AbilityCommand("GenetronProductionModePerformance", 0)), c_orderQueueAddToFront);
            }
            else if (autoDA71D7D9_val == 3) {
                UnitIssueOrder(auto2702DDF1_var, Order(AbilityCommand("GenetronProductionModeStandard", 0)), c_orderQueueAddToFront);
            }
            else {
            }
        }
        AISetGroupScriptControlled(lv_units, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_GenetronAIController_Init () {
    lib1_gt_GenetronAIController = TriggerCreate("lib1_gt_GenetronAIController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Child AI Controller
//--------------------------------------------------------------------------------------------------
bool lib1_gt_ChildAIController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_aIPlayer;
    string lv_aiunitfood;
    string lv_aiunitsupport;
    string lv_aiunitcombat;
    string lv_aiunitworker;
    string lv_aiunittransport;
    string lv_aistructuretech;
    string lv_aistructureproduction;
    string lv_aistructuredefenses;
    string lv_aistructurepower;
    string lv_aistructuremain;
    string lv_aistructurerefinery;
    string lv_aiupgrades;
    string lv_aistructuredropoff;
    string lv_townHall;
    string lv_unitPeon;
    string lv_unitRefinery;
    string lv_unitSupply;
    string lv_unitTransport;
    string lv_unitType;
    int lv_towns;
    int lv_supplyNeeded;
    fixed lv_supplyFoodAmount;
    fixed lv_nextwavetime;

    // Automatic Variable Declarations
    int autoC304B54D_player;
    int autoC304B54D_state;
    int autoC304B54D_var;
    int autoC304B54D_statevar;
    int autoA798AA20_ae;
    int autoA798AA20_var;
    int autoF7C20A71_player;
    int autoF7C20A71_state;
    int autoF7C20A71_var;
    int autoF7C20A71_statevar;
    int auto29D426FE_ae;
    int auto29D426FE_var;
    int auto1936C022_ae;
    int auto1936C022_var;
    int autoC6915225_ae;
    int autoC6915225_var;
    int autoD1085329_ae;
    int autoD1085329_var;
    int auto65BCBA15_player;
    int auto65BCBA15_state;
    int auto65BCBA15_var;
    int auto65BCBA15_statevar;
    int autoAD476DFF_ae;
    int autoAD476DFF_var;
    int autoA73A0358_player;
    int autoA73A0358_state;
    int autoA73A0358_var;
    int autoA73A0358_statevar;
    int auto9B511A88_player;
    int auto9B511A88_state;
    int auto9B511A88_var;
    int auto9B511A88_statevar;
    int autoBD1E9BAA_ae;
    int autoBD1E9BAA_var;
    int autoCEFCBDAC_ae;
    int autoCEFCBDAC_var;

    // Variable Initialization
    lv_aIPlayer = lib1_gv_pickedai;
    lv_aiunitfood = ("^AI" + IntToString(lv_aIPlayer) + "StructureFood");
    lv_aiunitsupport = ("^AI" + IntToString(lv_aIPlayer) + "UnitSupport");
    lv_aiunitcombat = ("^AI" + IntToString(lv_aIPlayer) + "UnitCombat");
    lv_aiunitworker = ("^AI" + IntToString(lv_aIPlayer) + "UnitWorker");
    lv_aiunittransport = ("^AI" + IntToString(lv_aIPlayer) + "UnitTransport");
    lv_aistructuretech = ("^AI" + IntToString(lv_aIPlayer) + "StructureTech");
    lv_aistructureproduction = ("^AI" + IntToString(lv_aIPlayer) + "StructureProduction");
    lv_aistructuredefenses = ("^AI" + IntToString(lv_aIPlayer) + "StructureDefense");
    lv_aistructurepower = ("^AI" + IntToString(lv_aIPlayer) + "StructurePower");
    lv_aistructuremain = ("^AI" + IntToString(lv_aIPlayer) + "StructureMain");
    lv_aistructurerefinery = ("^AI" + IntToString(lv_aIPlayer) + "StructureRefinery");
    lv_aiupgrades = ("^AI" + IntToString(lv_aIPlayer) + "Upgrades");
    lv_aistructuredropoff = ("^AI" + IntToString(lv_aIPlayer) + "StructureDropOff");
    lv_townHall = (lib1_gf_ListStringGet(lv_aistructuremain, 1));
    lv_unitPeon = (lib1_gf_ListStringGet(lv_aiunitworker, 1));
    lv_unitRefinery = (lib1_gf_ListStringGet(lv_aistructurerefinery, 1));
    lv_unitSupply = (lib1_gf_ListStringGet(lv_aiunitfood, 1));
    lv_unitTransport = (lib1_gf_ListStringGet(lv_aiunittransport, 1));
    lv_supplyFoodAmount = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, lv_unitSupply, "Food", lv_aIPlayer);
    lv_nextwavetime = 160.0;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitGroupCount(UnitGroup(null, lv_aIPlayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        if ((GameGetMissionTime() > lv_nextwavetime)) {
            lv_nextwavetime += RandomFixed(90.0, 120.0);
            lib1_gf_Attack(lv_aIPlayer);
        }
        Wait(15.0, c_timeAI);
        lib1_gf_CleanUp(lv_aIPlayer);
        if ((UnitGroupCount(lib1_gf_UnitsInRegionWithSpecifiedTypes(lv_aIPlayer, lv_aistructuredropoff, RegionEntireMap()), c_unitCountAlive) == 0)) {
            AIBuild(lv_aIPlayer, 12, -1, lv_townHall, 1, lib1_gv_townHall);
            continue;
        }

        lv_supplyNeeded = (CeilingI((PlayerGetPropertyInt(lv_aIPlayer, c_playerPropSuppliesUsed) / lv_supplyFoodAmount)) + 1);
        if ((UnitTypeTestAttribute(lv_unitSupply, c_unitAttributeStructure) == true)) {
            lib1_gf_BuildIfNotInQueue(lv_aIPlayer, lv_unitSupply, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, lv_supplyNeeded, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, -1, lib1_gv_power, 2);
        }
        else {
            lib1_gf_TrainUnitIfNotInQueue(lv_aIPlayer, lv_unitSupply, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, lv_supplyNeeded, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, -1, 2);
        }
        lib1_gf_TrainUnitIfNotInQueue(lv_aIPlayer, lv_unitPeon, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, 22, lv_townHall, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, -1, 3);
        autoC304B54D_player = lv_aIPlayer;
        autoC304B54D_state = 3;
        autoC304B54D_var = 0;
        for ( ; autoC304B54D_var < c_townMax; autoC304B54D_var += 1 ) {
            autoC304B54D_statevar = AIGetTownState(autoC304B54D_player,autoC304B54D_var);
            if (autoC304B54D_statevar == autoC304B54D_state) {
                lib1_gf_TrainUnitIfNotInQueue(lv_aIPlayer, lv_unitPeon, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, 20, lv_townHall, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, autoC304B54D_var, 3);
                if ((AIGetCurPeonCount(lv_aIPlayer, autoC304B54D_var) < 14) && (AIGetMineralNumSpots(lv_aIPlayer, autoC304B54D_var) > 0)) {
                    lib1_gf_TrainUnitIfNotInQueue(lv_aIPlayer, lv_unitPeon, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, 50, lv_townHall, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, autoC304B54D_var, 3);
                }

            }
        }
        autoA798AA20_ae = lib1_gf_ListSize(lv_aiunitcombat);
        autoA798AA20_var = 1;
        for ( ; autoA798AA20_var <= autoA798AA20_ae; autoA798AA20_var += 1 ) {
            lib1_gf_TrainUnitIfNotInQueue(lv_aIPlayer, (lib1_gf_ListStringGet(lv_aiunitcombat, autoA798AA20_var)), lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, 4, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, -1, 4);
        }
        autoF7C20A71_player = lv_aIPlayer;
        autoF7C20A71_state = 3;
        autoF7C20A71_var = 0;
        for ( ; autoF7C20A71_var < c_townMax; autoF7C20A71_var += 1 ) {
            autoF7C20A71_statevar = AIGetTownState(autoF7C20A71_player,autoF7C20A71_var);
            if (autoF7C20A71_statevar == autoF7C20A71_state) {
                auto29D426FE_ae = lib1_gf_ListSize(lv_aiunitsupport);
                auto29D426FE_var = 1;
                for ( ; auto29D426FE_var <= auto29D426FE_ae; auto29D426FE_var += 1 ) {
                    lib1_gf_TrainUnitIfNotInQueue(lv_aIPlayer, (lib1_gf_ListStringGet(lv_aiunitsupport, auto29D426FE_var)), lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, 1, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, autoF7C20A71_var, 1);
                }
                if ((autoF7C20A71_var != AIGetMainTown(lv_aIPlayer))) {
                    auto1936C022_ae = lib1_gf_ListSize(lv_aiunitcombat);
                    auto1936C022_var = 1;
                    for ( ; auto1936C022_var <= auto1936C022_ae; auto1936C022_var += 1 ) {
                        lib1_gf_TrainUnitIfNotInQueue(lv_aIPlayer, (lib1_gf_ListStringGet(lv_aiunitcombat, auto1936C022_var)), lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, 4, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, autoF7C20A71_var, 1);
                    }
                }

            }
        }
        autoC6915225_ae = lib1_gf_ListSize(lv_aistructureproduction);
        autoC6915225_var = 1;
        for ( ; autoC6915225_var <= autoC6915225_ae; autoC6915225_var += 1 ) {
            lib1_gf_BuildIfNotInQueue(lv_aIPlayer, (lib1_gf_ListStringGet(lv_aistructureproduction, autoC6915225_var)), lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, 3, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, 0, lib1_gv_techTg, 1);
        }
        autoD1085329_ae = lib1_gf_ListSize(lv_aistructuretech);
        autoD1085329_var = 1;
        for ( ; autoD1085329_var <= autoD1085329_ae; autoD1085329_var += 1 ) {
            lib1_gf_BuildIfNotInQueue(lv_aIPlayer, (lib1_gf_ListStringGet(lv_aistructuretech, autoD1085329_var)), lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, 1, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, 0, lib1_gv_techTg, 1);
        }
        auto65BCBA15_player = lv_aIPlayer;
        auto65BCBA15_state = 2;
        auto65BCBA15_var = 0;
        for ( ; auto65BCBA15_var < c_townMax; auto65BCBA15_var += 1 ) {
            auto65BCBA15_statevar = AIGetTownState(auto65BCBA15_player,auto65BCBA15_var);
            if (auto65BCBA15_statevar >= auto65BCBA15_state) {
                if ((AIGetBuildingCountInTown(lv_aIPlayer, auto65BCBA15_var, lv_unitRefinery, c_techCountQueuedOrBetter) < 2)) {
                    AIBuild(lv_aIPlayer, 6, auto65BCBA15_var, lv_unitRefinery, 1, lib1_gv_collector);
                }

            }
        }
        autoAD476DFF_ae = lib1_gf_ListSize(lv_aiupgrades);
        autoAD476DFF_var = 1;
        for ( ; autoAD476DFF_var <= autoAD476DFF_ae; autoAD476DFF_var += 1 ) {
            lib1_gf_ResearchIfNotInQueue(lv_aIPlayer, (lib1_gf_ListStringGet(lv_aiupgrades, autoAD476DFF_var)), 1, null, lib1_ge_TgAIIncludeAlias_IncludeLastAlias);
        }
        if ((lv_unitTransport != null)) {
            lib1_gf_TrainUnitIfNotInQueue(lv_aIPlayer, lv_unitTransport, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, 1, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, -1, 1);
        }

        lv_towns = 0;
        autoA73A0358_player = lv_aIPlayer;
        autoA73A0358_state = 2;
        autoA73A0358_var = 0;
        for ( ; autoA73A0358_var < c_townMax; autoA73A0358_var += 1 ) {
            autoA73A0358_statevar = AIGetTownState(autoA73A0358_player,autoA73A0358_var);
            if (autoA73A0358_statevar >= autoA73A0358_state) {
                lv_towns += 1;
            }
        }
        auto9B511A88_player = lv_aIPlayer;
        auto9B511A88_state = 3;
        auto9B511A88_var = 0;
        for ( ; auto9B511A88_var < c_townMax; auto9B511A88_var += 1 ) {
            auto9B511A88_statevar = AIGetTownState(auto9B511A88_player,auto9B511A88_var);
            if (auto9B511A88_statevar == auto9B511A88_state) {
                autoBD1E9BAA_ae = lib1_gf_ListSize(lv_aistructuredefenses);
                autoBD1E9BAA_var = 1;
                for ( ; autoBD1E9BAA_var <= autoBD1E9BAA_ae; autoBD1E9BAA_var += 1 ) {
                    lv_unitType = (lib1_gf_ListStringGet(lv_aistructuredefenses, autoBD1E9BAA_var));
                    if ((AIGetBuildingCountInTown(lv_aIPlayer, auto9B511A88_var, lv_unitType, c_techCountQueuedOrBetter) < 3)) {
                        AIBuild(lv_aIPlayer, 0, auto9B511A88_var, lv_unitType, 1, lib1_gv_defense);
                    }

                }
            }
        }
        autoCEFCBDAC_ae = lib1_gf_ListSize(lv_aiunitcombat);
        autoCEFCBDAC_var = 1;
        for ( ; autoCEFCBDAC_var <= autoCEFCBDAC_ae; autoCEFCBDAC_var += 1 ) {
            lib1_gf_TrainUnitIfNotInQueue(lv_aIPlayer, (lib1_gf_ListStringGet(lv_aiunitcombat, autoCEFCBDAC_var)), lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, 100, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, -1, 100);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_ChildAIController_Init () {
    lib1_gt_ChildAIController = TriggerCreate("lib1_gt_ChildAIController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Child AI Controller 2
//--------------------------------------------------------------------------------------------------
bool lib1_gt_ChildAIController2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_aIPlayer;
    string lv_aiunitfood;
    string lv_aiunitsupport;
    string lv_aiunitcombat;
    string lv_aiunitworker;
    string lv_aiunittransport;
    string lv_aistructuretech;
    string lv_aistructureproduction;
    string lv_aistructuredefenses;
    string lv_aistructurepower;
    string lv_aistructuremain;
    string lv_aistructurerefinery;
    string lv_aiupgrades;
    string lv_aistructuredropoff;
    string lv_unitTownHall;
    string lv_unitPeon;
    string lv_unitRefinery;
    string lv_unitSupply;
    string lv_unitTransport;
    string lv_unitType;
    string lv_UnitTransport2;
    int lv_towns;
    int lv_supplyNeeded;
    fixed lv_supplyFoodAmount;
    int lv_SupplyNeeded2;
    int lv_SupplyNeeded3;
    int lv_SupplyNeeded6;
    int lv_SupplyNeeded5;
    int lv_SupplyNeeded4;
    fixed lv_nextwavetime;
    string lv_techStructure;
    string lv_techCombat;
    string lv_techSupport;
    string lv_techProduction;
    string lv_techUpgrade;
    string lv_availableunits;
    string lv_availableupgrades;
    string lv_availablesupport;
    string lv_availableproduction;
    string lv_availabletech;
    int lv_dangerLevel;
    bool lv_isExpansing;
    timer lv_aIExpandTimer;
    timer lv_aIAttackTimer;

    // Automatic Variable Declarations
    int auto11AA7F0F_player;
    int auto11AA7F0F_state;
    int auto11AA7F0F_var;
    int auto11AA7F0F_statevar;
    int auto1A3EAF87_player;
    int auto1A3EAF87_state;
    int auto1A3EAF87_var;
    int auto1A3EAF87_statevar;
    int autoE46FB37D_player;
    int autoE46FB37D_state;
    int autoE46FB37D_var;
    int autoE46FB37D_statevar;
    int auto8C5099F3_ae;
    int auto8C5099F3_var;
    int auto0EFDE27C_ae;
    int auto0EFDE27C_var;
    int auto9E7DFB11_player;
    int auto9E7DFB11_state;
    int auto9E7DFB11_var;
    int auto9E7DFB11_statevar;
    int auto82ED69D5_ae;
    int auto82ED69D5_var;
    int auto3AEB148E_ae;
    int auto3AEB148E_var;
    int auto360B5F12_ae;
    int auto360B5F12_var;
    int autoEAF621A6_ae;
    int autoEAF621A6_var;
    int auto6FD4747C_player;
    int auto6FD4747C_state;
    int auto6FD4747C_var;
    int auto6FD4747C_statevar;
    int auto2A1E9C8F_ae;
    int auto2A1E9C8F_var;
    int autoDE9273A1_player;
    int autoDE9273A1_state;
    int autoDE9273A1_var;
    int autoDE9273A1_statevar;
    int auto92FB3451_ae;
    int auto92FB3451_var;
    int auto74720B69_ae;
    int auto74720B69_var;

    // Variable Initialization
    lv_aIPlayer = lib1_gv_pickedai;
    lv_aiunitfood = ("^AI" + IntToString(lv_aIPlayer) + "StructureFood");
    lv_aiunitsupport = ("^AI" + IntToString(lv_aIPlayer) + "UnitSupport");
    lv_aiunitcombat = ("^AI" + IntToString(lv_aIPlayer) + "UnitCombat");
    lv_aiunitworker = ("^AI" + IntToString(lv_aIPlayer) + "UnitWorker");
    lv_aiunittransport = ("^AI" + IntToString(lv_aIPlayer) + "UnitTransport");
    lv_aistructuretech = ("^AI" + IntToString(lv_aIPlayer) + "StructureTech");
    lv_aistructureproduction = ("^AI" + IntToString(lv_aIPlayer) + "StructureProduction");
    lv_aistructuredefenses = ("^AI" + IntToString(lv_aIPlayer) + "StructureDefense");
    lv_aistructurepower = ("^AI" + IntToString(lv_aIPlayer) + "StructurePower");
    lv_aistructuremain = ("^AI" + IntToString(lv_aIPlayer) + "StructureMain");
    lv_aistructurerefinery = ("^AI" + IntToString(lv_aIPlayer) + "StructureRefinery");
    lv_aiupgrades = ("^AI" + IntToString(lv_aIPlayer) + "Upgrades");
    lv_aistructuredropoff = ("^AI" + IntToString(lv_aIPlayer) + "StructureDropOff");
    lv_unitTownHall = (lib1_gf_ListStringGet(lv_aistructuremain, 1));
    lv_unitPeon = (lib1_gf_ListStringGet(lv_aiunitworker, 1));
    lv_unitRefinery = (lib1_gf_ListStringGet(lv_aistructurerefinery, 1));
    lv_unitSupply = (lib1_gf_ListStringGet(lv_aiunitfood, 1));
    lv_unitTransport = (lib1_gf_ListStringGet(lv_aiunittransport, 1));
    lv_UnitTransport2 = "";
    lv_supplyFoodAmount = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, lv_unitSupply, "Food", lv_aIPlayer);
    lv_nextwavetime = 160.0;
    lv_availableunits = lib1_gf_ListCreate();
    lv_availableupgrades = lib1_gf_ListCreate();
    lv_availablesupport = lib1_gf_ListCreate();
    lv_availableproduction = lib1_gf_ListCreate();
    lv_availabletech = lib1_gf_ListCreate();
    lv_dangerLevel = AISelfDefenseThreatEval(lib1_gv_realSelfThreat, lv_aIPlayer);
    lv_aIExpandTimer = TimerCreate();
    lv_aIAttackTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_aIAttackTimer, 160.0, false, c_timeAI);
    AIScout(lv_aIPlayer);
    while ((UnitGroupCount(UnitGroup(null, lv_aIPlayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        Wait(5.0, c_timeAI);
        lv_towns = 0;
        auto11AA7F0F_player = lv_aIPlayer;
        auto11AA7F0F_state = 2;
        auto11AA7F0F_var = 0;
        for ( ; auto11AA7F0F_var < c_townMax; auto11AA7F0F_var += 1 ) {
            auto11AA7F0F_statevar = AIGetTownState(auto11AA7F0F_player,auto11AA7F0F_var);
            if (auto11AA7F0F_statevar >= auto11AA7F0F_state) {
                lv_towns += 1;
            }
        }
        lv_dangerLevel = AISelfDefenseThreatEval(lib1_gv_realSelfThreat, lv_aIPlayer);
        if ((lv_dangerLevel >= 120)) {
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_1D51E1FE"), true);
        }
        if ((lv_dangerLevel < 120) && (TimerGetRemaining(lv_aIAttackTimer) <= 0.0)) {
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_F3948993"), true);
            lib1_gf_Attack(lv_aIPlayer);
            TimerStart(lv_aIAttackTimer, RandomFixed(90.0, 120.0), false, c_timeAI);
        }
        if ((lv_isExpansing == true)) {
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_A0A4AE24"), true);
            lv_isExpansing = false;
            auto1A3EAF87_player = lv_aIPlayer;
            auto1A3EAF87_state = 1;
            auto1A3EAF87_var = 0;
            for ( ; auto1A3EAF87_var < c_townMax; auto1A3EAF87_var += 1 ) {
                auto1A3EAF87_statevar = AIGetTownState(auto1A3EAF87_player,auto1A3EAF87_var);
                if (auto1A3EAF87_statevar >= auto1A3EAF87_state) {
                    if ((AIGetTownState(lv_aIPlayer, auto1A3EAF87_var) == 1)) {
                        lv_isExpansing = true;
                    }

                }
            }
            if ((lv_isExpansing == true)) {
                continue;
            }
            else {
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_00094671"), true);
            }
        }

        lib1_gf_CleanUp(lv_aIPlayer);
        if ((UnitGroupCount(lib1_gf_UnitsInRegionWithSpecifiedTypes(lv_aIPlayer, lv_aistructuredropoff, RegionEntireMap()), c_unitCountAlive) == 0)) {
            AIBuild(lv_aIPlayer, 12, -1, lv_unitTownHall, 1, lib1_gv_townHall);
            continue;
        }

        AISetStock(lv_aIPlayer, 1, lv_unitPeon);
        AISetStockFarms(lv_aIPlayer, lv_unitSupply, false);
        TextExpressionSetToken("Param/Expression/lib_1_5D7BCAA9", "A", IntToText(lv_towns));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_5D7BCAA9"), true);
        if ((lv_dangerLevel < 120)) {
            lv_SupplyNeeded5 = 0;
            autoE46FB37D_player = lv_aIPlayer;
            autoE46FB37D_state = 1;
            autoE46FB37D_var = 0;
            for ( ; autoE46FB37D_var < c_townMax; autoE46FB37D_var += 1 ) {
                autoE46FB37D_statevar = AIGetTownState(autoE46FB37D_player,autoE46FB37D_var);
                if (autoE46FB37D_statevar >= autoE46FB37D_state) {
                    if ((AIGetTownState(lv_aIPlayer, autoE46FB37D_var) == 2)) {
                        lv_SupplyNeeded3 = 10;
                    }
                    else {
                        lv_SupplyNeeded3 = ((AIGetMineralNumSpots(lv_aIPlayer, autoE46FB37D_var) * 2) + (AIGetBuildingCountInTown(lv_aIPlayer, autoE46FB37D_var, lv_unitPeon, c_techCountQueuedOrBetter) * 3));
                    }
                    lv_SupplyNeeded4 = (lv_SupplyNeeded3 - AIGetCurPeonCount(lv_aIPlayer, autoE46FB37D_var));
                    lv_SupplyNeeded5 += lv_SupplyNeeded4;
                    lv_SupplyNeeded6 += lv_SupplyNeeded3;
                    if ((lv_SupplyNeeded4 > 0)) {
                        lib1_gf_TrainUnitIfNotInQueue(lv_aIPlayer, lv_unitPeon, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, lv_SupplyNeeded3, null, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, autoE46FB37D_var, 3);
                    }

                    if ((AIGetRawGasNumSpots(lv_aIPlayer, autoE46FB37D_var) > 0) && (lv_SupplyNeeded4 < 4)) {
                        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_E7803973"), true);
                        AIBuild(lv_aIPlayer, 6, autoE46FB37D_var, lv_unitRefinery, 1, lib1_gv_collector);
                    }

                }
            }
            TextExpressionSetToken("Param/Expression/lib_1_C067DB8A", "A", IntToText(lv_SupplyNeeded5));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_C067DB8A"), true);
            AISetStock(lv_aIPlayer, MaxI(lv_SupplyNeeded6, 70), lv_unitPeon);
            if ((lv_SupplyNeeded5 > 0)) {
                lib1_gf_TrainUnitIfNotInQueue(lv_aIPlayer, lv_unitPeon, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, lv_towns, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, 0, lv_towns);
            }

            if ((lv_SupplyNeeded5 < 3) && (TimerGetRemaining(lv_aIExpandTimer) <= 0.0)) {
                if ((AIHasRes(1, UnitTypeGetCost(lv_unitTownHall, c_unitCostMinerals), UnitTypeGetCost(lv_unitTownHall, c_unitCostVespene)) == false)) {
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_9611B058"), true);
                    continue;
                }
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_44F0F2C9"), true);
                lv_isExpansing = true;
                AIExpand(lv_aIPlayer, lib1_gf_GetExpansionpoint(lv_aIPlayer), lv_unitTownHall);
                TimerStart(lv_aIExpandTimer, 30.0, false, c_timeAI);
                continue;
            }

        }
        lv_supplyNeeded = (CeilingI((PlayerGetPropertyInt(lv_aIPlayer, c_playerPropSuppliesUsed) / lv_supplyFoodAmount)) + 1);
        if ((UnitTypeTestAttribute(lv_unitSupply, c_unitAttributeStructure) == true)) {
            lib1_gf_BuildIfNotInQueue(lv_aIPlayer, lv_unitSupply, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, lv_supplyNeeded, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, -1, lib1_gv_power, 2);
        }
        else {
            lib1_gf_TrainUnitIfNotInQueue(lv_aIPlayer, lv_unitSupply, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, lv_supplyNeeded, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, -1, 2);
        }
        auto8C5099F3_ae = lib1_gf_ListSize(lv_aiunitfood);
        auto8C5099F3_var = 1;
        for ( ; auto8C5099F3_var <= auto8C5099F3_ae; auto8C5099F3_var += 1 ) {
            AISetStock(lv_aIPlayer, 1, (lib1_gf_ListStringGet(lv_aiunitfood, auto8C5099F3_var)));
        }
        auto0EFDE27C_ae = lib1_gf_ListSize(lv_availableunits);
        auto0EFDE27C_var = 1;
        for ( ; auto0EFDE27C_var <= auto0EFDE27C_ae; auto0EFDE27C_var += 1 ) {
            lib1_gf_TrainUnitIfNotInQueue(lv_aIPlayer, (lib1_gf_ListStringGet(lv_aiunitcombat, auto0EFDE27C_var)), lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, 4, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, -1, 4);
        }
        auto9E7DFB11_player = lv_aIPlayer;
        auto9E7DFB11_state = 3;
        auto9E7DFB11_var = 0;
        for ( ; auto9E7DFB11_var < c_townMax; auto9E7DFB11_var += 1 ) {
            auto9E7DFB11_statevar = AIGetTownState(auto9E7DFB11_player,auto9E7DFB11_var);
            if (auto9E7DFB11_statevar == auto9E7DFB11_state) {
                auto82ED69D5_ae = lib1_gf_ListSize(lv_availablesupport);
                auto82ED69D5_var = 1;
                for ( ; auto82ED69D5_var <= auto82ED69D5_ae; auto82ED69D5_var += 1 ) {
                    lib1_gf_TrainUnitIfNotInQueue(lv_aIPlayer, (lib1_gf_ListStringGet(lv_availablesupport, auto82ED69D5_var)), lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, 1, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, auto9E7DFB11_var, 1);
                }
                if ((auto9E7DFB11_var != AIGetMainTown(lv_aIPlayer))) {
                    auto3AEB148E_ae = lib1_gf_ListSize(lv_availableunits);
                    auto3AEB148E_var = 1;
                    for ( ; auto3AEB148E_var <= auto3AEB148E_ae; auto3AEB148E_var += 1 ) {
                        lib1_gf_TrainUnitIfNotInQueue(lv_aIPlayer, (lib1_gf_ListStringGet(lv_availableunits, auto3AEB148E_var)), lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, 4, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, auto9E7DFB11_var, 1);
                    }
                }

            }
        }
        auto360B5F12_ae = lib1_gf_ListSize(lv_availableproduction);
        auto360B5F12_var = 1;
        for ( ; auto360B5F12_var <= auto360B5F12_ae; auto360B5F12_var += 1 ) {
            lib1_gf_BuildIfNotInQueue(lv_aIPlayer, (lib1_gf_ListStringGet(lv_availableproduction, auto360B5F12_var)), lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, 3, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, 0, lib1_gv_techTg, 1);
        }
        autoEAF621A6_ae = lib1_gf_ListSize(lv_availabletech);
        autoEAF621A6_var = 1;
        for ( ; autoEAF621A6_var <= autoEAF621A6_ae; autoEAF621A6_var += 1 ) {
            lib1_gf_BuildIfNotInQueue(lv_aIPlayer, (lib1_gf_ListStringGet(lv_availabletech, autoEAF621A6_var)), lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, 1, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, 0, lib1_gv_techTg, 1);
        }
        auto6FD4747C_player = lv_aIPlayer;
        auto6FD4747C_state = 2;
        auto6FD4747C_var = 0;
        for ( ; auto6FD4747C_var < c_townMax; auto6FD4747C_var += 1 ) {
            auto6FD4747C_statevar = AIGetTownState(auto6FD4747C_player,auto6FD4747C_var);
            if (auto6FD4747C_statevar >= auto6FD4747C_state) {
                if ((AIGetBuildingCountInTown(lv_aIPlayer, auto6FD4747C_var, lv_unitRefinery, c_techCountQueuedOrBetter) < 2)) {
                    AIBuild(lv_aIPlayer, 6, auto6FD4747C_var, lv_unitRefinery, 1, lib1_gv_collector);
                }

            }
        }
        auto2A1E9C8F_ae = lib1_gf_ListSize(lv_availableupgrades);
        auto2A1E9C8F_var = 1;
        for ( ; auto2A1E9C8F_var <= auto2A1E9C8F_ae; auto2A1E9C8F_var += 1 ) {
            lib1_gf_ResearchIfNotInQueue(lv_aIPlayer, (lib1_gf_ListStringGet(lv_availableupgrades, auto2A1E9C8F_var)), 1, null, lib1_ge_TgAIIncludeAlias_IncludeLastAlias);
        }
        if ((lv_unitTransport != null)) {
            lib1_gf_TrainUnitIfNotInQueue(lv_aIPlayer, lv_unitTransport, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, 1, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, -1, 1);
        }

        autoDE9273A1_player = lv_aIPlayer;
        autoDE9273A1_state = 3;
        autoDE9273A1_var = 0;
        for ( ; autoDE9273A1_var < c_townMax; autoDE9273A1_var += 1 ) {
            autoDE9273A1_statevar = AIGetTownState(autoDE9273A1_player,autoDE9273A1_var);
            if (autoDE9273A1_statevar == autoDE9273A1_state) {
                auto92FB3451_ae = lib1_gf_ListSize(lv_aistructuredefenses);
                auto92FB3451_var = 1;
                for ( ; auto92FB3451_var <= auto92FB3451_ae; auto92FB3451_var += 1 ) {
                    lv_unitType = (lib1_gf_ListStringGet(lv_aistructuredefenses, auto92FB3451_var));
                    if ((AIGetBuildingCountInTown(lv_aIPlayer, autoDE9273A1_var, lv_unitType, c_techCountQueuedOrBetter) < 3)) {
                        AIBuild(lv_aIPlayer, 0, autoDE9273A1_var, lv_unitType, 1, lib1_gv_defense);
                    }

                }
            }
        }
        auto74720B69_ae = lib1_gf_ListSize(lv_availableunits);
        auto74720B69_var = 1;
        for ( ; auto74720B69_var <= auto74720B69_ae; auto74720B69_var += 1 ) {
            lib1_gf_TrainUnitIfNotInQueue(lv_aIPlayer, (lib1_gf_ListStringGet(lv_availableunits, auto74720B69_var)), lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, 100, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, -1, 100);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_ChildAIController2_Init () {
    lib1_gt_ChildAIController2 = TriggerCreate("lib1_gt_ChildAIController2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stock AI Controller
//--------------------------------------------------------------------------------------------------
bool lib1_gt_StockAIController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_aIPlayer;
    string lv_aiunitfood;
    string lv_aiunitsupport;
    string lv_aiunitcombat;
    string lv_aiunitworker;
    string lv_aiunittransport;
    string lv_aistructuretech;
    string lv_aistructureproduction;
    string lv_aistructuredefenses;
    string lv_aistructurepower;
    string lv_aistructuremain;
    string lv_aistructurerefinery;
    string lv_aiupgrades;
    string lv_aistructuredropoff;
    string lv_techStructure;
    string lv_techCombat;
    string lv_techSupport;
    string lv_techProduction;
    string lv_techUpgrade;
    string lv_UnitTownhall;
    string lv_UnitPeon;
    string lv_UnitRefinery;
    string lv_UnitSupply;
    string lv_UnitTransport;
    string lv_UnitTransport2;
    int lv_SupplyNeeded;
    fixed lv_SupplyFoodAmount;
    int lv_SupplyNeeded2;
    int lv_SupplyNeeded3;
    int lv_SupplyNeeded6;
    int lv_SupplyNeeded5;
    int lv_SupplyNeeded4;
    string lv_availableunits;
    string lv_availableupgrades;
    string lv_availablesupport;
    string lv_availableproduction;
    string lv_availabletech;
    int lv_dangerLevel;
    bool lv_isExpansing;
    timer lv_aIExpandTimer;
    timer lv_aIAttackTimer;
    int lv_towns;

    // Automatic Variable Declarations
    int auto8D80CAFE_player;
    int auto8D80CAFE_state;
    int auto8D80CAFE_var;
    int auto8D80CAFE_statevar;
    int auto59A7F51C_player;
    int auto59A7F51C_state;
    int auto59A7F51C_var;
    int auto59A7F51C_statevar;
    int auto36C0D092_player;
    int auto36C0D092_state;
    int auto36C0D092_var;
    int auto36C0D092_statevar;
    int auto19CAE824_ai;
    int auto19CAE824_ae;
    int autoD6EDA810_ai;
    int autoD6EDA810_ae;

    // Variable Initialization
    lv_aIPlayer = lib1_gv_pickedai;
    lv_aiunitfood = ("^AI" + IntToString(lv_aIPlayer) + "StructureFood");
    lv_aiunitsupport = ("^AI" + IntToString(lv_aIPlayer) + "UnitSupport");
    lv_aiunitcombat = ("^AI" + IntToString(lv_aIPlayer) + "UnitCombat");
    lv_aiunitworker = ("^AI" + IntToString(lv_aIPlayer) + "UnitWorker");
    lv_aiunittransport = ("^AI" + IntToString(lv_aIPlayer) + "UnitTransport");
    lv_aistructuretech = ("^AI" + IntToString(lv_aIPlayer) + "StructureTech");
    lv_aistructureproduction = ("^AI" + IntToString(lv_aIPlayer) + "StructureProduction");
    lv_aistructuredefenses = ("^AI" + IntToString(lv_aIPlayer) + "StructureDefense");
    lv_aistructurepower = ("^AI" + IntToString(lv_aIPlayer) + "StructurePower");
    lv_aistructuremain = ("^AI" + IntToString(lv_aIPlayer) + "StructureMain");
    lv_aistructurerefinery = ("^AI" + IntToString(lv_aIPlayer) + "StructureRefinery");
    lv_aiupgrades = ("^AI" + IntToString(lv_aIPlayer) + "Upgrades");
    lv_aistructuredropoff = ("^AI" + IntToString(lv_aIPlayer) + "StructureDropOff");
    lv_UnitTownhall = (lib1_gf_ListStringGet(lv_aistructuremain, 1));
    lv_UnitPeon = (lib1_gf_ListStringGet(lv_aiunitworker, 1));
    lv_UnitRefinery = (lib1_gf_ListStringGet(lv_aistructurerefinery, 1));
    lv_UnitSupply = (lib1_gf_ListStringGet(lv_aiunitfood, 1));
    lv_UnitTransport = (lib1_gf_ListStringGet(lv_aiunittransport, 1));
    lv_UnitTransport2 = "";
    lv_SupplyFoodAmount = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, lv_UnitSupply, "Food", lv_aIPlayer);
    lv_availableunits = lib1_gf_ListCreate();
    lv_availableupgrades = lib1_gf_ListCreate();
    lv_availablesupport = lib1_gf_ListCreate();
    lv_availableproduction = lib1_gf_ListCreate();
    lv_availabletech = lib1_gf_ListCreate();
    lv_dangerLevel = AISelfDefenseThreatEval(lib1_gv_realSelfThreat, lv_aIPlayer);
    lv_aIExpandTimer = TimerCreate();
    lv_aIAttackTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_aIAttackTimer, 160.0, false, c_timeAI);
    AIScout(lv_aIPlayer);
    while ((UnitGroupCount(UnitGroup(null, lv_aIPlayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        Wait(5.0, c_timeAI);
        lv_towns = 0;
        auto8D80CAFE_player = lv_aIPlayer;
        auto8D80CAFE_state = 2;
        auto8D80CAFE_var = 0;
        for ( ; auto8D80CAFE_var < c_townMax; auto8D80CAFE_var += 1 ) {
            auto8D80CAFE_statevar = AIGetTownState(auto8D80CAFE_player,auto8D80CAFE_var);
            if (auto8D80CAFE_statevar >= auto8D80CAFE_state) {
                lv_towns += 1;
            }
        }
        lv_dangerLevel = AISelfDefenseThreatEval(lib1_gv_realSelfThreat, lv_aIPlayer);
        if ((lv_dangerLevel >= 120)) {
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_6B47182F"), true);
        }
        if ((lv_dangerLevel < 120) && (TimerGetRemaining(lv_aIAttackTimer) <= 0.0)) {
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_D808ED4B"), true);
            lib1_gf_Attack(lv_aIPlayer);
            TimerStart(lv_aIAttackTimer, RandomFixed(90.0, 120.0), false, c_timeAI);
        }
        if ((lv_isExpansing == true)) {
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_480FFC8D"), true);
            lv_isExpansing = false;
            auto59A7F51C_player = lv_aIPlayer;
            auto59A7F51C_state = 1;
            auto59A7F51C_var = 0;
            for ( ; auto59A7F51C_var < c_townMax; auto59A7F51C_var += 1 ) {
                auto59A7F51C_statevar = AIGetTownState(auto59A7F51C_player,auto59A7F51C_var);
                if (auto59A7F51C_statevar >= auto59A7F51C_state) {
                    if ((AIGetTownState(lv_aIPlayer, auto59A7F51C_var) == 1)) {
                        lv_isExpansing = true;
                    }

                }
            }
            if ((lv_isExpansing == true)) {
                continue;
            }
            else {
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_5D65976F"), true);
            }
        }

        lib1_gf_CleanUp(lv_aIPlayer);
        if ((UnitGroupCount(lib1_gf_UnitsInRegionWithSpecifiedTypes(lv_aIPlayer, lv_aistructuredropoff, RegionEntireMap()), c_unitCountAlive) == 0)) {
            AIBuild(lv_aIPlayer, 12, -1, lv_UnitTownhall, 1, lib1_gv_townHall);
            continue;
        }

        AISetStockFarms(lv_aIPlayer, lv_UnitSupply, true);
        TextExpressionSetToken("Param/Expression/lib_1_8331E7F5", "A", IntToText(lv_towns));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_8331E7F5"), true);
        if ((lv_dangerLevel < 120)) {
            lv_SupplyNeeded5 = 0;
            auto36C0D092_player = lv_aIPlayer;
            auto36C0D092_state = 1;
            auto36C0D092_var = 0;
            for ( ; auto36C0D092_var < c_townMax; auto36C0D092_var += 1 ) {
                auto36C0D092_statevar = AIGetTownState(auto36C0D092_player,auto36C0D092_var);
                if (auto36C0D092_statevar >= auto36C0D092_state) {
                    if ((AIGetTownState(lv_aIPlayer, auto36C0D092_var) == 2)) {
                        lv_SupplyNeeded3 = 10;
                    }
                    else {
                        lv_SupplyNeeded3 = ((AIGetMineralNumSpots(lv_aIPlayer, auto36C0D092_var) * 2) + (AIGetBuildingCountInTown(lv_aIPlayer, auto36C0D092_var, lv_UnitRefinery, c_techCountQueuedOrBetter) * 3));
                    }
                    lv_SupplyNeeded4 = (lv_SupplyNeeded3 - AIGetCurPeonCount(lv_aIPlayer, auto36C0D092_var));
                    lv_SupplyNeeded5 += lv_SupplyNeeded4;
                    lv_SupplyNeeded6 += lv_SupplyNeeded3;
                    if ((AIGetRawGasNumSpots(lv_aIPlayer, auto36C0D092_var) > 0) && (lv_SupplyNeeded4 < 4)) {
                        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_D34D75E5"), true);
                        AIBuild(lv_aIPlayer, 6, auto36C0D092_var, lv_UnitRefinery, 1, lib1_gv_collector);
                    }

                }
            }
            TextExpressionSetToken("Param/Expression/lib_1_81C8B571", "A", IntToText(lv_SupplyNeeded5));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_81C8B571"), true);
            AISetStock(lv_aIPlayer, MaxI(lv_SupplyNeeded6, 70), lv_UnitPeon);
            if ((lv_SupplyNeeded5 > 0)) {
                lib1_gf_TrainUnitIfNotInQueue(lv_aIPlayer, lv_UnitPeon, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, lv_towns, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, 0, lv_towns);
            }

            if ((lv_SupplyNeeded5 < 3) && (TimerGetRemaining(lv_aIExpandTimer) <= 0.0)) {
                if ((AIHasRes(1, UnitTypeGetCost(lv_UnitTownhall, c_unitCostMinerals), UnitTypeGetCost(lv_UnitTownhall, c_unitCostVespene)) == false)) {
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_8FD2DA06"), true);
                    continue;
                }
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_D17AC720"), true);
                lv_isExpansing = true;
                AIExpand(lv_aIPlayer, lib1_gf_GetExpansionpoint(lv_aIPlayer), lv_UnitTownhall);
                TimerStart(lv_aIExpandTimer, 30.0, false, c_timeAI);
                continue;
            }

        }
        AISetStockUnitNext(lv_aIPlayer, 1, lv_UnitSupply, true);
        if ((lib1_gf_ListSize(lv_availableproduction) > 0)) {
            auto19CAE824_ai = 1;
            auto19CAE824_ae = lib1_gf_ListSize(lv_availableproduction);
            while (auto19CAE824_ai <= auto19CAE824_ae) {
                lv_UnitTransport2 = lib1_gf_ListStringGet(lv_availableproduction, auto19CAE824_ai);
                auto19CAE824_ai = auto19CAE824_ai+1;
                lv_techProduction = (lv_UnitTransport2);
                if ((UnitTypeTestAttribute(lv_techProduction, c_unitAttributeStructure) == true)) {
                    lib1_gf_BuildIfNotInQueue(lv_aIPlayer, lv_techProduction, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, (lv_towns * 1), null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, 0, lib1_gv_techTg, 1);
                }
                else {
                    lib1_gf_TrainUnitIfNotInQueue(lv_aIPlayer, lv_techProduction, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, (lv_towns * 1), null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, 0, 1);
                }
            }
        }

        if ((lib1_gf_ListSize(lv_availabletech) > 0)) {
            autoD6EDA810_ai = 1;
            autoD6EDA810_ae = lib1_gf_ListSize(lv_availabletech);
            while (autoD6EDA810_ai <= autoD6EDA810_ae) {
                lv_UnitTransport2 = lib1_gf_ListStringGet(lv_availabletech, autoD6EDA810_ai);
                autoD6EDA810_ai = autoD6EDA810_ai+1;
                lv_techStructure = (lv_UnitTransport2);
                if ((UnitTypeTestAttribute(lv_techStructure, c_unitAttributeStructure) == true)) {
                    lib1_gf_BuildIfNotInQueue(lv_aIPlayer, lv_techStructure, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, 1, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, 0, lib1_gv_techTg, 1);
                }
                else {
                    lib1_gf_TrainUnitIfNotInQueue(lv_aIPlayer, lv_techStructure, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, 1, null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, 0, 1);
                }
            }
        }

        if ((lib1_gf_ListSize(lv_availableunits) > 0)) {
            lv_techCombat = (lib1_gf_ListStringGet(lv_availableunits, RandomInt(1, lib1_gf_ListSize(lv_availableunits))));
            lib1_gf_TrainUnitIfNotInQueue(lv_aIPlayer, lv_techCombat, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, (lv_towns * 5), null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, 0, 1);
        }

        if ((lib1_gf_ListSize(lv_availablesupport) > 0)) {
            lv_techSupport = (lib1_gf_ListStringGet(lv_availablesupport, RandomInt(1, lib1_gf_ListSize(lv_availablesupport))));
            lib1_gf_TrainUnitIfNotInQueue(lv_aIPlayer, lv_techSupport, lib1_ge_TgAIIncludeAlias_IncludeFirstAlias, (lv_towns * 1), null, lib1_ge_TgAIIncludeAlias_DontIncludeAlias, 0, 1);
        }

        if ((lib1_gf_ListSize(lv_availableupgrades) > 0)) {
            lv_techUpgrade = (lib1_gf_ListStringGet(lv_availableupgrades, RandomInt(1, lib1_gf_ListSize(lv_availableupgrades))));
            lib1_gf_ResearchIfNotInQueue(lv_aIPlayer, lv_techUpgrade, 1, null, lib1_ge_TgAIIncludeAlias_IncludeLastAlias);
        }

        AIEnableStock(lv_aIPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_StockAIController_Init () {
    lib1_gt_StockAIController = TriggerCreate("lib1_gt_StockAIController_Func");
}

void lib1_InitTriggers () {
    lib1_gt_UT_InfoSave_Init();
    lib1_gt_UT_Info_Init();
    lib1_gt_UT_InfoButton_Init();
    lib1_gt_UT_InfoCreate_Init();
    lib1_gt_UT_UI_Init();
    lib1_gt_UT_UI_CtrlH_Init();
    lib1_gt_UT_ButtonMonitor_Init();
    lib1_gt_UT_ButtonUsage_Init();
    lib1_gt_UT_HotkeyChange_Init();
    lib1_gt_UT_Godmode_Init();
    lib1_gt_UT_Godmode_unit_created_Init();
    lib1_gt_UT_UnitInfo_Init();
    lib1_gt_UT_UnitInfoUpdate_Init();
    lib1_gt_UT_FastConstruction_Init();
    lib1_gt_UT_FastTrain_Init();
    lib1_gt_UT_FastResearch_Init();
    lib1_gt_UT_FastArrm_Init();
    lib1_gt_UT_FastRevive_Init();
    lib1_gt_UT_FastBuild_Init();
    lib1_gt_UT_ToggleEco_Init();
    lib1_gt_UT_EconomyValue_Init();
    lib1_gt_UT_WorkerSaturation_Init();
    lib1_gt_UT_ListEmotes_Init();
    lib1_gt_UT_Emote_ButtonClicked_Init();
    lib1_gt_UT_Debug_Init();
    lib1_gt_AbilityUsed_Init();
    lib1_gt_UnitCreated_Init();
    lib1_gt_UnitDied_Init();
    lib1_gt_UnitRevived_Init();
    lib1_gt_EffectUsed_Init();
    lib1_gt_BehaviorChanged_Init();
    lib1_gt_EffectDealingDamage_Init();
    lib1_gt_UT_Trace_Init();
    lib1_gt_UT_Tracing_Init();
    lib1_gt_UT_DeTracing_Init();
    lib1_gt_UT_CopyPaste_Init();
    lib1_gt_UT_CTRLC_Init();
    lib1_gt_UT_CTRLV_Init();
    lib1_gt_UT_PathCheck_Init();
    lib1_gt_UT_PathCheckTAB_Init();
    lib1_gt_UT_Light_Init();
    lib1_gt_UT_Plus_Init();
    lib1_gt_UT_Minus_Init();
    lib1_gt_UT_MissileMovers_Init();
    lib1_gt_UT_MissileCreated_Init();
    lib1_gt_UT_Height_Init();
    lib1_gt_UT_AttackSpeed_Init();
    lib1_gt_UT_Life_Init();
    lib1_gt_UT_Energy_Init();
    lib1_gt_UT_MovementSpeed_Init();
    lib1_gt_UT_Acceleration_Init();
    lib1_gt_UT_Range_Init();
    lib1_gt_UT_ARange_Init();
    lib1_gt_UT_Armor_Init();
    lib1_gt_UT_TintColor_Init();
    lib1_gt_UT_Scale_Init();
    lib1_gt_UT_TimeScale_Init();
    lib1_gt_UT_ActorMsg_Init();
    lib1_gt_UT_AirGround_Init();
    lib1_gt_UT_Camera_TurnOnOff_Init();
    lib1_gt_UT_Camera_Reset_Init();
    lib1_gt_UT_Camera_Top_Init();
    lib1_gt_UT_Camera_KeyUp_Init();
    lib1_gt_UT_Camera_KeyDown_Init();
    lib1_gt_UT_Camera_PeriodicUpdate_Init();
    lib1_gt_UT_Dummy_Init();
    lib1_gt_UT_DummyTakesDamage_Init();
    lib1_gt_UT_DummyUpdate_Init();
    lib1_gt_UT_DummyDestroyed_Init();
    lib1_gt_UT_DPS_Init();
    lib1_gt_UT_DPS_Stop_Init();
    lib1_gt_UT_DPS_DealsDamage_Init();
    lib1_gt_UT_DPS_Summon_Init();
    lib1_gt_UT_DPS_Dies_Init();
    lib1_gt_UT_DPS_PauseGlobal_Init();
    lib1_gt_UT_Vision_Init();
    lib1_gt_UT_Numberstoggle_Init();
    lib1_gt_UT_NumbersDamage_Init();
    lib1_gt_UT_NumbersHeal_Init();
    lib1_gt_UT_DL_LogDisplay_Init();
    lib1_gt_UT_DL_PeriodicUpdate_Init();
    lib1_gt_UT_DL_DamageLogging_Init();
    lib1_gt_UT_DL_HealLogging_Init();
    lib1_gt_UT_EnableDevCommands_Init();
    lib1_gt_UT_DisableDevCommandsforally_Init();
    lib1_gt_UT_Rad_Init();
    lib1_gt_UT_XP_Init();
    lib1_gt_UT_ListDead_Init();
    lib1_gt_UT_ListHidden_Init();
    lib1_gt_UT_ListMissile_Init();
    lib1_gt_UT_ListAll_Init();
    lib1_gt_UT_Teleport_Init();
    lib1_gt_UT_Restart_Init();
    lib1_gt_UT_GetID_Init();
    lib1_gt_UT_Restore_Init();
    lib1_gt_UT_Pause_Init();
    lib1_gt_UT_Money_Init();
    lib1_gt_UT_Look_Init();
    lib1_gt_UT_sight_Init();
    lib1_gt_UT_KillUnits_Init();
    lib1_gt_UT_Remove_Init();
    lib1_gt_UT_PauseAI_Init();
    lib1_gt_UT_Speed_Init();
    lib1_gt_UT_Supply_Init();
    lib1_gt_UT_Give_Init();
    lib1_gt_UT_SwitchOwner_Init();
    lib1_gt_UT_Cost_Init();
    lib1_gt_UT_clearscreen_Init();
    lib1_gt_UT_ClearEnemy_Init();
    lib1_gt_UT_SpawnUnits_Init();
    lib1_gt_UT_Control_Init();
    lib1_gt_UT_Resource_Init();
    lib1_gt_UpgradeChanged_Init();
    lib1_gt_CM_DebugApplySkin_Init();
    lib1_gt_DebugMode_Init();
    lib1_gt_P4harvest_Init();
    lib1_gt_P4rally_Init();
    lib1_gt_OfflineDebug_Init();
    lib1_gt_UEDAIController_Init();
    lib1_gt_TerranAIController_Init();
    lib1_gt_GenetronAIController_Init();
    lib1_gt_ChildAIController_Init();
    lib1_gt_ChildAIController2_Init();
    lib1_gt_StockAIController_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;

void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }

    lib1_InitLib_completed = true;

    lib1_InitLibraries();
    lib1_InitVariables();
    lib1_InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
    libARMP_InitLib();
    lib1_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
}
